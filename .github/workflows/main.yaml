name: Production Website Workflow
on:
  push:
    branches:
      # - beta
      # - alpha
      # - development
      # - main
      # - staging
      - add-version
jobs:
  tag-version:
    # The type of runner that the job will run on          
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Check out into the repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Get branch name
      if: startsWith(github.ref, 'refs/heads')
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: get_branch

    - name: Get commit id
      run: echo "##[set-output name=version;]$(echo `git ls-remote https://${{ secrets.my_pat }}@github.com/atlanhq/atlan-frontend.git ${{ steps.get_branch.outputs.branch }} | awk '{ print $1}' | cut -c1-7`)"
      id: get_version

    # - name: Get previous tag from atlan-frontend repo
    #   id: get_latest_tag
    #   run: |
    #     repo_branch=${{ steps.get_branch.outputs.branch }}
    #     branch_name="$repo_branch"
    #     echo "charts tag = $branch_name"
    #     echo "##[set-output name=branch_name;]$(echo $branch_name)"
    #     tag=$(git tag)
    #     echo $tag
    #     git tag | grep $branch_name;
    #     tag=$(git tag | grep "\<$branch_name\>" | sort -V | grep 'v[0-9].*' | tail -1)
    #     echo $tag
    #     echo "##[set-output name=tag;]$(git tag | grep "\<$branch_name\>" | sort -V | grep 'v[0-9].*' | tail -1)"
    #     if echo $tag | grep "999"; then
    #         echo "##[set-output name=command;]$(echo 'm')"
    #     else
    #         echo "##[set-output name=command;]$(echo 'p')"
    #     fi
    #   shell: bash

    # - name: Get new tag by doing semver version bump
    #   id: bump_tag
    #   run: |
    #     chmod +x ./scripts/semver-version-upgrade.sh
    #     bumped_tag=$(./scripts/semver-version-upgrade.sh -${{ steps.get_latest_tag.outputs.command }} ${{ steps.get_latest_tag.outputs.tag }})
    #     echo "##[set-output name=new_tag;]$(echo $bumped_tag)"

    - name: Tag version in package.json
      id: tag-version
      run: |
        echo ${{ steps.get_version.outputs.version }}


  # create-release:
  #   name: Production Deployment
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - name: AWS CLI Install
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y awscli
  #     - name: Install
  #       run: npm install
  #     - name: Setup AWS CLI
  #       run: |
  #         mkdir ~/.aws
  #         touch ~/.aws/credentials
  #         echo [default] >> ~/.aws/credentials
  #         echo aws_access_key_id = $AWS_ACCESS_KEY_ID >> ~/.aws/credentials
  #         echo aws_secret_access_key = $AWS_SECRET_ACCESS_KEY >> ~/.aws/credentials
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     - name: Get branch name
  #       run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
  #       id: get_branch
  #     - name: Get previous tag from charts repo
  #       id: get_channel
  #       run: |
  #         repo_branch=${{ steps.get_branch.outputs.branch }}
  #         if [[ "$repo_branch" == "main" ]]; then
  #           channel="prod"
  #         elif [[ "$repo_branch" == "alpha" ]]; then
  #           channel="alpha"
  #         elif [[ "$repo_branch" == "beta" ]]; then
  #           channel="beta"
  #         elif [[ "$repo_branch" == "development" ]]; then
  #           channel="development"
  #         elif [[ "$repo_branch" == "staging" ]]; then
  #           channel="staging"
  #         else 
  #           echo "Build not configured for current branch"
  #           exit 1
  #         fi
  #         echo "##[set-output name=channel;]$(echo $channel)"
  #       shell: bash
  #     - name: Build
  #       run: NODE_OPTIONS=--max_old_space_size=8000 npm run build
  #     - name: COPY DIST TO S3
  #       run: aws s3 cp ./dist s3://$AWS_S3_BUCKET/$CHANNEL_NAME --recursive --region $AWS_REGION
  #       env:
  #         AWS_REGION: "ap-south-1"
  #         AWS_S3_BUCKET: ${{ secrets.AWS_S3_DEPLOYMENT_BUCKET }}
  #         CHANNEL_NAME: ${{ steps.get_channel.outputs.channel }}
  #     # Send a slack notification message on the specified channel with the failure github actions workflow report.
  #     - name: Slack notification
  #       uses: 8398a7/action-slack@v3
  #       with:
  #           status: ${{ job.status }}
  #           author_name: Github-Actions # default: 8398a7@action-slack
  #           fields: repo,commit,workflow,message,author,took # default: repo,commit
  #           text: '- @infra, Job ${{ job.status }} :rocket:'
  #       env:
  #           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
  #       if: failure() # Pick up events even if the job fails or is canceled.
