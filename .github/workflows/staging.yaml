name: Atlan Product Workflow
on:
  push:
    branches:
      - staging
jobs:
  test:
    name: mabl Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Functional test deployment
        id: mabl-test-deployment
        uses: mablhq/github-run-tests-action@v1
        env:
          MABL_API_KEY: ${{ secrets.MABL_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.my_pat }}
        with:
          application-id: ${{ secrets.MABL_APPLICATION_ID }}
          environment-id: ${{ secrets.MABL_ENVIRONMENT_ID }}
          plan-labels: Governance, Assets, Admin Center
  deploy:
    name: Deployment
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Get branch name
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: get_branch

      - name: Get previous tag from charts repo
        id: get_channel
        run: |
          repo_branch=${{ steps.get_branch.outputs.branch }}
          if [[ "$repo_branch" == "main" ]]; then
            channel="main"
          elif [[ "$repo_branch" == "beta" ]]; then
            channel="beta"
          elif [[ "$repo_branch" == "staging" ]]; then
            channel="staging"
          elif [[ "$repo_branch" == "development" ]]; then
            channel="development"
          else 
            echo "Build not configured for current branch"
            exit 1
          fi
          echo "##[set-output name=channel;]$(echo $channel)"
        shell: bash

      - name: Get segment analytics key based on branch name
        id: get_segment_analytics_key
        run: |
          repo_branch=${{ steps.get_branch.outputs.branch }}
          if [[ "$repo_branch" == "main" ]]; then
            analytics_key=${{ secrets.SEGMENT_PROD_KEY }}
          else 
            analytics_key=${{ secrets.SEGMENT_DEV_KEY }}
          fi
          echo "##[set-output name=analytics_key;]$(echo $analytics_key)"
        shell: bash

      - name: Check out branch
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.my_pat }}
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.23.2

      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: pnpm Install
        run: pnpm install

      - name: Build
        run: NODE_OPTIONS=--max_old_space_size=8000 pnpm run build
        env:
          VITE_SEGMENT_ANALYTICS_KEY: ${{ steps.get_segment_analytics_key.outputs.analytics_key }}
          VITE_USERFLOW_KEY: ${{ secrets.VITE_USERFLOW_KEY }}
          VITE_USERFLOW_WHITELISTED_DOMAINS: ${{ secrets.VITE_USERFLOW_WHITELISTED_DOMAINS }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # - name: Empty static s3 bucket
      #   run: aws s3 rm s3://$AWS_S3_BUCKET/$CHANNEL_NAME/frontend --recursive --region $AWS_REGION
      #   env:
      #     AWS_REGION: "us-east-1"
      #     AWS_S3_BUCKET: ${{ secrets.AWS_S3_US_DEPLOYMENT_BUCKET }}
      #     CHANNEL_NAME: ${{ steps.get_channel.outputs.channel }}

      # Send a slack notification message on the specified channel with the failure github actions workflow report.
      - name: Copy static site to S3 bucket
        run: aws s3 cp ./dist s3://$AWS_S3_BUCKET/$CHANNEL_NAME/frontend --recursive --region $AWS_REGION
        env:
          AWS_REGION: "us-east-1"
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_US_DEPLOYMENT_BUCKET }}
          CHANNEL_NAME: ${{ steps.get_channel.outputs.channel }}

      - name: Invalidate cache
        run: |
          repo_branch=${{ steps.get_branch.outputs.branch }}
          if [[ "$repo_branch" == "beta" ]]; then
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_BETA --paths "/*"
          elif [[ "$repo_branch" == "staging" ]]; then
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_STAGING --paths "/*"
          elif [[ "$repo_branch" == "main" ]]; then
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_MAIN --paths "/*"
          elif [[ "$repo_branch" == "development" ]]; then
            aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DEVELOPMENT --paths "/*"
          else
            echo "Build not configured for current branch"
            exit 1
          fi
        env:
          CLOUDFRONT_BETA: ${{ secrets.CLOUDFRONT_DIST_BETA }}
          CLOUDFRONT_STAGING: ${{ secrets.CLOUDFRONT_DIST_STAGING }}
          CLOUDFRONT_MAIN: ${{ secrets.CLOUDFRONT_DIST_MAIN }}
          CLOUDFRONT_DEVELOPMENT: ${{ secrets.CLOUDFRONT_DIST_DEVELOPMENT }}

      # Send a slack notification message on the specified channel with the failure github actions workflow report.
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Github-Actions # default: 8398a7@action-slack
          fields: repo,commit,workflow,message,author,took # default: repo,commit
          text: "- @infra, Job ${{ job.status }} :rocket:"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure() # Pick up events even if the job fails or is canceled.