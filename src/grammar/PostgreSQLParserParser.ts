// Generated from ./src/grammar/PostgreSQLParser.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { PostgreSQLParserListener } from "./PostgreSQLParserListener";
import { PostgreSQLParserVisitor } from "./PostgreSQLParserVisitor";


export class PostgreSQLParserParser extends Parser {
	public static readonly WHITESPACE = 1;
	public static readonly BLOCK_COMMENT = 2;
	public static readonly LINE_COMMENT = 3;
	public static readonly A_ = 4;
	public static readonly ABORT = 5;
	public static readonly ABS = 6;
	public static readonly ABSOLUTE = 7;
	public static readonly ACCESS = 8;
	public static readonly ACTION = 9;
	public static readonly ADA = 10;
	public static readonly ADD = 11;
	public static readonly ADMIN = 12;
	public static readonly AFTER = 13;
	public static readonly AGGREGATE = 14;
	public static readonly ALIAS = 15;
	public static readonly ALL = 16;
	public static readonly ALLOCATE = 17;
	public static readonly ALSO = 18;
	public static readonly ALTER = 19;
	public static readonly ALWAYS = 20;
	public static readonly ANALYSE = 21;
	public static readonly ANALYZE = 22;
	public static readonly AND = 23;
	public static readonly ANY = 24;
	public static readonly ARE = 25;
	public static readonly ARRAY = 26;
	public static readonly AS = 27;
	public static readonly ASC = 28;
	public static readonly ASENSITIVE = 29;
	public static readonly ASSERTION = 30;
	public static readonly ASSIGNMENT = 31;
	public static readonly ASYMMETRIC = 32;
	public static readonly AT = 33;
	public static readonly ATOMIC = 34;
	public static readonly ATTRIBUTE = 35;
	public static readonly ATTRIBUTES = 36;
	public static readonly AUTHORIZATION = 37;
	public static readonly AVG = 38;
	public static readonly BACKWARD = 39;
	public static readonly BEFORE = 40;
	public static readonly BEGIN = 41;
	public static readonly BERNOULLI = 42;
	public static readonly BETWEEN = 43;
	public static readonly BIGINT = 44;
	public static readonly BINARY = 45;
	public static readonly BIT = 46;
	public static readonly BIT_LENGTH = 47;
	public static readonly BITVAR = 48;
	public static readonly BLOB = 49;
	public static readonly BOOLEAN = 50;
	public static readonly BOTH = 51;
	public static readonly BREADTH = 52;
	public static readonly BUFFERS = 53;
	public static readonly BY = 54;
	public static readonly C_ = 55;
	public static readonly CACHE = 56;
	public static readonly CALL = 57;
	public static readonly CALLED = 58;
	public static readonly CARDINALITY = 59;
	public static readonly CASCADE = 60;
	public static readonly CASCADED = 61;
	public static readonly CASE = 62;
	public static readonly CAST = 63;
	public static readonly CATALOG = 64;
	public static readonly CATALOG_NAME = 65;
	public static readonly CEIL = 66;
	public static readonly CEILING = 67;
	public static readonly CHAIN = 68;
	public static readonly CHAR = 69;
	public static readonly CHAR_LENGTH = 70;
	public static readonly CHARACTER = 71;
	public static readonly CHARACTER_LENGTH = 72;
	public static readonly CHARACTER_SET_CATALOG = 73;
	public static readonly CHARACTER_SET_NAME = 74;
	public static readonly CHARACTER_SET_SCHEMA = 75;
	public static readonly CHARACTERISTICS = 76;
	public static readonly CHARACTERS = 77;
	public static readonly CHECK = 78;
	public static readonly CHECKED = 79;
	public static readonly CHECKPOINT = 80;
	public static readonly CLASS = 81;
	public static readonly CLASS_ORIGIN = 82;
	public static readonly CLOB = 83;
	public static readonly CLOSE = 84;
	public static readonly CLUSTER = 85;
	public static readonly COALESCE = 86;
	public static readonly COBOL = 87;
	public static readonly COLLATE = 88;
	public static readonly COLLATION = 89;
	public static readonly COLLATION_CATALOG = 90;
	public static readonly COLLATION_NAME = 91;
	public static readonly COLLATION_SCHEMA = 92;
	public static readonly COLLECT = 93;
	public static readonly COLUMN = 94;
	public static readonly COLUMN_NAME = 95;
	public static readonly COMMAND_FUNCTION = 96;
	public static readonly COMMAND_FUNCTION_CODE = 97;
	public static readonly COMMENT = 98;
	public static readonly COMMIT = 99;
	public static readonly COMMITTED = 100;
	public static readonly COMPLETION = 101;
	public static readonly CONDITION = 102;
	public static readonly CONDITION_NUMBER = 103;
	public static readonly CONFIGURATION = 104;
	public static readonly CONFLICT = 105;
	public static readonly CONNECT = 106;
	public static readonly CONNECTION = 107;
	public static readonly CONNECTION_NAME = 108;
	public static readonly CONSTRAINT = 109;
	public static readonly CONSTRAINT_CATALOG = 110;
	public static readonly CONSTRAINT_NAME = 111;
	public static readonly CONSTRAINT_SCHEMA = 112;
	public static readonly CONSTRAINTS = 113;
	public static readonly CONSTRUCTOR = 114;
	public static readonly CONTAINS = 115;
	public static readonly CONTINUE = 116;
	public static readonly CONVERSION = 117;
	public static readonly CONVERT = 118;
	public static readonly COPY = 119;
	public static readonly CORR = 120;
	public static readonly CORRESPONDING = 121;
	public static readonly COSTS = 122;
	public static readonly COUNT = 123;
	public static readonly COVAR_POP = 124;
	public static readonly COVAR_SAMP = 125;
	public static readonly CREATE = 126;
	public static readonly CREATEDB = 127;
	public static readonly CREATEUSER = 128;
	public static readonly CROSS = 129;
	public static readonly CSV = 130;
	public static readonly CUBE = 131;
	public static readonly CUME_DIST = 132;
	public static readonly CURRENT = 133;
	public static readonly CURRENT_DATE = 134;
	public static readonly CURRENT_DEFAULT_TRANSFORM_GROUP = 135;
	public static readonly CURRENT_PATH = 136;
	public static readonly CURRENT_ROLE = 137;
	public static readonly CURRENT_TIME = 138;
	public static readonly CURRENT_TIMESTAMP = 139;
	public static readonly CURRENT_TRANSFORM_GROUP_FOR_TYPE = 140;
	public static readonly CURRENT_USER = 141;
	public static readonly CURSOR = 142;
	public static readonly CURSOR_NAME = 143;
	public static readonly CYCLE = 144;
	public static readonly DATA = 145;
	public static readonly DATABASE = 146;
	public static readonly DATE = 147;
	public static readonly DATETIME_INTERVAL_CODE = 148;
	public static readonly DATETIME_INTERVAL_PRECISION = 149;
	public static readonly DAY = 150;
	public static readonly DEALLOCATE = 151;
	public static readonly DEC = 152;
	public static readonly DECIMAL = 153;
	public static readonly DECLARE = 154;
	public static readonly DEFAULT = 155;
	public static readonly DEFAULTS = 156;
	public static readonly DEFERABLE = 157;
	public static readonly DEFERRABLE = 158;
	public static readonly DEFERRED = 159;
	public static readonly DEFINED = 160;
	public static readonly DEFINER = 161;
	public static readonly DEGREE = 162;
	public static readonly DELETE = 163;
	public static readonly DELIMITER = 164;
	public static readonly DELIMITERS = 165;
	public static readonly DENSE_RANK = 166;
	public static readonly DEPENDS = 167;
	public static readonly DEPTH = 168;
	public static readonly DEREF = 169;
	public static readonly DERIVED = 170;
	public static readonly DESC = 171;
	public static readonly DESCRIBE = 172;
	public static readonly DESCRIPTOR = 173;
	public static readonly DESTROY = 174;
	public static readonly DESTRUCTOR = 175;
	public static readonly DETERMINISTIC = 176;
	public static readonly DIAGNOSTICS = 177;
	public static readonly DICTIONARY = 178;
	public static readonly DISABLE = 179;
	public static readonly DISABLE_PAGE_SKIPPING = 180;
	public static readonly DISCARD = 181;
	public static readonly DISCONNECT = 182;
	public static readonly DISPATCH = 183;
	public static readonly DISTINCT = 184;
	public static readonly DO = 185;
	public static readonly DOMAIN = 186;
	public static readonly DOUBLE = 187;
	public static readonly DROP = 188;
	public static readonly DYNAMIC = 189;
	public static readonly DYNAMIC_FUNCTION = 190;
	public static readonly DYNAMIC_FUNCTION_CODE = 191;
	public static readonly EACH = 192;
	public static readonly ELEMENT = 193;
	public static readonly ELSE = 194;
	public static readonly ENABLE = 195;
	public static readonly ENCODING = 196;
	public static readonly ENCRYPTED = 197;
	public static readonly END = 198;
	public static readonly END_EXEC = 199;
	public static readonly EQUALS = 200;
	public static readonly ESCAPE = 201;
	public static readonly EVERY = 202;
	public static readonly EXCEPT = 203;
	public static readonly EXCEPTION = 204;
	public static readonly EXCLUDE = 205;
	public static readonly EXCLUDING = 206;
	public static readonly EXCLUSIVE = 207;
	public static readonly EXEC = 208;
	public static readonly EXECUTE = 209;
	public static readonly EXISTING = 210;
	public static readonly EXISTS = 211;
	public static readonly EXP = 212;
	public static readonly EXPLAIN = 213;
	public static readonly EXTENDED = 214;
	public static readonly EXTENSION = 215;
	public static readonly EXTERNAL = 216;
	public static readonly EXTRACT = 217;
	public static readonly FALSE = 218;
	public static readonly FETCH = 219;
	public static readonly FIELDS = 220;
	public static readonly FILTER = 221;
	public static readonly FINAL = 222;
	public static readonly FIRST = 223;
	public static readonly FLOAT = 224;
	public static readonly FLOOR = 225;
	public static readonly FOLLOWING = 226;
	public static readonly FOR = 227;
	public static readonly FORCE = 228;
	public static readonly FOREIGN = 229;
	public static readonly FORMAT = 230;
	public static readonly FORTRAN = 231;
	public static readonly FORWARD = 232;
	public static readonly FOUND = 233;
	public static readonly FREE = 234;
	public static readonly FREEZE = 235;
	public static readonly FROM = 236;
	public static readonly FULL = 237;
	public static readonly FUNCTION = 238;
	public static readonly FUSION = 239;
	public static readonly G_ = 240;
	public static readonly GENERAL = 241;
	public static readonly GENERATED = 242;
	public static readonly GET = 243;
	public static readonly GLOBAL = 244;
	public static readonly GO = 245;
	public static readonly GOTO = 246;
	public static readonly GRANT = 247;
	public static readonly GRANTED = 248;
	public static readonly GREATEST = 249;
	public static readonly GROUP = 250;
	public static readonly GROUPING = 251;
	public static readonly HANDLER = 252;
	public static readonly HAVING = 253;
	public static readonly HIERARCHY = 254;
	public static readonly HOLD = 255;
	public static readonly HOST = 256;
	public static readonly HOUR = 257;
	public static readonly IDENTITY = 258;
	public static readonly IGNORE = 259;
	public static readonly ILIKE = 260;
	public static readonly IMMEDIATE = 261;
	public static readonly IMMUTABLE = 262;
	public static readonly IMPLEMENTATION = 263;
	public static readonly IMPLICIT = 264;
	public static readonly IN = 265;
	public static readonly INCLUDING = 266;
	public static readonly INCREMENT = 267;
	public static readonly INDEX = 268;
	public static readonly INDICATOR = 269;
	public static readonly INFIX = 270;
	public static readonly INHERITS = 271;
	public static readonly INITIALIZE = 272;
	public static readonly INITIALLY = 273;
	public static readonly INNER = 274;
	public static readonly INOUT = 275;
	public static readonly INPUT = 276;
	public static readonly INSENSITIVE = 277;
	public static readonly INSERT = 278;
	public static readonly INSTANCE = 279;
	public static readonly INSTANTIABLE = 280;
	public static readonly INSTEAD = 281;
	public static readonly INT = 282;
	public static readonly INTEGER = 283;
	public static readonly INTERSECT = 284;
	public static readonly INTERSECTION = 285;
	public static readonly INTERVAL = 286;
	public static readonly INTO = 287;
	public static readonly INVOKER = 288;
	public static readonly IS = 289;
	public static readonly ISOLATION = 290;
	public static readonly ITERATE = 291;
	public static readonly JOIN = 292;
	public static readonly K_ = 293;
	public static readonly KEY = 294;
	public static readonly KEY_MEMBER = 295;
	public static readonly KEY_TYPE = 296;
	public static readonly LABEL = 297;
	public static readonly LANCOMPILER = 298;
	public static readonly LANGUAGE = 299;
	public static readonly LARGE = 300;
	public static readonly LAST = 301;
	public static readonly LATERAL = 302;
	public static readonly LEADING = 303;
	public static readonly LEAST = 304;
	public static readonly LEFT = 305;
	public static readonly LENGTH = 306;
	public static readonly LESS = 307;
	public static readonly LEVEL = 308;
	public static readonly LIKE = 309;
	public static readonly LIMIT = 310;
	public static readonly LISTEN = 311;
	public static readonly LN = 312;
	public static readonly LOAD = 313;
	public static readonly LOCAL = 314;
	public static readonly LOCALTIME = 315;
	public static readonly LOCALTIMESTAMP = 316;
	public static readonly LOCATION = 317;
	public static readonly LOCATOR = 318;
	public static readonly LOCK = 319;
	public static readonly LOCKED = 320;
	public static readonly LOWER = 321;
	public static readonly M_ = 322;
	public static readonly MAIN = 323;
	public static readonly MAP = 324;
	public static readonly MAPPING = 325;
	public static readonly MATCH = 326;
	public static readonly MATCH_SIMPLE = 327;
	public static readonly MATCHED = 328;
	public static readonly MAX = 329;
	public static readonly MAXVALUE = 330;
	public static readonly MEMBER = 331;
	public static readonly MERGE = 332;
	public static readonly MESSAGE_LENGTH = 333;
	public static readonly MESSAGE_OCTET_LENGTH = 334;
	public static readonly MESSAGE_TEXT = 335;
	public static readonly METHOD = 336;
	public static readonly MIN = 337;
	public static readonly MINUTE = 338;
	public static readonly MINVALUE = 339;
	public static readonly MOD = 340;
	public static readonly MODE = 341;
	public static readonly MODIFIES = 342;
	public static readonly MODIFY = 343;
	public static readonly MODULE = 344;
	public static readonly MONTH = 345;
	public static readonly MORE_ = 346;
	public static readonly MOVE = 347;
	public static readonly MULTISET = 348;
	public static readonly MUMPS = 349;
	public static readonly NAME = 350;
	public static readonly NAMES = 351;
	public static readonly NATIONAL = 352;
	public static readonly NATURAL = 353;
	public static readonly NCHAR = 354;
	public static readonly NCLOB = 355;
	public static readonly NESTING = 356;
	public static readonly NEW = 357;
	public static readonly NEXT = 358;
	public static readonly NO = 359;
	public static readonly NOCREATEDB = 360;
	public static readonly NOCREATEUSER = 361;
	public static readonly NONE = 362;
	public static readonly NORMALIZE = 363;
	public static readonly NORMALIZED = 364;
	public static readonly NOT = 365;
	public static readonly NOTHING = 366;
	public static readonly NOTIFY = 367;
	public static readonly NOTNULL = 368;
	public static readonly NOWAIT = 369;
	public static readonly NULL = 370;
	public static readonly NULLABLE = 371;
	public static readonly NULLIF = 372;
	public static readonly NULLS = 373;
	public static readonly NUMBER = 374;
	public static readonly NUMERIC = 375;
	public static readonly OBJECT = 376;
	public static readonly OCTET_LENGTH = 377;
	public static readonly OCTETS = 378;
	public static readonly OF = 379;
	public static readonly OFF = 380;
	public static readonly OFFSET = 381;
	public static readonly OIDS = 382;
	public static readonly OLD = 383;
	public static readonly ON = 384;
	public static readonly ONLY = 385;
	public static readonly OPEN = 386;
	public static readonly OPERATION = 387;
	public static readonly OPERATOR = 388;
	public static readonly OPTION = 389;
	public static readonly OPTIONS = 390;
	public static readonly OR = 391;
	public static readonly ORDER = 392;
	public static readonly ORDERING = 393;
	public static readonly ORDINALITY = 394;
	public static readonly OTHERS = 395;
	public static readonly OUT = 396;
	public static readonly OUTER = 397;
	public static readonly OUTPUT = 398;
	public static readonly OVER = 399;
	public static readonly OVERLAPS = 400;
	public static readonly OVERLAY = 401;
	public static readonly OVERRIDING = 402;
	public static readonly OWNER = 403;
	public static readonly PAD = 404;
	public static readonly PARAMETER = 405;
	public static readonly PARAMETER_MODE = 406;
	public static readonly PARAMETER_NAME = 407;
	public static readonly PARAMETER_ORDINAL_POSITION = 408;
	public static readonly PARAMETER_SPECIFIC_CATALOG = 409;
	public static readonly PARAMETER_SPECIFIC_NAME = 410;
	public static readonly PARAMETER_SPECIFIC_SCHEMA = 411;
	public static readonly PARAMETERS = 412;
	public static readonly PARSER = 413;
	public static readonly PARTIAL = 414;
	public static readonly PARTITION = 415;
	public static readonly PASCAL = 416;
	public static readonly PASSWORD = 417;
	public static readonly PATH = 418;
	public static readonly PERCENT_RANK = 419;
	public static readonly PERCENTILE_CONT = 420;
	public static readonly PERCENTILE_DISC = 421;
	public static readonly PLACING = 422;
	public static readonly PLAIN = 423;
	public static readonly PLANS = 424;
	public static readonly PLI = 425;
	public static readonly POSITION = 426;
	public static readonly POSTFIX = 427;
	public static readonly POWER = 428;
	public static readonly PRECEDING = 429;
	public static readonly PRECISION = 430;
	public static readonly PREFIX = 431;
	public static readonly PREORDER = 432;
	public static readonly PREPARE = 433;
	public static readonly PREPARED = 434;
	public static readonly PRESERVE = 435;
	public static readonly PRIMARY = 436;
	public static readonly PRIOR = 437;
	public static readonly PRIVILEGES = 438;
	public static readonly PROCEDURAL = 439;
	public static readonly PROCEDURE = 440;
	public static readonly PUBLIC = 441;
	public static readonly PUBLICATION = 442;
	public static readonly QUOTE = 443;
	public static readonly RANGE = 444;
	public static readonly RANK = 445;
	public static readonly READ = 446;
	public static readonly READS = 447;
	public static readonly REAL = 448;
	public static readonly REASSIGN = 449;
	public static readonly RECHECK = 450;
	public static readonly RECURSIVE = 451;
	public static readonly REF = 452;
	public static readonly REFERENCES = 453;
	public static readonly REFERENCING = 454;
	public static readonly REFRESH = 455;
	public static readonly REGR_AVGX = 456;
	public static readonly REGR_AVGY = 457;
	public static readonly REGR_COUNT = 458;
	public static readonly REGR_INTERCEPT = 459;
	public static readonly REGR_R2 = 460;
	public static readonly REGR_SLOPE = 461;
	public static readonly REGR_SXX = 462;
	public static readonly REGR_SXY = 463;
	public static readonly REGR_SYY = 464;
	public static readonly REINDEX = 465;
	public static readonly RELATIVE = 466;
	public static readonly RELEASE = 467;
	public static readonly RENAME = 468;
	public static readonly REPEATABLE = 469;
	public static readonly REPLACE = 470;
	public static readonly REPLICA = 471;
	public static readonly RESET = 472;
	public static readonly RESTART = 473;
	public static readonly RESTRICT = 474;
	public static readonly RESULT = 475;
	public static readonly RETURN = 476;
	public static readonly RETURNED_CARDINALITY = 477;
	public static readonly RETURNED_LENGTH = 478;
	public static readonly RETURNED_OCTET_LENGTH = 479;
	public static readonly RETURNED_SQLSTATE = 480;
	public static readonly RETURNING = 481;
	public static readonly RETURNS = 482;
	public static readonly REVOKE = 483;
	public static readonly RIGHT = 484;
	public static readonly ROLE = 485;
	public static readonly ROLLBACK = 486;
	public static readonly ROLLUP = 487;
	public static readonly ROUTINE = 488;
	public static readonly ROUTINE_CATALOG = 489;
	public static readonly ROUTINE_NAME = 490;
	public static readonly ROUTINE_SCHEMA = 491;
	public static readonly ROW = 492;
	public static readonly ROW_COUNT = 493;
	public static readonly ROW_NUMBER = 494;
	public static readonly ROWS = 495;
	public static readonly RULE = 496;
	public static readonly SAVEPOINT = 497;
	public static readonly SCALE = 498;
	public static readonly SCHEMA = 499;
	public static readonly SCHEMA_NAME = 500;
	public static readonly SCOPE = 501;
	public static readonly SCOPE_CATALOG = 502;
	public static readonly SCOPE_NAME = 503;
	public static readonly SCOPE_SCHEMA = 504;
	public static readonly SCROLL = 505;
	public static readonly SEARCH = 506;
	public static readonly SECOND = 507;
	public static readonly SECTION = 508;
	public static readonly SECURITY = 509;
	public static readonly SELECT = 510;
	public static readonly SELF = 511;
	public static readonly SENSITIVE = 512;
	public static readonly SEQUENCE = 513;
	public static readonly SEQUENCES = 514;
	public static readonly SERIALIZABLE = 515;
	public static readonly SERVER_NAME = 516;
	public static readonly SESSION = 517;
	public static readonly SESSION_USER = 518;
	public static readonly SET = 519;
	public static readonly SETOF = 520;
	public static readonly SETS = 521;
	public static readonly SHARE = 522;
	public static readonly SHOW = 523;
	public static readonly SIMILAR = 524;
	public static readonly SIMPLE = 525;
	public static readonly SIZE = 526;
	public static readonly SKIP_ = 527;
	public static readonly SMALLINT = 528;
	public static readonly SNAPSHOT = 529;
	public static readonly SOME = 530;
	public static readonly SOURCE = 531;
	public static readonly SPACE = 532;
	public static readonly SPECIFIC = 533;
	public static readonly SPECIFIC_NAME = 534;
	public static readonly SPECIFICTYPE = 535;
	public static readonly SQL = 536;
	public static readonly SQLCODE = 537;
	public static readonly SQLERROR = 538;
	public static readonly SQLEXCEPTION = 539;
	public static readonly SQLSTATE = 540;
	public static readonly SQLWARNING = 541;
	public static readonly SQRT = 542;
	public static readonly STABLE = 543;
	public static readonly START = 544;
	public static readonly STATE = 545;
	public static readonly STATEMENT = 546;
	public static readonly STATIC = 547;
	public static readonly STATISTICS = 548;
	public static readonly STDDEV_POP = 549;
	public static readonly STDDEV_SAMP = 550;
	public static readonly STDIN = 551;
	public static readonly STDOUT = 552;
	public static readonly STORAGE = 553;
	public static readonly STRICT = 554;
	public static readonly STRUCTURE = 555;
	public static readonly STYLE = 556;
	public static readonly SUBCLASS_ORIGIN = 557;
	public static readonly SUBLIST = 558;
	public static readonly SUBMULTISET = 559;
	public static readonly SUBSCRIPTION = 560;
	public static readonly SUBSTRING = 561;
	public static readonly SUM = 562;
	public static readonly SYMMETRIC = 563;
	public static readonly SYSID = 564;
	public static readonly SYSTEM = 565;
	public static readonly SYSTEM_USER = 566;
	public static readonly TABLE = 567;
	public static readonly TABLE_NAME = 568;
	public static readonly TABLESAMPLE = 569;
	public static readonly TABLESPACE = 570;
	public static readonly TEMP = 571;
	public static readonly TEMPLATE = 572;
	public static readonly TEMPORARY = 573;
	public static readonly TERMINATE = 574;
	public static readonly THAN = 575;
	public static readonly THEN = 576;
	public static readonly TIES = 577;
	public static readonly TIME = 578;
	public static readonly TIMESTAMP = 579;
	public static readonly TIMEZONE_HOUR = 580;
	public static readonly TIMEZONE_MINUTE = 581;
	public static readonly TIMING = 582;
	public static readonly TO = 583;
	public static readonly TOAST = 584;
	public static readonly TOP_LEVEL_COUNT = 585;
	public static readonly TRAILING = 586;
	public static readonly TRANSACTION = 587;
	public static readonly TRANSACTION_ACTIVE = 588;
	public static readonly TRANSACTIONS_COMMITTED = 589;
	public static readonly TRANSACTIONS_ROLLED_BACK = 590;
	public static readonly TRANSFORM = 591;
	public static readonly TRANSFORMS = 592;
	public static readonly TRANSLATE = 593;
	public static readonly TRANSLATION = 594;
	public static readonly TREAT = 595;
	public static readonly TRIGGER = 596;
	public static readonly TRIGGER_CATALOG = 597;
	public static readonly TRIGGER_NAME = 598;
	public static readonly TRIGGER_SCHEMA = 599;
	public static readonly TRIM = 600;
	public static readonly TRUE = 601;
	public static readonly TRUNCATE = 602;
	public static readonly TRUSTED = 603;
	public static readonly TYPE = 604;
	public static readonly UESCAPE = 605;
	public static readonly UNBOUNDED = 606;
	public static readonly UNCOMMITTED = 607;
	public static readonly UNDER = 608;
	public static readonly UNENCRYPTED = 609;
	public static readonly UNION = 610;
	public static readonly UNIQUE = 611;
	public static readonly UNKNOWN = 612;
	public static readonly UNLISTEN = 613;
	public static readonly UNNAMED = 614;
	public static readonly UNNEST = 615;
	public static readonly UNTIL = 616;
	public static readonly UPDATE = 617;
	public static readonly UPPER = 618;
	public static readonly USAGE = 619;
	public static readonly USER = 620;
	public static readonly USER_DEFINED_TYPE_CATALOG = 621;
	public static readonly USER_DEFINED_TYPE_CODE = 622;
	public static readonly USER_DEFINED_TYPE_NAME = 623;
	public static readonly USER_DEFINED_TYPE_SCHEMA = 624;
	public static readonly USING = 625;
	public static readonly VACUUM = 626;
	public static readonly VALID = 627;
	public static readonly VALIDATE = 628;
	public static readonly VALIDATOR = 629;
	public static readonly VALUE = 630;
	public static readonly VALUES = 631;
	public static readonly VAR_POP = 632;
	public static readonly VAR_SAMP = 633;
	public static readonly VARCHAR = 634;
	public static readonly VARIABLE = 635;
	public static readonly VARIADIC = 636;
	public static readonly VARYING = 637;
	public static readonly VERBOSE = 638;
	public static readonly VIEW = 639;
	public static readonly VOLATILE = 640;
	public static readonly WHEN = 641;
	public static readonly WHENEVER = 642;
	public static readonly WHERE = 643;
	public static readonly WIDTH_BUCKET = 644;
	public static readonly WINDOW = 645;
	public static readonly WITH = 646;
	public static readonly WITHIN = 647;
	public static readonly WITHOUT = 648;
	public static readonly WORK = 649;
	public static readonly WRITE = 650;
	public static readonly YAML = 651;
	public static readonly YEAR = 652;
	public static readonly YES = 653;
	public static readonly ZONE = 654;
	public static readonly SUPERUSER = 655;
	public static readonly NOSUPERUSER = 656;
	public static readonly CREATEROLE = 657;
	public static readonly NOCREATEROLE = 658;
	public static readonly INHERIT = 659;
	public static readonly NOINHERIT = 660;
	public static readonly LOGIN = 661;
	public static readonly NOLOGIN = 662;
	public static readonly REPLICATION = 663;
	public static readonly NOREPLICATION = 664;
	public static readonly BYPASSRLS = 665;
	public static readonly NOBYPASSRLS = 666;
	public static readonly SFUNC = 667;
	public static readonly STYPE = 668;
	public static readonly SSPACE = 669;
	public static readonly FINALFUNC = 670;
	public static readonly FINALFUNC_EXTRA = 671;
	public static readonly COMBINEFUNC = 672;
	public static readonly SERIALFUNC = 673;
	public static readonly DESERIALFUNC = 674;
	public static readonly INITCOND = 675;
	public static readonly MSFUNC = 676;
	public static readonly MINVFUNC = 677;
	public static readonly MSTYPE = 678;
	public static readonly MSSPACE = 679;
	public static readonly MFINALFUNC = 680;
	public static readonly MFINALFUNC_EXTRA = 681;
	public static readonly MINITCOND = 682;
	public static readonly SORTOP = 683;
	public static readonly PARALLEL = 684;
	public static readonly HYPOTHETICAL = 685;
	public static readonly SAFE = 686;
	public static readonly RESTRICTED = 687;
	public static readonly UNSAFE = 688;
	public static readonly BASETYPE = 689;
	public static readonly IF = 690;
	public static readonly LOCALE = 691;
	public static readonly LC_COLLATE = 692;
	public static readonly LC_CTYPE = 693;
	public static readonly PROVIDER = 694;
	public static readonly VERSION = 695;
	public static readonly ALLOW_CONNECTIONS = 696;
	public static readonly IS_TEMPLATE = 697;
	public static readonly EVENT = 698;
	public static readonly WRAPPER = 699;
	public static readonly SERVER = 700;
	public static readonly BTREE = 701;
	public static readonly HASH_ = 702;
	public static readonly GIST = 703;
	public static readonly SPGIST = 704;
	public static readonly GIN = 705;
	public static readonly BRIN = 706;
	public static readonly CONCURRENTLY = 707;
	public static readonly INLINE = 708;
	public static readonly MATERIALIZED = 709;
	public static readonly LEFTARG = 710;
	public static readonly RIGHTARG = 711;
	public static readonly COMMUTATOR = 712;
	public static readonly NEGATOR = 713;
	public static readonly HASHES = 714;
	public static readonly MERGES = 715;
	public static readonly FAMILY = 716;
	public static readonly POLICY = 717;
	public static readonly OWNED = 718;
	public static readonly ABSTIME = 719;
	public static readonly BIGSERIAL = 720;
	public static readonly BIT_VARYING = 721;
	public static readonly BOOL = 722;
	public static readonly BOX = 723;
	public static readonly BYTEA = 724;
	public static readonly CHARACTER_VARYING = 725;
	public static readonly CIDR = 726;
	public static readonly CIRCLE = 727;
	public static readonly FLOAT4 = 728;
	public static readonly FLOAT8 = 729;
	public static readonly INET = 730;
	public static readonly INT2 = 731;
	public static readonly INT4 = 732;
	public static readonly INT8 = 733;
	public static readonly JSON = 734;
	public static readonly JSONB = 735;
	public static readonly LINE = 736;
	public static readonly LSEG = 737;
	public static readonly MACADDR = 738;
	public static readonly MACADDR8 = 739;
	public static readonly MONEY = 740;
	public static readonly PG_LSN = 741;
	public static readonly POINT = 742;
	public static readonly POLYGON = 743;
	public static readonly RELTIME = 744;
	public static readonly SERIAL = 745;
	public static readonly SERIAL2 = 746;
	public static readonly SERIAL4 = 747;
	public static readonly SERIAL8 = 748;
	public static readonly SMALLSERIAL = 749;
	public static readonly STSTEM = 750;
	public static readonly TEXT = 751;
	public static readonly TIMESTAMPTZ = 752;
	public static readonly TIMETZ = 753;
	public static readonly TSQUERY = 754;
	public static readonly TSVECTOR = 755;
	public static readonly TXID_SNAPSHOT = 756;
	public static readonly UUID = 757;
	public static readonly VARBIT = 758;
	public static readonly XML = 759;
	public static readonly COMMA = 760;
	public static readonly COLON = 761;
	public static readonly COLON_COLON = 762;
	public static readonly DOLLAR = 763;
	public static readonly DOLLAR_DOLLAR = 764;
	public static readonly STAR = 765;
	public static readonly OPEN_PAREN = 766;
	public static readonly CLOSE_PAREN = 767;
	public static readonly OPEN_BRACKET = 768;
	public static readonly CLOSE_BRACKET = 769;
	public static readonly BIT_STRING = 770;
	public static readonly REGEX_STRING = 771;
	public static readonly NUMERIC_LITERAL = 772;
	public static readonly INTEGER_LITERAL = 773;
	public static readonly HEX_INTEGER_LITERAL = 774;
	public static readonly DOT = 775;
	public static readonly SINGLEQ_STRING_LITERAL = 776;
	public static readonly DOUBLEQ_STRING_LITERAL = 777;
	public static readonly IDENTIFIER = 778;
	public static readonly DOLLAR_DEC = 779;
	public static readonly IDENTIFIER_UNICODE = 780;
	public static readonly AMP = 781;
	public static readonly AMP_AMP = 782;
	public static readonly AMP_LT = 783;
	public static readonly AT_AT = 784;
	public static readonly AT_GT = 785;
	public static readonly AT_SIGN = 786;
	public static readonly BANG = 787;
	public static readonly BANG_BANG = 788;
	public static readonly BANG_EQUAL = 789;
	public static readonly CARET = 790;
	public static readonly EQUAL = 791;
	public static readonly EQUAL_GT = 792;
	public static readonly GT = 793;
	public static readonly GTE = 794;
	public static readonly GT_GT = 795;
	public static readonly HASH = 796;
	public static readonly HASH_EQ = 797;
	public static readonly HASH_GT = 798;
	public static readonly HASH_GT_GT = 799;
	public static readonly HASH_HASH = 800;
	public static readonly HYPHEN_GT = 801;
	public static readonly HYPHEN_GT_GT = 802;
	public static readonly HYPHEN_PIPE_HYPHEN = 803;
	public static readonly LT = 804;
	public static readonly LTE = 805;
	public static readonly LT_AT = 806;
	public static readonly LT_CARET = 807;
	public static readonly LT_GT = 808;
	public static readonly LT_HYPHEN_GT = 809;
	public static readonly LT_LT = 810;
	public static readonly LT_LT_EQ = 811;
	public static readonly LT_QMARK_GT = 812;
	public static readonly MINUS = 813;
	public static readonly PERCENT = 814;
	public static readonly PIPE = 815;
	public static readonly PIPE_PIPE = 816;
	public static readonly PIPE_PIPE_SLASH = 817;
	public static readonly PIPE_SLASH = 818;
	public static readonly PLUS = 819;
	public static readonly QMARK = 820;
	public static readonly QMARK_AMP = 821;
	public static readonly QMARK_HASH = 822;
	public static readonly QMARK_HYPHEN = 823;
	public static readonly QMARK_PIPE = 824;
	public static readonly SLASH = 825;
	public static readonly TIL = 826;
	public static readonly TIL_EQ = 827;
	public static readonly TIL_GTE_TIL = 828;
	public static readonly TIL_GT_TIL = 829;
	public static readonly TIL_LTE_TIL = 830;
	public static readonly TIL_LT_TIL = 831;
	public static readonly TIL_STAR = 832;
	public static readonly TIL_TIL = 833;
	public static readonly SEMI = 834;
	public static readonly UNLOGGED = 835;
	public static readonly RULE_root = 0;
	public static readonly RULE_stmt = 1;
	public static readonly RULE_abort_stmt = 2;
	public static readonly RULE_alter_stmt = 3;
	public static readonly RULE_alter_aggregate_stmt = 4;
	public static readonly RULE_alter_collation_stmt = 5;
	public static readonly RULE_alter_conversion_stmt = 6;
	public static readonly RULE_alter_database_stmt = 7;
	public static readonly RULE_alter_default_privileges_stmt = 8;
	public static readonly RULE_alter_domain_stmt = 9;
	public static readonly RULE_alter_event_trigger_stmt = 10;
	public static readonly RULE_alter_extension_stmt = 11;
	public static readonly RULE_alter_foreign_data_wrapper_stmt = 12;
	public static readonly RULE_alter_foreign_table_action = 13;
	public static readonly RULE_alter_foreign_table_action_list = 14;
	public static readonly RULE_alter_foreign_table_stmt = 15;
	public static readonly RULE_alter_function_stmt = 16;
	public static readonly RULE_alter_group_stmt = 17;
	public static readonly RULE_alter_index_stmt = 18;
	public static readonly RULE_alter_language_stmt = 19;
	public static readonly RULE_alter_large_object_stmt = 20;
	public static readonly RULE_alter_materialize_view_stmt = 21;
	public static readonly RULE_alter_operator_stmt = 22;
	public static readonly RULE_alter_operator_class_stmt = 23;
	public static readonly RULE_alter_operator_family_stmt = 24;
	public static readonly RULE_alter_policy_stmt = 25;
	public static readonly RULE_alter_publication_stmt = 26;
	public static readonly RULE_alter_role_options = 27;
	public static readonly RULE_alter_role_stmt = 28;
	public static readonly RULE_alter_rule_stmt = 29;
	public static readonly RULE_alter_schema_stmt = 30;
	public static readonly RULE_alter_sequence_stmt = 31;
	public static readonly RULE_alter_server_options_list = 32;
	public static readonly RULE_alter_server_stmt = 33;
	public static readonly RULE_alter_statistics_stmt = 34;
	public static readonly RULE_alter_subscription_stmt = 35;
	public static readonly RULE_alter_system_stmt = 36;
	public static readonly RULE_alter_table_stmt = 37;
	public static readonly RULE_alter_tablespace_stmt = 38;
	public static readonly RULE_alter_text_search_config_stmt = 39;
	public static readonly RULE_alter_text_search_dict_stmt = 40;
	public static readonly RULE_alter_text_search_parser_stmt = 41;
	public static readonly RULE_alter_text_search_template_stmt = 42;
	public static readonly RULE_alter_trigger_stmt = 43;
	public static readonly RULE_alter_type_stmt = 44;
	public static readonly RULE_alter_user_stmt = 45;
	public static readonly RULE_alter_user_mapping_stmt = 46;
	public static readonly RULE_alter_view_stmt = 47;
	public static readonly RULE_analyze_stmt = 48;
	public static readonly RULE_close_stmt = 49;
	public static readonly RULE_cluster_stmt = 50;
	public static readonly RULE_comment_stmt = 51;
	public static readonly RULE_commit_stmt = 52;
	public static readonly RULE_commit_prepared_stmt = 53;
	public static readonly RULE_copy_stmt = 54;
	public static readonly RULE_create_stmt = 55;
	public static readonly RULE_create_access_method_stmt = 56;
	public static readonly RULE_create_aggregate_stmt = 57;
	public static readonly RULE_create_cast_stmt = 58;
	public static readonly RULE_create_collation_opt = 59;
	public static readonly RULE_create_collation_opt_list = 60;
	public static readonly RULE_create_collation_stmt = 61;
	public static readonly RULE_create_conversion_stmt = 62;
	public static readonly RULE_create_database_stmt = 63;
	public static readonly RULE_domain_constraint = 64;
	public static readonly RULE_create_domain_stmt = 65;
	public static readonly RULE_create_event_trigger_cond = 66;
	public static readonly RULE_create_event_trigger_stmt = 67;
	public static readonly RULE_create_foreign_data_options = 68;
	public static readonly RULE_create_foreign_data_stmt = 69;
	public static readonly RULE_create_foreign_table_stmt = 70;
	public static readonly RULE_create_function_stmt = 71;
	public static readonly RULE_create_group_stmt = 72;
	public static readonly RULE_create_index_stmt = 73;
	public static readonly RULE_create_language_stmt = 74;
	public static readonly RULE_create_materialized_view_stmt = 75;
	public static readonly RULE_create_operator_stmt = 76;
	public static readonly RULE_create_operator_class_opt = 77;
	public static readonly RULE_create_operator_class_stmt = 78;
	public static readonly RULE_create_operator_family_stmt = 79;
	public static readonly RULE_create_policy_stmt = 80;
	public static readonly RULE_create_role_stmt = 81;
	public static readonly RULE_create_rule_event = 82;
	public static readonly RULE_create_rule_stmt = 83;
	public static readonly RULE_create_schema_stmt = 84;
	public static readonly RULE_create_sequence_stmt = 85;
	public static readonly RULE_create_server_stmt = 86;
	public static readonly RULE_create_statistics_stmt = 87;
	public static readonly RULE_create_subscription_stmt = 88;
	public static readonly RULE_create_table_stmt = 89;
	public static readonly RULE_create_table_as_stmt = 90;
	public static readonly RULE_create_tablespace_stmt = 91;
	public static readonly RULE_create_text_search_config_stmt = 92;
	public static readonly RULE_create_text_search_dict_stmt = 93;
	public static readonly RULE_create_text_search_parser_stmt = 94;
	public static readonly RULE_create_text_search_template_stmt = 95;
	public static readonly RULE_create_transform_stmt = 96;
	public static readonly RULE_create_trigger_stmt = 97;
	public static readonly RULE_create_type_stmt = 98;
	public static readonly RULE_create_user_stmt = 99;
	public static readonly RULE_create_user_mapping_stmt = 100;
	public static readonly RULE_create_view_stmt = 101;
	public static readonly RULE_deallocate_stmt = 102;
	public static readonly RULE_declare_stmt = 103;
	public static readonly RULE_delete_stmt = 104;
	public static readonly RULE_discard_stmt = 105;
	public static readonly RULE_drop_stmt = 106;
	public static readonly RULE_drop_access_method_stmt = 107;
	public static readonly RULE_drop_aggregate_stmt = 108;
	public static readonly RULE_drop_cast_stmt = 109;
	public static readonly RULE_drop_collation_stmt = 110;
	public static readonly RULE_drop_conversion_stmt = 111;
	public static readonly RULE_drop_database_stmt = 112;
	public static readonly RULE_drop_domain_stmt = 113;
	public static readonly RULE_drop_event_trigger_stmt = 114;
	public static readonly RULE_drop_extension_stmt = 115;
	public static readonly RULE_drop_foreign_data_wrapper_stmt = 116;
	public static readonly RULE_drop_foreign_table_stmt = 117;
	public static readonly RULE_drop_function_stmt = 118;
	public static readonly RULE_drop_group_stmt = 119;
	public static readonly RULE_drop_index_stmt = 120;
	public static readonly RULE_drop_language_stmt = 121;
	public static readonly RULE_drop_materialized_view_stmt = 122;
	public static readonly RULE_drop_operator_stmt = 123;
	public static readonly RULE_drop_operator_class_stmt = 124;
	public static readonly RULE_drop_operator_family_stmt = 125;
	public static readonly RULE_drop_owned_stmt = 126;
	public static readonly RULE_drop_policy_stmt = 127;
	public static readonly RULE_drop_publication_stmt = 128;
	public static readonly RULE_drop_role_stmt = 129;
	public static readonly RULE_drop_rule_stmt = 130;
	public static readonly RULE_drop_schema_stmt = 131;
	public static readonly RULE_drop_sequence_stmt = 132;
	public static readonly RULE_drop_server_stmt = 133;
	public static readonly RULE_drop_statistics_stmt = 134;
	public static readonly RULE_drop_subscription_stmt = 135;
	public static readonly RULE_drop_table_stmt = 136;
	public static readonly RULE_drop_tablespace_stmt = 137;
	public static readonly RULE_drop_text_search_config_stmt = 138;
	public static readonly RULE_drop_text_search_dict_stmt = 139;
	public static readonly RULE_drop_text_search_parser_stmt = 140;
	public static readonly RULE_drop_text_search_template_stmt = 141;
	public static readonly RULE_drop_transform_stmt = 142;
	public static readonly RULE_drop_trigger_stmt = 143;
	public static readonly RULE_drop_type_stmt = 144;
	public static readonly RULE_drop_user_stmt = 145;
	public static readonly RULE_drop_user_mapping_stmt = 146;
	public static readonly RULE_drop_view_stmt = 147;
	public static readonly RULE_execute_stmt = 148;
	public static readonly RULE_explain_stmt = 149;
	public static readonly RULE_fetch_stmt = 150;
	public static readonly RULE_grant_stmt = 151;
	public static readonly RULE_import_foreign_schema_stmt = 152;
	public static readonly RULE_insert_stmt = 153;
	public static readonly RULE_listen_stmt = 154;
	public static readonly RULE_load_stmt = 155;
	public static readonly RULE_lock_stmt = 156;
	public static readonly RULE_move_stmt = 157;
	public static readonly RULE_notify_stmt = 158;
	public static readonly RULE_prepare_stmt = 159;
	public static readonly RULE_prepare_transaction_stmt = 160;
	public static readonly RULE_reassign_owned_stmt = 161;
	public static readonly RULE_refresh_materialized_view_stmt = 162;
	public static readonly RULE_reindex_stmt = 163;
	public static readonly RULE_release_savepoint_stmt = 164;
	public static readonly RULE_reset_stmt = 165;
	public static readonly RULE_revoke_stmt = 166;
	public static readonly RULE_rollback_stmt = 167;
	public static readonly RULE_rollback_prepared_stmt = 168;
	public static readonly RULE_rollback_to_savepoint_stmt = 169;
	public static readonly RULE_savepoint_stmt = 170;
	public static readonly RULE_security_label_stmt = 171;
	public static readonly RULE_select_stmt = 172;
	public static readonly RULE_select_into_stmt = 173;
	public static readonly RULE_with_clause = 174;
	public static readonly RULE_with_expr = 175;
	public static readonly RULE_set_stmt = 176;
	public static readonly RULE_set_constraints_stmt = 177;
	public static readonly RULE_set_role_stmt = 178;
	public static readonly RULE_set_session_authorization_stmt = 179;
	public static readonly RULE_transaction_mode = 180;
	public static readonly RULE_transaction_mode_list = 181;
	public static readonly RULE_set_transaction_stmt = 182;
	public static readonly RULE_show_stmt = 183;
	public static readonly RULE_truncate_stmt = 184;
	public static readonly RULE_unlisten_stmt = 185;
	public static readonly RULE_update_stmt = 186;
	public static readonly RULE_vacuum_opt = 187;
	public static readonly RULE_vacuum_opt_list = 188;
	public static readonly RULE_vacuum_stmt = 189;
	public static readonly RULE_values_stmt = 190;
	public static readonly RULE_selector_clause = 191;
	public static readonly RULE_from_clause = 192;
	public static readonly RULE_where_clause = 193;
	public static readonly RULE_group_by_clause = 194;
	public static readonly RULE_grouping_elem = 195;
	public static readonly RULE_grouping_elem_list = 196;
	public static readonly RULE_having_clause = 197;
	public static readonly RULE_column_list = 198;
	public static readonly RULE_explain_parameter = 199;
	public static readonly RULE_frame = 200;
	public static readonly RULE_frame_start = 201;
	public static readonly RULE_frame_end = 202;
	public static readonly RULE_frame_clause = 203;
	public static readonly RULE_window_definition = 204;
	public static readonly RULE_window_clause = 205;
	public static readonly RULE_combine_clause = 206;
	public static readonly RULE_order_by_clause = 207;
	public static readonly RULE_order_by_item = 208;
	public static readonly RULE_limit_clause = 209;
	public static readonly RULE_offset_clause = 210;
	public static readonly RULE_fetch_clause = 211;
	public static readonly RULE_for_clause = 212;
	public static readonly RULE_updater_clause = 213;
	public static readonly RULE_updater_expr = 214;
	public static readonly RULE_returning_clause = 215;
	public static readonly RULE_expr = 216;
	public static readonly RULE_bool_expr = 217;
	public static readonly RULE_case_expr = 218;
	public static readonly RULE_expr_list = 219;
	public static readonly RULE_expr_list_list = 220;
	public static readonly RULE_func_sig_arg = 221;
	public static readonly RULE_func_sig_arg_list = 222;
	public static readonly RULE_func_sig = 223;
	public static readonly RULE_func_sig_list = 224;
	public static readonly RULE_type_name = 225;
	public static readonly RULE_timezone = 226;
	public static readonly RULE_oper = 227;
	public static readonly RULE_aggregate = 228;
	public static readonly RULE_name_ = 229;
	public static readonly RULE_name_list = 230;
	public static readonly RULE_identifier_list = 231;
	public static readonly RULE_option_expr = 232;
	public static readonly RULE_option_list = 233;
	public static readonly RULE_table_name_ = 234;
	public static readonly RULE_data_type = 235;
	public static readonly RULE_data_type_list = 236;
	public static readonly RULE_index_method = 237;
	public static readonly RULE_func_name = 238;
	public static readonly RULE_func_call = 239;
	public static readonly RULE_array_cons_expr = 240;
	public static readonly RULE_from_item = 241;
	public static readonly RULE_with_column_alias = 242;
	public static readonly RULE_join_type = 243;
	public static readonly RULE_join_clause = 244;
	public static readonly RULE_predicate = 245;
	public static readonly RULE_aggregate_signature = 246;
	public static readonly RULE_column_constraint = 247;
	public static readonly RULE_column_constraints = 248;
	public static readonly RULE_index_parameters = 249;
	public static readonly RULE_exclude_element = 250;
	public static readonly RULE_table_constraint = 251;
	public static readonly RULE_role_name = 252;
	public static readonly RULE_role_name_list = 253;
	public static readonly RULE_param_value = 254;
	public static readonly RULE_non_reserved_keyword = 255;
	public static readonly RULE_identifier = 256;
	public static readonly RULE_todo_fill_in = 257;
	public static readonly RULE_todo_implement = 258;
	public static readonly RULE_correlation_name = 259;
	public static readonly RULE_column_name = 260;
	public static readonly RULE_alias = 261;
	public static readonly RULE_column_alias = 262;
	public static readonly RULE_column_definition = 263;
	public static readonly RULE_window_name = 264;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"root", "stmt", "abort_stmt", "alter_stmt", "alter_aggregate_stmt", "alter_collation_stmt", 
		"alter_conversion_stmt", "alter_database_stmt", "alter_default_privileges_stmt", 
		"alter_domain_stmt", "alter_event_trigger_stmt", "alter_extension_stmt", 
		"alter_foreign_data_wrapper_stmt", "alter_foreign_table_action", "alter_foreign_table_action_list", 
		"alter_foreign_table_stmt", "alter_function_stmt", "alter_group_stmt", 
		"alter_index_stmt", "alter_language_stmt", "alter_large_object_stmt", 
		"alter_materialize_view_stmt", "alter_operator_stmt", "alter_operator_class_stmt", 
		"alter_operator_family_stmt", "alter_policy_stmt", "alter_publication_stmt", 
		"alter_role_options", "alter_role_stmt", "alter_rule_stmt", "alter_schema_stmt", 
		"alter_sequence_stmt", "alter_server_options_list", "alter_server_stmt", 
		"alter_statistics_stmt", "alter_subscription_stmt", "alter_system_stmt", 
		"alter_table_stmt", "alter_tablespace_stmt", "alter_text_search_config_stmt", 
		"alter_text_search_dict_stmt", "alter_text_search_parser_stmt", "alter_text_search_template_stmt", 
		"alter_trigger_stmt", "alter_type_stmt", "alter_user_stmt", "alter_user_mapping_stmt", 
		"alter_view_stmt", "analyze_stmt", "close_stmt", "cluster_stmt", "comment_stmt", 
		"commit_stmt", "commit_prepared_stmt", "copy_stmt", "create_stmt", "create_access_method_stmt", 
		"create_aggregate_stmt", "create_cast_stmt", "create_collation_opt", "create_collation_opt_list", 
		"create_collation_stmt", "create_conversion_stmt", "create_database_stmt", 
		"domain_constraint", "create_domain_stmt", "create_event_trigger_cond", 
		"create_event_trigger_stmt", "create_foreign_data_options", "create_foreign_data_stmt", 
		"create_foreign_table_stmt", "create_function_stmt", "create_group_stmt", 
		"create_index_stmt", "create_language_stmt", "create_materialized_view_stmt", 
		"create_operator_stmt", "create_operator_class_opt", "create_operator_class_stmt", 
		"create_operator_family_stmt", "create_policy_stmt", "create_role_stmt", 
		"create_rule_event", "create_rule_stmt", "create_schema_stmt", "create_sequence_stmt", 
		"create_server_stmt", "create_statistics_stmt", "create_subscription_stmt", 
		"create_table_stmt", "create_table_as_stmt", "create_tablespace_stmt", 
		"create_text_search_config_stmt", "create_text_search_dict_stmt", "create_text_search_parser_stmt", 
		"create_text_search_template_stmt", "create_transform_stmt", "create_trigger_stmt", 
		"create_type_stmt", "create_user_stmt", "create_user_mapping_stmt", "create_view_stmt", 
		"deallocate_stmt", "declare_stmt", "delete_stmt", "discard_stmt", "drop_stmt", 
		"drop_access_method_stmt", "drop_aggregate_stmt", "drop_cast_stmt", "drop_collation_stmt", 
		"drop_conversion_stmt", "drop_database_stmt", "drop_domain_stmt", "drop_event_trigger_stmt", 
		"drop_extension_stmt", "drop_foreign_data_wrapper_stmt", "drop_foreign_table_stmt", 
		"drop_function_stmt", "drop_group_stmt", "drop_index_stmt", "drop_language_stmt", 
		"drop_materialized_view_stmt", "drop_operator_stmt", "drop_operator_class_stmt", 
		"drop_operator_family_stmt", "drop_owned_stmt", "drop_policy_stmt", "drop_publication_stmt", 
		"drop_role_stmt", "drop_rule_stmt", "drop_schema_stmt", "drop_sequence_stmt", 
		"drop_server_stmt", "drop_statistics_stmt", "drop_subscription_stmt", 
		"drop_table_stmt", "drop_tablespace_stmt", "drop_text_search_config_stmt", 
		"drop_text_search_dict_stmt", "drop_text_search_parser_stmt", "drop_text_search_template_stmt", 
		"drop_transform_stmt", "drop_trigger_stmt", "drop_type_stmt", "drop_user_stmt", 
		"drop_user_mapping_stmt", "drop_view_stmt", "execute_stmt", "explain_stmt", 
		"fetch_stmt", "grant_stmt", "import_foreign_schema_stmt", "insert_stmt", 
		"listen_stmt", "load_stmt", "lock_stmt", "move_stmt", "notify_stmt", "prepare_stmt", 
		"prepare_transaction_stmt", "reassign_owned_stmt", "refresh_materialized_view_stmt", 
		"reindex_stmt", "release_savepoint_stmt", "reset_stmt", "revoke_stmt", 
		"rollback_stmt", "rollback_prepared_stmt", "rollback_to_savepoint_stmt", 
		"savepoint_stmt", "security_label_stmt", "select_stmt", "select_into_stmt", 
		"with_clause", "with_expr", "set_stmt", "set_constraints_stmt", "set_role_stmt", 
		"set_session_authorization_stmt", "transaction_mode", "transaction_mode_list", 
		"set_transaction_stmt", "show_stmt", "truncate_stmt", "unlisten_stmt", 
		"update_stmt", "vacuum_opt", "vacuum_opt_list", "vacuum_stmt", "values_stmt", 
		"selector_clause", "from_clause", "where_clause", "group_by_clause", "grouping_elem", 
		"grouping_elem_list", "having_clause", "column_list", "explain_parameter", 
		"frame", "frame_start", "frame_end", "frame_clause", "window_definition", 
		"window_clause", "combine_clause", "order_by_clause", "order_by_item", 
		"limit_clause", "offset_clause", "fetch_clause", "for_clause", "updater_clause", 
		"updater_expr", "returning_clause", "expr", "bool_expr", "case_expr", 
		"expr_list", "expr_list_list", "func_sig_arg", "func_sig_arg_list", "func_sig", 
		"func_sig_list", "type_name", "timezone", "oper", "aggregate", "name_", 
		"name_list", "identifier_list", "option_expr", "option_list", "table_name_", 
		"data_type", "data_type_list", "index_method", "func_name", "func_call", 
		"array_cons_expr", "from_item", "with_column_alias", "join_type", "join_clause", 
		"predicate", "aggregate_signature", "column_constraint", "column_constraints", 
		"index_parameters", "exclude_element", "table_constraint", "role_name", 
		"role_name_list", "param_value", "non_reserved_keyword", "identifier", 
		"todo_fill_in", "todo_implement", "correlation_name", "column_name", "alias", 
		"column_alias", "column_definition", "window_name",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "','", "':'", "'::'", "'$'", 
		"'$$'", "'*'", "'('", "')'", "'['", "']'", undefined, undefined, undefined, 
		undefined, undefined, "'.'", undefined, undefined, undefined, undefined, 
		undefined, "'&'", "'&&'", "'&<'", "'@@'", "'@>'", "'@'", "'!'", "'!!'", 
		"'!='", "'^'", "'='", "'=>'", "'>'", "'>='", "'>>'", "'#'", "'#='", "'#>'", 
		"'#>>'", "'##'", "'->'", "'->>'", "'-|-'", "'<'", "'<='", "'<@'", "'<^'", 
		"'<>'", "'<->'", "'<<'", "'<<='", "'<?>'", "'-'", "'%'", "'|'", "'||'", 
		"'||/'", "'|/'", "'+'", "'?'", "'?&'", "'?#'", "'?-'", "'?|'", "'/'", 
		"'~'", "'~='", "'~>=~'", "'~>~'", "'~<=~'", "'~<~'", "'~*'", "'~~'", "';'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "WHITESPACE", "BLOCK_COMMENT", "LINE_COMMENT", "A_", "ABORT", 
		"ABS", "ABSOLUTE", "ACCESS", "ACTION", "ADA", "ADD", "ADMIN", "AFTER", 
		"AGGREGATE", "ALIAS", "ALL", "ALLOCATE", "ALSO", "ALTER", "ALWAYS", "ANALYSE", 
		"ANALYZE", "AND", "ANY", "ARE", "ARRAY", "AS", "ASC", "ASENSITIVE", "ASSERTION", 
		"ASSIGNMENT", "ASYMMETRIC", "AT", "ATOMIC", "ATTRIBUTE", "ATTRIBUTES", 
		"AUTHORIZATION", "AVG", "BACKWARD", "BEFORE", "BEGIN", "BERNOULLI", "BETWEEN", 
		"BIGINT", "BINARY", "BIT", "BIT_LENGTH", "BITVAR", "BLOB", "BOOLEAN", 
		"BOTH", "BREADTH", "BUFFERS", "BY", "C_", "CACHE", "CALL", "CALLED", "CARDINALITY", 
		"CASCADE", "CASCADED", "CASE", "CAST", "CATALOG", "CATALOG_NAME", "CEIL", 
		"CEILING", "CHAIN", "CHAR", "CHAR_LENGTH", "CHARACTER", "CHARACTER_LENGTH", 
		"CHARACTER_SET_CATALOG", "CHARACTER_SET_NAME", "CHARACTER_SET_SCHEMA", 
		"CHARACTERISTICS", "CHARACTERS", "CHECK", "CHECKED", "CHECKPOINT", "CLASS", 
		"CLASS_ORIGIN", "CLOB", "CLOSE", "CLUSTER", "COALESCE", "COBOL", "COLLATE", 
		"COLLATION", "COLLATION_CATALOG", "COLLATION_NAME", "COLLATION_SCHEMA", 
		"COLLECT", "COLUMN", "COLUMN_NAME", "COMMAND_FUNCTION", "COMMAND_FUNCTION_CODE", 
		"COMMENT", "COMMIT", "COMMITTED", "COMPLETION", "CONDITION", "CONDITION_NUMBER", 
		"CONFIGURATION", "CONFLICT", "CONNECT", "CONNECTION", "CONNECTION_NAME", 
		"CONSTRAINT", "CONSTRAINT_CATALOG", "CONSTRAINT_NAME", "CONSTRAINT_SCHEMA", 
		"CONSTRAINTS", "CONSTRUCTOR", "CONTAINS", "CONTINUE", "CONVERSION", "CONVERT", 
		"COPY", "CORR", "CORRESPONDING", "COSTS", "COUNT", "COVAR_POP", "COVAR_SAMP", 
		"CREATE", "CREATEDB", "CREATEUSER", "CROSS", "CSV", "CUBE", "CUME_DIST", 
		"CURRENT", "CURRENT_DATE", "CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_PATH", 
		"CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TRANSFORM_GROUP_FOR_TYPE", 
		"CURRENT_USER", "CURSOR", "CURSOR_NAME", "CYCLE", "DATA", "DATABASE", 
		"DATE", "DATETIME_INTERVAL_CODE", "DATETIME_INTERVAL_PRECISION", "DAY", 
		"DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERABLE", 
		"DEFERRABLE", "DEFERRED", "DEFINED", "DEFINER", "DEGREE", "DELETE", "DELIMITER", 
		"DELIMITERS", "DENSE_RANK", "DEPENDS", "DEPTH", "DEREF", "DERIVED", "DESC", 
		"DESCRIBE", "DESCRIPTOR", "DESTROY", "DESTRUCTOR", "DETERMINISTIC", "DIAGNOSTICS", 
		"DICTIONARY", "DISABLE", "DISABLE_PAGE_SKIPPING", "DISCARD", "DISCONNECT", 
		"DISPATCH", "DISTINCT", "DO", "DOMAIN", "DOUBLE", "DROP", "DYNAMIC", "DYNAMIC_FUNCTION", 
		"DYNAMIC_FUNCTION_CODE", "EACH", "ELEMENT", "ELSE", "ENABLE", "ENCODING", 
		"ENCRYPTED", "END", "END_EXEC", "EQUALS", "ESCAPE", "EVERY", "EXCEPT", 
		"EXCEPTION", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXEC", "EXECUTE", "EXISTING", 
		"EXISTS", "EXP", "EXPLAIN", "EXTENDED", "EXTENSION", "EXTERNAL", "EXTRACT", 
		"FALSE", "FETCH", "FIELDS", "FILTER", "FINAL", "FIRST", "FLOAT", "FLOOR", 
		"FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORMAT", "FORTRAN", "FORWARD", 
		"FOUND", "FREE", "FREEZE", "FROM", "FULL", "FUNCTION", "FUSION", "G_", 
		"GENERAL", "GENERATED", "GET", "GLOBAL", "GO", "GOTO", "GRANT", "GRANTED", 
		"GREATEST", "GROUP", "GROUPING", "HANDLER", "HAVING", "HIERARCHY", "HOLD", 
		"HOST", "HOUR", "IDENTITY", "IGNORE", "ILIKE", "IMMEDIATE", "IMMUTABLE", 
		"IMPLEMENTATION", "IMPLICIT", "IN", "INCLUDING", "INCREMENT", "INDEX", 
		"INDICATOR", "INFIX", "INHERITS", "INITIALIZE", "INITIALLY", "INNER", 
		"INOUT", "INPUT", "INSENSITIVE", "INSERT", "INSTANCE", "INSTANTIABLE", 
		"INSTEAD", "INT", "INTEGER", "INTERSECT", "INTERSECTION", "INTERVAL", 
		"INTO", "INVOKER", "IS", "ISOLATION", "ITERATE", "JOIN", "K_", "KEY", 
		"KEY_MEMBER", "KEY_TYPE", "LABEL", "LANCOMPILER", "LANGUAGE", "LARGE", 
		"LAST", "LATERAL", "LEADING", "LEAST", "LEFT", "LENGTH", "LESS", "LEVEL", 
		"LIKE", "LIMIT", "LISTEN", "LN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", 
		"LOCATION", "LOCATOR", "LOCK", "LOCKED", "LOWER", "M_", "MAIN", "MAP", 
		"MAPPING", "MATCH", "MATCH_SIMPLE", "MATCHED", "MAX", "MAXVALUE", "MEMBER", 
		"MERGE", "MESSAGE_LENGTH", "MESSAGE_OCTET_LENGTH", "MESSAGE_TEXT", "METHOD", 
		"MIN", "MINUTE", "MINVALUE", "MOD", "MODE", "MODIFIES", "MODIFY", "MODULE", 
		"MONTH", "MORE_", "MOVE", "MULTISET", "MUMPS", "NAME", "NAMES", "NATIONAL", 
		"NATURAL", "NCHAR", "NCLOB", "NESTING", "NEW", "NEXT", "NO", "NOCREATEDB", 
		"NOCREATEUSER", "NONE", "NORMALIZE", "NORMALIZED", "NOT", "NOTHING", "NOTIFY", 
		"NOTNULL", "NOWAIT", "NULL", "NULLABLE", "NULLIF", "NULLS", "NUMBER", 
		"NUMERIC", "OBJECT", "OCTET_LENGTH", "OCTETS", "OF", "OFF", "OFFSET", 
		"OIDS", "OLD", "ON", "ONLY", "OPEN", "OPERATION", "OPERATOR", "OPTION", 
		"OPTIONS", "OR", "ORDER", "ORDERING", "ORDINALITY", "OTHERS", "OUT", "OUTER", 
		"OUTPUT", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNER", "PAD", 
		"PARAMETER", "PARAMETER_MODE", "PARAMETER_NAME", "PARAMETER_ORDINAL_POSITION", 
		"PARAMETER_SPECIFIC_CATALOG", "PARAMETER_SPECIFIC_NAME", "PARAMETER_SPECIFIC_SCHEMA", 
		"PARAMETERS", "PARSER", "PARTIAL", "PARTITION", "PASCAL", "PASSWORD", 
		"PATH", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "PLACING", 
		"PLAIN", "PLANS", "PLI", "POSITION", "POSTFIX", "POWER", "PRECEDING", 
		"PRECISION", "PREFIX", "PREORDER", "PREPARE", "PREPARED", "PRESERVE", 
		"PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PUBLIC", 
		"PUBLICATION", "QUOTE", "RANGE", "RANK", "READ", "READS", "REAL", "REASSIGN", 
		"RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH", 
		"REGR_AVGX", "REGR_AVGY", "REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", 
		"REGR_SXX", "REGR_SXY", "REGR_SYY", "REINDEX", "RELATIVE", "RELEASE", 
		"RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", 
		"RESULT", "RETURN", "RETURNED_CARDINALITY", "RETURNED_LENGTH", "RETURNED_OCTET_LENGTH", 
		"RETURNED_SQLSTATE", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", 
		"ROLLBACK", "ROLLUP", "ROUTINE", "ROUTINE_CATALOG", "ROUTINE_NAME", "ROUTINE_SCHEMA", 
		"ROW", "ROW_COUNT", "ROW_NUMBER", "ROWS", "RULE", "SAVEPOINT", "SCALE", 
		"SCHEMA", "SCHEMA_NAME", "SCOPE", "SCOPE_CATALOG", "SCOPE_NAME", "SCOPE_SCHEMA", 
		"SCROLL", "SEARCH", "SECOND", "SECTION", "SECURITY", "SELECT", "SELF", 
		"SENSITIVE", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER_NAME", "SESSION", 
		"SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", 
		"SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE", "SPACE", "SPECIFIC", 
		"SPECIFIC_NAME", "SPECIFICTYPE", "SQL", "SQLCODE", "SQLERROR", "SQLEXCEPTION", 
		"SQLSTATE", "SQLWARNING", "SQRT", "STABLE", "START", "STATE", "STATEMENT", 
		"STATIC", "STATISTICS", "STDDEV_POP", "STDDEV_SAMP", "STDIN", "STDOUT", 
		"STORAGE", "STRICT", "STRUCTURE", "STYLE", "SUBCLASS_ORIGIN", "SUBLIST", 
		"SUBMULTISET", "SUBSCRIPTION", "SUBSTRING", "SUM", "SYMMETRIC", "SYSID", 
		"SYSTEM", "SYSTEM_USER", "TABLE", "TABLE_NAME", "TABLESAMPLE", "TABLESPACE", 
		"TEMP", "TEMPLATE", "TEMPORARY", "TERMINATE", "THAN", "THEN", "TIES", 
		"TIME", "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMING", "TO", 
		"TOAST", "TOP_LEVEL_COUNT", "TRAILING", "TRANSACTION", "TRANSACTION_ACTIVE", 
		"TRANSACTIONS_COMMITTED", "TRANSACTIONS_ROLLED_BACK", "TRANSFORM", "TRANSFORMS", 
		"TRANSLATE", "TRANSLATION", "TREAT", "TRIGGER", "TRIGGER_CATALOG", "TRIGGER_NAME", 
		"TRIGGER_SCHEMA", "TRIM", "TRUE", "TRUNCATE", "TRUSTED", "TYPE", "UESCAPE", 
		"UNBOUNDED", "UNCOMMITTED", "UNDER", "UNENCRYPTED", "UNION", "UNIQUE", 
		"UNKNOWN", "UNLISTEN", "UNNAMED", "UNNEST", "UNTIL", "UPDATE", "UPPER", 
		"USAGE", "USER", "USER_DEFINED_TYPE_CATALOG", "USER_DEFINED_TYPE_CODE", 
		"USER_DEFINED_TYPE_NAME", "USER_DEFINED_TYPE_SCHEMA", "USING", "VACUUM", 
		"VALID", "VALIDATE", "VALIDATOR", "VALUE", "VALUES", "VAR_POP", "VAR_SAMP", 
		"VARCHAR", "VARIABLE", "VARIADIC", "VARYING", "VERBOSE", "VIEW", "VOLATILE", 
		"WHEN", "WHENEVER", "WHERE", "WIDTH_BUCKET", "WINDOW", "WITH", "WITHIN", 
		"WITHOUT", "WORK", "WRITE", "YAML", "YEAR", "YES", "ZONE", "SUPERUSER", 
		"NOSUPERUSER", "CREATEROLE", "NOCREATEROLE", "INHERIT", "NOINHERIT", "LOGIN", 
		"NOLOGIN", "REPLICATION", "NOREPLICATION", "BYPASSRLS", "NOBYPASSRLS", 
		"SFUNC", "STYPE", "SSPACE", "FINALFUNC", "FINALFUNC_EXTRA", "COMBINEFUNC", 
		"SERIALFUNC", "DESERIALFUNC", "INITCOND", "MSFUNC", "MINVFUNC", "MSTYPE", 
		"MSSPACE", "MFINALFUNC", "MFINALFUNC_EXTRA", "MINITCOND", "SORTOP", "PARALLEL", 
		"HYPOTHETICAL", "SAFE", "RESTRICTED", "UNSAFE", "BASETYPE", "IF", "LOCALE", 
		"LC_COLLATE", "LC_CTYPE", "PROVIDER", "VERSION", "ALLOW_CONNECTIONS", 
		"IS_TEMPLATE", "EVENT", "WRAPPER", "SERVER", "BTREE", "HASH_", "GIST", 
		"SPGIST", "GIN", "BRIN", "CONCURRENTLY", "INLINE", "MATERIALIZED", "LEFTARG", 
		"RIGHTARG", "COMMUTATOR", "NEGATOR", "HASHES", "MERGES", "FAMILY", "POLICY", 
		"OWNED", "ABSTIME", "BIGSERIAL", "BIT_VARYING", "BOOL", "BOX", "BYTEA", 
		"CHARACTER_VARYING", "CIDR", "CIRCLE", "FLOAT4", "FLOAT8", "INET", "INT2", 
		"INT4", "INT8", "JSON", "JSONB", "LINE", "LSEG", "MACADDR", "MACADDR8", 
		"MONEY", "PG_LSN", "POINT", "POLYGON", "RELTIME", "SERIAL", "SERIAL2", 
		"SERIAL4", "SERIAL8", "SMALLSERIAL", "STSTEM", "TEXT", "TIMESTAMPTZ", 
		"TIMETZ", "TSQUERY", "TSVECTOR", "TXID_SNAPSHOT", "UUID", "VARBIT", "XML", 
		"COMMA", "COLON", "COLON_COLON", "DOLLAR", "DOLLAR_DOLLAR", "STAR", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", "BIT_STRING", "REGEX_STRING", 
		"NUMERIC_LITERAL", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "DOT", "SINGLEQ_STRING_LITERAL", 
		"DOUBLEQ_STRING_LITERAL", "IDENTIFIER", "DOLLAR_DEC", "IDENTIFIER_UNICODE", 
		"AMP", "AMP_AMP", "AMP_LT", "AT_AT", "AT_GT", "AT_SIGN", "BANG", "BANG_BANG", 
		"BANG_EQUAL", "CARET", "EQUAL", "EQUAL_GT", "GT", "GTE", "GT_GT", "HASH", 
		"HASH_EQ", "HASH_GT", "HASH_GT_GT", "HASH_HASH", "HYPHEN_GT", "HYPHEN_GT_GT", 
		"HYPHEN_PIPE_HYPHEN", "LT", "LTE", "LT_AT", "LT_CARET", "LT_GT", "LT_HYPHEN_GT", 
		"LT_LT", "LT_LT_EQ", "LT_QMARK_GT", "MINUS", "PERCENT", "PIPE", "PIPE_PIPE", 
		"PIPE_PIPE_SLASH", "PIPE_SLASH", "PLUS", "QMARK", "QMARK_AMP", "QMARK_HASH", 
		"QMARK_HYPHEN", "QMARK_PIPE", "SLASH", "TIL", "TIL_EQ", "TIL_GTE_TIL", 
		"TIL_GT_TIL", "TIL_LTE_TIL", "TIL_LT_TIL", "TIL_STAR", "TIL_TIL", "SEMI", 
		"UNLOGGED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(PostgreSQLParserParser._LITERAL_NAMES, PostgreSQLParserParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return PostgreSQLParserParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "PostgreSQLParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return PostgreSQLParserParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return PostgreSQLParserParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(PostgreSQLParserParser._ATN, this);
	}
	// @RuleVersion(0)
	public root(): RootContext {
		let _localctx: RootContext = new RootContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, PostgreSQLParserParser.RULE_root);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 530;
			this.stmt();
			this.state = 539;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.SEMI) {
				{
				this.state = 533;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 531;
						this.match(PostgreSQLParserParser.SEMI);
						this.state = 532;
						this.stmt();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 535;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 0, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 537;
				this.match(PostgreSQLParserParser.SEMI);
				}
			}

			this.state = 541;
			this.match(PostgreSQLParserParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt(): StmtContext {
		let _localctx: StmtContext = new StmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, PostgreSQLParserParser.RULE_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 595;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 2, this._ctx) ) {
			case 1:
				{
				this.state = 543;
				this.abort_stmt();
				}
				break;

			case 2:
				{
				this.state = 544;
				this.alter_stmt();
				}
				break;

			case 3:
				{
				this.state = 545;
				this.analyze_stmt();
				}
				break;

			case 4:
				{
				this.state = 546;
				this.create_stmt();
				}
				break;

			case 5:
				{
				this.state = 547;
				this.close_stmt();
				}
				break;

			case 6:
				{
				this.state = 548;
				this.cluster_stmt();
				}
				break;

			case 7:
				{
				this.state = 549;
				this.comment_stmt();
				}
				break;

			case 8:
				{
				this.state = 550;
				this.commit_stmt();
				}
				break;

			case 9:
				{
				this.state = 551;
				this.commit_prepared_stmt();
				}
				break;

			case 10:
				{
				this.state = 552;
				this.copy_stmt();
				}
				break;

			case 11:
				{
				this.state = 553;
				this.deallocate_stmt();
				}
				break;

			case 12:
				{
				this.state = 554;
				this.declare_stmt();
				}
				break;

			case 13:
				{
				this.state = 555;
				this.delete_stmt();
				}
				break;

			case 14:
				{
				this.state = 556;
				this.discard_stmt();
				}
				break;

			case 15:
				{
				this.state = 557;
				this.drop_stmt();
				}
				break;

			case 16:
				{
				this.state = 558;
				this.execute_stmt();
				}
				break;

			case 17:
				{
				this.state = 559;
				this.explain_stmt();
				}
				break;

			case 18:
				{
				this.state = 560;
				this.fetch_stmt();
				}
				break;

			case 19:
				{
				this.state = 561;
				this.grant_stmt();
				}
				break;

			case 20:
				{
				this.state = 562;
				this.import_foreign_schema_stmt();
				}
				break;

			case 21:
				{
				this.state = 563;
				this.insert_stmt();
				}
				break;

			case 22:
				{
				this.state = 564;
				this.listen_stmt();
				}
				break;

			case 23:
				{
				this.state = 565;
				this.load_stmt();
				}
				break;

			case 24:
				{
				this.state = 566;
				this.lock_stmt();
				}
				break;

			case 25:
				{
				this.state = 567;
				this.move_stmt();
				}
				break;

			case 26:
				{
				this.state = 568;
				this.notify_stmt();
				}
				break;

			case 27:
				{
				this.state = 569;
				this.prepare_stmt();
				}
				break;

			case 28:
				{
				this.state = 570;
				this.prepare_transaction_stmt();
				}
				break;

			case 29:
				{
				this.state = 571;
				this.reassign_owned_stmt();
				}
				break;

			case 30:
				{
				this.state = 572;
				this.refresh_materialized_view_stmt();
				}
				break;

			case 31:
				{
				this.state = 573;
				this.reindex_stmt();
				}
				break;

			case 32:
				{
				this.state = 574;
				this.release_savepoint_stmt();
				}
				break;

			case 33:
				{
				this.state = 575;
				this.reset_stmt();
				}
				break;

			case 34:
				{
				this.state = 576;
				this.revoke_stmt();
				}
				break;

			case 35:
				{
				this.state = 577;
				this.rollback_stmt();
				}
				break;

			case 36:
				{
				this.state = 578;
				this.rollback_prepared_stmt();
				}
				break;

			case 37:
				{
				this.state = 579;
				this.rollback_to_savepoint_stmt();
				}
				break;

			case 38:
				{
				this.state = 580;
				this.savepoint_stmt();
				}
				break;

			case 39:
				{
				this.state = 581;
				this.security_label_stmt();
				}
				break;

			case 40:
				{
				this.state = 582;
				this.select_stmt();
				}
				break;

			case 41:
				{
				this.state = 583;
				this.select_into_stmt();
				}
				break;

			case 42:
				{
				this.state = 584;
				this.set_stmt();
				}
				break;

			case 43:
				{
				this.state = 585;
				this.set_constraints_stmt();
				}
				break;

			case 44:
				{
				this.state = 586;
				this.set_role_stmt();
				}
				break;

			case 45:
				{
				this.state = 587;
				this.set_session_authorization_stmt();
				}
				break;

			case 46:
				{
				this.state = 588;
				this.set_transaction_stmt();
				}
				break;

			case 47:
				{
				this.state = 589;
				this.show_stmt();
				}
				break;

			case 48:
				{
				this.state = 590;
				this.truncate_stmt();
				}
				break;

			case 49:
				{
				this.state = 591;
				this.unlisten_stmt();
				}
				break;

			case 50:
				{
				this.state = 592;
				this.update_stmt();
				}
				break;

			case 51:
				{
				this.state = 593;
				this.vacuum_stmt();
				}
				break;

			case 52:
				{
				this.state = 594;
				this.values_stmt();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public abort_stmt(): Abort_stmtContext {
		let _localctx: Abort_stmtContext = new Abort_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, PostgreSQLParserParser.RULE_abort_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 597;
			this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_stmt(): Alter_stmtContext {
		let _localctx: Alter_stmtContext = new Alter_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, PostgreSQLParserParser.RULE_alter_stmt);
		try {
			this.state = 639;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 3, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 599;
				this.alter_aggregate_stmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 600;
				this.alter_collation_stmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 601;
				this.alter_conversion_stmt();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 602;
				this.alter_database_stmt();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 603;
				this.alter_default_privileges_stmt();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 604;
				this.alter_domain_stmt();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 605;
				this.alter_event_trigger_stmt();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 606;
				this.alter_extension_stmt();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 607;
				this.alter_foreign_data_wrapper_stmt();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 608;
				this.alter_foreign_table_stmt();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 609;
				this.alter_function_stmt();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 610;
				this.alter_group_stmt();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 611;
				this.alter_index_stmt();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 612;
				this.alter_language_stmt();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 613;
				this.alter_large_object_stmt();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 614;
				this.alter_materialize_view_stmt();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 615;
				this.alter_operator_stmt();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 616;
				this.alter_operator_class_stmt();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 617;
				this.alter_operator_family_stmt();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 618;
				this.alter_policy_stmt();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 619;
				this.alter_publication_stmt();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 620;
				this.alter_role_stmt();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 621;
				this.alter_rule_stmt();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 622;
				this.alter_schema_stmt();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 623;
				this.alter_sequence_stmt();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 624;
				this.alter_server_stmt();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 625;
				this.alter_statistics_stmt();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 626;
				this.alter_subscription_stmt();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 627;
				this.alter_system_stmt();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 628;
				this.alter_table_stmt();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 629;
				this.alter_tablespace_stmt();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 630;
				this.alter_text_search_config_stmt();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 631;
				this.alter_text_search_dict_stmt();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 632;
				this.alter_text_search_parser_stmt();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 633;
				this.alter_text_search_template_stmt();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 634;
				this.alter_trigger_stmt();
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 635;
				this.alter_type_stmt();
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 636;
				this.alter_user_stmt();
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 637;
				this.alter_user_mapping_stmt();
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 638;
				this.alter_view_stmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_aggregate_stmt(): Alter_aggregate_stmtContext {
		let _localctx: Alter_aggregate_stmtContext = new Alter_aggregate_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, PostgreSQLParserParser.RULE_alter_aggregate_stmt);
		try {
			this.state = 671;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 4, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 641;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 642;
				this.match(PostgreSQLParserParser.AGGREGATE);
				this.state = 643;
				_localctx._name = this.identifier(0);
				this.state = 644;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 645;
				this.aggregate_signature();
				this.state = 646;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 647;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 648;
				this.match(PostgreSQLParserParser.TO);
				this.state = 649;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 651;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 652;
				this.match(PostgreSQLParserParser.AGGREGATE);
				this.state = 653;
				_localctx._name = this.identifier(0);
				this.state = 654;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 655;
				this.aggregate_signature();
				this.state = 656;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 657;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 658;
				this.match(PostgreSQLParserParser.TO);
				this.state = 659;
				_localctx._new_owner = this.role_name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 661;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 662;
				this.match(PostgreSQLParserParser.AGGREGATE);
				this.state = 663;
				_localctx._name = this.identifier(0);
				this.state = 664;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 665;
				this.aggregate_signature();
				this.state = 666;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 667;
				this.match(PostgreSQLParserParser.SET);
				this.state = 668;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 669;
				_localctx._new_schema = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_collation_stmt(): Alter_collation_stmtContext {
		let _localctx: Alter_collation_stmtContext = new Alter_collation_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, PostgreSQLParserParser.RULE_alter_collation_stmt);
		try {
			this.state = 700;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 5, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 673;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 674;
				this.match(PostgreSQLParserParser.COLLATION);
				this.state = 675;
				_localctx._name = this.name_();
				this.state = 676;
				this.match(PostgreSQLParserParser.REFRESH);
				this.state = 677;
				this.match(PostgreSQLParserParser.VERSION);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 679;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 680;
				this.match(PostgreSQLParserParser.COLLATION);
				this.state = 681;
				_localctx._name = this.name_();
				this.state = 682;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 683;
				this.match(PostgreSQLParserParser.TO);
				this.state = 684;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 686;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 687;
				this.match(PostgreSQLParserParser.COLLATION);
				this.state = 688;
				_localctx._name = this.name_();
				this.state = 689;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 690;
				this.match(PostgreSQLParserParser.TO);
				this.state = 691;
				_localctx._new_owner = this.role_name();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 693;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 694;
				this.match(PostgreSQLParserParser.COLLATION);
				this.state = 695;
				_localctx._name = this.name_();
				this.state = 696;
				this.match(PostgreSQLParserParser.SET);
				this.state = 697;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 698;
				_localctx._new_schema = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_conversion_stmt(): Alter_conversion_stmtContext {
		let _localctx: Alter_conversion_stmtContext = new Alter_conversion_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, PostgreSQLParserParser.RULE_alter_conversion_stmt);
		try {
			this.state = 723;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 6, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 702;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 703;
				this.match(PostgreSQLParserParser.CONVERSION);
				this.state = 704;
				_localctx._name = this.identifier(0);
				this.state = 705;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 706;
				this.match(PostgreSQLParserParser.TO);
				this.state = 707;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 709;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 710;
				this.match(PostgreSQLParserParser.CONVERSION);
				this.state = 711;
				_localctx._name = this.identifier(0);
				this.state = 712;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 713;
				this.match(PostgreSQLParserParser.TO);
				this.state = 714;
				_localctx._new_owner = this.role_name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 716;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 717;
				this.match(PostgreSQLParserParser.CONVERSION);
				this.state = 718;
				_localctx._name = this.identifier(0);
				this.state = 719;
				this.match(PostgreSQLParserParser.SET);
				this.state = 720;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 721;
				_localctx._new_schema = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_database_stmt(): Alter_database_stmtContext {
		let _localctx: Alter_database_stmtContext = new Alter_database_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, PostgreSQLParserParser.RULE_alter_database_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 725;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_default_privileges_stmt(): Alter_default_privileges_stmtContext {
		let _localctx: Alter_default_privileges_stmtContext = new Alter_default_privileges_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, PostgreSQLParserParser.RULE_alter_default_privileges_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 727;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_domain_stmt(): Alter_domain_stmtContext {
		let _localctx: Alter_domain_stmtContext = new Alter_domain_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, PostgreSQLParserParser.RULE_alter_domain_stmt);
		let _la: number;
		try {
			this.state = 805;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 11, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 729;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 730;
				this.match(PostgreSQLParserParser.DOMAIN);
				this.state = 731;
				_localctx._name = this.identifier(0);
				this.state = 737;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.SET:
					{
					this.state = 732;
					this.match(PostgreSQLParserParser.SET);
					this.state = 733;
					this.match(PostgreSQLParserParser.DEFAULT);
					this.state = 734;
					this.expr(0);
					}
					break;
				case PostgreSQLParserParser.DROP:
					{
					this.state = 735;
					this.match(PostgreSQLParserParser.DROP);
					this.state = 736;
					this.match(PostgreSQLParserParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 739;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 740;
				this.match(PostgreSQLParserParser.DOMAIN);
				this.state = 741;
				_localctx._name = this.identifier(0);
				this.state = 742;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.DROP || _la === PostgreSQLParserParser.SET)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 743;
				this.match(PostgreSQLParserParser.NOT);
				this.state = 744;
				this.match(PostgreSQLParserParser.NULL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 746;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 747;
				this.match(PostgreSQLParserParser.DOMAIN);
				this.state = 748;
				_localctx._name = this.identifier(0);
				this.state = 749;
				this.match(PostgreSQLParserParser.ADD);
				this.state = 750;
				this.domain_constraint();
				this.state = 753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.NOT) {
					{
					this.state = 751;
					this.match(PostgreSQLParserParser.NOT);
					this.state = 752;
					this.match(PostgreSQLParserParser.VALID);
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 755;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 756;
				this.match(PostgreSQLParserParser.DOMAIN);
				this.state = 757;
				_localctx._name = this.identifier(0);
				this.state = 758;
				this.match(PostgreSQLParserParser.DROP);
				this.state = 759;
				this.match(PostgreSQLParserParser.CONSTRAINT);
				this.state = 762;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 760;
					this.match(PostgreSQLParserParser.IF);
					this.state = 761;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 764;
				_localctx._constraint_name = this.identifier(0);
				this.state = 766;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
					{
					this.state = 765;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 768;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 769;
				this.match(PostgreSQLParserParser.DOMAIN);
				this.state = 770;
				_localctx._name = this.identifier(0);
				this.state = 771;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 772;
				this.match(PostgreSQLParserParser.CONSTRAINT);
				this.state = 773;
				_localctx._constraint_name = this.identifier(0);
				this.state = 774;
				this.match(PostgreSQLParserParser.TO);
				this.state = 775;
				_localctx._new_constraint_name = this.identifier(0);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 777;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 778;
				this.match(PostgreSQLParserParser.DOMAIN);
				this.state = 779;
				_localctx._name = this.identifier(0);
				this.state = 780;
				this.match(PostgreSQLParserParser.VALIDATE);
				this.state = 781;
				this.match(PostgreSQLParserParser.CONSTRAINT);
				this.state = 782;
				_localctx._constraint_name = this.identifier(0);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 784;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 785;
				this.match(PostgreSQLParserParser.DOMAIN);
				this.state = 786;
				_localctx._name = this.identifier(0);
				this.state = 787;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 788;
				this.match(PostgreSQLParserParser.TO);
				this.state = 789;
				_localctx._new_owner = this.role_name();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 791;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 792;
				this.match(PostgreSQLParserParser.DOMAIN);
				this.state = 793;
				_localctx._name = this.identifier(0);
				this.state = 794;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 795;
				this.match(PostgreSQLParserParser.TO);
				this.state = 796;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 798;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 799;
				this.match(PostgreSQLParserParser.DOMAIN);
				this.state = 800;
				_localctx._name = this.identifier(0);
				this.state = 801;
				this.match(PostgreSQLParserParser.SET);
				this.state = 802;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 803;
				_localctx._new_schema = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_event_trigger_stmt(): Alter_event_trigger_stmtContext {
		let _localctx: Alter_event_trigger_stmtContext = new Alter_event_trigger_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, PostgreSQLParserParser.RULE_alter_event_trigger_stmt);
		let _la: number;
		try {
			this.state = 840;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 14, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 807;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 808;
				this.match(PostgreSQLParserParser.EVENT);
				this.state = 809;
				this.match(PostgreSQLParserParser.TRIGGER);
				this.state = 810;
				_localctx._name = this.identifier(0);
				this.state = 811;
				this.match(PostgreSQLParserParser.DISABLE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 813;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 814;
				this.match(PostgreSQLParserParser.EVENT);
				this.state = 815;
				this.match(PostgreSQLParserParser.TRIGGER);
				this.state = 816;
				_localctx._name = this.identifier(0);
				this.state = 817;
				this.match(PostgreSQLParserParser.ENABLE);
				this.state = 819;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ALWAYS || _la === PostgreSQLParserParser.REPLICA) {
					{
					this.state = 818;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.ALWAYS || _la === PostgreSQLParserParser.REPLICA)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 821;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 822;
				this.match(PostgreSQLParserParser.EVENT);
				this.state = 823;
				this.match(PostgreSQLParserParser.TRIGGER);
				this.state = 824;
				_localctx._name = this.identifier(0);
				this.state = 825;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 826;
				this.match(PostgreSQLParserParser.TO);
				this.state = 830;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 827;
					_localctx._new_owner = this.identifier(0);
					}
					break;
				case PostgreSQLParserParser.CURRENT_USER:
					{
					this.state = 828;
					this.match(PostgreSQLParserParser.CURRENT_USER);
					}
					break;
				case PostgreSQLParserParser.SESSION_USER:
					{
					this.state = 829;
					this.match(PostgreSQLParserParser.SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 832;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 833;
				this.match(PostgreSQLParserParser.EVENT);
				this.state = 834;
				this.match(PostgreSQLParserParser.TRIGGER);
				this.state = 835;
				_localctx._name = this.identifier(0);
				this.state = 836;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 837;
				this.match(PostgreSQLParserParser.TO);
				this.state = 838;
				_localctx._new_name = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_extension_stmt(): Alter_extension_stmtContext {
		let _localctx: Alter_extension_stmtContext = new Alter_extension_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, PostgreSQLParserParser.RULE_alter_extension_stmt);
		let _la: number;
		try {
			this.state = 857;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 16, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 842;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 843;
				this.match(PostgreSQLParserParser.EXTENSION);
				this.state = 844;
				_localctx._name = this.identifier(0);
				this.state = 845;
				this.match(PostgreSQLParserParser.UPDATE);
				this.state = 848;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.TO) {
					{
					this.state = 846;
					this.match(PostgreSQLParserParser.TO);
					this.state = 847;
					_localctx._new_version = this.identifier(0);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 850;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 851;
				this.match(PostgreSQLParserParser.EXTENSION);
				this.state = 852;
				_localctx._name = this.identifier(0);
				this.state = 853;
				this.match(PostgreSQLParserParser.SET);
				this.state = 854;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 855;
				_localctx._new_schema = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_foreign_data_wrapper_stmt(): Alter_foreign_data_wrapper_stmtContext {
		let _localctx: Alter_foreign_data_wrapper_stmtContext = new Alter_foreign_data_wrapper_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, PostgreSQLParserParser.RULE_alter_foreign_data_wrapper_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 859;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_foreign_table_action(): Alter_foreign_table_actionContext {
		let _localctx: Alter_foreign_table_actionContext = new Alter_foreign_table_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, PostgreSQLParserParser.RULE_alter_foreign_table_action);
		let _la: number;
		try {
			this.state = 1033;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 41, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 861;
				this.match(PostgreSQLParserParser.ADD);
				this.state = 863;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLUMN) {
					{
					this.state = 862;
					this.match(PostgreSQLParserParser.COLUMN);
					}
				}

				this.state = 865;
				_localctx._column_name_ = this.column_name();
				this.state = 866;
				_localctx._data_type_ = this.data_type();
				this.state = 869;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLLATE) {
					{
					this.state = 867;
					this.match(PostgreSQLParserParser.COLLATE);
					this.state = 868;
					_localctx._collation = this.identifier(0);
					}
				}

				this.state = 872;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.NOT) {
					{
					this.state = 871;
					_localctx._column_constraints_ = this.column_constraints();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 874;
				this.match(PostgreSQLParserParser.DROP);
				this.state = 876;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLUMN) {
					{
					this.state = 875;
					this.match(PostgreSQLParserParser.COLUMN);
					}
				}

				this.state = 880;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 878;
					this.match(PostgreSQLParserParser.IF);
					this.state = 879;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 882;
				_localctx._column_name_ = this.column_name();
				this.state = 884;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
					{
					this.state = 883;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 886;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 888;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLUMN) {
					{
					this.state = 887;
					this.match(PostgreSQLParserParser.COLUMN);
					}
				}

				this.state = 890;
				_localctx._column_name_ = this.column_name();
				this.state = 893;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.SET) {
					{
					this.state = 891;
					this.match(PostgreSQLParserParser.SET);
					this.state = 892;
					this.match(PostgreSQLParserParser.DATA);
					}
				}

				this.state = 895;
				this.match(PostgreSQLParserParser.TYPE);
				this.state = 896;
				_localctx._data_type_ = this.data_type();
				this.state = 899;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLLATE) {
					{
					this.state = 897;
					this.match(PostgreSQLParserParser.COLLATE);
					this.state = 898;
					_localctx._collation = this.identifier(0);
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 901;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 903;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLUMN) {
					{
					this.state = 902;
					this.match(PostgreSQLParserParser.COLUMN);
					}
				}

				this.state = 905;
				_localctx._column_name_ = this.column_name();
				this.state = 906;
				this.match(PostgreSQLParserParser.SET);
				this.state = 907;
				this.match(PostgreSQLParserParser.DEFAULT);
				this.state = 908;
				this.expr(0);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 910;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 912;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLUMN) {
					{
					this.state = 911;
					this.match(PostgreSQLParserParser.COLUMN);
					}
				}

				this.state = 914;
				_localctx._column_name_ = this.column_name();
				this.state = 915;
				this.match(PostgreSQLParserParser.DROP);
				this.state = 916;
				this.match(PostgreSQLParserParser.DEFAULT);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 918;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 920;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLUMN) {
					{
					this.state = 919;
					this.match(PostgreSQLParserParser.COLUMN);
					}
				}

				this.state = 922;
				_localctx._column_name_ = this.column_name();
				this.state = 923;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.DROP || _la === PostgreSQLParserParser.SET)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 924;
				this.match(PostgreSQLParserParser.NOT);
				this.state = 925;
				this.match(PostgreSQLParserParser.NULL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 927;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 929;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLUMN) {
					{
					this.state = 928;
					this.match(PostgreSQLParserParser.COLUMN);
					}
				}

				this.state = 931;
				_localctx._column_name_ = this.column_name();
				this.state = 932;
				this.match(PostgreSQLParserParser.SET);
				this.state = 933;
				this.match(PostgreSQLParserParser.STATISTICS);
				this.state = 934;
				this.match(PostgreSQLParserParser.INTEGER);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 936;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLUMN) {
					{
					this.state = 937;
					this.match(PostgreSQLParserParser.COLUMN);
					}
				}

				this.state = 940;
				_localctx._column_name_ = this.column_name();
				this.state = 941;
				this.match(PostgreSQLParserParser.SET);
				this.state = 942;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 943;
				_localctx._attribute_values = this.option_list();
				this.state = 944;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 946;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 948;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLUMN) {
					{
					this.state = 947;
					this.match(PostgreSQLParserParser.COLUMN);
					}
				}

				this.state = 950;
				_localctx._column_name_ = this.column_name();
				this.state = 951;
				this.match(PostgreSQLParserParser.RESET);
				this.state = 952;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 953;
				_localctx._attributes = this.identifier_list();
				this.state = 954;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 956;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLUMN) {
					{
					this.state = 957;
					this.match(PostgreSQLParserParser.COLUMN);
					}
				}

				this.state = 960;
				_localctx._column_name_ = this.column_name();
				this.state = 961;
				this.match(PostgreSQLParserParser.SET);
				this.state = 962;
				this.match(PostgreSQLParserParser.STORAGE);
				this.state = 963;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.EXTENDED || _la === PostgreSQLParserParser.EXTERNAL || _la === PostgreSQLParserParser.MAIN || _la === PostgreSQLParserParser.PLAIN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 965;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 967;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLUMN) {
					{
					this.state = 966;
					this.match(PostgreSQLParserParser.COLUMN);
					}
				}

				this.state = 969;
				_localctx._column_name_ = this.column_name();
				this.state = 970;
				this.match(PostgreSQLParserParser.OPTIONS);
				{
				this.state = 972;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ADD || _la === PostgreSQLParserParser.DROP || _la === PostgreSQLParserParser.SET) {
					{
					this.state = 971;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.ADD || _la === PostgreSQLParserParser.DROP || _la === PostgreSQLParserParser.SET)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 974;
				this.match(PostgreSQLParserParser.ADD);
				this.state = 975;
				this.table_constraint();
				this.state = 978;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.NOT) {
					{
					this.state = 976;
					this.match(PostgreSQLParserParser.NOT);
					this.state = 977;
					this.match(PostgreSQLParserParser.VALID);
					}
				}

				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 980;
				this.match(PostgreSQLParserParser.VALIDATE);
				this.state = 981;
				this.match(PostgreSQLParserParser.CONSTRAINT);
				this.state = 982;
				_localctx._constraint_name = this.todo_fill_in();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 983;
				this.match(PostgreSQLParserParser.DROP);
				this.state = 984;
				this.match(PostgreSQLParserParser.CONSTRAINT);
				this.state = 987;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 36, this._ctx) ) {
				case 1:
					{
					this.state = 985;
					this.match(PostgreSQLParserParser.IF);
					this.state = 986;
					this.match(PostgreSQLParserParser.EXISTS);
					}
					break;
				}
				this.state = 989;
				_localctx._constraint_name = this.todo_fill_in();
				this.state = 991;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
					{
					this.state = 990;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 993;
				this.match(PostgreSQLParserParser.DISABLE);
				this.state = 994;
				this.match(PostgreSQLParserParser.TRIGGER);
				this.state = 998;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 38, this._ctx) ) {
				case 1:
					{
					this.state = 995;
					_localctx._trigger_name = this.todo_fill_in();
					}
					break;

				case 2:
					{
					this.state = 996;
					this.match(PostgreSQLParserParser.ALL);
					}
					break;

				case 3:
					{
					this.state = 997;
					this.match(PostgreSQLParserParser.USER);
					}
					break;
				}
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1000;
				this.match(PostgreSQLParserParser.ENABLE);
				this.state = 1001;
				this.match(PostgreSQLParserParser.TRIGGER);
				this.state = 1005;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 39, this._ctx) ) {
				case 1:
					{
					this.state = 1002;
					_localctx._trigger_name = this.todo_fill_in();
					}
					break;

				case 2:
					{
					this.state = 1003;
					this.match(PostgreSQLParserParser.ALL);
					}
					break;

				case 3:
					{
					this.state = 1004;
					this.match(PostgreSQLParserParser.USER);
					}
					break;
				}
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1007;
				this.match(PostgreSQLParserParser.ENABLE);
				this.state = 1008;
				this.match(PostgreSQLParserParser.REPLICA);
				this.state = 1009;
				this.match(PostgreSQLParserParser.TRIGGER);
				this.state = 1010;
				_localctx._trigger_name = this.todo_fill_in();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1011;
				this.match(PostgreSQLParserParser.ENABLE);
				this.state = 1012;
				this.match(PostgreSQLParserParser.ALWAYS);
				this.state = 1013;
				this.match(PostgreSQLParserParser.TRIGGER);
				this.state = 1014;
				_localctx._trigger_name = this.todo_fill_in();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1015;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1016;
				this.match(PostgreSQLParserParser.WITH);
				this.state = 1017;
				this.match(PostgreSQLParserParser.OIDS);
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1018;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1019;
				this.match(PostgreSQLParserParser.WITHOUT);
				this.state = 1020;
				this.match(PostgreSQLParserParser.OIDS);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1021;
				this.match(PostgreSQLParserParser.INHERIT);
				this.state = 1022;
				_localctx._parent_table = this.identifier(0);
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1023;
				this.match(PostgreSQLParserParser.NO);
				this.state = 1024;
				this.match(PostgreSQLParserParser.INHERIT);
				this.state = 1025;
				_localctx._parent_table = this.identifier(0);
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1026;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 1027;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1028;
				_localctx._new_owner = this.role_name();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1029;
				this.match(PostgreSQLParserParser.OPTIONS);
				{
				this.state = 1031;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ADD || _la === PostgreSQLParserParser.DROP || _la === PostgreSQLParserParser.SET) {
					{
					this.state = 1030;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.ADD || _la === PostgreSQLParserParser.DROP || _la === PostgreSQLParserParser.SET)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_foreign_table_action_list(): Alter_foreign_table_action_listContext {
		let _localctx: Alter_foreign_table_action_listContext = new Alter_foreign_table_action_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, PostgreSQLParserParser.RULE_alter_foreign_table_action_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1035;
			this.alter_foreign_table_action();
			this.state = 1040;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 1036;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 1037;
				this.alter_foreign_table_action();
				}
				}
				this.state = 1042;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_foreign_table_stmt(): Alter_foreign_table_stmtContext {
		let _localctx: Alter_foreign_table_stmtContext = new Alter_foreign_table_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, PostgreSQLParserParser.RULE_alter_foreign_table_stmt);
		let _la: number;
		try {
			this.state = 1105;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 52, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1043;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1044;
				this.match(PostgreSQLParserParser.FOREIGN);
				this.state = 1045;
				this.match(PostgreSQLParserParser.TABLE);
				this.state = 1048;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 1046;
					this.match(PostgreSQLParserParser.IF);
					this.state = 1047;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 1051;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ONLY) {
					{
					this.state = 1050;
					this.match(PostgreSQLParserParser.ONLY);
					}
				}

				this.state = 1053;
				_localctx._name = this.identifier(0);
				this.state = 1055;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.STAR) {
					{
					this.state = 1054;
					this.match(PostgreSQLParserParser.STAR);
					}
				}

				this.state = 1057;
				_localctx._actions = this.alter_foreign_table_action_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1059;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1060;
				this.match(PostgreSQLParserParser.FOREIGN);
				this.state = 1061;
				this.match(PostgreSQLParserParser.TABLE);
				this.state = 1064;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 1062;
					this.match(PostgreSQLParserParser.IF);
					this.state = 1063;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 1067;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ONLY) {
					{
					this.state = 1066;
					this.match(PostgreSQLParserParser.ONLY);
					}
				}

				this.state = 1069;
				_localctx._name = this.identifier(0);
				this.state = 1071;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.STAR) {
					{
					this.state = 1070;
					this.match(PostgreSQLParserParser.STAR);
					}
				}

				this.state = 1073;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1075;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COLUMN) {
					{
					this.state = 1074;
					this.match(PostgreSQLParserParser.COLUMN);
					}
				}

				this.state = 1077;
				_localctx._column_name_ = this.column_name();
				this.state = 1078;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1079;
				_localctx._new_column_name = this.identifier(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1081;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1082;
				this.match(PostgreSQLParserParser.FOREIGN);
				this.state = 1083;
				this.match(PostgreSQLParserParser.TABLE);
				this.state = 1086;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 1084;
					this.match(PostgreSQLParserParser.IF);
					this.state = 1085;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 1088;
				_localctx._name = this.identifier(0);
				this.state = 1089;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1090;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1091;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1093;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1094;
				this.match(PostgreSQLParserParser.FOREIGN);
				this.state = 1095;
				this.match(PostgreSQLParserParser.TABLE);
				this.state = 1098;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 1096;
					this.match(PostgreSQLParserParser.IF);
					this.state = 1097;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 1100;
				_localctx._name = this.identifier(0);
				this.state = 1101;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1102;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 1103;
				_localctx._new_schama = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_function_stmt(): Alter_function_stmtContext {
		let _localctx: Alter_function_stmtContext = new Alter_function_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, PostgreSQLParserParser.RULE_alter_function_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1107;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_group_stmt(): Alter_group_stmtContext {
		let _localctx: Alter_group_stmtContext = new Alter_group_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, PostgreSQLParserParser.RULE_alter_group_stmt);
		try {
			this.state = 1130;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 53, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1109;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1110;
				this.match(PostgreSQLParserParser.GROUP);
				this.state = 1111;
				_localctx._role = this.role_name();
				this.state = 1112;
				this.match(PostgreSQLParserParser.ADD);
				this.state = 1113;
				this.match(PostgreSQLParserParser.USER);
				this.state = 1114;
				_localctx._users = this.identifier_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1116;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1117;
				this.match(PostgreSQLParserParser.GROUP);
				this.state = 1118;
				_localctx._role = this.role_name();
				this.state = 1119;
				this.match(PostgreSQLParserParser.DROP);
				this.state = 1120;
				this.match(PostgreSQLParserParser.USER);
				this.state = 1121;
				_localctx._users = this.identifier_list();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1123;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1124;
				this.match(PostgreSQLParserParser.GROUP);
				this.state = 1125;
				_localctx._group_name = this.identifier(0);
				this.state = 1126;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1127;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1128;
				_localctx._new_name = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_index_stmt(): Alter_index_stmtContext {
		let _localctx: Alter_index_stmtContext = new Alter_index_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, PostgreSQLParserParser.RULE_alter_index_stmt);
		let _la: number;
		try {
			this.state = 1202;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 60, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1132;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1133;
				this.match(PostgreSQLParserParser.INDEX);
				this.state = 1136;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 1134;
					this.match(PostgreSQLParserParser.IF);
					this.state = 1135;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 1138;
				_localctx._name = this.identifier(0);
				this.state = 1139;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1140;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1141;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1143;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1144;
				this.match(PostgreSQLParserParser.INDEX);
				this.state = 1147;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 1145;
					this.match(PostgreSQLParserParser.IF);
					this.state = 1146;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 1149;
				_localctx._name = this.identifier(0);
				this.state = 1150;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1151;
				this.match(PostgreSQLParserParser.TABLESPACE);
				this.state = 1152;
				_localctx._tablespace_name = this.identifier(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1154;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1155;
				this.match(PostgreSQLParserParser.INDEX);
				this.state = 1156;
				_localctx._name = this.identifier(0);
				this.state = 1157;
				this.match(PostgreSQLParserParser.DEPENDS);
				this.state = 1158;
				this.match(PostgreSQLParserParser.ON);
				this.state = 1159;
				this.match(PostgreSQLParserParser.EXTENSION);
				this.state = 1160;
				_localctx._extension_name = this.identifier(0);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1162;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1163;
				this.match(PostgreSQLParserParser.INDEX);
				this.state = 1166;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 1164;
					this.match(PostgreSQLParserParser.IF);
					this.state = 1165;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 1168;
				_localctx._name = this.identifier(0);
				this.state = 1169;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1170;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 1171;
				this.option_list();
				this.state = 1172;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1174;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1175;
				this.match(PostgreSQLParserParser.INDEX);
				this.state = 1178;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 1176;
					this.match(PostgreSQLParserParser.IF);
					this.state = 1177;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 1180;
				this.match(PostgreSQLParserParser.RESET);
				this.state = 1181;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 1182;
				this.identifier_list();
				this.state = 1183;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1185;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1186;
				this.match(PostgreSQLParserParser.INDEX);
				this.state = 1187;
				this.match(PostgreSQLParserParser.ALL);
				this.state = 1188;
				this.match(PostgreSQLParserParser.IN);
				this.state = 1189;
				this.match(PostgreSQLParserParser.TABLESPACE);
				this.state = 1190;
				_localctx._name = this.identifier(0);
				this.state = 1194;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.OWNED) {
					{
					this.state = 1191;
					this.match(PostgreSQLParserParser.OWNED);
					this.state = 1192;
					this.match(PostgreSQLParserParser.BY);
					this.state = 1193;
					_localctx._roles = this.identifier_list();
					}
				}

				this.state = 1196;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1197;
				this.match(PostgreSQLParserParser.TABLESPACE);
				this.state = 1198;
				_localctx._new_tablespace = this.identifier(0);
				this.state = 1200;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.NOWAIT) {
					{
					this.state = 1199;
					this.match(PostgreSQLParserParser.NOWAIT);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_language_stmt(): Alter_language_stmtContext {
		let _localctx: Alter_language_stmtContext = new Alter_language_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, PostgreSQLParserParser.RULE_alter_language_stmt);
		let _la: number;
		try {
			this.state = 1227;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 64, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1204;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1206;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.PROCEDURAL) {
					{
					this.state = 1205;
					this.match(PostgreSQLParserParser.PROCEDURAL);
					}
				}

				this.state = 1208;
				this.match(PostgreSQLParserParser.LANGUAGE);
				this.state = 1209;
				_localctx._name = this.identifier(0);
				this.state = 1210;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1211;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1212;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1214;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.PROCEDURAL) {
					{
					this.state = 1215;
					this.match(PostgreSQLParserParser.PROCEDURAL);
					}
				}

				this.state = 1218;
				this.match(PostgreSQLParserParser.LANGUAGE);
				this.state = 1219;
				_localctx._name = this.identifier(0);
				this.state = 1220;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 1221;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1225;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 1222;
					_localctx._new_owner = this.identifier(0);
					}
					break;
				case PostgreSQLParserParser.CURRENT_USER:
					{
					this.state = 1223;
					this.match(PostgreSQLParserParser.CURRENT_USER);
					}
					break;
				case PostgreSQLParserParser.SESSION_USER:
					{
					this.state = 1224;
					this.match(PostgreSQLParserParser.SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_large_object_stmt(): Alter_large_object_stmtContext {
		let _localctx: Alter_large_object_stmtContext = new Alter_large_object_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, PostgreSQLParserParser.RULE_alter_large_object_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1229;
			this.match(PostgreSQLParserParser.ALTER);
			this.state = 1230;
			this.match(PostgreSQLParserParser.LARGE);
			this.state = 1231;
			this.match(PostgreSQLParserParser.OBJECT);
			this.state = 1232;
			_localctx._large_object_oid = this.match(PostgreSQLParserParser.INTEGER_LITERAL);
			this.state = 1233;
			this.match(PostgreSQLParserParser.OWNER);
			this.state = 1234;
			this.match(PostgreSQLParserParser.TO);
			this.state = 1238;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.WHITESPACE:
			case PostgreSQLParserParser.A_:
			case PostgreSQLParserParser.ABORT:
			case PostgreSQLParserParser.ABS:
			case PostgreSQLParserParser.ABSOLUTE:
			case PostgreSQLParserParser.ACCESS:
			case PostgreSQLParserParser.ACTION:
			case PostgreSQLParserParser.ADA:
			case PostgreSQLParserParser.ADD:
			case PostgreSQLParserParser.ADMIN:
			case PostgreSQLParserParser.AFTER:
			case PostgreSQLParserParser.AGGREGATE:
			case PostgreSQLParserParser.ALLOCATE:
			case PostgreSQLParserParser.ALSO:
			case PostgreSQLParserParser.ALTER:
			case PostgreSQLParserParser.ALWAYS:
			case PostgreSQLParserParser.ANY:
			case PostgreSQLParserParser.ARE:
			case PostgreSQLParserParser.ASENSITIVE:
			case PostgreSQLParserParser.ASSERTION:
			case PostgreSQLParserParser.ASSIGNMENT:
			case PostgreSQLParserParser.AT:
			case PostgreSQLParserParser.ATOMIC:
			case PostgreSQLParserParser.ATTRIBUTE:
			case PostgreSQLParserParser.ATTRIBUTES:
			case PostgreSQLParserParser.AVG:
			case PostgreSQLParserParser.BACKWARD:
			case PostgreSQLParserParser.BEFORE:
			case PostgreSQLParserParser.BEGIN:
			case PostgreSQLParserParser.BERNOULLI:
			case PostgreSQLParserParser.BETWEEN:
			case PostgreSQLParserParser.BIGINT:
			case PostgreSQLParserParser.BIT:
			case PostgreSQLParserParser.BIT_LENGTH:
			case PostgreSQLParserParser.BLOB:
			case PostgreSQLParserParser.BOOLEAN:
			case PostgreSQLParserParser.BREADTH:
			case PostgreSQLParserParser.BY:
			case PostgreSQLParserParser.C_:
			case PostgreSQLParserParser.CACHE:
			case PostgreSQLParserParser.CALL:
			case PostgreSQLParserParser.CALLED:
			case PostgreSQLParserParser.CARDINALITY:
			case PostgreSQLParserParser.CASCADE:
			case PostgreSQLParserParser.CASCADED:
			case PostgreSQLParserParser.CATALOG:
			case PostgreSQLParserParser.CATALOG_NAME:
			case PostgreSQLParserParser.CEIL:
			case PostgreSQLParserParser.CEILING:
			case PostgreSQLParserParser.CHAIN:
			case PostgreSQLParserParser.CHAR:
			case PostgreSQLParserParser.CHAR_LENGTH:
			case PostgreSQLParserParser.CHARACTER:
			case PostgreSQLParserParser.CHARACTER_LENGTH:
			case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
			case PostgreSQLParserParser.CHARACTER_SET_NAME:
			case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
			case PostgreSQLParserParser.CHARACTERISTICS:
			case PostgreSQLParserParser.CHARACTERS:
			case PostgreSQLParserParser.CHECKPOINT:
			case PostgreSQLParserParser.CLASS:
			case PostgreSQLParserParser.CLASS_ORIGIN:
			case PostgreSQLParserParser.CLOB:
			case PostgreSQLParserParser.CLOSE:
			case PostgreSQLParserParser.CLUSTER:
			case PostgreSQLParserParser.COALESCE:
			case PostgreSQLParserParser.COBOL:
			case PostgreSQLParserParser.COLLATION_CATALOG:
			case PostgreSQLParserParser.COLLATION_NAME:
			case PostgreSQLParserParser.COLLATION_SCHEMA:
			case PostgreSQLParserParser.COLLECT:
			case PostgreSQLParserParser.COLUMN_NAME:
			case PostgreSQLParserParser.COMMAND_FUNCTION:
			case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
			case PostgreSQLParserParser.COMMENT:
			case PostgreSQLParserParser.COMMIT:
			case PostgreSQLParserParser.COMMITTED:
			case PostgreSQLParserParser.CONDITION:
			case PostgreSQLParserParser.CONDITION_NUMBER:
			case PostgreSQLParserParser.CONNECT:
			case PostgreSQLParserParser.CONNECTION:
			case PostgreSQLParserParser.CONNECTION_NAME:
			case PostgreSQLParserParser.CONSTRAINT_CATALOG:
			case PostgreSQLParserParser.CONSTRAINT_NAME:
			case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
			case PostgreSQLParserParser.CONSTRAINTS:
			case PostgreSQLParserParser.CONSTRUCTOR:
			case PostgreSQLParserParser.CONTAINS:
			case PostgreSQLParserParser.CONTINUE:
			case PostgreSQLParserParser.CONVERSION:
			case PostgreSQLParserParser.CONVERT:
			case PostgreSQLParserParser.COPY:
			case PostgreSQLParserParser.CORR:
			case PostgreSQLParserParser.CORRESPONDING:
			case PostgreSQLParserParser.COUNT:
			case PostgreSQLParserParser.COVAR_POP:
			case PostgreSQLParserParser.COVAR_SAMP:
			case PostgreSQLParserParser.CSV:
			case PostgreSQLParserParser.CUBE:
			case PostgreSQLParserParser.CUME_DIST:
			case PostgreSQLParserParser.CURRENT:
			case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
			case PostgreSQLParserParser.CURRENT_PATH:
			case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case PostgreSQLParserParser.CURSOR:
			case PostgreSQLParserParser.CURSOR_NAME:
			case PostgreSQLParserParser.CYCLE:
			case PostgreSQLParserParser.DATA:
			case PostgreSQLParserParser.DATABASE:
			case PostgreSQLParserParser.DATE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
			case PostgreSQLParserParser.DAY:
			case PostgreSQLParserParser.DEALLOCATE:
			case PostgreSQLParserParser.DEC:
			case PostgreSQLParserParser.DECIMAL:
			case PostgreSQLParserParser.DECLARE:
			case PostgreSQLParserParser.DEFAULTS:
			case PostgreSQLParserParser.DEFERRED:
			case PostgreSQLParserParser.DEFINED:
			case PostgreSQLParserParser.DEFINER:
			case PostgreSQLParserParser.DEGREE:
			case PostgreSQLParserParser.DELETE:
			case PostgreSQLParserParser.DELIMITER:
			case PostgreSQLParserParser.DELIMITERS:
			case PostgreSQLParserParser.DENSE_RANK:
			case PostgreSQLParserParser.DEPTH:
			case PostgreSQLParserParser.DEREF:
			case PostgreSQLParserParser.DERIVED:
			case PostgreSQLParserParser.DESCRIBE:
			case PostgreSQLParserParser.DESCRIPTOR:
			case PostgreSQLParserParser.DETERMINISTIC:
			case PostgreSQLParserParser.DIAGNOSTICS:
			case PostgreSQLParserParser.DICTIONARY:
			case PostgreSQLParserParser.DISCONNECT:
			case PostgreSQLParserParser.DISPATCH:
			case PostgreSQLParserParser.DOMAIN:
			case PostgreSQLParserParser.DOUBLE:
			case PostgreSQLParserParser.DYNAMIC:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
			case PostgreSQLParserParser.EACH:
			case PostgreSQLParserParser.ELEMENT:
			case PostgreSQLParserParser.ENCODING:
			case PostgreSQLParserParser.ENCRYPTED:
			case PostgreSQLParserParser.END:
			case PostgreSQLParserParser.EQUALS:
			case PostgreSQLParserParser.ESCAPE:
			case PostgreSQLParserParser.EVERY:
			case PostgreSQLParserParser.EXCEPTION:
			case PostgreSQLParserParser.EXCLUDE:
			case PostgreSQLParserParser.EXCLUDING:
			case PostgreSQLParserParser.EXCLUSIVE:
			case PostgreSQLParserParser.EXEC:
			case PostgreSQLParserParser.EXECUTE:
			case PostgreSQLParserParser.EXISTS:
			case PostgreSQLParserParser.EXP:
			case PostgreSQLParserParser.EXPLAIN:
			case PostgreSQLParserParser.EXTENSION:
			case PostgreSQLParserParser.EXTERNAL:
			case PostgreSQLParserParser.EXTRACT:
			case PostgreSQLParserParser.FILTER:
			case PostgreSQLParserParser.FINAL:
			case PostgreSQLParserParser.FIRST:
			case PostgreSQLParserParser.FLOAT:
			case PostgreSQLParserParser.FLOOR:
			case PostgreSQLParserParser.FOLLOWING:
			case PostgreSQLParserParser.FORCE:
			case PostgreSQLParserParser.FORMAT:
			case PostgreSQLParserParser.FORTRAN:
			case PostgreSQLParserParser.FORWARD:
			case PostgreSQLParserParser.FOUND:
			case PostgreSQLParserParser.FREE:
			case PostgreSQLParserParser.FUNCTION:
			case PostgreSQLParserParser.FUSION:
			case PostgreSQLParserParser.G_:
			case PostgreSQLParserParser.GENERAL:
			case PostgreSQLParserParser.GENERATED:
			case PostgreSQLParserParser.GET:
			case PostgreSQLParserParser.GLOBAL:
			case PostgreSQLParserParser.GO:
			case PostgreSQLParserParser.GOTO:
			case PostgreSQLParserParser.GRANTED:
			case PostgreSQLParserParser.GREATEST:
			case PostgreSQLParserParser.GROUPING:
			case PostgreSQLParserParser.HANDLER:
			case PostgreSQLParserParser.HIERARCHY:
			case PostgreSQLParserParser.HOLD:
			case PostgreSQLParserParser.HOST:
			case PostgreSQLParserParser.HOUR:
			case PostgreSQLParserParser.IDENTITY:
			case PostgreSQLParserParser.IGNORE:
			case PostgreSQLParserParser.IMMEDIATE:
			case PostgreSQLParserParser.IMMUTABLE:
			case PostgreSQLParserParser.IMPLEMENTATION:
			case PostgreSQLParserParser.IMPLICIT:
			case PostgreSQLParserParser.INCLUDING:
			case PostgreSQLParserParser.INCREMENT:
			case PostgreSQLParserParser.INDEX:
			case PostgreSQLParserParser.INDICATOR:
			case PostgreSQLParserParser.INHERITS:
			case PostgreSQLParserParser.INOUT:
			case PostgreSQLParserParser.INPUT:
			case PostgreSQLParserParser.INSENSITIVE:
			case PostgreSQLParserParser.INSERT:
			case PostgreSQLParserParser.INSTANCE:
			case PostgreSQLParserParser.INSTANTIABLE:
			case PostgreSQLParserParser.INSTEAD:
			case PostgreSQLParserParser.INT:
			case PostgreSQLParserParser.INTEGER:
			case PostgreSQLParserParser.INTERSECTION:
			case PostgreSQLParserParser.INTERVAL:
			case PostgreSQLParserParser.INVOKER:
			case PostgreSQLParserParser.ISOLATION:
			case PostgreSQLParserParser.K_:
			case PostgreSQLParserParser.KEY:
			case PostgreSQLParserParser.KEY_MEMBER:
			case PostgreSQLParserParser.KEY_TYPE:
			case PostgreSQLParserParser.LANGUAGE:
			case PostgreSQLParserParser.LARGE:
			case PostgreSQLParserParser.LAST:
			case PostgreSQLParserParser.LEAST:
			case PostgreSQLParserParser.LEFT:
			case PostgreSQLParserParser.LENGTH:
			case PostgreSQLParserParser.LEVEL:
			case PostgreSQLParserParser.LISTEN:
			case PostgreSQLParserParser.LN:
			case PostgreSQLParserParser.LOAD:
			case PostgreSQLParserParser.LOCAL:
			case PostgreSQLParserParser.LOCATION:
			case PostgreSQLParserParser.LOCATOR:
			case PostgreSQLParserParser.LOCK:
			case PostgreSQLParserParser.LOCKED:
			case PostgreSQLParserParser.LOWER:
			case PostgreSQLParserParser.M_:
			case PostgreSQLParserParser.MAP:
			case PostgreSQLParserParser.MATCH:
			case PostgreSQLParserParser.MATCHED:
			case PostgreSQLParserParser.MAX:
			case PostgreSQLParserParser.MAXVALUE:
			case PostgreSQLParserParser.MEMBER:
			case PostgreSQLParserParser.MERGE:
			case PostgreSQLParserParser.MESSAGE_LENGTH:
			case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
			case PostgreSQLParserParser.MESSAGE_TEXT:
			case PostgreSQLParserParser.METHOD:
			case PostgreSQLParserParser.MIN:
			case PostgreSQLParserParser.MINUTE:
			case PostgreSQLParserParser.MINVALUE:
			case PostgreSQLParserParser.MOD:
			case PostgreSQLParserParser.MODE:
			case PostgreSQLParserParser.MODIFIES:
			case PostgreSQLParserParser.MODULE:
			case PostgreSQLParserParser.MONTH:
			case PostgreSQLParserParser.MORE_:
			case PostgreSQLParserParser.MOVE:
			case PostgreSQLParserParser.MULTISET:
			case PostgreSQLParserParser.MUMPS:
			case PostgreSQLParserParser.NAME:
			case PostgreSQLParserParser.NAMES:
			case PostgreSQLParserParser.NATIONAL:
			case PostgreSQLParserParser.NCHAR:
			case PostgreSQLParserParser.NCLOB:
			case PostgreSQLParserParser.NESTING:
			case PostgreSQLParserParser.NEW:
			case PostgreSQLParserParser.NEXT:
			case PostgreSQLParserParser.NO:
			case PostgreSQLParserParser.NONE:
			case PostgreSQLParserParser.NORMALIZE:
			case PostgreSQLParserParser.NORMALIZED:
			case PostgreSQLParserParser.NOTHING:
			case PostgreSQLParserParser.NOTIFY:
			case PostgreSQLParserParser.NOWAIT:
			case PostgreSQLParserParser.NULLABLE:
			case PostgreSQLParserParser.NULLIF:
			case PostgreSQLParserParser.NULLS:
			case PostgreSQLParserParser.NUMBER:
			case PostgreSQLParserParser.NUMERIC:
			case PostgreSQLParserParser.OBJECT:
			case PostgreSQLParserParser.OCTET_LENGTH:
			case PostgreSQLParserParser.OCTETS:
			case PostgreSQLParserParser.OF:
			case PostgreSQLParserParser.OFF:
			case PostgreSQLParserParser.OIDS:
			case PostgreSQLParserParser.OLD:
			case PostgreSQLParserParser.OPEN:
			case PostgreSQLParserParser.OPERATOR:
			case PostgreSQLParserParser.OPTION:
			case PostgreSQLParserParser.OPTIONS:
			case PostgreSQLParserParser.ORDERING:
			case PostgreSQLParserParser.ORDINALITY:
			case PostgreSQLParserParser.OTHERS:
			case PostgreSQLParserParser.OUT:
			case PostgreSQLParserParser.OUTPUT:
			case PostgreSQLParserParser.OVER:
			case PostgreSQLParserParser.OVERLAY:
			case PostgreSQLParserParser.OVERRIDING:
			case PostgreSQLParserParser.OWNER:
			case PostgreSQLParserParser.PAD:
			case PostgreSQLParserParser.PARAMETER:
			case PostgreSQLParserParser.PARAMETER_MODE:
			case PostgreSQLParserParser.PARAMETER_NAME:
			case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
			case PostgreSQLParserParser.PARTIAL:
			case PostgreSQLParserParser.PARTITION:
			case PostgreSQLParserParser.PASCAL:
			case PostgreSQLParserParser.PASSWORD:
			case PostgreSQLParserParser.PATH:
			case PostgreSQLParserParser.PERCENT_RANK:
			case PostgreSQLParserParser.PERCENTILE_CONT:
			case PostgreSQLParserParser.PERCENTILE_DISC:
			case PostgreSQLParserParser.PLAIN:
			case PostgreSQLParserParser.PLI:
			case PostgreSQLParserParser.POSITION:
			case PostgreSQLParserParser.POWER:
			case PostgreSQLParserParser.PRECEDING:
			case PostgreSQLParserParser.PRECISION:
			case PostgreSQLParserParser.PREPARE:
			case PostgreSQLParserParser.PRESERVE:
			case PostgreSQLParserParser.PRIOR:
			case PostgreSQLParserParser.PRIVILEGES:
			case PostgreSQLParserParser.PROCEDURAL:
			case PostgreSQLParserParser.PROCEDURE:
			case PostgreSQLParserParser.PUBLIC:
			case PostgreSQLParserParser.QUOTE:
			case PostgreSQLParserParser.RANGE:
			case PostgreSQLParserParser.RANK:
			case PostgreSQLParserParser.READ:
			case PostgreSQLParserParser.READS:
			case PostgreSQLParserParser.REAL:
			case PostgreSQLParserParser.RECHECK:
			case PostgreSQLParserParser.RECURSIVE:
			case PostgreSQLParserParser.REF:
			case PostgreSQLParserParser.REFERENCING:
			case PostgreSQLParserParser.REFRESH:
			case PostgreSQLParserParser.REGR_AVGX:
			case PostgreSQLParserParser.REGR_AVGY:
			case PostgreSQLParserParser.REGR_COUNT:
			case PostgreSQLParserParser.REGR_INTERCEPT:
			case PostgreSQLParserParser.REGR_SLOPE:
			case PostgreSQLParserParser.REGR_SXX:
			case PostgreSQLParserParser.REGR_SXY:
			case PostgreSQLParserParser.REGR_SYY:
			case PostgreSQLParserParser.REINDEX:
			case PostgreSQLParserParser.RELATIVE:
			case PostgreSQLParserParser.RELEASE:
			case PostgreSQLParserParser.RENAME:
			case PostgreSQLParserParser.REPEATABLE:
			case PostgreSQLParserParser.REPLACE:
			case PostgreSQLParserParser.RESET:
			case PostgreSQLParserParser.RESTART:
			case PostgreSQLParserParser.RESTRICT:
			case PostgreSQLParserParser.RESULT:
			case PostgreSQLParserParser.RETURN:
			case PostgreSQLParserParser.RETURNED_CARDINALITY:
			case PostgreSQLParserParser.RETURNED_LENGTH:
			case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
			case PostgreSQLParserParser.RETURNED_SQLSTATE:
			case PostgreSQLParserParser.RETURNS:
			case PostgreSQLParserParser.REVOKE:
			case PostgreSQLParserParser.RIGHT:
			case PostgreSQLParserParser.ROLE:
			case PostgreSQLParserParser.ROLLBACK:
			case PostgreSQLParserParser.ROLLUP:
			case PostgreSQLParserParser.ROUTINE:
			case PostgreSQLParserParser.ROUTINE_CATALOG:
			case PostgreSQLParserParser.ROUTINE_NAME:
			case PostgreSQLParserParser.ROUTINE_SCHEMA:
			case PostgreSQLParserParser.ROW:
			case PostgreSQLParserParser.ROW_COUNT:
			case PostgreSQLParserParser.ROW_NUMBER:
			case PostgreSQLParserParser.ROWS:
			case PostgreSQLParserParser.RULE:
			case PostgreSQLParserParser.SAVEPOINT:
			case PostgreSQLParserParser.SCALE:
			case PostgreSQLParserParser.SCHEMA:
			case PostgreSQLParserParser.SCHEMA_NAME:
			case PostgreSQLParserParser.SCOPE:
			case PostgreSQLParserParser.SCOPE_CATALOG:
			case PostgreSQLParserParser.SCOPE_NAME:
			case PostgreSQLParserParser.SCOPE_SCHEMA:
			case PostgreSQLParserParser.SCROLL:
			case PostgreSQLParserParser.SEARCH:
			case PostgreSQLParserParser.SECOND:
			case PostgreSQLParserParser.SECTION:
			case PostgreSQLParserParser.SECURITY:
			case PostgreSQLParserParser.SELF:
			case PostgreSQLParserParser.SENSITIVE:
			case PostgreSQLParserParser.SEQUENCE:
			case PostgreSQLParserParser.SEQUENCES:
			case PostgreSQLParserParser.SERIALIZABLE:
			case PostgreSQLParserParser.SERVER_NAME:
			case PostgreSQLParserParser.SESSION:
			case PostgreSQLParserParser.SET:
			case PostgreSQLParserParser.SETOF:
			case PostgreSQLParserParser.SETS:
			case PostgreSQLParserParser.SHARE:
			case PostgreSQLParserParser.SHOW:
			case PostgreSQLParserParser.SIMPLE:
			case PostgreSQLParserParser.SIZE:
			case PostgreSQLParserParser.SMALLINT:
			case PostgreSQLParserParser.SOME:
			case PostgreSQLParserParser.SOURCE:
			case PostgreSQLParserParser.SPACE:
			case PostgreSQLParserParser.SPECIFIC:
			case PostgreSQLParserParser.SPECIFIC_NAME:
			case PostgreSQLParserParser.SPECIFICTYPE:
			case PostgreSQLParserParser.SQL:
			case PostgreSQLParserParser.SQLCODE:
			case PostgreSQLParserParser.SQLERROR:
			case PostgreSQLParserParser.SQLEXCEPTION:
			case PostgreSQLParserParser.SQLSTATE:
			case PostgreSQLParserParser.SQLWARNING:
			case PostgreSQLParserParser.SQRT:
			case PostgreSQLParserParser.STABLE:
			case PostgreSQLParserParser.START:
			case PostgreSQLParserParser.STATE:
			case PostgreSQLParserParser.STATEMENT:
			case PostgreSQLParserParser.STATIC:
			case PostgreSQLParserParser.STATISTICS:
			case PostgreSQLParserParser.STDDEV_POP:
			case PostgreSQLParserParser.STDDEV_SAMP:
			case PostgreSQLParserParser.STDIN:
			case PostgreSQLParserParser.STDOUT:
			case PostgreSQLParserParser.STORAGE:
			case PostgreSQLParserParser.STRICT:
			case PostgreSQLParserParser.STRUCTURE:
			case PostgreSQLParserParser.STYLE:
			case PostgreSQLParserParser.SUBCLASS_ORIGIN:
			case PostgreSQLParserParser.SUBMULTISET:
			case PostgreSQLParserParser.SUBSTRING:
			case PostgreSQLParserParser.SUM:
			case PostgreSQLParserParser.SYSID:
			case PostgreSQLParserParser.SYSTEM:
			case PostgreSQLParserParser.SYSTEM_USER:
			case PostgreSQLParserParser.TABLE_NAME:
			case PostgreSQLParserParser.TABLESPACE:
			case PostgreSQLParserParser.TEMP:
			case PostgreSQLParserParser.TEMPLATE:
			case PostgreSQLParserParser.TEMPORARY:
			case PostgreSQLParserParser.TIES:
			case PostgreSQLParserParser.TIME:
			case PostgreSQLParserParser.TIMESTAMP:
			case PostgreSQLParserParser.TIMEZONE_HOUR:
			case PostgreSQLParserParser.TIMEZONE_MINUTE:
			case PostgreSQLParserParser.TOP_LEVEL_COUNT:
			case PostgreSQLParserParser.TRANSACTION:
			case PostgreSQLParserParser.TRANSACTION_ACTIVE:
			case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
			case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
			case PostgreSQLParserParser.TRANSFORM:
			case PostgreSQLParserParser.TRANSFORMS:
			case PostgreSQLParserParser.TRANSLATE:
			case PostgreSQLParserParser.TRANSLATION:
			case PostgreSQLParserParser.TREAT:
			case PostgreSQLParserParser.TRIGGER:
			case PostgreSQLParserParser.TRIGGER_CATALOG:
			case PostgreSQLParserParser.TRIGGER_NAME:
			case PostgreSQLParserParser.TRIGGER_SCHEMA:
			case PostgreSQLParserParser.TRIM:
			case PostgreSQLParserParser.TRUE:
			case PostgreSQLParserParser.TRUNCATE:
			case PostgreSQLParserParser.TRUSTED:
			case PostgreSQLParserParser.TYPE:
			case PostgreSQLParserParser.UESCAPE:
			case PostgreSQLParserParser.UNBOUNDED:
			case PostgreSQLParserParser.UNCOMMITTED:
			case PostgreSQLParserParser.UNDER:
			case PostgreSQLParserParser.UNENCRYPTED:
			case PostgreSQLParserParser.UNKNOWN:
			case PostgreSQLParserParser.UNLISTEN:
			case PostgreSQLParserParser.UNNAMED:
			case PostgreSQLParserParser.UNNEST:
			case PostgreSQLParserParser.UNTIL:
			case PostgreSQLParserParser.UPDATE:
			case PostgreSQLParserParser.UPPER:
			case PostgreSQLParserParser.USAGE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
			case PostgreSQLParserParser.VACUUM:
			case PostgreSQLParserParser.VALID:
			case PostgreSQLParserParser.VALIDATOR:
			case PostgreSQLParserParser.VALUE:
			case PostgreSQLParserParser.VALUES:
			case PostgreSQLParserParser.VAR_POP:
			case PostgreSQLParserParser.VAR_SAMP:
			case PostgreSQLParserParser.VARCHAR:
			case PostgreSQLParserParser.VARYING:
			case PostgreSQLParserParser.VIEW:
			case PostgreSQLParserParser.VOLATILE:
			case PostgreSQLParserParser.WHENEVER:
			case PostgreSQLParserParser.WIDTH_BUCKET:
			case PostgreSQLParserParser.WITHIN:
			case PostgreSQLParserParser.WITHOUT:
			case PostgreSQLParserParser.WORK:
			case PostgreSQLParserParser.WRITE:
			case PostgreSQLParserParser.YEAR:
			case PostgreSQLParserParser.ZONE:
			case PostgreSQLParserParser.ABSTIME:
			case PostgreSQLParserParser.BIGSERIAL:
			case PostgreSQLParserParser.BIT_VARYING:
			case PostgreSQLParserParser.BOOL:
			case PostgreSQLParserParser.BOX:
			case PostgreSQLParserParser.BYTEA:
			case PostgreSQLParserParser.CHARACTER_VARYING:
			case PostgreSQLParserParser.CIDR:
			case PostgreSQLParserParser.CIRCLE:
			case PostgreSQLParserParser.FLOAT4:
			case PostgreSQLParserParser.FLOAT8:
			case PostgreSQLParserParser.INET:
			case PostgreSQLParserParser.INT2:
			case PostgreSQLParserParser.INT4:
			case PostgreSQLParserParser.INT8:
			case PostgreSQLParserParser.JSON:
			case PostgreSQLParserParser.JSONB:
			case PostgreSQLParserParser.LINE:
			case PostgreSQLParserParser.LSEG:
			case PostgreSQLParserParser.MACADDR:
			case PostgreSQLParserParser.MACADDR8:
			case PostgreSQLParserParser.MONEY:
			case PostgreSQLParserParser.PG_LSN:
			case PostgreSQLParserParser.POINT:
			case PostgreSQLParserParser.POLYGON:
			case PostgreSQLParserParser.RELTIME:
			case PostgreSQLParserParser.SERIAL:
			case PostgreSQLParserParser.SERIAL2:
			case PostgreSQLParserParser.SERIAL4:
			case PostgreSQLParserParser.SERIAL8:
			case PostgreSQLParserParser.SMALLSERIAL:
			case PostgreSQLParserParser.TEXT:
			case PostgreSQLParserParser.TIMESTAMPTZ:
			case PostgreSQLParserParser.TIMETZ:
			case PostgreSQLParserParser.TSQUERY:
			case PostgreSQLParserParser.TSVECTOR:
			case PostgreSQLParserParser.TXID_SNAPSHOT:
			case PostgreSQLParserParser.UUID:
			case PostgreSQLParserParser.VARBIT:
			case PostgreSQLParserParser.XML:
			case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
			case PostgreSQLParserParser.IDENTIFIER:
			case PostgreSQLParserParser.IDENTIFIER_UNICODE:
				{
				this.state = 1235;
				_localctx._new_owner = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.CURRENT_USER:
				{
				this.state = 1236;
				this.match(PostgreSQLParserParser.CURRENT_USER);
				}
				break;
			case PostgreSQLParserParser.SESSION_USER:
				{
				this.state = 1237;
				this.match(PostgreSQLParserParser.SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_materialize_view_stmt(): Alter_materialize_view_stmtContext {
		let _localctx: Alter_materialize_view_stmtContext = new Alter_materialize_view_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, PostgreSQLParserParser.RULE_alter_materialize_view_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1240;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_operator_stmt(): Alter_operator_stmtContext {
		let _localctx: Alter_operator_stmtContext = new Alter_operator_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, PostgreSQLParserParser.RULE_alter_operator_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1242;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_operator_class_stmt(): Alter_operator_class_stmtContext {
		let _localctx: Alter_operator_class_stmtContext = new Alter_operator_class_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, PostgreSQLParserParser.RULE_alter_operator_class_stmt);
		try {
			this.state = 1277;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 67, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1244;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1245;
				this.match(PostgreSQLParserParser.OPERATOR);
				this.state = 1246;
				this.match(PostgreSQLParserParser.CLASS);
				this.state = 1247;
				_localctx._name = this.identifier(0);
				this.state = 1248;
				this.match(PostgreSQLParserParser.USING);
				this.state = 1249;
				this.index_method();
				this.state = 1250;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1251;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1252;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1254;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1255;
				this.match(PostgreSQLParserParser.OPERATOR);
				this.state = 1256;
				this.match(PostgreSQLParserParser.CLASS);
				this.state = 1257;
				_localctx._name = this.identifier(0);
				this.state = 1258;
				this.match(PostgreSQLParserParser.USING);
				this.state = 1259;
				this.index_method();
				this.state = 1260;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 1261;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1265;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 1262;
					_localctx._new_owner = this.identifier(0);
					}
					break;
				case PostgreSQLParserParser.CURRENT_USER:
					{
					this.state = 1263;
					this.match(PostgreSQLParserParser.CURRENT_USER);
					}
					break;
				case PostgreSQLParserParser.SESSION_USER:
					{
					this.state = 1264;
					this.match(PostgreSQLParserParser.SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1267;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1268;
				this.match(PostgreSQLParserParser.OPERATOR);
				this.state = 1269;
				this.match(PostgreSQLParserParser.CLASS);
				this.state = 1270;
				_localctx._name = this.identifier(0);
				this.state = 1271;
				this.match(PostgreSQLParserParser.USING);
				this.state = 1272;
				this.index_method();
				this.state = 1273;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1274;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 1275;
				_localctx._new_schema = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_operator_family_stmt(): Alter_operator_family_stmtContext {
		let _localctx: Alter_operator_family_stmtContext = new Alter_operator_family_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, PostgreSQLParserParser.RULE_alter_operator_family_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1279;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_policy_stmt(): Alter_policy_stmtContext {
		let _localctx: Alter_policy_stmtContext = new Alter_policy_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, PostgreSQLParserParser.RULE_alter_policy_stmt);
		let _la: number;
		try {
			this.state = 1308;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 71, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1281;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1282;
				this.match(PostgreSQLParserParser.POLICY);
				this.state = 1283;
				_localctx._name = this.identifier(0);
				this.state = 1284;
				this.match(PostgreSQLParserParser.ON);
				this.state = 1285;
				_localctx._table_name = this.identifier(0);
				this.state = 1286;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1287;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1288;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1290;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1291;
				this.match(PostgreSQLParserParser.POLICY);
				this.state = 1292;
				_localctx._name = this.identifier(0);
				this.state = 1293;
				this.match(PostgreSQLParserParser.ON);
				this.state = 1294;
				_localctx._table_name = this.identifier(0);
				this.state = 1297;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.TO) {
					{
					this.state = 1295;
					this.match(PostgreSQLParserParser.TO);
					this.state = 1296;
					_localctx._roles = this.role_name_list();
					}
				}

				this.state = 1301;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.USING) {
					{
					this.state = 1299;
					this.match(PostgreSQLParserParser.USING);
					this.state = 1300;
					this.predicate(0);
					}
				}

				this.state = 1306;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.WITH) {
					{
					this.state = 1303;
					this.match(PostgreSQLParserParser.WITH);
					this.state = 1304;
					this.match(PostgreSQLParserParser.CHECK);
					this.state = 1305;
					this.predicate(0);
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_publication_stmt(): Alter_publication_stmtContext {
		let _localctx: Alter_publication_stmtContext = new Alter_publication_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, PostgreSQLParserParser.RULE_alter_publication_stmt);
		let _la: number;
		try {
			this.state = 1362;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 75, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1310;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1311;
				this.match(PostgreSQLParserParser.PUBLICATION);
				this.state = 1312;
				_localctx._name = this.identifier(0);
				this.state = 1313;
				this.match(PostgreSQLParserParser.ADD);
				this.state = 1314;
				this.match(PostgreSQLParserParser.TABLE);
				this.state = 1316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ONLY) {
					{
					this.state = 1315;
					this.match(PostgreSQLParserParser.ONLY);
					}
				}

				this.state = 1318;
				_localctx._table_names = this.identifier_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1320;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1321;
				this.match(PostgreSQLParserParser.PUBLICATION);
				this.state = 1322;
				_localctx._name = this.identifier(0);
				this.state = 1323;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1324;
				this.match(PostgreSQLParserParser.TABLE);
				this.state = 1326;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ONLY) {
					{
					this.state = 1325;
					this.match(PostgreSQLParserParser.ONLY);
					}
				}

				this.state = 1328;
				_localctx._table_names = this.identifier_list();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1330;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1331;
				this.match(PostgreSQLParserParser.PUBLICATION);
				this.state = 1332;
				_localctx._name = this.identifier(0);
				this.state = 1333;
				this.match(PostgreSQLParserParser.DROP);
				this.state = 1334;
				this.match(PostgreSQLParserParser.TABLE);
				this.state = 1336;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ONLY) {
					{
					this.state = 1335;
					this.match(PostgreSQLParserParser.ONLY);
					}
				}

				this.state = 1338;
				_localctx._table_names = this.identifier_list();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1340;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1341;
				this.match(PostgreSQLParserParser.PUBLICATION);
				this.state = 1342;
				_localctx._name = this.identifier(0);
				this.state = 1343;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1344;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 1345;
				this.option_list();
				this.state = 1346;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1348;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1349;
				this.match(PostgreSQLParserParser.PUBLICATION);
				this.state = 1350;
				_localctx._name = this.identifier(0);
				this.state = 1351;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 1352;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1353;
				_localctx._new_owner = this.role_name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1355;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1356;
				this.match(PostgreSQLParserParser.PUBLICATION);
				this.state = 1357;
				_localctx._name = this.identifier(0);
				this.state = 1358;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1359;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1360;
				_localctx._new_name = this.name_();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_role_options(): Alter_role_optionsContext {
		let _localctx: Alter_role_optionsContext = new Alter_role_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, PostgreSQLParserParser.RULE_alter_role_options);
		let _la: number;
		try {
			this.state = 1389;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.SUPERUSER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1364;
				this.match(PostgreSQLParserParser.SUPERUSER);
				}
				break;
			case PostgreSQLParserParser.NOSUPERUSER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1365;
				this.match(PostgreSQLParserParser.NOSUPERUSER);
				}
				break;
			case PostgreSQLParserParser.CREATEDB:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1366;
				this.match(PostgreSQLParserParser.CREATEDB);
				}
				break;
			case PostgreSQLParserParser.NOCREATEDB:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1367;
				this.match(PostgreSQLParserParser.NOCREATEDB);
				}
				break;
			case PostgreSQLParserParser.CREATEROLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1368;
				this.match(PostgreSQLParserParser.CREATEROLE);
				}
				break;
			case PostgreSQLParserParser.NOCREATEROLE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1369;
				this.match(PostgreSQLParserParser.NOCREATEROLE);
				}
				break;
			case PostgreSQLParserParser.INHERIT:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1370;
				this.match(PostgreSQLParserParser.INHERIT);
				}
				break;
			case PostgreSQLParserParser.NOINHERIT:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1371;
				this.match(PostgreSQLParserParser.NOINHERIT);
				}
				break;
			case PostgreSQLParserParser.LOGIN:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1372;
				this.match(PostgreSQLParserParser.LOGIN);
				}
				break;
			case PostgreSQLParserParser.NOLOGIN:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1373;
				this.match(PostgreSQLParserParser.NOLOGIN);
				}
				break;
			case PostgreSQLParserParser.REPLICATION:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1374;
				this.match(PostgreSQLParserParser.REPLICATION);
				}
				break;
			case PostgreSQLParserParser.NOREPLICATION:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1375;
				this.match(PostgreSQLParserParser.NOREPLICATION);
				}
				break;
			case PostgreSQLParserParser.BYPASSRLS:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1376;
				this.match(PostgreSQLParserParser.BYPASSRLS);
				}
				break;
			case PostgreSQLParserParser.NOBYPASSRLS:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1377;
				this.match(PostgreSQLParserParser.NOBYPASSRLS);
				}
				break;
			case PostgreSQLParserParser.CONNECTION:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1378;
				this.match(PostgreSQLParserParser.CONNECTION);
				this.state = 1379;
				this.match(PostgreSQLParserParser.LIMIT);
				this.state = 1380;
				_localctx._connlimit = this.match(PostgreSQLParserParser.INTEGER);
				}
				break;
			case PostgreSQLParserParser.ENCRYPTED:
			case PostgreSQLParserParser.PASSWORD:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1382;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ENCRYPTED) {
					{
					this.state = 1381;
					this.match(PostgreSQLParserParser.ENCRYPTED);
					}
				}

				this.state = 1384;
				this.match(PostgreSQLParserParser.PASSWORD);
				this.state = 1385;
				this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
				}
				break;
			case PostgreSQLParserParser.VALID:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1386;
				this.match(PostgreSQLParserParser.VALID);
				this.state = 1387;
				this.match(PostgreSQLParserParser.UNTIL);
				this.state = 1388;
				this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_role_stmt(): Alter_role_stmtContext {
		let _localctx: Alter_role_stmtContext = new Alter_role_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, PostgreSQLParserParser.RULE_alter_role_stmt);
		let _la: number;
		try {
			this.state = 1469;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 89, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1391;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1392;
				this.match(PostgreSQLParserParser.ROLE);
				this.state = 1393;
				_localctx._role = this.role_name();
				this.state = 1395;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.WITH) {
					{
					this.state = 1394;
					this.match(PostgreSQLParserParser.WITH);
					}
				}

				this.state = 1398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 1397;
					_localctx._options = this.alter_role_options();
					}
					}
					this.state = 1400;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PostgreSQLParserParser.CONNECTION || _la === PostgreSQLParserParser.CREATEDB || _la === PostgreSQLParserParser.ENCRYPTED || _la === PostgreSQLParserParser.NOCREATEDB || _la === PostgreSQLParserParser.PASSWORD || ((((_la - 627)) & ~0x1F) === 0 && ((1 << (_la - 627)) & ((1 << (PostgreSQLParserParser.VALID - 627)) | (1 << (PostgreSQLParserParser.SUPERUSER - 627)) | (1 << (PostgreSQLParserParser.NOSUPERUSER - 627)) | (1 << (PostgreSQLParserParser.CREATEROLE - 627)) | (1 << (PostgreSQLParserParser.NOCREATEROLE - 627)))) !== 0) || ((((_la - 659)) & ~0x1F) === 0 && ((1 << (_la - 659)) & ((1 << (PostgreSQLParserParser.INHERIT - 659)) | (1 << (PostgreSQLParserParser.NOINHERIT - 659)) | (1 << (PostgreSQLParserParser.LOGIN - 659)) | (1 << (PostgreSQLParserParser.NOLOGIN - 659)) | (1 << (PostgreSQLParserParser.REPLICATION - 659)) | (1 << (PostgreSQLParserParser.NOREPLICATION - 659)) | (1 << (PostgreSQLParserParser.BYPASSRLS - 659)) | (1 << (PostgreSQLParserParser.NOBYPASSRLS - 659)))) !== 0));
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1402;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1403;
				this.match(PostgreSQLParserParser.ROLE);
				this.state = 1404;
				_localctx._name = this.name_();
				this.state = 1405;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1406;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1407;
				_localctx._new_name = this.name_();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1409;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1410;
				this.match(PostgreSQLParserParser.ROLE);
				this.state = 1413;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURRENT_USER:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SESSION_USER:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.SINGLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 1411;
					_localctx._role = this.role_name();
					}
					break;
				case PostgreSQLParserParser.ALL:
					{
					this.state = 1412;
					this.match(PostgreSQLParserParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1418;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IN) {
					{
					this.state = 1415;
					this.match(PostgreSQLParserParser.IN);
					this.state = 1416;
					this.match(PostgreSQLParserParser.DATABASE);
					this.state = 1417;
					_localctx._database_name = this.name_();
					}
				}

				this.state = 1420;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1421;
				_localctx._configuration_parameter = this.identifier(0);
				this.state = 1422;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.TO || _la === PostgreSQLParserParser.EQUAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1425;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FALSE:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.ON:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.YES:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.NUMERIC_LITERAL:
				case PostgreSQLParserParser.INTEGER_LITERAL:
				case PostgreSQLParserParser.SINGLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 1423;
					_localctx._value = this.param_value();
					}
					break;
				case PostgreSQLParserParser.DEFAULT:
					{
					this.state = 1424;
					this.match(PostgreSQLParserParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1427;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1428;
				this.match(PostgreSQLParserParser.ROLE);
				this.state = 1431;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURRENT_USER:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SESSION_USER:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.SINGLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 1429;
					_localctx._role = this.role_name();
					}
					break;
				case PostgreSQLParserParser.ALL:
					{
					this.state = 1430;
					this.match(PostgreSQLParserParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1436;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IN) {
					{
					this.state = 1433;
					this.match(PostgreSQLParserParser.IN);
					this.state = 1434;
					this.match(PostgreSQLParserParser.DATABASE);
					this.state = 1435;
					_localctx._database_name = this.name_();
					}
				}

				this.state = 1438;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1439;
				_localctx._configuration_parameter = this.identifier(0);
				this.state = 1440;
				this.match(PostgreSQLParserParser.FROM);
				this.state = 1441;
				this.match(PostgreSQLParserParser.CURRENT);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1443;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1444;
				this.match(PostgreSQLParserParser.ROLE);
				this.state = 1447;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURRENT_USER:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SESSION_USER:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.SINGLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 1445;
					_localctx._role = this.role_name();
					}
					break;
				case PostgreSQLParserParser.ALL:
					{
					this.state = 1446;
					this.match(PostgreSQLParserParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1452;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IN) {
					{
					this.state = 1449;
					this.match(PostgreSQLParserParser.IN);
					this.state = 1450;
					this.match(PostgreSQLParserParser.DATABASE);
					this.state = 1451;
					_localctx._database_name = this.name_();
					}
				}

				this.state = 1454;
				this.match(PostgreSQLParserParser.RESET);
				this.state = 1455;
				_localctx._configuration_parameter = this.identifier(0);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1456;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1457;
				this.match(PostgreSQLParserParser.ROLE);
				this.state = 1460;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURRENT_USER:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SESSION_USER:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.SINGLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 1458;
					_localctx._role = this.role_name();
					}
					break;
				case PostgreSQLParserParser.ALL:
					{
					this.state = 1459;
					this.match(PostgreSQLParserParser.ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1465;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IN) {
					{
					this.state = 1462;
					this.match(PostgreSQLParserParser.IN);
					this.state = 1463;
					this.match(PostgreSQLParserParser.DATABASE);
					this.state = 1464;
					_localctx._database_name = this.name_();
					}
				}

				this.state = 1467;
				this.match(PostgreSQLParserParser.RESET);
				this.state = 1468;
				this.match(PostgreSQLParserParser.ALL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_rule_stmt(): Alter_rule_stmtContext {
		let _localctx: Alter_rule_stmtContext = new Alter_rule_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, PostgreSQLParserParser.RULE_alter_rule_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1471;
			this.match(PostgreSQLParserParser.ALTER);
			this.state = 1472;
			this.match(PostgreSQLParserParser.RULE);
			this.state = 1473;
			_localctx._name = this.name_();
			this.state = 1474;
			this.match(PostgreSQLParserParser.ON);
			this.state = 1475;
			_localctx._table_name = this.identifier(0);
			this.state = 1476;
			this.match(PostgreSQLParserParser.RENAME);
			this.state = 1477;
			this.match(PostgreSQLParserParser.TO);
			this.state = 1478;
			_localctx._new_name = this.name_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_schema_stmt(): Alter_schema_stmtContext {
		let _localctx: Alter_schema_stmtContext = new Alter_schema_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, PostgreSQLParserParser.RULE_alter_schema_stmt);
		try {
			this.state = 1497;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 91, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1480;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1481;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 1482;
				_localctx._name = this.identifier(0);
				this.state = 1483;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1484;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1485;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1487;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1488;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 1489;
				_localctx._name = this.identifier(0);
				this.state = 1490;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 1491;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1495;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 1492;
					_localctx._new_owner = this.identifier(0);
					}
					break;
				case PostgreSQLParserParser.CURRENT_USER:
					{
					this.state = 1493;
					this.match(PostgreSQLParserParser.CURRENT_USER);
					}
					break;
				case PostgreSQLParserParser.SESSION_USER:
					{
					this.state = 1494;
					this.match(PostgreSQLParserParser.SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_sequence_stmt(): Alter_sequence_stmtContext {
		let _localctx: Alter_sequence_stmtContext = new Alter_sequence_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, PostgreSQLParserParser.RULE_alter_sequence_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1499;
			this.match(PostgreSQLParserParser.ALTER);
			this.state = 1500;
			this.match(PostgreSQLParserParser.SEQUENCE);
			this.state = 1503;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 1501;
				this.match(PostgreSQLParserParser.IF);
				this.state = 1502;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 1505;
			_localctx._name = this.name_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_server_options_list(): Alter_server_options_listContext {
		let _localctx: Alter_server_options_listContext = new Alter_server_options_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, PostgreSQLParserParser.RULE_alter_server_options_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			{
			this.state = 1508;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 93, this._ctx) ) {
			case 1:
				{
				this.state = 1507;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.ADD || _la === PostgreSQLParserParser.DROP || _la === PostgreSQLParserParser.SET)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 1510;
			_localctx._option = this.identifier(0);
			this.state = 1512;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FALSE - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.ON - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.YES - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.NUMERIC_LITERAL - 751)) | (1 << (PostgreSQLParserParser.INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.SINGLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0)) {
				{
				this.state = 1511;
				_localctx._value = this.param_value();
				}
			}

			}
			this.state = 1524;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 1514;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 1516;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 95, this._ctx) ) {
				case 1:
					{
					this.state = 1515;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.ADD || _la === PostgreSQLParserParser.DROP || _la === PostgreSQLParserParser.SET)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 1518;
				_localctx._option = this.identifier(0);
				this.state = 1520;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FALSE - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.ON - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.YES - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.NUMERIC_LITERAL - 751)) | (1 << (PostgreSQLParserParser.INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.SINGLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0)) {
					{
					this.state = 1519;
					_localctx._value = this.param_value();
					}
				}

				}
				}
				this.state = 1526;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_server_stmt(): Alter_server_stmtContext {
		let _localctx: Alter_server_stmtContext = new Alter_server_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, PostgreSQLParserParser.RULE_alter_server_stmt);
		let _la: number;
		try {
			this.state = 1557;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 100, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1527;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1528;
				this.match(PostgreSQLParserParser.SERVER);
				this.state = 1529;
				_localctx._name = this.identifier(0);
				this.state = 1541;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 99, this._ctx) ) {
				case 1:
					{
					{
					this.state = 1530;
					this.match(PostgreSQLParserParser.VERSION);
					this.state = 1531;
					this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
					}
					}
					break;

				case 2:
					{
					{
					this.state = 1534;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParserParser.VERSION) {
						{
						this.state = 1532;
						this.match(PostgreSQLParserParser.VERSION);
						this.state = 1533;
						this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
						}
					}

					{
					this.state = 1536;
					this.match(PostgreSQLParserParser.OPTIONS);
					this.state = 1537;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 1538;
					this.alter_server_options_list();
					this.state = 1539;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					}
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1543;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1544;
				this.match(PostgreSQLParserParser.SERVER);
				this.state = 1545;
				_localctx._name = this.identifier(0);
				this.state = 1546;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 1547;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1548;
				_localctx._new_owner = this.role_name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1550;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1551;
				this.match(PostgreSQLParserParser.SERVER);
				this.state = 1552;
				_localctx._name = this.identifier(0);
				this.state = 1553;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1554;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1555;
				_localctx._new_name = this.name_();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_statistics_stmt(): Alter_statistics_stmtContext {
		let _localctx: Alter_statistics_stmtContext = new Alter_statistics_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, PostgreSQLParserParser.RULE_alter_statistics_stmt);
		try {
			this.state = 1583;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 102, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1559;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1560;
				this.match(PostgreSQLParserParser.STATISTICS);
				this.state = 1561;
				_localctx._name = this.identifier(0);
				this.state = 1562;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 1563;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1567;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 1564;
					_localctx._new_owner = this.identifier(0);
					}
					break;
				case PostgreSQLParserParser.CURRENT_USER:
					{
					this.state = 1565;
					this.match(PostgreSQLParserParser.CURRENT_USER);
					}
					break;
				case PostgreSQLParserParser.SESSION_USER:
					{
					this.state = 1566;
					this.match(PostgreSQLParserParser.SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1569;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1570;
				this.match(PostgreSQLParserParser.STATISTICS);
				this.state = 1571;
				_localctx._name = this.identifier(0);
				this.state = 1572;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1573;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1574;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1576;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1577;
				this.match(PostgreSQLParserParser.STATISTICS);
				this.state = 1578;
				_localctx._name = this.identifier(0);
				this.state = 1579;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1580;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 1581;
				_localctx._new_schema = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_subscription_stmt(): Alter_subscription_stmtContext {
		let _localctx: Alter_subscription_stmtContext = new Alter_subscription_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, PostgreSQLParserParser.RULE_alter_subscription_stmt);
		let _la: number;
		try {
			this.state = 1648;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 105, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1585;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1586;
				this.match(PostgreSQLParserParser.SUBSCRIPTION);
				this.state = 1587;
				_localctx._name = this.identifier(0);
				this.state = 1588;
				this.match(PostgreSQLParserParser.CONNECTION);
				this.state = 1589;
				_localctx._conninfo = this.param_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1591;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1592;
				this.match(PostgreSQLParserParser.SUBSCRIPTION);
				this.state = 1593;
				_localctx._name = this.identifier(0);
				this.state = 1594;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1595;
				this.match(PostgreSQLParserParser.PUBLICATION);
				this.state = 1596;
				_localctx._publication_name = this.name_list();
				this.state = 1602;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.WITH) {
					{
					this.state = 1597;
					this.match(PostgreSQLParserParser.WITH);
					this.state = 1598;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 1599;
					this.option_list();
					this.state = 1600;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1604;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1605;
				this.match(PostgreSQLParserParser.SUBSCRIPTION);
				this.state = 1606;
				_localctx._name = this.identifier(0);
				this.state = 1607;
				this.match(PostgreSQLParserParser.REFRESH);
				this.state = 1608;
				this.match(PostgreSQLParserParser.PUBLICATION);
				this.state = 1614;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.WITH) {
					{
					this.state = 1609;
					this.match(PostgreSQLParserParser.WITH);
					this.state = 1610;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 1611;
					this.option_list();
					this.state = 1612;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1616;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1617;
				this.match(PostgreSQLParserParser.SUBSCRIPTION);
				this.state = 1618;
				_localctx._name = this.identifier(0);
				this.state = 1619;
				this.match(PostgreSQLParserParser.ENABLE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1621;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1622;
				this.match(PostgreSQLParserParser.SUBSCRIPTION);
				this.state = 1623;
				_localctx._name = this.identifier(0);
				this.state = 1624;
				this.match(PostgreSQLParserParser.DISABLE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1626;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1627;
				this.match(PostgreSQLParserParser.SUBSCRIPTION);
				this.state = 1628;
				_localctx._name = this.identifier(0);
				this.state = 1629;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1630;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 1631;
				this.option_list();
				this.state = 1632;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1634;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1635;
				this.match(PostgreSQLParserParser.SUBSCRIPTION);
				this.state = 1636;
				_localctx._name = this.identifier(0);
				this.state = 1637;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 1638;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1639;
				_localctx._new_owner = this.role_name();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1641;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1642;
				this.match(PostgreSQLParserParser.SUBSCRIPTION);
				this.state = 1643;
				_localctx._name = this.identifier(0);
				this.state = 1644;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1645;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1646;
				_localctx._new_name = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_system_stmt(): Alter_system_stmtContext {
		let _localctx: Alter_system_stmtContext = new Alter_system_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, PostgreSQLParserParser.RULE_alter_system_stmt);
		let _la: number;
		try {
			this.state = 1664;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 106, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1650;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1651;
				this.match(PostgreSQLParserParser.SYSTEM);
				this.state = 1652;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1653;
				_localctx._param = this.match(PostgreSQLParserParser.IDENTIFIER);
				this.state = 1654;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.TO || _la === PostgreSQLParserParser.EQUAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1655;
				_localctx._value = this.param_value();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1656;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1657;
				this.match(PostgreSQLParserParser.SYSTEM);
				this.state = 1658;
				this.match(PostgreSQLParserParser.RESET);
				this.state = 1659;
				_localctx._param = this.match(PostgreSQLParserParser.IDENTIFIER);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1660;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1661;
				this.match(PostgreSQLParserParser.SYSTEM);
				this.state = 1662;
				this.match(PostgreSQLParserParser.RESET);
				this.state = 1663;
				this.match(PostgreSQLParserParser.ALL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_table_stmt(): Alter_table_stmtContext {
		let _localctx: Alter_table_stmtContext = new Alter_table_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, PostgreSQLParserParser.RULE_alter_table_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1666;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_tablespace_stmt(): Alter_tablespace_stmtContext {
		let _localctx: Alter_tablespace_stmtContext = new Alter_tablespace_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, PostgreSQLParserParser.RULE_alter_tablespace_stmt);
		try {
			this.state = 1701;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 108, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1668;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1669;
				this.match(PostgreSQLParserParser.TABLESPACE);
				this.state = 1670;
				_localctx._name = this.identifier(0);
				this.state = 1671;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1672;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1673;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1675;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1676;
				this.match(PostgreSQLParserParser.TABLESPACE);
				this.state = 1677;
				_localctx._name = this.identifier(0);
				this.state = 1678;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 1679;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1683;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 1680;
					_localctx._new_owner = this.identifier(0);
					}
					break;
				case PostgreSQLParserParser.CURRENT_USER:
					{
					this.state = 1681;
					this.match(PostgreSQLParserParser.CURRENT_USER);
					}
					break;
				case PostgreSQLParserParser.SESSION_USER:
					{
					this.state = 1682;
					this.match(PostgreSQLParserParser.SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1685;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1686;
				this.match(PostgreSQLParserParser.TABLESPACE);
				this.state = 1687;
				_localctx._name = this.identifier(0);
				this.state = 1688;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1689;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 1690;
				this.option_list();
				this.state = 1691;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1693;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1694;
				this.match(PostgreSQLParserParser.TABLESPACE);
				this.state = 1695;
				_localctx._name = this.identifier(0);
				this.state = 1696;
				this.match(PostgreSQLParserParser.RESET);
				this.state = 1697;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 1698;
				this.identifier_list();
				this.state = 1699;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_text_search_config_stmt(): Alter_text_search_config_stmtContext {
		let _localctx: Alter_text_search_config_stmtContext = new Alter_text_search_config_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, PostgreSQLParserParser.RULE_alter_text_search_config_stmt);
		let _la: number;
		try {
			this.state = 1794;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 110, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1703;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1704;
				this.match(PostgreSQLParserParser.TEXT);
				this.state = 1705;
				this.match(PostgreSQLParserParser.SEARCH);
				this.state = 1706;
				this.match(PostgreSQLParserParser.CONFIGURATION);
				this.state = 1707;
				_localctx._name = this.identifier(0);
				this.state = 1708;
				this.match(PostgreSQLParserParser.ADD);
				this.state = 1709;
				this.match(PostgreSQLParserParser.MAPPING);
				this.state = 1710;
				this.match(PostgreSQLParserParser.FOR);
				this.state = 1711;
				_localctx._token_types = this.identifier_list();
				this.state = 1712;
				this.match(PostgreSQLParserParser.WITH);
				this.state = 1713;
				_localctx._dictionary_names = this.identifier_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1715;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1716;
				this.match(PostgreSQLParserParser.TEXT);
				this.state = 1717;
				this.match(PostgreSQLParserParser.SEARCH);
				this.state = 1718;
				this.match(PostgreSQLParserParser.CONFIGURATION);
				this.state = 1719;
				_localctx._name = this.identifier(0);
				this.state = 1720;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1721;
				this.match(PostgreSQLParserParser.MAPPING);
				this.state = 1722;
				this.match(PostgreSQLParserParser.FOR);
				this.state = 1723;
				_localctx._token_types = this.identifier_list();
				this.state = 1724;
				this.match(PostgreSQLParserParser.WITH);
				this.state = 1725;
				_localctx._dictionary_names = this.identifier_list();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1727;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1728;
				this.match(PostgreSQLParserParser.TEXT);
				this.state = 1729;
				this.match(PostgreSQLParserParser.SEARCH);
				this.state = 1730;
				this.match(PostgreSQLParserParser.CONFIGURATION);
				this.state = 1731;
				_localctx._name = this.identifier(0);
				this.state = 1732;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1733;
				this.match(PostgreSQLParserParser.MAPPING);
				this.state = 1734;
				this.match(PostgreSQLParserParser.REPLACE);
				this.state = 1735;
				_localctx._old_dictionary = this.identifier(0);
				this.state = 1736;
				this.match(PostgreSQLParserParser.WITH);
				this.state = 1737;
				_localctx._new_dictionary = this.identifier(0);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1739;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1740;
				this.match(PostgreSQLParserParser.TEXT);
				this.state = 1741;
				this.match(PostgreSQLParserParser.SEARCH);
				this.state = 1742;
				this.match(PostgreSQLParserParser.CONFIGURATION);
				this.state = 1743;
				_localctx._name = this.identifier(0);
				this.state = 1744;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1745;
				this.match(PostgreSQLParserParser.MAPPING);
				this.state = 1746;
				this.match(PostgreSQLParserParser.FOR);
				this.state = 1747;
				_localctx._token_types = this.identifier_list();
				this.state = 1748;
				this.match(PostgreSQLParserParser.REPLACE);
				this.state = 1749;
				_localctx._old_dictionary = this.identifier(0);
				this.state = 1750;
				this.match(PostgreSQLParserParser.WITH);
				this.state = 1751;
				_localctx._new_dictionary = this.identifier(0);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1753;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1754;
				this.match(PostgreSQLParserParser.TEXT);
				this.state = 1755;
				this.match(PostgreSQLParserParser.SEARCH);
				this.state = 1756;
				this.match(PostgreSQLParserParser.CONFIGURATION);
				this.state = 1757;
				_localctx._name = this.identifier(0);
				this.state = 1758;
				this.match(PostgreSQLParserParser.DROP);
				this.state = 1759;
				this.match(PostgreSQLParserParser.MAPPING);
				this.state = 1762;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 1760;
					this.match(PostgreSQLParserParser.IF);
					this.state = 1761;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 1764;
				this.match(PostgreSQLParserParser.FOR);
				this.state = 1765;
				_localctx._token_types = this.identifier_list();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1767;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1768;
				this.match(PostgreSQLParserParser.TEXT);
				this.state = 1769;
				this.match(PostgreSQLParserParser.SEARCH);
				this.state = 1770;
				this.match(PostgreSQLParserParser.CONFIGURATION);
				this.state = 1771;
				_localctx._name = this.identifier(0);
				this.state = 1772;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1773;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1774;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1776;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1777;
				this.match(PostgreSQLParserParser.TEXT);
				this.state = 1778;
				this.match(PostgreSQLParserParser.SEARCH);
				this.state = 1779;
				this.match(PostgreSQLParserParser.CONFIGURATION);
				this.state = 1780;
				_localctx._name = this.identifier(0);
				this.state = 1781;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 1782;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1783;
				_localctx._new_owner = this.role_name();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1785;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1786;
				this.match(PostgreSQLParserParser.TEXT);
				this.state = 1787;
				this.match(PostgreSQLParserParser.SEARCH);
				this.state = 1788;
				this.match(PostgreSQLParserParser.CONFIGURATION);
				this.state = 1789;
				_localctx._name = this.identifier(0);
				this.state = 1790;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1791;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 1792;
				_localctx._new_schema = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_text_search_dict_stmt(): Alter_text_search_dict_stmtContext {
		let _localctx: Alter_text_search_dict_stmtContext = new Alter_text_search_dict_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, PostgreSQLParserParser.RULE_alter_text_search_dict_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1796;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_text_search_parser_stmt(): Alter_text_search_parser_stmtContext {
		let _localctx: Alter_text_search_parser_stmtContext = new Alter_text_search_parser_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, PostgreSQLParserParser.RULE_alter_text_search_parser_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1798;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_text_search_template_stmt(): Alter_text_search_template_stmtContext {
		let _localctx: Alter_text_search_template_stmtContext = new Alter_text_search_template_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, PostgreSQLParserParser.RULE_alter_text_search_template_stmt);
		try {
			this.state = 1818;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 111, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1800;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1801;
				this.match(PostgreSQLParserParser.TEXT);
				this.state = 1802;
				this.match(PostgreSQLParserParser.SEARCH);
				this.state = 1803;
				this.match(PostgreSQLParserParser.TEMPLATE);
				this.state = 1804;
				_localctx._name = this.identifier(0);
				this.state = 1805;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1806;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1807;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1809;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1810;
				this.match(PostgreSQLParserParser.TEXT);
				this.state = 1811;
				this.match(PostgreSQLParserParser.SEARCH);
				this.state = 1812;
				this.match(PostgreSQLParserParser.TEMPLATE);
				this.state = 1813;
				_localctx._name = this.identifier(0);
				this.state = 1814;
				this.match(PostgreSQLParserParser.SET);
				this.state = 1815;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 1816;
				_localctx._new_schema = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_trigger_stmt(): Alter_trigger_stmtContext {
		let _localctx: Alter_trigger_stmtContext = new Alter_trigger_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, PostgreSQLParserParser.RULE_alter_trigger_stmt);
		try {
			this.state = 1839;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 112, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1820;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1821;
				this.match(PostgreSQLParserParser.TRIGGER);
				this.state = 1822;
				_localctx._name = this.identifier(0);
				this.state = 1823;
				this.match(PostgreSQLParserParser.ON);
				this.state = 1824;
				_localctx._table_name = this.identifier(0);
				this.state = 1825;
				this.match(PostgreSQLParserParser.RENAME);
				this.state = 1826;
				this.match(PostgreSQLParserParser.TO);
				this.state = 1827;
				_localctx._new_name = this.identifier(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1829;
				this.match(PostgreSQLParserParser.ALTER);
				this.state = 1830;
				this.match(PostgreSQLParserParser.TRIGGER);
				this.state = 1831;
				_localctx._name = this.identifier(0);
				this.state = 1832;
				this.match(PostgreSQLParserParser.ON);
				this.state = 1833;
				_localctx._table_name = this.identifier(0);
				this.state = 1834;
				this.match(PostgreSQLParserParser.DEPENDS);
				this.state = 1835;
				this.match(PostgreSQLParserParser.ON);
				this.state = 1836;
				this.match(PostgreSQLParserParser.EXTENSION);
				this.state = 1837;
				_localctx._extension_name = this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_type_stmt(): Alter_type_stmtContext {
		let _localctx: Alter_type_stmtContext = new Alter_type_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, PostgreSQLParserParser.RULE_alter_type_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1841;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_user_stmt(): Alter_user_stmtContext {
		let _localctx: Alter_user_stmtContext = new Alter_user_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, PostgreSQLParserParser.RULE_alter_user_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1843;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_user_mapping_stmt(): Alter_user_mapping_stmtContext {
		let _localctx: Alter_user_mapping_stmtContext = new Alter_user_mapping_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, PostgreSQLParserParser.RULE_alter_user_mapping_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1845;
			this.match(PostgreSQLParserParser.ALTER);
			this.state = 1846;
			this.match(PostgreSQLParserParser.USER);
			this.state = 1847;
			this.match(PostgreSQLParserParser.MAPPING);
			this.state = 1848;
			this.match(PostgreSQLParserParser.FOR);
			this.state = 1849;
			_localctx._user = this.role_name();
			this.state = 1850;
			this.match(PostgreSQLParserParser.SERVER);
			this.state = 1851;
			_localctx._server_name = this.identifier(0);
			this.state = 1852;
			this.match(PostgreSQLParserParser.OPTIONS);
			{
			this.state = 1853;
			this.match(PostgreSQLParserParser.OPEN_PAREN);
			this.state = 1854;
			this.alter_server_options_list();
			this.state = 1855;
			this.match(PostgreSQLParserParser.CLOSE_PAREN);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_view_stmt(): Alter_view_stmtContext {
		let _localctx: Alter_view_stmtContext = new Alter_view_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, PostgreSQLParserParser.RULE_alter_view_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1857;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public analyze_stmt(): Analyze_stmtContext {
		let _localctx: Analyze_stmtContext = new Analyze_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, PostgreSQLParserParser.RULE_analyze_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1859;
			this.match(PostgreSQLParserParser.ANALYZE);
			this.state = 1861;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.VERBOSE) {
				{
				this.state = 1860;
				this.match(PostgreSQLParserParser.VERBOSE);
				}
			}

			this.state = 1863;
			this.table_name_();
			this.state = 1868;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OPEN_PAREN) {
				{
				this.state = 1864;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 1865;
				this.name_list();
				this.state = 1866;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public close_stmt(): Close_stmtContext {
		let _localctx: Close_stmtContext = new Close_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, PostgreSQLParserParser.RULE_close_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1870;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cluster_stmt(): Cluster_stmtContext {
		let _localctx: Cluster_stmtContext = new Cluster_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, PostgreSQLParserParser.RULE_cluster_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1872;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comment_stmt(): Comment_stmtContext {
		let _localctx: Comment_stmtContext = new Comment_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, PostgreSQLParserParser.RULE_comment_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1874;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commit_stmt(): Commit_stmtContext {
		let _localctx: Commit_stmtContext = new Commit_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, PostgreSQLParserParser.RULE_commit_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1876;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commit_prepared_stmt(): Commit_prepared_stmtContext {
		let _localctx: Commit_prepared_stmtContext = new Commit_prepared_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, PostgreSQLParserParser.RULE_commit_prepared_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1878;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_stmt(): Copy_stmtContext {
		let _localctx: Copy_stmtContext = new Copy_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, PostgreSQLParserParser.RULE_copy_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1880;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_stmt(): Create_stmtContext {
		let _localctx: Create_stmtContext = new Create_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, PostgreSQLParserParser.RULE_create_stmt);
		try {
			this.state = 1921;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 115, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1882;
				this.create_access_method_stmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1883;
				this.create_aggregate_stmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1884;
				this.create_cast_stmt();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1885;
				this.create_collation_stmt();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1886;
				this.create_conversion_stmt();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1887;
				this.create_database_stmt();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1888;
				this.create_domain_stmt();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1889;
				this.create_event_trigger_stmt();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1890;
				this.create_foreign_data_stmt();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1891;
				this.create_foreign_table_stmt();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1892;
				this.create_function_stmt();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1893;
				this.create_group_stmt();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1894;
				this.create_index_stmt();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1895;
				this.create_language_stmt();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1896;
				this.create_materialized_view_stmt();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1897;
				this.create_operator_stmt();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1898;
				this.create_operator_class_stmt();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1899;
				this.create_operator_family_stmt();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1900;
				this.create_policy_stmt();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1901;
				this.create_role_stmt();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1902;
				this.create_rule_stmt();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1903;
				this.create_schema_stmt();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1904;
				this.create_sequence_stmt();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1905;
				this.create_server_stmt();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1906;
				this.create_statistics_stmt();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 1907;
				this.create_subscription_stmt();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 1908;
				this.create_table_stmt();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 1909;
				this.create_table_as_stmt();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 1910;
				this.create_tablespace_stmt();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 1911;
				this.create_text_search_config_stmt();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 1912;
				this.create_text_search_dict_stmt();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 1913;
				this.create_text_search_parser_stmt();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 1914;
				this.create_text_search_template_stmt();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 1915;
				this.create_transform_stmt();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 1916;
				this.create_trigger_stmt();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 1917;
				this.create_type_stmt();
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 1918;
				this.create_user_stmt();
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 1919;
				this.create_user_mapping_stmt();
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 1920;
				this.create_view_stmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_access_method_stmt(): Create_access_method_stmtContext {
		let _localctx: Create_access_method_stmtContext = new Create_access_method_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, PostgreSQLParserParser.RULE_create_access_method_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1923;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 1924;
			this.match(PostgreSQLParserParser.ACCESS);
			this.state = 1925;
			this.match(PostgreSQLParserParser.METHOD);
			this.state = 1926;
			this.name_();
			this.state = 1927;
			this.match(PostgreSQLParserParser.TYPE);
			this.state = 1928;
			this.match(PostgreSQLParserParser.INDEX);
			this.state = 1929;
			this.match(PostgreSQLParserParser.HANDLER);
			this.state = 1930;
			this.name_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_aggregate_stmt(): Create_aggregate_stmtContext {
		let _localctx: Create_aggregate_stmtContext = new Create_aggregate_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, PostgreSQLParserParser.RULE_create_aggregate_stmt);
		let _la: number;
		try {
			this.state = 2214;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 160, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 1932;
				this.match(PostgreSQLParserParser.CREATE);
				this.state = 1933;
				this.match(PostgreSQLParserParser.AGGREGATE);
				this.state = 1934;
				this.name_();
				this.state = 1935;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 1937;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.VARIADIC) {
					{
					this.state = 1936;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.VARIADIC)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 1940;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 117, this._ctx) ) {
				case 1:
					{
					this.state = 1939;
					this.name_();
					}
					break;
				}
				this.state = 1942;
				this.data_type_list();
				this.state = 1943;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 1944;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 1945;
				this.match(PostgreSQLParserParser.SFUNC);
				this.state = 1946;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 1947;
				this.identifier(0);
				this.state = 1948;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 1949;
				this.match(PostgreSQLParserParser.STYPE);
				this.state = 1950;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 1951;
				this.identifier(0);
				this.state = 1956;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 118, this._ctx) ) {
				case 1:
					{
					this.state = 1952;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 1953;
					this.match(PostgreSQLParserParser.SSPACE);
					this.state = 1954;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 1955;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					}
					break;
				}
				this.state = 1962;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 119, this._ctx) ) {
				case 1:
					{
					this.state = 1958;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 1959;
					this.match(PostgreSQLParserParser.FINALFUNC);
					this.state = 1960;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 1961;
					this.identifier(0);
					}
					break;
				}
				this.state = 1966;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 120, this._ctx) ) {
				case 1:
					{
					this.state = 1964;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 1965;
					this.match(PostgreSQLParserParser.FINALFUNC_EXTRA);
					}
					break;
				}
				this.state = 1972;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 121, this._ctx) ) {
				case 1:
					{
					this.state = 1968;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 1969;
					this.match(PostgreSQLParserParser.COMBINEFUNC);
					this.state = 1970;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 1971;
					this.identifier(0);
					}
					break;
				}
				this.state = 1978;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 122, this._ctx) ) {
				case 1:
					{
					this.state = 1974;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 1975;
					this.match(PostgreSQLParserParser.SERIALFUNC);
					this.state = 1976;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 1977;
					this.identifier(0);
					}
					break;
				}
				this.state = 1984;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 123, this._ctx) ) {
				case 1:
					{
					this.state = 1980;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 1981;
					this.match(PostgreSQLParserParser.DESERIALFUNC);
					this.state = 1982;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 1983;
					this.identifier(0);
					}
					break;
				}
				this.state = 1990;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 124, this._ctx) ) {
				case 1:
					{
					this.state = 1986;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 1987;
					this.match(PostgreSQLParserParser.INITCOND);
					this.state = 1988;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 1989;
					this.expr(0);
					}
					break;
				}
				this.state = 1996;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 125, this._ctx) ) {
				case 1:
					{
					this.state = 1992;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 1993;
					this.match(PostgreSQLParserParser.MSFUNC);
					this.state = 1994;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 1995;
					this.identifier(0);
					}
					break;
				}
				this.state = 2002;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 126, this._ctx) ) {
				case 1:
					{
					this.state = 1998;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 1999;
					this.match(PostgreSQLParserParser.MINVFUNC);
					this.state = 2000;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2001;
					this.identifier(0);
					}
					break;
				}
				this.state = 2008;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 127, this._ctx) ) {
				case 1:
					{
					this.state = 2004;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2005;
					this.match(PostgreSQLParserParser.MSTYPE);
					this.state = 2006;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2007;
					this.identifier(0);
					}
					break;
				}
				this.state = 2014;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 128, this._ctx) ) {
				case 1:
					{
					this.state = 2010;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2011;
					this.match(PostgreSQLParserParser.MSSPACE);
					this.state = 2012;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2013;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					}
					break;
				}
				this.state = 2020;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 129, this._ctx) ) {
				case 1:
					{
					this.state = 2016;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2017;
					this.match(PostgreSQLParserParser.MFINALFUNC);
					this.state = 2018;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2019;
					this.identifier(0);
					}
					break;
				}
				this.state = 2024;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 130, this._ctx) ) {
				case 1:
					{
					this.state = 2022;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2023;
					this.match(PostgreSQLParserParser.MFINALFUNC_EXTRA);
					}
					break;
				}
				this.state = 2030;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 131, this._ctx) ) {
				case 1:
					{
					this.state = 2026;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2027;
					this.match(PostgreSQLParserParser.MINITCOND);
					this.state = 2028;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2029;
					this.identifier(0);
					}
					break;
				}
				this.state = 2036;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 132, this._ctx) ) {
				case 1:
					{
					this.state = 2032;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2033;
					this.match(PostgreSQLParserParser.SORTOP);
					this.state = 2034;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2035;
					this.identifier(0);
					}
					break;
				}
				this.state = 2042;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COMMA) {
					{
					this.state = 2038;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2039;
					this.match(PostgreSQLParserParser.PARALLEL);
					this.state = 2040;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2041;
					_la = this._input.LA(1);
					if (!(((((_la - 686)) & ~0x1F) === 0 && ((1 << (_la - 686)) & ((1 << (PostgreSQLParserParser.SAFE - 686)) | (1 << (PostgreSQLParserParser.RESTRICTED - 686)) | (1 << (PostgreSQLParserParser.UNSAFE - 686)))) !== 0))) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2044;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2046;
				this.match(PostgreSQLParserParser.CREATE);
				this.state = 2047;
				this.match(PostgreSQLParserParser.AGGREGATE);
				this.state = 2048;
				this.name_();
				this.state = 2049;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 2057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.IN - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARIADIC - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.SINGLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0)) {
					{
					this.state = 2051;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.VARIADIC) {
						{
						this.state = 2050;
						_la = this._input.LA(1);
						if (!(_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.VARIADIC)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					this.state = 2054;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 135, this._ctx) ) {
					case 1:
						{
						this.state = 2053;
						this.name_();
						}
						break;
					}
					this.state = 2056;
					this.data_type_list();
					}
				}

				this.state = 2059;
				this.match(PostgreSQLParserParser.ORDER);
				this.state = 2060;
				this.match(PostgreSQLParserParser.BY);
				this.state = 2062;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.VARIADIC) {
					{
					this.state = 2061;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.VARIADIC)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2065;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 138, this._ctx) ) {
				case 1:
					{
					this.state = 2064;
					this.name_();
					}
					break;
				}
				this.state = 2067;
				this.data_type_list();
				this.state = 2068;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 2069;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 2070;
				this.match(PostgreSQLParserParser.SFUNC);
				this.state = 2071;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2072;
				this.identifier(0);
				this.state = 2073;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2074;
				this.match(PostgreSQLParserParser.STYPE);
				this.state = 2075;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2076;
				this.identifier(0);
				this.state = 2081;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 139, this._ctx) ) {
				case 1:
					{
					this.state = 2077;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2078;
					this.match(PostgreSQLParserParser.SSPACE);
					this.state = 2079;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2080;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					}
					break;
				}
				this.state = 2087;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 140, this._ctx) ) {
				case 1:
					{
					this.state = 2083;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2084;
					this.match(PostgreSQLParserParser.FINALFUNC);
					this.state = 2085;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2086;
					this.identifier(0);
					}
					break;
				}
				this.state = 2091;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 141, this._ctx) ) {
				case 1:
					{
					this.state = 2089;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2090;
					this.match(PostgreSQLParserParser.FINALFUNC_EXTRA);
					}
					break;
				}
				this.state = 2097;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 142, this._ctx) ) {
				case 1:
					{
					this.state = 2093;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2094;
					this.match(PostgreSQLParserParser.INITCOND);
					this.state = 2095;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2096;
					this.expr(0);
					}
					break;
				}
				this.state = 2103;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 143, this._ctx) ) {
				case 1:
					{
					this.state = 2099;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2100;
					this.match(PostgreSQLParserParser.PARALLEL);
					this.state = 2101;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2102;
					_la = this._input.LA(1);
					if (!(((((_la - 686)) & ~0x1F) === 0 && ((1 << (_la - 686)) & ((1 << (PostgreSQLParserParser.SAFE - 686)) | (1 << (PostgreSQLParserParser.RESTRICTED - 686)) | (1 << (PostgreSQLParserParser.UNSAFE - 686)))) !== 0))) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 2107;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COMMA) {
					{
					this.state = 2105;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2106;
					this.match(PostgreSQLParserParser.HYPOTHETICAL);
					}
				}

				this.state = 2109;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				{
				this.state = 2111;
				this.match(PostgreSQLParserParser.CREATE);
				this.state = 2112;
				this.match(PostgreSQLParserParser.AGGREGATE);
				this.state = 2113;
				this.name_();
				this.state = 2114;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 2115;
				this.match(PostgreSQLParserParser.BASETYPE);
				this.state = 2116;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2117;
				this.data_type();
				this.state = 2118;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2119;
				this.match(PostgreSQLParserParser.SFUNC);
				this.state = 2120;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2121;
				this.identifier(0);
				this.state = 2122;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2123;
				this.match(PostgreSQLParserParser.STYPE);
				this.state = 2124;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2125;
				this.identifier(0);
				this.state = 2130;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 145, this._ctx) ) {
				case 1:
					{
					this.state = 2126;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2127;
					this.match(PostgreSQLParserParser.SSPACE);
					this.state = 2128;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2129;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					}
					break;
				}
				this.state = 2136;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 146, this._ctx) ) {
				case 1:
					{
					this.state = 2132;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2133;
					this.match(PostgreSQLParserParser.FINALFUNC);
					this.state = 2134;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2135;
					this.identifier(0);
					}
					break;
				}
				this.state = 2140;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 147, this._ctx) ) {
				case 1:
					{
					this.state = 2138;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2139;
					this.match(PostgreSQLParserParser.FINALFUNC_EXTRA);
					}
					break;
				}
				this.state = 2146;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 148, this._ctx) ) {
				case 1:
					{
					this.state = 2142;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2143;
					this.match(PostgreSQLParserParser.COMBINEFUNC);
					this.state = 2144;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2145;
					this.identifier(0);
					}
					break;
				}
				this.state = 2152;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 149, this._ctx) ) {
				case 1:
					{
					this.state = 2148;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2149;
					this.match(PostgreSQLParserParser.SERIALFUNC);
					this.state = 2150;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2151;
					this.identifier(0);
					}
					break;
				}
				this.state = 2158;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 150, this._ctx) ) {
				case 1:
					{
					this.state = 2154;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2155;
					this.match(PostgreSQLParserParser.DESERIALFUNC);
					this.state = 2156;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2157;
					this.identifier(0);
					}
					break;
				}
				this.state = 2164;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 151, this._ctx) ) {
				case 1:
					{
					this.state = 2160;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2161;
					this.match(PostgreSQLParserParser.INITCOND);
					this.state = 2162;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2163;
					this.expr(0);
					}
					break;
				}
				this.state = 2170;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 152, this._ctx) ) {
				case 1:
					{
					this.state = 2166;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2167;
					this.match(PostgreSQLParserParser.MSFUNC);
					this.state = 2168;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2169;
					this.identifier(0);
					}
					break;
				}
				this.state = 2176;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 153, this._ctx) ) {
				case 1:
					{
					this.state = 2172;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2173;
					this.match(PostgreSQLParserParser.MINVFUNC);
					this.state = 2174;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2175;
					this.identifier(0);
					}
					break;
				}
				this.state = 2182;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 154, this._ctx) ) {
				case 1:
					{
					this.state = 2178;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2179;
					this.match(PostgreSQLParserParser.MSTYPE);
					this.state = 2180;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2181;
					this.identifier(0);
					}
					break;
				}
				this.state = 2188;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 155, this._ctx) ) {
				case 1:
					{
					this.state = 2184;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2185;
					this.match(PostgreSQLParserParser.MSSPACE);
					this.state = 2186;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2187;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					}
					break;
				}
				this.state = 2194;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 156, this._ctx) ) {
				case 1:
					{
					this.state = 2190;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2191;
					this.match(PostgreSQLParserParser.MFINALFUNC);
					this.state = 2192;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2193;
					this.identifier(0);
					}
					break;
				}
				this.state = 2198;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 157, this._ctx) ) {
				case 1:
					{
					this.state = 2196;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2197;
					this.match(PostgreSQLParserParser.MFINALFUNC_EXTRA);
					}
					break;
				}
				this.state = 2204;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 158, this._ctx) ) {
				case 1:
					{
					this.state = 2200;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2201;
					this.match(PostgreSQLParserParser.MINITCOND);
					this.state = 2202;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2203;
					this.identifier(0);
					}
					break;
				}
				this.state = 2210;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.COMMA) {
					{
					this.state = 2206;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2207;
					this.match(PostgreSQLParserParser.SORTOP);
					this.state = 2208;
					this.match(PostgreSQLParserParser.EQUAL);
					this.state = 2209;
					this.identifier(0);
					}
				}

				this.state = 2212;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_cast_stmt(): Create_cast_stmtContext {
		let _localctx: Create_cast_stmtContext = new Create_cast_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, PostgreSQLParserParser.RULE_create_cast_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2216;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2217;
			this.match(PostgreSQLParserParser.CAST);
			this.state = 2218;
			this.match(PostgreSQLParserParser.OPEN_PAREN);
			this.state = 2219;
			this.data_type();
			this.state = 2220;
			this.match(PostgreSQLParserParser.AS);
			this.state = 2221;
			this.data_type();
			this.state = 2222;
			this.match(PostgreSQLParserParser.CLOSE_PAREN);
			this.state = 2236;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 162, this._ctx) ) {
			case 1:
				{
				{
				this.state = 2223;
				this.match(PostgreSQLParserParser.WITH);
				this.state = 2224;
				this.match(PostgreSQLParserParser.FUNCTION);
				this.state = 2225;
				this.identifier(0);
				this.state = 2230;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.OPEN_PAREN) {
					{
					this.state = 2226;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 2227;
					this.data_type_list();
					this.state = 2228;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
				}

				}
				}
				break;

			case 2:
				{
				{
				this.state = 2232;
				this.match(PostgreSQLParserParser.WITHOUT);
				this.state = 2233;
				this.match(PostgreSQLParserParser.FUNCTION);
				}
				}
				break;

			case 3:
				{
				{
				this.state = 2234;
				this.match(PostgreSQLParserParser.WITH);
				this.state = 2235;
				this.match(PostgreSQLParserParser.INOUT);
				}
				}
				break;
			}
			this.state = 2242;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 163, this._ctx) ) {
			case 1:
				{
				this.state = 2238;
				this.match(PostgreSQLParserParser.AS);
				this.state = 2239;
				this.match(PostgreSQLParserParser.ASSIGNMENT);
				}
				break;

			case 2:
				{
				this.state = 2240;
				this.match(PostgreSQLParserParser.AS);
				this.state = 2241;
				this.match(PostgreSQLParserParser.IMPLICIT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_collation_opt(): Create_collation_optContext {
		let _localctx: Create_collation_optContext = new Create_collation_optContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, PostgreSQLParserParser.RULE_create_collation_opt);
		try {
			this.state = 2262;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.LOCALE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2244;
				this.match(PostgreSQLParserParser.LOCALE);
				this.state = 2245;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2246;
				this.expr(0);
				}
				break;
			case PostgreSQLParserParser.LC_COLLATE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2247;
				this.match(PostgreSQLParserParser.LC_COLLATE);
				this.state = 2248;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2249;
				this.expr(0);
				}
				break;
			case PostgreSQLParserParser.LC_CTYPE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2250;
				this.match(PostgreSQLParserParser.LC_CTYPE);
				this.state = 2251;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2252;
				this.expr(0);
				}
				break;
			case PostgreSQLParserParser.PROVIDER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2253;
				this.match(PostgreSQLParserParser.PROVIDER);
				this.state = 2254;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2255;
				this.expr(0);
				}
				break;
			case PostgreSQLParserParser.VERSION:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2256;
				this.match(PostgreSQLParserParser.VERSION);
				this.state = 2257;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2258;
				this.expr(0);
				}
				break;
			case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2259;
				this.match(PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL);
				this.state = 2260;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2261;
				this.expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_collation_opt_list(): Create_collation_opt_listContext {
		let _localctx: Create_collation_opt_listContext = new Create_collation_opt_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, PostgreSQLParserParser.RULE_create_collation_opt_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2264;
			this.create_collation_opt();
			this.state = 2269;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 2265;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2266;
				this.create_collation_opt();
				}
				}
				this.state = 2271;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_collation_stmt(): Create_collation_stmtContext {
		let _localctx: Create_collation_stmtContext = new Create_collation_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, PostgreSQLParserParser.RULE_create_collation_stmt);
		let _la: number;
		try {
			this.state = 2295;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 168, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2272;
				this.match(PostgreSQLParserParser.CREATE);
				this.state = 2273;
				this.match(PostgreSQLParserParser.COLLATION);
				this.state = 2277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 2274;
					this.match(PostgreSQLParserParser.IF);
					this.state = 2275;
					this.match(PostgreSQLParserParser.NOT);
					this.state = 2276;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 2279;
				this.name_();
				this.state = 2280;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 2281;
				this.create_collation_opt_list();
				this.state = 2282;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2284;
				this.match(PostgreSQLParserParser.CREATE);
				this.state = 2285;
				this.match(PostgreSQLParserParser.COLLATION);
				this.state = 2289;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 2286;
					this.match(PostgreSQLParserParser.IF);
					this.state = 2287;
					this.match(PostgreSQLParserParser.NOT);
					this.state = 2288;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 2291;
				this.name_();
				this.state = 2292;
				this.match(PostgreSQLParserParser.FROM);
				this.state = 2293;
				this.name_();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_conversion_stmt(): Create_conversion_stmtContext {
		let _localctx: Create_conversion_stmtContext = new Create_conversion_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, PostgreSQLParserParser.RULE_create_conversion_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2297;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2299;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.DEFAULT) {
				{
				this.state = 2298;
				this.match(PostgreSQLParserParser.DEFAULT);
				}
			}

			this.state = 2301;
			this.match(PostgreSQLParserParser.CONVERSION);
			this.state = 2302;
			this.identifier(0);
			this.state = 2303;
			this.match(PostgreSQLParserParser.FOR);
			this.state = 2304;
			this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
			this.state = 2305;
			this.match(PostgreSQLParserParser.TO);
			this.state = 2306;
			this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
			this.state = 2307;
			this.match(PostgreSQLParserParser.FROM);
			this.state = 2308;
			this.name_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_database_stmt(): Create_database_stmtContext {
		let _localctx: Create_database_stmtContext = new Create_database_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, PostgreSQLParserParser.RULE_create_database_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2310;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2311;
			this.match(PostgreSQLParserParser.DATABASE);
			this.state = 2312;
			this.name_();
			{
			this.state = 2314;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 2313;
				this.match(PostgreSQLParserParser.WITH);
				}
			}

			this.state = 2319;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OWNER) {
				{
				this.state = 2316;
				this.match(PostgreSQLParserParser.OWNER);
				this.state = 2317;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2318;
				this.name_();
				}
			}

			this.state = 2324;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.TEMPLATE) {
				{
				this.state = 2321;
				this.match(PostgreSQLParserParser.TEMPLATE);
				this.state = 2322;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2323;
				this.name_();
				}
			}

			this.state = 2329;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.ENCODING) {
				{
				this.state = 2326;
				this.match(PostgreSQLParserParser.ENCODING);
				this.state = 2327;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2328;
				this.name_();
				}
			}

			this.state = 2334;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.LC_COLLATE) {
				{
				this.state = 2331;
				this.match(PostgreSQLParserParser.LC_COLLATE);
				this.state = 2332;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2333;
				this.name_();
				}
			}

			this.state = 2339;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.LC_CTYPE) {
				{
				this.state = 2336;
				this.match(PostgreSQLParserParser.LC_CTYPE);
				this.state = 2337;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2338;
				this.name_();
				}
			}

			this.state = 2344;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.TABLESPACE) {
				{
				this.state = 2341;
				this.match(PostgreSQLParserParser.TABLESPACE);
				this.state = 2342;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2343;
				this.name_();
				}
			}

			this.state = 2349;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.ALLOW_CONNECTIONS) {
				{
				this.state = 2346;
				this.match(PostgreSQLParserParser.ALLOW_CONNECTIONS);
				this.state = 2347;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2348;
				this.name_();
				}
			}

			this.state = 2355;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CONNECTION) {
				{
				this.state = 2351;
				this.match(PostgreSQLParserParser.CONNECTION);
				this.state = 2352;
				this.match(PostgreSQLParserParser.LIMIT);
				this.state = 2353;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2354;
				this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				}
			}

			this.state = 2360;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IS_TEMPLATE) {
				{
				this.state = 2357;
				this.match(PostgreSQLParserParser.IS_TEMPLATE);
				this.state = 2358;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2359;
				this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				}
			}

			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public domain_constraint(): Domain_constraintContext {
		let _localctx: Domain_constraintContext = new Domain_constraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, PostgreSQLParserParser.RULE_domain_constraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2364;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CONSTRAINT) {
				{
				this.state = 2362;
				this.match(PostgreSQLParserParser.CONSTRAINT);
				this.state = 2363;
				this.name_();
				}
			}

			this.state = 2374;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.NOT:
				{
				this.state = 2366;
				this.match(PostgreSQLParserParser.NOT);
				this.state = 2367;
				this.match(PostgreSQLParserParser.NULL);
				}
				break;
			case PostgreSQLParserParser.NULL:
				{
				this.state = 2368;
				this.match(PostgreSQLParserParser.NULL);
				}
				break;
			case PostgreSQLParserParser.CHECK:
				{
				this.state = 2369;
				this.match(PostgreSQLParserParser.CHECK);
				this.state = 2370;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 2371;
				this.expr(0);
				this.state = 2372;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_domain_stmt(): Create_domain_stmtContext {
		let _localctx: Create_domain_stmtContext = new Create_domain_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, PostgreSQLParserParser.RULE_create_domain_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2376;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2377;
			this.match(PostgreSQLParserParser.DOMAIN);
			this.state = 2378;
			this.name_();
			this.state = 2380;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.AS) {
				{
				this.state = 2379;
				this.match(PostgreSQLParserParser.AS);
				}
			}

			this.state = 2382;
			this.data_type();
			this.state = 2390;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 78)) & ~0x1F) === 0 && ((1 << (_la - 78)) & ((1 << (PostgreSQLParserParser.CHECK - 78)) | (1 << (PostgreSQLParserParser.COLLATE - 78)) | (1 << (PostgreSQLParserParser.CONSTRAINT - 78)))) !== 0) || _la === PostgreSQLParserParser.DEFAULT || _la === PostgreSQLParserParser.NOT || _la === PostgreSQLParserParser.NULL) {
				{
				this.state = 2388;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.COLLATE:
					{
					{
					this.state = 2383;
					this.match(PostgreSQLParserParser.COLLATE);
					this.state = 2384;
					this.name_();
					}
					}
					break;
				case PostgreSQLParserParser.DEFAULT:
					{
					{
					this.state = 2385;
					this.match(PostgreSQLParserParser.DEFAULT);
					this.state = 2386;
					this.expr(0);
					}
					}
					break;
				case PostgreSQLParserParser.CHECK:
				case PostgreSQLParserParser.CONSTRAINT:
				case PostgreSQLParserParser.NOT:
				case PostgreSQLParserParser.NULL:
					{
					this.state = 2387;
					this.domain_constraint();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 2392;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_event_trigger_cond(): Create_event_trigger_condContext {
		let _localctx: Create_event_trigger_condContext = new Create_event_trigger_condContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, PostgreSQLParserParser.RULE_create_event_trigger_cond);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2393;
			_localctx._filter_stmt = this.identifier(0);
			this.state = 2394;
			this.match(PostgreSQLParserParser.IN);
			this.state = 2395;
			this.match(PostgreSQLParserParser.OPEN_PAREN);
			this.state = 2396;
			this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
			this.state = 2401;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 2397;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2398;
				this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
				}
				}
				this.state = 2403;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2404;
			this.match(PostgreSQLParserParser.CLOSE_PAREN);
			this.state = 2409;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2405;
					this.match(PostgreSQLParserParser.AND);
					this.state = 2406;
					this.create_event_trigger_cond();
					}
					}
				}
				this.state = 2411;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 186, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_event_trigger_stmt(): Create_event_trigger_stmtContext {
		let _localctx: Create_event_trigger_stmtContext = new Create_event_trigger_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, PostgreSQLParserParser.RULE_create_event_trigger_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2412;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2413;
			this.match(PostgreSQLParserParser.EVENT);
			this.state = 2414;
			this.match(PostgreSQLParserParser.TRIGGER);
			this.state = 2415;
			_localctx._trigger = this.identifier(0);
			this.state = 2416;
			this.match(PostgreSQLParserParser.ON);
			this.state = 2417;
			_localctx._event = this.identifier(0);
			this.state = 2420;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WHEN) {
				{
				this.state = 2418;
				this.match(PostgreSQLParserParser.WHEN);
				this.state = 2419;
				this.create_event_trigger_cond();
				}
			}

			this.state = 2422;
			this.match(PostgreSQLParserParser.EXECUTE);
			this.state = 2423;
			this.match(PostgreSQLParserParser.PROCEDURE);
			this.state = 2424;
			_localctx._fn_name = this.identifier(0);
			this.state = 2425;
			this.match(PostgreSQLParserParser.OPEN_PAREN);
			this.state = 2426;
			this.match(PostgreSQLParserParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_foreign_data_options(): Create_foreign_data_optionsContext {
		let _localctx: Create_foreign_data_optionsContext = new Create_foreign_data_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, PostgreSQLParserParser.RULE_create_foreign_data_options);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2428;
			_localctx._opt = this.name_();
			this.state = 2429;
			this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
			this.state = 2434;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 188, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2430;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2431;
					this.create_foreign_data_options();
					}
					}
				}
				this.state = 2436;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 188, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_foreign_data_stmt(): Create_foreign_data_stmtContext {
		let _localctx: Create_foreign_data_stmtContext = new Create_foreign_data_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, PostgreSQLParserParser.RULE_create_foreign_data_stmt);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2437;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2438;
			this.match(PostgreSQLParserParser.FOREIGN);
			this.state = 2439;
			this.match(PostgreSQLParserParser.DATA);
			this.state = 2440;
			this.match(PostgreSQLParserParser.WRAPPER);
			this.state = 2441;
			_localctx._wrapper = this.identifier(0);
			this.state = 2448;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 2446;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PostgreSQLParserParser.HANDLER:
						{
						this.state = 2442;
						this.match(PostgreSQLParserParser.HANDLER);
						this.state = 2443;
						_localctx._handler = this.identifier(0);
						}
						break;
					case PostgreSQLParserParser.NO:
						{
						this.state = 2444;
						this.match(PostgreSQLParserParser.NO);
						this.state = 2445;
						this.match(PostgreSQLParserParser.HANDLER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 2450;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 190, this._ctx);
			}
			this.state = 2455;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.VALIDATOR:
				{
				this.state = 2451;
				this.match(PostgreSQLParserParser.VALIDATOR);
				this.state = 2452;
				_localctx._validator = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.NO:
				{
				this.state = 2453;
				this.match(PostgreSQLParserParser.NO);
				this.state = 2454;
				this.match(PostgreSQLParserParser.VALIDATOR);
				}
				break;
			case PostgreSQLParserParser.EOF:
			case PostgreSQLParserParser.OPTIONS:
			case PostgreSQLParserParser.CLOSE_PAREN:
			case PostgreSQLParserParser.SEMI:
				break;
			default:
				break;
			}
			this.state = 2462;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OPTIONS) {
				{
				this.state = 2457;
				this.match(PostgreSQLParserParser.OPTIONS);
				this.state = 2458;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 2459;
				_localctx._opts = this.create_foreign_data_options();
				this.state = 2460;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_foreign_table_stmt(): Create_foreign_table_stmtContext {
		let _localctx: Create_foreign_table_stmtContext = new Create_foreign_table_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, PostgreSQLParserParser.RULE_create_foreign_table_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2464;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2465;
			this.match(PostgreSQLParserParser.FOREIGN);
			this.state = 2466;
			this.match(PostgreSQLParserParser.TABLE);
			this.state = 2470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 2467;
				this.match(PostgreSQLParserParser.IF);
				this.state = 2468;
				this.match(PostgreSQLParserParser.NOT);
				this.state = 2469;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 2472;
			_localctx._table_name_TODO = this.identifier(0);
			this.state = 2473;
			this.match(PostgreSQLParserParser.OPEN_PAREN);
			this.state = 2474;
			_localctx._column_name_TODO = this.identifier(0);
			this.state = 2475;
			_localctx._column_type = this.identifier(0);
			this.state = 2481;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OPTIONS) {
				{
				this.state = 2476;
				this.match(PostgreSQLParserParser.OPTIONS);
				this.state = 2477;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 2478;
				_localctx._opts = this.create_foreign_data_options();
				this.state = 2479;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			this.state = 2485;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.COLLATE) {
				{
				this.state = 2483;
				this.match(PostgreSQLParserParser.COLLATE);
				this.state = 2484;
				this.create_collation_opt();
				}
			}

			this.state = 2487;
			this.match(PostgreSQLParserParser.CLOSE_PAREN);
			this.state = 2490;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.INHERITS) {
				{
				this.state = 2488;
				this.match(PostgreSQLParserParser.INHERITS);
				this.state = 2489;
				this.name_list();
				}
			}

			this.state = 2492;
			this.match(PostgreSQLParserParser.SERVER);
			this.state = 2493;
			_localctx._server_name = this.name_();
			this.state = 2499;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OPTIONS) {
				{
				this.state = 2494;
				this.match(PostgreSQLParserParser.OPTIONS);
				this.state = 2495;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 2496;
				_localctx._opts = this.create_foreign_data_options();
				this.state = 2497;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_function_stmt(): Create_function_stmtContext {
		let _localctx: Create_function_stmtContext = new Create_function_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, PostgreSQLParserParser.RULE_create_function_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2501;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2504;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OR) {
				{
				this.state = 2502;
				this.match(PostgreSQLParserParser.OR);
				this.state = 2503;
				this.match(PostgreSQLParserParser.REPLACE);
				}
			}

			this.state = 2506;
			this.match(PostgreSQLParserParser.FUNCTION);
			this.state = 2507;
			_localctx._fn_name = this.name_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_group_stmt(): Create_group_stmtContext {
		let _localctx: Create_group_stmtContext = new Create_group_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, PostgreSQLParserParser.RULE_create_group_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2509;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2510;
			this.match(PostgreSQLParserParser.GROUP);
			this.state = 2511;
			_localctx._group = this.identifier(0);
			this.state = 2553;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.ADMIN || _la === PostgreSQLParserParser.CREATEDB || _la === PostgreSQLParserParser.CREATEUSER || _la === PostgreSQLParserParser.ENCRYPTED || _la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.NOCREATEDB || _la === PostgreSQLParserParser.NOCREATEUSER || _la === PostgreSQLParserParser.PASSWORD || _la === PostgreSQLParserParser.ROLE || _la === PostgreSQLParserParser.SYSID || ((((_la - 609)) & ~0x1F) === 0 && ((1 << (_la - 609)) & ((1 << (PostgreSQLParserParser.UNENCRYPTED - 609)) | (1 << (PostgreSQLParserParser.USER - 609)) | (1 << (PostgreSQLParserParser.VALID - 609)))) !== 0) || ((((_la - 646)) & ~0x1F) === 0 && ((1 << (_la - 646)) & ((1 << (PostgreSQLParserParser.WITH - 646)) | (1 << (PostgreSQLParserParser.SUPERUSER - 646)) | (1 << (PostgreSQLParserParser.NOSUPERUSER - 646)) | (1 << (PostgreSQLParserParser.CREATEROLE - 646)) | (1 << (PostgreSQLParserParser.NOCREATEROLE - 646)) | (1 << (PostgreSQLParserParser.INHERIT - 646)) | (1 << (PostgreSQLParserParser.NOINHERIT - 646)) | (1 << (PostgreSQLParserParser.LOGIN - 646)) | (1 << (PostgreSQLParserParser.NOLOGIN - 646)))) !== 0)) {
				{
				this.state = 2513;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.WITH) {
					{
					this.state = 2512;
					this.match(PostgreSQLParserParser.WITH);
					}
				}

				this.state = 2549;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 2549;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 201, this._ctx) ) {
					case 1:
						{
						this.state = 2515;
						this.match(PostgreSQLParserParser.SUPERUSER);
						}
						break;

					case 2:
						{
						this.state = 2516;
						this.match(PostgreSQLParserParser.NOSUPERUSER);
						}
						break;

					case 3:
						{
						this.state = 2517;
						this.match(PostgreSQLParserParser.CREATEDB);
						}
						break;

					case 4:
						{
						this.state = 2518;
						this.match(PostgreSQLParserParser.NOCREATEDB);
						}
						break;

					case 5:
						{
						this.state = 2519;
						this.match(PostgreSQLParserParser.CREATEROLE);
						}
						break;

					case 6:
						{
						this.state = 2520;
						this.match(PostgreSQLParserParser.NOCREATEROLE);
						}
						break;

					case 7:
						{
						this.state = 2521;
						this.match(PostgreSQLParserParser.CREATEUSER);
						}
						break;

					case 8:
						{
						this.state = 2522;
						this.match(PostgreSQLParserParser.NOCREATEUSER);
						}
						break;

					case 9:
						{
						this.state = 2523;
						this.match(PostgreSQLParserParser.INHERIT);
						}
						break;

					case 10:
						{
						this.state = 2524;
						this.match(PostgreSQLParserParser.NOINHERIT);
						}
						break;

					case 11:
						{
						this.state = 2525;
						this.match(PostgreSQLParserParser.LOGIN);
						}
						break;

					case 12:
						{
						this.state = 2526;
						this.match(PostgreSQLParserParser.NOLOGIN);
						}
						break;

					case 13:
						{
						this.state = 2528;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PostgreSQLParserParser.ENCRYPTED || _la === PostgreSQLParserParser.UNENCRYPTED) {
							{
							this.state = 2527;
							_la = this._input.LA(1);
							if (!(_la === PostgreSQLParserParser.ENCRYPTED || _la === PostgreSQLParserParser.UNENCRYPTED)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
						}

						this.state = 2530;
						this.match(PostgreSQLParserParser.PASSWORD);
						this.state = 2531;
						_la = this._input.LA(1);
						if (!(_la === PostgreSQLParserParser.NULL || _la === PostgreSQLParserParser.SINGLEQ_STRING_LITERAL)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;

					case 14:
						{
						this.state = 2532;
						this.match(PostgreSQLParserParser.VALID);
						this.state = 2533;
						this.match(PostgreSQLParserParser.UNTIL);
						this.state = 2534;
						this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
						}
						break;

					case 15:
						{
						this.state = 2535;
						this.match(PostgreSQLParserParser.IN);
						this.state = 2536;
						this.match(PostgreSQLParserParser.ROLE);
						this.state = 2537;
						this.name_list();
						}
						break;

					case 16:
						{
						this.state = 2538;
						this.match(PostgreSQLParserParser.IN);
						this.state = 2539;
						this.match(PostgreSQLParserParser.GROUP);
						this.state = 2540;
						this.name_list();
						}
						break;

					case 17:
						{
						this.state = 2541;
						this.match(PostgreSQLParserParser.ROLE);
						this.state = 2542;
						this.name_list();
						}
						break;

					case 18:
						{
						this.state = 2543;
						this.match(PostgreSQLParserParser.ADMIN);
						this.state = 2544;
						this.name_list();
						}
						break;

					case 19:
						{
						this.state = 2545;
						this.match(PostgreSQLParserParser.USER);
						this.state = 2546;
						this.name_list();
						}
						break;

					case 20:
						{
						this.state = 2547;
						this.match(PostgreSQLParserParser.SYSID);
						this.state = 2548;
						this.match(PostgreSQLParserParser.INTEGER_LITERAL);
						}
						break;
					}
					}
					this.state = 2551;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PostgreSQLParserParser.ADMIN || _la === PostgreSQLParserParser.CREATEDB || _la === PostgreSQLParserParser.CREATEUSER || _la === PostgreSQLParserParser.ENCRYPTED || _la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.NOCREATEDB || _la === PostgreSQLParserParser.NOCREATEUSER || _la === PostgreSQLParserParser.PASSWORD || _la === PostgreSQLParserParser.ROLE || _la === PostgreSQLParserParser.SYSID || ((((_la - 609)) & ~0x1F) === 0 && ((1 << (_la - 609)) & ((1 << (PostgreSQLParserParser.UNENCRYPTED - 609)) | (1 << (PostgreSQLParserParser.USER - 609)) | (1 << (PostgreSQLParserParser.VALID - 609)))) !== 0) || ((((_la - 655)) & ~0x1F) === 0 && ((1 << (_la - 655)) & ((1 << (PostgreSQLParserParser.SUPERUSER - 655)) | (1 << (PostgreSQLParserParser.NOSUPERUSER - 655)) | (1 << (PostgreSQLParserParser.CREATEROLE - 655)) | (1 << (PostgreSQLParserParser.NOCREATEROLE - 655)) | (1 << (PostgreSQLParserParser.INHERIT - 655)) | (1 << (PostgreSQLParserParser.NOINHERIT - 655)) | (1 << (PostgreSQLParserParser.LOGIN - 655)) | (1 << (PostgreSQLParserParser.NOLOGIN - 655)))) !== 0));
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_index_stmt(): Create_index_stmtContext {
		let _localctx: Create_index_stmtContext = new Create_index_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, PostgreSQLParserParser.RULE_create_index_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2555;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2557;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.UNIQUE) {
				{
				this.state = 2556;
				this.match(PostgreSQLParserParser.UNIQUE);
				}
			}

			this.state = 2559;
			this.match(PostgreSQLParserParser.INDEX);
			this.state = 2561;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CONCURRENTLY) {
				{
				this.state = 2560;
				this.match(PostgreSQLParserParser.CONCURRENTLY);
				}
			}

			this.state = 2569;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 690)) & ~0x1F) === 0 && ((1 << (_la - 690)) & ((1 << (PostgreSQLParserParser.IF - 690)) | (1 << (PostgreSQLParserParser.ABSTIME - 690)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 690)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 690)))) !== 0) || ((((_la - 722)) & ~0x1F) === 0 && ((1 << (_la - 722)) & ((1 << (PostgreSQLParserParser.BOOL - 722)) | (1 << (PostgreSQLParserParser.BOX - 722)) | (1 << (PostgreSQLParserParser.BYTEA - 722)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 722)) | (1 << (PostgreSQLParserParser.CIDR - 722)) | (1 << (PostgreSQLParserParser.CIRCLE - 722)) | (1 << (PostgreSQLParserParser.FLOAT4 - 722)) | (1 << (PostgreSQLParserParser.FLOAT8 - 722)) | (1 << (PostgreSQLParserParser.INET - 722)) | (1 << (PostgreSQLParserParser.INT2 - 722)) | (1 << (PostgreSQLParserParser.INT4 - 722)) | (1 << (PostgreSQLParserParser.INT8 - 722)) | (1 << (PostgreSQLParserParser.JSON - 722)) | (1 << (PostgreSQLParserParser.JSONB - 722)) | (1 << (PostgreSQLParserParser.LINE - 722)) | (1 << (PostgreSQLParserParser.LSEG - 722)) | (1 << (PostgreSQLParserParser.MACADDR - 722)) | (1 << (PostgreSQLParserParser.MACADDR8 - 722)) | (1 << (PostgreSQLParserParser.MONEY - 722)) | (1 << (PostgreSQLParserParser.PG_LSN - 722)) | (1 << (PostgreSQLParserParser.POINT - 722)) | (1 << (PostgreSQLParserParser.POLYGON - 722)) | (1 << (PostgreSQLParserParser.RELTIME - 722)) | (1 << (PostgreSQLParserParser.SERIAL - 722)) | (1 << (PostgreSQLParserParser.SERIAL2 - 722)) | (1 << (PostgreSQLParserParser.SERIAL4 - 722)) | (1 << (PostgreSQLParserParser.SERIAL8 - 722)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 722)) | (1 << (PostgreSQLParserParser.TEXT - 722)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 722)) | (1 << (PostgreSQLParserParser.TIMETZ - 722)))) !== 0) || ((((_la - 754)) & ~0x1F) === 0 && ((1 << (_la - 754)) & ((1 << (PostgreSQLParserParser.TSQUERY - 754)) | (1 << (PostgreSQLParserParser.TSVECTOR - 754)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 754)) | (1 << (PostgreSQLParserParser.UUID - 754)) | (1 << (PostgreSQLParserParser.VARBIT - 754)) | (1 << (PostgreSQLParserParser.XML - 754)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 754)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 754)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 754)))) !== 0)) {
				{
				this.state = 2566;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IF) {
					{
					this.state = 2563;
					this.match(PostgreSQLParserParser.IF);
					this.state = 2564;
					this.match(PostgreSQLParserParser.NOT);
					this.state = 2565;
					this.match(PostgreSQLParserParser.EXISTS);
					}
				}

				this.state = 2568;
				_localctx._index_name = this.identifier(0);
				}
			}

			this.state = 2571;
			this.match(PostgreSQLParserParser.ON);
			this.state = 2572;
			_localctx._tableName = this.identifier(0);
			this.state = 2575;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.USING) {
				{
				this.state = 2573;
				this.match(PostgreSQLParserParser.USING);
				this.state = 2574;
				this.index_method();
				}
			}

			this.state = 2579;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.TABLESPACE) {
				{
				this.state = 2577;
				this.match(PostgreSQLParserParser.TABLESPACE);
				this.state = 2578;
				_localctx._tablespace_name = this.identifier(0);
				}
			}

			this.state = 2583;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WHERE) {
				{
				this.state = 2581;
				this.match(PostgreSQLParserParser.WHERE);
				this.state = 2582;
				this.predicate(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_language_stmt(): Create_language_stmtContext {
		let _localctx: Create_language_stmtContext = new Create_language_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, PostgreSQLParserParser.RULE_create_language_stmt);
		let _la: number;
		try {
			this.state = 2618;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 218, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2585;
				this.match(PostgreSQLParserParser.CREATE);
				this.state = 2588;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.OR) {
					{
					this.state = 2586;
					this.match(PostgreSQLParserParser.OR);
					this.state = 2587;
					this.match(PostgreSQLParserParser.REPLACE);
					}
				}

				this.state = 2591;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.PROCEDURAL) {
					{
					this.state = 2590;
					this.match(PostgreSQLParserParser.PROCEDURAL);
					}
				}

				this.state = 2593;
				this.match(PostgreSQLParserParser.LANGUAGE);
				this.state = 2594;
				_localctx._language_name = this.identifier(0);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2595;
				this.match(PostgreSQLParserParser.CREATE);
				this.state = 2598;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.OR) {
					{
					this.state = 2596;
					this.match(PostgreSQLParserParser.OR);
					this.state = 2597;
					this.match(PostgreSQLParserParser.REPLACE);
					}
				}

				this.state = 2601;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.TRUSTED) {
					{
					this.state = 2600;
					this.match(PostgreSQLParserParser.TRUSTED);
					}
				}

				this.state = 2604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.PROCEDURAL) {
					{
					this.state = 2603;
					this.match(PostgreSQLParserParser.PROCEDURAL);
					}
				}

				this.state = 2606;
				this.match(PostgreSQLParserParser.LANGUAGE);
				this.state = 2607;
				_localctx._language_name = this.identifier(0);
				this.state = 2608;
				this.match(PostgreSQLParserParser.HANDLER);
				this.state = 2609;
				_localctx._call_handler = this.identifier(0);
				this.state = 2612;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.INLINE) {
					{
					this.state = 2610;
					this.match(PostgreSQLParserParser.INLINE);
					this.state = 2611;
					_localctx._inline_handler = this.identifier(0);
					}
				}

				this.state = 2616;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.VALIDATOR) {
					{
					this.state = 2614;
					this.match(PostgreSQLParserParser.VALIDATOR);
					this.state = 2615;
					_localctx._valfunction = this.identifier(0);
					}
				}

				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_materialized_view_stmt(): Create_materialized_view_stmtContext {
		let _localctx: Create_materialized_view_stmtContext = new Create_materialized_view_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, PostgreSQLParserParser.RULE_create_materialized_view_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2620;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2621;
			this.match(PostgreSQLParserParser.MATERIALIZED);
			this.state = 2622;
			this.match(PostgreSQLParserParser.VIEW);
			this.state = 2626;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 2623;
				this.match(PostgreSQLParserParser.IF);
				this.state = 2624;
				this.match(PostgreSQLParserParser.NOT);
				this.state = 2625;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 2628;
			_localctx._tableName = this.identifier(0);
			this.state = 2633;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OPEN_PAREN) {
				{
				this.state = 2629;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 2630;
				_localctx._columns = this.identifier_list();
				this.state = 2631;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			this.state = 2636;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 2635;
				this.match(PostgreSQLParserParser.WITH);
				}
			}

			this.state = 2640;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.TABLESPACE) {
				{
				this.state = 2638;
				this.match(PostgreSQLParserParser.TABLESPACE);
				this.state = 2639;
				_localctx._tablespace_name = this.identifier(0);
				}
			}

			this.state = 2642;
			this.match(PostgreSQLParserParser.AS);
			this.state = 2643;
			_localctx._query = this.select_stmt();
			this.state = 2649;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 2644;
				this.match(PostgreSQLParserParser.WITH);
				this.state = 2646;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.NO) {
					{
					this.state = 2645;
					this.match(PostgreSQLParserParser.NO);
					}
				}

				this.state = 2648;
				this.match(PostgreSQLParserParser.DATA);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_operator_stmt(): Create_operator_stmtContext {
		let _localctx: Create_operator_stmtContext = new Create_operator_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, PostgreSQLParserParser.RULE_create_operator_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2651;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2652;
			this.match(PostgreSQLParserParser.OPERATOR);
			this.state = 2653;
			_localctx._opName = this.identifier(0);
			this.state = 2654;
			this.match(PostgreSQLParserParser.OPEN_PAREN);
			this.state = 2655;
			this.match(PostgreSQLParserParser.PROCEDURE);
			this.state = 2656;
			this.match(PostgreSQLParserParser.EQUAL);
			this.state = 2657;
			_localctx._function_name = this.identifier(0);
			this.state = 2662;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 225, this._ctx) ) {
			case 1:
				{
				this.state = 2658;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2659;
				this.match(PostgreSQLParserParser.LEFTARG);
				this.state = 2660;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2661;
				_localctx._left_type = this.name_();
				}
				break;
			}
			this.state = 2668;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 226, this._ctx) ) {
			case 1:
				{
				this.state = 2664;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2665;
				this.match(PostgreSQLParserParser.RIGHTARG);
				this.state = 2666;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2667;
				_localctx._right_type = this.name_();
				}
				break;
			}
			this.state = 2674;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 227, this._ctx) ) {
			case 1:
				{
				this.state = 2670;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2671;
				this.match(PostgreSQLParserParser.COMMUTATOR);
				this.state = 2672;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2673;
				_localctx._com_op = this.name_();
				}
				break;
			}
			this.state = 2680;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 228, this._ctx) ) {
			case 1:
				{
				this.state = 2676;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2677;
				this.match(PostgreSQLParserParser.NEGATOR);
				this.state = 2678;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2679;
				_localctx._neg_op = this.name_();
				}
				break;
			}
			this.state = 2686;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 229, this._ctx) ) {
			case 1:
				{
				this.state = 2682;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2683;
				this.match(PostgreSQLParserParser.RESTRICT);
				this.state = 2684;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2685;
				_localctx._res_proc = this.name_();
				}
				break;
			}
			this.state = 2692;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 230, this._ctx) ) {
			case 1:
				{
				this.state = 2688;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2689;
				this.match(PostgreSQLParserParser.JOIN);
				this.state = 2690;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 2691;
				_localctx._join_proc = this.name_();
				}
				break;
			}
			this.state = 2696;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 231, this._ctx) ) {
			case 1:
				{
				this.state = 2694;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2695;
				this.match(PostgreSQLParserParser.HASHES);
				}
				break;
			}
			this.state = 2700;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.COMMA) {
				{
				this.state = 2698;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2699;
				this.match(PostgreSQLParserParser.MERGES);
				}
			}

			this.state = 2702;
			this.match(PostgreSQLParserParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_operator_class_opt(): Create_operator_class_optContext {
		let _localctx: Create_operator_class_optContext = new Create_operator_class_optContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, PostgreSQLParserParser.RULE_create_operator_class_opt);
		let _la: number;
		try {
			this.state = 2734;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.OPERATOR:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2704;
				this.match(PostgreSQLParserParser.OPERATOR);
				this.state = 2705;
				_localctx._strategy_number = this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				this.state = 2706;
				_localctx._opName = this.identifier(0);
				this.state = 2713;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.OPEN_PAREN) {
					{
					this.state = 2707;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 2708;
					this.identifier(0);
					this.state = 2709;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 2710;
					this.identifier(0);
					this.state = 2711;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
				}

				}
				}
				break;
			case PostgreSQLParserParser.FUNCTION:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2715;
				this.match(PostgreSQLParserParser.FUNCTION);
				this.state = 2716;
				_localctx._support_number = this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				this.state = 2725;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.OPEN_PAREN) {
					{
					this.state = 2717;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 2718;
					this.identifier(0);
					this.state = 2721;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParserParser.COMMA) {
						{
						this.state = 2719;
						this.match(PostgreSQLParserParser.COMMA);
						this.state = 2720;
						this.identifier(0);
						}
					}

					this.state = 2723;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
				}

				this.state = 2727;
				_localctx._func_name_ = this.identifier(0);
				this.state = 2728;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 2729;
				this.data_type_list();
				this.state = 2730;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				}
				break;
			case PostgreSQLParserParser.STORAGE:
				this.enterOuterAlt(_localctx, 3);
				{
				{
				this.state = 2732;
				this.match(PostgreSQLParserParser.STORAGE);
				this.state = 2733;
				_localctx._storage_type = this.identifier(0);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_operator_class_stmt(): Create_operator_class_stmtContext {
		let _localctx: Create_operator_class_stmtContext = new Create_operator_class_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, PostgreSQLParserParser.RULE_create_operator_class_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2736;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2737;
			this.match(PostgreSQLParserParser.OPERATOR);
			this.state = 2738;
			this.match(PostgreSQLParserParser.CLASS);
			this.state = 2739;
			_localctx._name = this.identifier(0);
			this.state = 2741;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.DEFAULT) {
				{
				this.state = 2740;
				this.match(PostgreSQLParserParser.DEFAULT);
				}
			}

			this.state = 2743;
			this.match(PostgreSQLParserParser.FOR);
			this.state = 2744;
			this.match(PostgreSQLParserParser.TYPE);
			this.state = 2745;
			_localctx._op_type = this.identifier(0);
			this.state = 2746;
			this.match(PostgreSQLParserParser.USING);
			this.state = 2747;
			this.index_method();
			this.state = 2750;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.FAMILY) {
				{
				this.state = 2748;
				this.match(PostgreSQLParserParser.FAMILY);
				this.state = 2749;
				_localctx._family_name = this.identifier(0);
				}
			}

			this.state = 2752;
			this.match(PostgreSQLParserParser.AS);
			this.state = 2753;
			this.create_operator_class_opt();
			this.state = 2758;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 2754;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 2755;
				this.create_operator_class_opt();
				}
				}
				this.state = 2760;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_operator_family_stmt(): Create_operator_family_stmtContext {
		let _localctx: Create_operator_family_stmtContext = new Create_operator_family_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, PostgreSQLParserParser.RULE_create_operator_family_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2761;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2762;
			this.match(PostgreSQLParserParser.OPERATOR);
			this.state = 2763;
			this.match(PostgreSQLParserParser.FAMILY);
			this.state = 2764;
			_localctx._name = this.identifier(0);
			this.state = 2765;
			this.match(PostgreSQLParserParser.USING);
			this.state = 2766;
			this.index_method();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_policy_stmt(): Create_policy_stmtContext {
		let _localctx: Create_policy_stmtContext = new Create_policy_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, PostgreSQLParserParser.RULE_create_policy_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2768;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2769;
			this.match(PostgreSQLParserParser.POLICY);
			this.state = 2770;
			_localctx._name = this.identifier(0);
			this.state = 2771;
			this.match(PostgreSQLParserParser.ON);
			this.state = 2772;
			_localctx._tableName = this.identifier(0);
			this.state = 2775;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.FOR) {
				{
				this.state = 2773;
				this.match(PostgreSQLParserParser.FOR);
				this.state = 2774;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.ALL || _la === PostgreSQLParserParser.DELETE || _la === PostgreSQLParserParser.INSERT || _la === PostgreSQLParserParser.SELECT || _la === PostgreSQLParserParser.UPDATE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2779;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.TO) {
				{
				this.state = 2777;
				this.match(PostgreSQLParserParser.TO);
				this.state = 2778;
				_localctx._role = this.role_name();
				}
			}

			this.state = 2786;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.USING) {
				{
				this.state = 2781;
				this.match(PostgreSQLParserParser.USING);
				this.state = 2782;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 2783;
				this.predicate(0);
				this.state = 2784;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			this.state = 2794;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 2788;
				this.match(PostgreSQLParserParser.WITH);
				this.state = 2789;
				this.match(PostgreSQLParserParser.CHECK);
				this.state = 2790;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 2791;
				this.predicate(0);
				this.state = 2792;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_role_stmt(): Create_role_stmtContext {
		let _localctx: Create_role_stmtContext = new Create_role_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, PostgreSQLParserParser.RULE_create_role_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2796;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2797;
			this.match(PostgreSQLParserParser.ROLE);
			this.state = 2798;
			_localctx._role = this.role_name();
			this.state = 2845;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.ADMIN || _la === PostgreSQLParserParser.CONNECTION || _la === PostgreSQLParserParser.CREATEDB || _la === PostgreSQLParserParser.ENCRYPTED || _la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.NOCREATEDB || _la === PostgreSQLParserParser.PASSWORD || _la === PostgreSQLParserParser.ROLE || _la === PostgreSQLParserParser.SYSID || ((((_la - 620)) & ~0x1F) === 0 && ((1 << (_la - 620)) & ((1 << (PostgreSQLParserParser.USER - 620)) | (1 << (PostgreSQLParserParser.VALID - 620)) | (1 << (PostgreSQLParserParser.WITH - 620)))) !== 0) || ((((_la - 655)) & ~0x1F) === 0 && ((1 << (_la - 655)) & ((1 << (PostgreSQLParserParser.SUPERUSER - 655)) | (1 << (PostgreSQLParserParser.NOSUPERUSER - 655)) | (1 << (PostgreSQLParserParser.CREATEROLE - 655)) | (1 << (PostgreSQLParserParser.NOCREATEROLE - 655)) | (1 << (PostgreSQLParserParser.INHERIT - 655)) | (1 << (PostgreSQLParserParser.NOINHERIT - 655)) | (1 << (PostgreSQLParserParser.LOGIN - 655)) | (1 << (PostgreSQLParserParser.NOLOGIN - 655)) | (1 << (PostgreSQLParserParser.REPLICATION - 655)) | (1 << (PostgreSQLParserParser.NOREPLICATION - 655)) | (1 << (PostgreSQLParserParser.BYPASSRLS - 655)) | (1 << (PostgreSQLParserParser.NOBYPASSRLS - 655)))) !== 0)) {
				{
				this.state = 2800;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.WITH) {
					{
					this.state = 2799;
					this.match(PostgreSQLParserParser.WITH);
					}
				}

				this.state = 2841;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					this.state = 2841;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 246, this._ctx) ) {
					case 1:
						{
						this.state = 2802;
						this.match(PostgreSQLParserParser.SUPERUSER);
						}
						break;

					case 2:
						{
						this.state = 2803;
						this.match(PostgreSQLParserParser.NOSUPERUSER);
						}
						break;

					case 3:
						{
						this.state = 2804;
						this.match(PostgreSQLParserParser.CREATEDB);
						}
						break;

					case 4:
						{
						this.state = 2805;
						this.match(PostgreSQLParserParser.NOCREATEDB);
						}
						break;

					case 5:
						{
						this.state = 2806;
						this.match(PostgreSQLParserParser.CREATEROLE);
						}
						break;

					case 6:
						{
						this.state = 2807;
						this.match(PostgreSQLParserParser.NOCREATEROLE);
						}
						break;

					case 7:
						{
						this.state = 2808;
						this.match(PostgreSQLParserParser.INHERIT);
						}
						break;

					case 8:
						{
						this.state = 2809;
						this.match(PostgreSQLParserParser.NOINHERIT);
						}
						break;

					case 9:
						{
						this.state = 2810;
						this.match(PostgreSQLParserParser.LOGIN);
						}
						break;

					case 10:
						{
						this.state = 2811;
						this.match(PostgreSQLParserParser.NOLOGIN);
						}
						break;

					case 11:
						{
						this.state = 2812;
						this.match(PostgreSQLParserParser.REPLICATION);
						}
						break;

					case 12:
						{
						this.state = 2813;
						this.match(PostgreSQLParserParser.NOREPLICATION);
						}
						break;

					case 13:
						{
						this.state = 2814;
						this.match(PostgreSQLParserParser.BYPASSRLS);
						}
						break;

					case 14:
						{
						this.state = 2815;
						this.match(PostgreSQLParserParser.NOBYPASSRLS);
						}
						break;

					case 15:
						{
						this.state = 2816;
						this.match(PostgreSQLParserParser.CONNECTION);
						this.state = 2817;
						this.match(PostgreSQLParserParser.LIMIT);
						this.state = 2818;
						this.match(PostgreSQLParserParser.INTEGER_LITERAL);
						}
						break;

					case 16:
						{
						this.state = 2820;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PostgreSQLParserParser.ENCRYPTED) {
							{
							this.state = 2819;
							this.match(PostgreSQLParserParser.ENCRYPTED);
							}
						}

						this.state = 2822;
						this.match(PostgreSQLParserParser.PASSWORD);
						this.state = 2823;
						_la = this._input.LA(1);
						if (!(_la === PostgreSQLParserParser.NULL || _la === PostgreSQLParserParser.SINGLEQ_STRING_LITERAL)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;

					case 17:
						{
						this.state = 2824;
						this.match(PostgreSQLParserParser.VALID);
						this.state = 2825;
						this.match(PostgreSQLParserParser.UNTIL);
						this.state = 2826;
						this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
						}
						break;

					case 18:
						{
						this.state = 2827;
						this.match(PostgreSQLParserParser.IN);
						this.state = 2828;
						this.match(PostgreSQLParserParser.ROLE);
						this.state = 2829;
						this.name_list();
						}
						break;

					case 19:
						{
						this.state = 2830;
						this.match(PostgreSQLParserParser.IN);
						this.state = 2831;
						this.match(PostgreSQLParserParser.GROUP);
						this.state = 2832;
						this.name_list();
						}
						break;

					case 20:
						{
						this.state = 2833;
						this.match(PostgreSQLParserParser.ROLE);
						this.state = 2834;
						this.name_list();
						}
						break;

					case 21:
						{
						this.state = 2835;
						this.match(PostgreSQLParserParser.ADMIN);
						this.state = 2836;
						this.name_list();
						}
						break;

					case 22:
						{
						this.state = 2837;
						this.match(PostgreSQLParserParser.USER);
						this.state = 2838;
						this.name_list();
						}
						break;

					case 23:
						{
						this.state = 2839;
						this.match(PostgreSQLParserParser.SYSID);
						this.state = 2840;
						this.match(PostgreSQLParserParser.INTEGER_LITERAL);
						}
						break;
					}
					}
					this.state = 2843;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PostgreSQLParserParser.ADMIN || _la === PostgreSQLParserParser.CONNECTION || _la === PostgreSQLParserParser.CREATEDB || _la === PostgreSQLParserParser.ENCRYPTED || _la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.NOCREATEDB || _la === PostgreSQLParserParser.PASSWORD || _la === PostgreSQLParserParser.ROLE || _la === PostgreSQLParserParser.SYSID || _la === PostgreSQLParserParser.USER || _la === PostgreSQLParserParser.VALID || ((((_la - 655)) & ~0x1F) === 0 && ((1 << (_la - 655)) & ((1 << (PostgreSQLParserParser.SUPERUSER - 655)) | (1 << (PostgreSQLParserParser.NOSUPERUSER - 655)) | (1 << (PostgreSQLParserParser.CREATEROLE - 655)) | (1 << (PostgreSQLParserParser.NOCREATEROLE - 655)) | (1 << (PostgreSQLParserParser.INHERIT - 655)) | (1 << (PostgreSQLParserParser.NOINHERIT - 655)) | (1 << (PostgreSQLParserParser.LOGIN - 655)) | (1 << (PostgreSQLParserParser.NOLOGIN - 655)) | (1 << (PostgreSQLParserParser.REPLICATION - 655)) | (1 << (PostgreSQLParserParser.NOREPLICATION - 655)) | (1 << (PostgreSQLParserParser.BYPASSRLS - 655)) | (1 << (PostgreSQLParserParser.NOBYPASSRLS - 655)))) !== 0));
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_rule_event(): Create_rule_eventContext {
		let _localctx: Create_rule_eventContext = new Create_rule_eventContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, PostgreSQLParserParser.RULE_create_rule_event);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2847;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParserParser.DELETE || _la === PostgreSQLParserParser.INSERT || _la === PostgreSQLParserParser.SELECT || _la === PostgreSQLParserParser.UPDATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_rule_stmt(): Create_rule_stmtContext {
		let _localctx: Create_rule_stmtContext = new Create_rule_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, PostgreSQLParserParser.RULE_create_rule_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2849;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2852;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OR) {
				{
				this.state = 2850;
				this.match(PostgreSQLParserParser.OR);
				this.state = 2851;
				this.match(PostgreSQLParserParser.REPLACE);
				}
			}

			this.state = 2854;
			this.match(PostgreSQLParserParser.RULE);
			this.state = 2855;
			_localctx._name = this.name_();
			this.state = 2856;
			this.match(PostgreSQLParserParser.AS);
			this.state = 2857;
			this.match(PostgreSQLParserParser.ON);
			this.state = 2858;
			_localctx._event = this.create_rule_event();
			this.state = 2859;
			this.match(PostgreSQLParserParser.TO);
			this.state = 2860;
			_localctx._tableName = this.identifier(0);
			this.state = 2863;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WHERE) {
				{
				this.state = 2861;
				this.match(PostgreSQLParserParser.WHERE);
				this.state = 2862;
				this.predicate(0);
				}
			}

			this.state = 2865;
			this.match(PostgreSQLParserParser.DO);
			this.state = 2867;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 251, this._ctx) ) {
			case 1:
				{
				this.state = 2866;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.ALSO || _la === PostgreSQLParserParser.INSTEAD)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 2871;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 252, this._ctx) ) {
			case 1:
				{
				this.state = 2869;
				this.match(PostgreSQLParserParser.NOTHING);
				}
				break;

			case 2:
				{
				this.state = 2870;
				_localctx._command = this.identifier(0);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_schema_stmt(): Create_schema_stmtContext {
		let _localctx: Create_schema_stmtContext = new Create_schema_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, PostgreSQLParserParser.RULE_create_schema_stmt);
		let _la: number;
		try {
			this.state = 2907;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 257, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				{
				this.state = 2873;
				this.match(PostgreSQLParserParser.CREATE);
				this.state = 2874;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 2875;
				_localctx._schema_name = this.identifier(0);
				this.state = 2878;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 253, this._ctx) ) {
				case 1:
					{
					this.state = 2876;
					this.match(PostgreSQLParserParser.AUTHORIZATION);
					this.state = 2877;
					this.role_name();
					}
					break;
				}
				this.state = 2881;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 254, this._ctx) ) {
				case 1:
					{
					this.state = 2880;
					this.todo_fill_in();
					}
					break;
				}
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 2883;
				this.match(PostgreSQLParserParser.CREATE);
				this.state = 2884;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 2885;
				this.match(PostgreSQLParserParser.AUTHORIZATION);
				this.state = 2886;
				this.role_name();
				this.state = 2888;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 255, this._ctx) ) {
				case 1:
					{
					this.state = 2887;
					this.todo_fill_in();
					}
					break;
				}
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				{
				this.state = 2890;
				this.match(PostgreSQLParserParser.CREATE);
				this.state = 2891;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 2892;
				this.match(PostgreSQLParserParser.IF);
				this.state = 2893;
				this.match(PostgreSQLParserParser.NOT);
				this.state = 2894;
				this.match(PostgreSQLParserParser.EXISTS);
				this.state = 2895;
				_localctx._schema_name = this.identifier(0);
				this.state = 2898;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.AUTHORIZATION) {
					{
					this.state = 2896;
					this.match(PostgreSQLParserParser.AUTHORIZATION);
					this.state = 2897;
					this.role_name();
					}
				}

				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				{
				this.state = 2900;
				this.match(PostgreSQLParserParser.CREATE);
				this.state = 2901;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 2902;
				this.match(PostgreSQLParserParser.IF);
				this.state = 2903;
				this.match(PostgreSQLParserParser.NOT);
				this.state = 2904;
				this.match(PostgreSQLParserParser.EXISTS);
				this.state = 2905;
				this.match(PostgreSQLParserParser.AUTHORIZATION);
				this.state = 2906;
				this.role_name();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_sequence_stmt(): Create_sequence_stmtContext {
		let _localctx: Create_sequence_stmtContext = new Create_sequence_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, PostgreSQLParserParser.RULE_create_sequence_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2909;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 2911;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.TEMP || _la === PostgreSQLParserParser.TEMPORARY) {
				{
				this.state = 2910;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.TEMP || _la === PostgreSQLParserParser.TEMPORARY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2913;
			this.match(PostgreSQLParserParser.SEQUENCE);
			this.state = 2917;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 2914;
				this.match(PostgreSQLParserParser.IF);
				this.state = 2915;
				this.match(PostgreSQLParserParser.NOT);
				this.state = 2916;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 2919;
			_localctx._name = this.identifier(0);
			this.state = 2925;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.INCREMENT) {
				{
				this.state = 2920;
				this.match(PostgreSQLParserParser.INCREMENT);
				this.state = 2922;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.BY) {
					{
					this.state = 2921;
					this.match(PostgreSQLParserParser.BY);
					}
				}

				this.state = 2924;
				_localctx._increment = this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				}
			}

			this.state = 2931;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 262, this._ctx) ) {
			case 1:
				{
				this.state = 2927;
				this.match(PostgreSQLParserParser.MINVALUE);
				this.state = 2928;
				_localctx._minvalue = this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				}
				break;

			case 2:
				{
				this.state = 2929;
				this.match(PostgreSQLParserParser.NO);
				this.state = 2930;
				this.match(PostgreSQLParserParser.MINVALUE);
				}
				break;
			}
			this.state = 2937;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 263, this._ctx) ) {
			case 1:
				{
				this.state = 2933;
				this.match(PostgreSQLParserParser.MAXVALUE);
				this.state = 2934;
				_localctx._maxvalue = this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				}
				break;

			case 2:
				{
				this.state = 2935;
				this.match(PostgreSQLParserParser.NO);
				this.state = 2936;
				this.match(PostgreSQLParserParser.MAXVALUE);
				}
				break;
			}
			this.state = 2944;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.START) {
				{
				this.state = 2939;
				this.match(PostgreSQLParserParser.START);
				this.state = 2941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.WITH) {
					{
					this.state = 2940;
					this.match(PostgreSQLParserParser.WITH);
					}
				}

				this.state = 2943;
				_localctx._start = this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				}
			}

			this.state = 2948;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CACHE) {
				{
				this.state = 2946;
				this.match(PostgreSQLParserParser.CACHE);
				this.state = 2947;
				_localctx._cache = this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				}
			}

			this.state = 2954;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CYCLE || _la === PostgreSQLParserParser.NO) {
				{
				this.state = 2951;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.NO) {
					{
					this.state = 2950;
					this.match(PostgreSQLParserParser.NO);
					}
				}

				this.state = 2953;
				this.match(PostgreSQLParserParser.CYCLE);
				}
			}

			this.state = 2965;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OWNED) {
				{
				this.state = 2956;
				this.match(PostgreSQLParserParser.OWNED);
				this.state = 2957;
				this.match(PostgreSQLParserParser.BY);
				this.state = 2963;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 269, this._ctx) ) {
				case 1:
					{
					{
					this.state = 2958;
					_localctx._table_name = this.identifier(0);
					this.state = 2959;
					this.match(PostgreSQLParserParser.DOT);
					this.state = 2960;
					_localctx._column_name_ = this.identifier(0);
					}
					}
					break;

				case 2:
					{
					this.state = 2962;
					this.match(PostgreSQLParserParser.NONE);
					}
					break;
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_server_stmt(): Create_server_stmtContext {
		let _localctx: Create_server_stmtContext = new Create_server_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, PostgreSQLParserParser.RULE_create_server_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2967;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_statistics_stmt(): Create_statistics_stmtContext {
		let _localctx: Create_statistics_stmtContext = new Create_statistics_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, PostgreSQLParserParser.RULE_create_statistics_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2969;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_subscription_stmt(): Create_subscription_stmtContext {
		let _localctx: Create_subscription_stmtContext = new Create_subscription_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, PostgreSQLParserParser.RULE_create_subscription_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2971;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_stmt(): Create_table_stmtContext {
		let _localctx: Create_table_stmtContext = new Create_table_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, PostgreSQLParserParser.RULE_create_table_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2973;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_table_as_stmt(): Create_table_as_stmtContext {
		let _localctx: Create_table_as_stmtContext = new Create_table_as_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, PostgreSQLParserParser.RULE_create_table_as_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2975;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_tablespace_stmt(): Create_tablespace_stmtContext {
		let _localctx: Create_tablespace_stmtContext = new Create_tablespace_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, PostgreSQLParserParser.RULE_create_tablespace_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2977;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_text_search_config_stmt(): Create_text_search_config_stmtContext {
		let _localctx: Create_text_search_config_stmtContext = new Create_text_search_config_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, PostgreSQLParserParser.RULE_create_text_search_config_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2979;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_text_search_dict_stmt(): Create_text_search_dict_stmtContext {
		let _localctx: Create_text_search_dict_stmtContext = new Create_text_search_dict_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, PostgreSQLParserParser.RULE_create_text_search_dict_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2981;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_text_search_parser_stmt(): Create_text_search_parser_stmtContext {
		let _localctx: Create_text_search_parser_stmtContext = new Create_text_search_parser_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, PostgreSQLParserParser.RULE_create_text_search_parser_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2983;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_text_search_template_stmt(): Create_text_search_template_stmtContext {
		let _localctx: Create_text_search_template_stmtContext = new Create_text_search_template_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, PostgreSQLParserParser.RULE_create_text_search_template_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2985;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_transform_stmt(): Create_transform_stmtContext {
		let _localctx: Create_transform_stmtContext = new Create_transform_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, PostgreSQLParserParser.RULE_create_transform_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2987;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_trigger_stmt(): Create_trigger_stmtContext {
		let _localctx: Create_trigger_stmtContext = new Create_trigger_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, PostgreSQLParserParser.RULE_create_trigger_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2989;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_type_stmt(): Create_type_stmtContext {
		let _localctx: Create_type_stmtContext = new Create_type_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, PostgreSQLParserParser.RULE_create_type_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2991;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_user_stmt(): Create_user_stmtContext {
		let _localctx: Create_user_stmtContext = new Create_user_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, PostgreSQLParserParser.RULE_create_user_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2993;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_user_mapping_stmt(): Create_user_mapping_stmtContext {
		let _localctx: Create_user_mapping_stmtContext = new Create_user_mapping_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, PostgreSQLParserParser.RULE_create_user_mapping_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2995;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_view_stmt(): Create_view_stmtContext {
		let _localctx: Create_view_stmtContext = new Create_view_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, PostgreSQLParserParser.RULE_create_view_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2997;
			this.match(PostgreSQLParserParser.CREATE);
			this.state = 3000;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OR) {
				{
				this.state = 2998;
				this.match(PostgreSQLParserParser.OR);
				this.state = 2999;
				this.match(PostgreSQLParserParser.REPLACE);
				}
			}

			this.state = 3003;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.TEMP || _la === PostgreSQLParserParser.TEMPORARY) {
				{
				this.state = 3002;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.TEMP || _la === PostgreSQLParserParser.TEMPORARY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3006;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.RECURSIVE) {
				{
				this.state = 3005;
				this.match(PostgreSQLParserParser.RECURSIVE);
				}
			}

			this.state = 3008;
			this.match(PostgreSQLParserParser.VIEW);
			this.state = 3009;
			_localctx._name = this.name_();
			this.state = 3014;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OPEN_PAREN) {
				{
				this.state = 3010;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 3011;
				this.name_list();
				this.state = 3012;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			this.state = 3021;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 3016;
				this.match(PostgreSQLParserParser.WITH);
				this.state = 3017;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 3018;
				this.option_list();
				this.state = 3019;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			this.state = 3023;
			this.match(PostgreSQLParserParser.AS);
			this.state = 3026;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 276, this._ctx) ) {
			case 1:
				{
				this.state = 3024;
				this.select_stmt();
				}
				break;

			case 2:
				{
				this.state = 3025;
				this.values_stmt();
				}
				break;
			}
			this.state = 3034;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 3028;
				this.match(PostgreSQLParserParser.WITH);
				this.state = 3030;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.CASCADED || _la === PostgreSQLParserParser.LOCAL) {
					{
					this.state = 3029;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.CASCADED || _la === PostgreSQLParserParser.LOCAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 3032;
				this.match(PostgreSQLParserParser.CHECK);
				this.state = 3033;
				this.match(PostgreSQLParserParser.OPTION);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deallocate_stmt(): Deallocate_stmtContext {
		let _localctx: Deallocate_stmtContext = new Deallocate_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, PostgreSQLParserParser.RULE_deallocate_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3036;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declare_stmt(): Declare_stmtContext {
		let _localctx: Declare_stmtContext = new Declare_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, PostgreSQLParserParser.RULE_declare_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3038;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public delete_stmt(): Delete_stmtContext {
		let _localctx: Delete_stmtContext = new Delete_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, PostgreSQLParserParser.RULE_delete_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3041;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 3040;
				this.with_clause();
				}
			}

			this.state = 3043;
			this.match(PostgreSQLParserParser.DELETE);
			this.state = 3044;
			this.match(PostgreSQLParserParser.FROM);
			this.state = 3046;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.ONLY) {
				{
				this.state = 3045;
				this.match(PostgreSQLParserParser.ONLY);
				}
			}

			this.state = 3048;
			this.table_name_();
			this.state = 3050;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.STAR) {
				{
				this.state = 3049;
				this.match(PostgreSQLParserParser.STAR);
				}
			}

			this.state = 3056;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.AS) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0)) {
				{
				this.state = 3053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.AS) {
					{
					this.state = 3052;
					this.match(PostgreSQLParserParser.AS);
					}
				}

				this.state = 3055;
				this.alias();
				}
			}

			this.state = 3060;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.USING) {
				{
				this.state = 3058;
				this.match(PostgreSQLParserParser.USING);
				this.state = 3059;
				this.identifier_list();
				}
			}

			this.state = 3067;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 285, this._ctx) ) {
			case 1:
				{
				this.state = 3062;
				this.where_clause();
				}
				break;

			case 2:
				{
				{
				this.state = 3063;
				this.match(PostgreSQLParserParser.WHERE);
				this.state = 3064;
				this.match(PostgreSQLParserParser.CURRENT);
				this.state = 3065;
				this.match(PostgreSQLParserParser.OF);
				this.state = 3066;
				_localctx._cursor_name_ = this.identifier(0);
				}
				}
				break;
			}
			this.state = 3070;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.RETURNING) {
				{
				this.state = 3069;
				this.returning_clause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public discard_stmt(): Discard_stmtContext {
		let _localctx: Discard_stmtContext = new Discard_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, PostgreSQLParserParser.RULE_discard_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3072;
			this.match(PostgreSQLParserParser.DISCARD);
			this.state = 3073;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParserParser.ALL || _la === PostgreSQLParserParser.PLANS || _la === PostgreSQLParserParser.SEQUENCES || _la === PostgreSQLParserParser.TEMP || _la === PostgreSQLParserParser.TEMPORARY)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_stmt(): Drop_stmtContext {
		let _localctx: Drop_stmtContext = new Drop_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, PostgreSQLParserParser.RULE_drop_stmt);
		try {
			this.state = 3116;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 287, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3075;
				this.drop_access_method_stmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3076;
				this.drop_aggregate_stmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3077;
				this.drop_cast_stmt();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3078;
				this.drop_collation_stmt();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3079;
				this.drop_conversion_stmt();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3080;
				this.drop_database_stmt();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3081;
				this.drop_domain_stmt();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3082;
				this.drop_event_trigger_stmt();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3083;
				this.drop_extension_stmt();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3084;
				this.drop_foreign_data_wrapper_stmt();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3085;
				this.drop_foreign_table_stmt();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3086;
				this.drop_function_stmt();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3087;
				this.drop_group_stmt();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3088;
				this.drop_index_stmt();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 3089;
				this.drop_language_stmt();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 3090;
				this.drop_materialized_view_stmt();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 3091;
				this.drop_operator_stmt();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 3092;
				this.drop_operator_class_stmt();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 3093;
				this.drop_operator_family_stmt();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 3094;
				this.drop_owned_stmt();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 3095;
				this.drop_policy_stmt();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 3096;
				this.drop_publication_stmt();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 3097;
				this.drop_role_stmt();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 3098;
				this.drop_rule_stmt();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 3099;
				this.drop_schema_stmt();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 3100;
				this.drop_sequence_stmt();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 3101;
				this.drop_server_stmt();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 3102;
				this.drop_statistics_stmt();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 3103;
				this.drop_subscription_stmt();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 3104;
				this.drop_table_stmt();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 3105;
				this.drop_tablespace_stmt();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 3106;
				this.drop_text_search_config_stmt();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 3107;
				this.drop_text_search_dict_stmt();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 3108;
				this.drop_text_search_parser_stmt();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 3109;
				this.drop_text_search_template_stmt();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 3110;
				this.drop_transform_stmt();
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 3111;
				this.drop_trigger_stmt();
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 3112;
				this.drop_type_stmt();
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 3113;
				this.drop_user_stmt();
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 3114;
				this.drop_user_mapping_stmt();
				}
				break;

			case 41:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 3115;
				this.drop_view_stmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_access_method_stmt(): Drop_access_method_stmtContext {
		let _localctx: Drop_access_method_stmtContext = new Drop_access_method_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, PostgreSQLParserParser.RULE_drop_access_method_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3118;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3119;
			this.match(PostgreSQLParserParser.ACCESS);
			this.state = 3120;
			this.match(PostgreSQLParserParser.METHOD);
			this.state = 3123;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3121;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3122;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3125;
			_localctx._name = this.identifier(0);
			this.state = 3127;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3126;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_aggregate_stmt(): Drop_aggregate_stmtContext {
		let _localctx: Drop_aggregate_stmtContext = new Drop_aggregate_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, PostgreSQLParserParser.RULE_drop_aggregate_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3129;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3130;
			this.match(PostgreSQLParserParser.AGGREGATE);
			this.state = 3133;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3131;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3132;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3135;
			_localctx._name = this.identifier(0);
			this.state = 3136;
			this.match(PostgreSQLParserParser.OPEN_PAREN);
			this.state = 3137;
			this.aggregate_signature();
			this.state = 3138;
			this.match(PostgreSQLParserParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_cast_stmt(): Drop_cast_stmtContext {
		let _localctx: Drop_cast_stmtContext = new Drop_cast_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, PostgreSQLParserParser.RULE_drop_cast_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3140;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3141;
			this.match(PostgreSQLParserParser.CAST);
			this.state = 3144;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3142;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3143;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3146;
			this.match(PostgreSQLParserParser.OPEN_PAREN);
			this.state = 3147;
			_localctx._source_type = this.data_type();
			this.state = 3148;
			this.match(PostgreSQLParserParser.AS);
			this.state = 3149;
			_localctx._target_type = this.identifier(0);
			this.state = 3150;
			this.match(PostgreSQLParserParser.CLOSE_PAREN);
			this.state = 3152;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3151;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_collation_stmt(): Drop_collation_stmtContext {
		let _localctx: Drop_collation_stmtContext = new Drop_collation_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, PostgreSQLParserParser.RULE_drop_collation_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3154;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3155;
			this.match(PostgreSQLParserParser.COLLATION);
			this.state = 3158;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3156;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3157;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3160;
			_localctx._names = this.identifier_list();
			this.state = 3162;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3161;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_conversion_stmt(): Drop_conversion_stmtContext {
		let _localctx: Drop_conversion_stmtContext = new Drop_conversion_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, PostgreSQLParserParser.RULE_drop_conversion_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3164;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3165;
			this.match(PostgreSQLParserParser.CONVERSION);
			this.state = 3168;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3166;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3167;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3170;
			_localctx._name = this.identifier(0);
			this.state = 3172;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3171;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_database_stmt(): Drop_database_stmtContext {
		let _localctx: Drop_database_stmtContext = new Drop_database_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, PostgreSQLParserParser.RULE_drop_database_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3174;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3175;
			this.match(PostgreSQLParserParser.DATABASE);
			this.state = 3178;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3176;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3177;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3180;
			_localctx._name = this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_domain_stmt(): Drop_domain_stmtContext {
		let _localctx: Drop_domain_stmtContext = new Drop_domain_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, PostgreSQLParserParser.RULE_drop_domain_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3182;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3183;
			this.match(PostgreSQLParserParser.DOMAIN);
			this.state = 3186;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3184;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3185;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3188;
			_localctx._names = this.identifier_list();
			this.state = 3190;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3189;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_event_trigger_stmt(): Drop_event_trigger_stmtContext {
		let _localctx: Drop_event_trigger_stmtContext = new Drop_event_trigger_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, PostgreSQLParserParser.RULE_drop_event_trigger_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3192;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3193;
			this.match(PostgreSQLParserParser.EVENT);
			this.state = 3194;
			this.match(PostgreSQLParserParser.TRIGGER);
			this.state = 3197;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3195;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3196;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3199;
			_localctx._name = this.identifier(0);
			this.state = 3201;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3200;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_extension_stmt(): Drop_extension_stmtContext {
		let _localctx: Drop_extension_stmtContext = new Drop_extension_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, PostgreSQLParserParser.RULE_drop_extension_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3203;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3204;
			this.match(PostgreSQLParserParser.EXTENSION);
			this.state = 3207;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3205;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3206;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3209;
			_localctx._names = this.identifier_list();
			this.state = 3211;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3210;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_foreign_data_wrapper_stmt(): Drop_foreign_data_wrapper_stmtContext {
		let _localctx: Drop_foreign_data_wrapper_stmtContext = new Drop_foreign_data_wrapper_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, PostgreSQLParserParser.RULE_drop_foreign_data_wrapper_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3213;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3214;
			this.match(PostgreSQLParserParser.FOREIGN);
			this.state = 3215;
			this.match(PostgreSQLParserParser.DATA);
			this.state = 3216;
			this.match(PostgreSQLParserParser.WRAPPER);
			this.state = 3219;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3217;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3218;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3221;
			_localctx._names = this.identifier_list();
			this.state = 3223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3222;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_foreign_table_stmt(): Drop_foreign_table_stmtContext {
		let _localctx: Drop_foreign_table_stmtContext = new Drop_foreign_table_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, PostgreSQLParserParser.RULE_drop_foreign_table_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3225;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3226;
			this.match(PostgreSQLParserParser.FOREIGN);
			this.state = 3227;
			this.match(PostgreSQLParserParser.TABLE);
			this.state = 3230;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3228;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3229;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3232;
			_localctx._names = this.identifier_list();
			this.state = 3234;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3233;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_function_stmt(): Drop_function_stmtContext {
		let _localctx: Drop_function_stmtContext = new Drop_function_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, PostgreSQLParserParser.RULE_drop_function_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3236;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3237;
			this.match(PostgreSQLParserParser.FUNCTION);
			this.state = 3240;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3238;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3239;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3242;
			_localctx._functions = this.func_sig_list();
			this.state = 3244;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3243;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_group_stmt(): Drop_group_stmtContext {
		let _localctx: Drop_group_stmtContext = new Drop_group_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, PostgreSQLParserParser.RULE_drop_group_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3246;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3247;
			this.match(PostgreSQLParserParser.GROUP);
			this.state = 3250;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3248;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3249;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3252;
			_localctx._names = this.identifier_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_index_stmt(): Drop_index_stmtContext {
		let _localctx: Drop_index_stmtContext = new Drop_index_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, PostgreSQLParserParser.RULE_drop_index_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3254;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3255;
			this.match(PostgreSQLParserParser.INDEX);
			this.state = 3257;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CONCURRENTLY) {
				{
				this.state = 3256;
				this.match(PostgreSQLParserParser.CONCURRENTLY);
				}
			}

			this.state = 3261;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3259;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3260;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3263;
			_localctx._names = this.name_list();
			this.state = 3265;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3264;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_language_stmt(): Drop_language_stmtContext {
		let _localctx: Drop_language_stmtContext = new Drop_language_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, PostgreSQLParserParser.RULE_drop_language_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3267;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3269;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.PROCEDURAL) {
				{
				this.state = 3268;
				this.match(PostgreSQLParserParser.PROCEDURAL);
				}
			}

			this.state = 3271;
			this.match(PostgreSQLParserParser.LANGUAGE);
			this.state = 3274;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3272;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3273;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3276;
			_localctx._name = this.identifier(0);
			this.state = 3278;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3277;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_materialized_view_stmt(): Drop_materialized_view_stmtContext {
		let _localctx: Drop_materialized_view_stmtContext = new Drop_materialized_view_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, PostgreSQLParserParser.RULE_drop_materialized_view_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3280;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3281;
			this.match(PostgreSQLParserParser.MATERIALIZED);
			this.state = 3282;
			this.match(PostgreSQLParserParser.VIEW);
			this.state = 3285;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3283;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3284;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3287;
			_localctx._names = this.identifier_list();
			this.state = 3289;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3288;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_operator_stmt(): Drop_operator_stmtContext {
		let _localctx: Drop_operator_stmtContext = new Drop_operator_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, PostgreSQLParserParser.RULE_drop_operator_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3291;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_operator_class_stmt(): Drop_operator_class_stmtContext {
		let _localctx: Drop_operator_class_stmtContext = new Drop_operator_class_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, PostgreSQLParserParser.RULE_drop_operator_class_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3293;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3294;
			this.match(PostgreSQLParserParser.OPERATOR);
			this.state = 3295;
			this.match(PostgreSQLParserParser.CLASS);
			this.state = 3298;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3296;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3297;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3300;
			_localctx._name = this.identifier(0);
			this.state = 3301;
			this.match(PostgreSQLParserParser.USING);
			this.state = 3302;
			this.index_method();
			this.state = 3304;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3303;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_operator_family_stmt(): Drop_operator_family_stmtContext {
		let _localctx: Drop_operator_family_stmtContext = new Drop_operator_family_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, PostgreSQLParserParser.RULE_drop_operator_family_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3306;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3307;
			this.match(PostgreSQLParserParser.OPERATOR);
			this.state = 3308;
			this.match(PostgreSQLParserParser.FAMILY);
			this.state = 3311;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3309;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3310;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3313;
			_localctx._name = this.identifier(0);
			this.state = 3314;
			this.match(PostgreSQLParserParser.USING);
			this.state = 3315;
			this.index_method();
			this.state = 3317;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3316;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_owned_stmt(): Drop_owned_stmtContext {
		let _localctx: Drop_owned_stmtContext = new Drop_owned_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, PostgreSQLParserParser.RULE_drop_owned_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3319;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3320;
			this.match(PostgreSQLParserParser.OWNED);
			this.state = 3321;
			this.match(PostgreSQLParserParser.BY);
			this.state = 3322;
			this.role_name_list();
			this.state = 3324;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3323;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_policy_stmt(): Drop_policy_stmtContext {
		let _localctx: Drop_policy_stmtContext = new Drop_policy_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, PostgreSQLParserParser.RULE_drop_policy_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3326;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3327;
			this.match(PostgreSQLParserParser.POLICY);
			this.state = 3330;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3328;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3329;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3332;
			_localctx._name = this.identifier(0);
			this.state = 3333;
			this.match(PostgreSQLParserParser.ON);
			this.state = 3334;
			_localctx._table_name = this.identifier(0);
			this.state = 3336;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3335;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_publication_stmt(): Drop_publication_stmtContext {
		let _localctx: Drop_publication_stmtContext = new Drop_publication_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, PostgreSQLParserParser.RULE_drop_publication_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3338;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3339;
			this.match(PostgreSQLParserParser.PUBLICATION);
			this.state = 3342;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3340;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3341;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3344;
			_localctx._names = this.identifier_list();
			this.state = 3346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3345;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_role_stmt(): Drop_role_stmtContext {
		let _localctx: Drop_role_stmtContext = new Drop_role_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, PostgreSQLParserParser.RULE_drop_role_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3348;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3349;
			this.match(PostgreSQLParserParser.ROLE);
			this.state = 3352;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3350;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3351;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3354;
			_localctx._names = this.identifier_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_rule_stmt(): Drop_rule_stmtContext {
		let _localctx: Drop_rule_stmtContext = new Drop_rule_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, PostgreSQLParserParser.RULE_drop_rule_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3356;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3357;
			this.match(PostgreSQLParserParser.RULE);
			this.state = 3360;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3358;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3359;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3362;
			_localctx._name = this.name_();
			this.state = 3363;
			this.match(PostgreSQLParserParser.ON);
			this.state = 3364;
			_localctx._table_name = this.identifier(0);
			this.state = 3366;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3365;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_schema_stmt(): Drop_schema_stmtContext {
		let _localctx: Drop_schema_stmtContext = new Drop_schema_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, PostgreSQLParserParser.RULE_drop_schema_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3368;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3369;
			this.match(PostgreSQLParserParser.SCHEMA);
			this.state = 3372;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3370;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3371;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3374;
			_localctx._names = this.identifier_list();
			this.state = 3376;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3375;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_sequence_stmt(): Drop_sequence_stmtContext {
		let _localctx: Drop_sequence_stmtContext = new Drop_sequence_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, PostgreSQLParserParser.RULE_drop_sequence_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3378;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3379;
			this.match(PostgreSQLParserParser.SEQUENCE);
			this.state = 3382;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3380;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3381;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3384;
			_localctx._names = this.identifier_list();
			this.state = 3386;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3385;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_server_stmt(): Drop_server_stmtContext {
		let _localctx: Drop_server_stmtContext = new Drop_server_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, PostgreSQLParserParser.RULE_drop_server_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3388;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3389;
			this.match(PostgreSQLParserParser.SERVER);
			this.state = 3392;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3390;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3391;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3394;
			_localctx._names = this.identifier_list();
			this.state = 3396;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3395;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_statistics_stmt(): Drop_statistics_stmtContext {
		let _localctx: Drop_statistics_stmtContext = new Drop_statistics_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, PostgreSQLParserParser.RULE_drop_statistics_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3398;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3399;
			this.match(PostgreSQLParserParser.STATISTICS);
			this.state = 3402;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3400;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3401;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3404;
			_localctx._names = this.identifier_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_subscription_stmt(): Drop_subscription_stmtContext {
		let _localctx: Drop_subscription_stmtContext = new Drop_subscription_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, PostgreSQLParserParser.RULE_drop_subscription_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3406;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3407;
			this.match(PostgreSQLParserParser.SUBSCRIPTION);
			this.state = 3410;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3408;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3409;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3412;
			_localctx._name = this.identifier(0);
			this.state = 3414;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3413;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_table_stmt(): Drop_table_stmtContext {
		let _localctx: Drop_table_stmtContext = new Drop_table_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, PostgreSQLParserParser.RULE_drop_table_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3416;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3417;
			this.match(PostgreSQLParserParser.TABLE);
			this.state = 3420;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3418;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3419;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3422;
			_localctx._names = this.identifier_list();
			this.state = 3424;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3423;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_tablespace_stmt(): Drop_tablespace_stmtContext {
		let _localctx: Drop_tablespace_stmtContext = new Drop_tablespace_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, PostgreSQLParserParser.RULE_drop_tablespace_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3426;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3427;
			this.match(PostgreSQLParserParser.TABLESPACE);
			this.state = 3430;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3428;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3429;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3432;
			_localctx._name = this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_text_search_config_stmt(): Drop_text_search_config_stmtContext {
		let _localctx: Drop_text_search_config_stmtContext = new Drop_text_search_config_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, PostgreSQLParserParser.RULE_drop_text_search_config_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3434;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3435;
			this.match(PostgreSQLParserParser.TEXT);
			this.state = 3436;
			this.match(PostgreSQLParserParser.SEARCH);
			this.state = 3437;
			this.match(PostgreSQLParserParser.CONFIGURATION);
			this.state = 3440;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3438;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3439;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3442;
			_localctx._name = this.identifier(0);
			this.state = 3444;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3443;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_text_search_dict_stmt(): Drop_text_search_dict_stmtContext {
		let _localctx: Drop_text_search_dict_stmtContext = new Drop_text_search_dict_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, PostgreSQLParserParser.RULE_drop_text_search_dict_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3446;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3447;
			this.match(PostgreSQLParserParser.TEXT);
			this.state = 3448;
			this.match(PostgreSQLParserParser.SEARCH);
			this.state = 3449;
			this.match(PostgreSQLParserParser.DICTIONARY);
			this.state = 3452;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3450;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3451;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3454;
			_localctx._name = this.identifier(0);
			this.state = 3456;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3455;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_text_search_parser_stmt(): Drop_text_search_parser_stmtContext {
		let _localctx: Drop_text_search_parser_stmtContext = new Drop_text_search_parser_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, PostgreSQLParserParser.RULE_drop_text_search_parser_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3458;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3459;
			this.match(PostgreSQLParserParser.TEXT);
			this.state = 3460;
			this.match(PostgreSQLParserParser.SEARCH);
			this.state = 3461;
			this.match(PostgreSQLParserParser.PARSER);
			this.state = 3464;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3462;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3463;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3466;
			_localctx._name = this.identifier(0);
			this.state = 3468;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3467;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_text_search_template_stmt(): Drop_text_search_template_stmtContext {
		let _localctx: Drop_text_search_template_stmtContext = new Drop_text_search_template_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, PostgreSQLParserParser.RULE_drop_text_search_template_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3470;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3471;
			this.match(PostgreSQLParserParser.TEXT);
			this.state = 3472;
			this.match(PostgreSQLParserParser.SEARCH);
			this.state = 3473;
			this.match(PostgreSQLParserParser.TEMPLATE);
			this.state = 3476;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3474;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3475;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3478;
			_localctx._name = this.identifier(0);
			this.state = 3480;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3479;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_transform_stmt(): Drop_transform_stmtContext {
		let _localctx: Drop_transform_stmtContext = new Drop_transform_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, PostgreSQLParserParser.RULE_drop_transform_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3482;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3483;
			this.match(PostgreSQLParserParser.TRANSFORM);
			this.state = 3486;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3484;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3485;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3488;
			this.match(PostgreSQLParserParser.FOR);
			this.state = 3489;
			_localctx._type_name_ = this.identifier(0);
			this.state = 3490;
			this.match(PostgreSQLParserParser.LANGUAGE);
			this.state = 3491;
			_localctx._lang_name = this.identifier(0);
			this.state = 3492;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_trigger_stmt(): Drop_trigger_stmtContext {
		let _localctx: Drop_trigger_stmtContext = new Drop_trigger_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, PostgreSQLParserParser.RULE_drop_trigger_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3494;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3495;
			this.match(PostgreSQLParserParser.TRIGGER);
			this.state = 3498;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3496;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3497;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3500;
			_localctx._name = this.identifier(0);
			this.state = 3501;
			this.match(PostgreSQLParserParser.ON);
			this.state = 3502;
			_localctx._table_name = this.identifier(0);
			this.state = 3504;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3503;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_type_stmt(): Drop_type_stmtContext {
		let _localctx: Drop_type_stmtContext = new Drop_type_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, PostgreSQLParserParser.RULE_drop_type_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3506;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3507;
			this.match(PostgreSQLParserParser.TYPE);
			this.state = 3510;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3508;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3509;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3512;
			_localctx._names = this.identifier_list();
			this.state = 3514;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3513;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_user_stmt(): Drop_user_stmtContext {
		let _localctx: Drop_user_stmtContext = new Drop_user_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, PostgreSQLParserParser.RULE_drop_user_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3516;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3517;
			this.match(PostgreSQLParserParser.USER);
			this.state = 3520;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3518;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3519;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3522;
			_localctx._names = this.identifier_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_user_mapping_stmt(): Drop_user_mapping_stmtContext {
		let _localctx: Drop_user_mapping_stmtContext = new Drop_user_mapping_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, PostgreSQLParserParser.RULE_drop_user_mapping_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3524;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3525;
			this.match(PostgreSQLParserParser.USER);
			this.state = 3526;
			this.match(PostgreSQLParserParser.MAPPING);
			this.state = 3529;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3527;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3528;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3531;
			this.match(PostgreSQLParserParser.FOR);
			this.state = 3537;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 358, this._ctx) ) {
			case 1:
				{
				this.state = 3532;
				_localctx._user_name = this.name_();
				}
				break;

			case 2:
				{
				this.state = 3533;
				this.match(PostgreSQLParserParser.USER);
				}
				break;

			case 3:
				{
				this.state = 3534;
				this.match(PostgreSQLParserParser.CURRENT_USER);
				}
				break;

			case 4:
				{
				this.state = 3535;
				this.match(PostgreSQLParserParser.SESSION_USER);
				}
				break;

			case 5:
				{
				this.state = 3536;
				this.match(PostgreSQLParserParser.PUBLIC);
				}
				break;
			}
			this.state = 3539;
			this.match(PostgreSQLParserParser.SERVER);
			this.state = 3540;
			_localctx._server_name = this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_view_stmt(): Drop_view_stmtContext {
		let _localctx: Drop_view_stmtContext = new Drop_view_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, PostgreSQLParserParser.RULE_drop_view_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3542;
			this.match(PostgreSQLParserParser.DROP);
			this.state = 3543;
			this.match(PostgreSQLParserParser.VIEW);
			this.state = 3546;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IF) {
				{
				this.state = 3544;
				this.match(PostgreSQLParserParser.IF);
				this.state = 3545;
				this.match(PostgreSQLParserParser.EXISTS);
				}
			}

			this.state = 3548;
			_localctx._names = this.identifier_list();
			this.state = 3550;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 3549;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execute_stmt(): Execute_stmtContext {
		let _localctx: Execute_stmtContext = new Execute_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, PostgreSQLParserParser.RULE_execute_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3552;
			this.match(PostgreSQLParserParser.EXECUTE);
			this.state = 3553;
			_localctx._name = this.identifier(0);
			this.state = 3555;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OPEN_PAREN) {
				{
				this.state = 3554;
				this.expr_list();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explain_stmt(): Explain_stmtContext {
		let _localctx: Explain_stmtContext = new Explain_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, PostgreSQLParserParser.RULE_explain_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3576;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 365, this._ctx) ) {
			case 1:
				{
				{
				this.state = 3557;
				this.match(PostgreSQLParserParser.EXPLAIN);
				this.state = 3559;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ANALYZE) {
					{
					this.state = 3558;
					this.match(PostgreSQLParserParser.ANALYZE);
					}
				}

				this.state = 3562;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.VERBOSE) {
					{
					this.state = 3561;
					this.match(PostgreSQLParserParser.VERBOSE);
					}
				}

				}
				}
				break;

			case 2:
				{
				{
				this.state = 3564;
				this.match(PostgreSQLParserParser.EXPLAIN);
				this.state = 3565;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 3566;
				this.explain_parameter();
				this.state = 3571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PostgreSQLParserParser.COMMA) {
					{
					{
					this.state = 3567;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 3568;
					this.explain_parameter();
					}
					}
					this.state = 3573;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3574;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				}
				break;
			}
			this.state = 3587;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 366, this._ctx) ) {
			case 1:
				{
				this.state = 3578;
				this.select_stmt();
				}
				break;

			case 2:
				{
				this.state = 3579;
				this.insert_stmt();
				}
				break;

			case 3:
				{
				this.state = 3580;
				this.update_stmt();
				}
				break;

			case 4:
				{
				this.state = 3581;
				this.delete_stmt();
				}
				break;

			case 5:
				{
				this.state = 3582;
				this.values_stmt();
				}
				break;

			case 6:
				{
				this.state = 3583;
				this.execute_stmt();
				}
				break;

			case 7:
				{
				this.state = 3584;
				this.declare_stmt();
				}
				break;

			case 8:
				{
				this.state = 3585;
				this.create_table_as_stmt();
				}
				break;

			case 9:
				{
				this.state = 3586;
				this.create_materialized_view_stmt();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fetch_stmt(): Fetch_stmtContext {
		let _localctx: Fetch_stmtContext = new Fetch_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, PostgreSQLParserParser.RULE_fetch_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3589;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grant_stmt(): Grant_stmtContext {
		let _localctx: Grant_stmtContext = new Grant_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, PostgreSQLParserParser.RULE_grant_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3591;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public import_foreign_schema_stmt(): Import_foreign_schema_stmtContext {
		let _localctx: Import_foreign_schema_stmtContext = new Import_foreign_schema_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, PostgreSQLParserParser.RULE_import_foreign_schema_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3593;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_stmt(): Insert_stmtContext {
		let _localctx: Insert_stmtContext = new Insert_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, PostgreSQLParserParser.RULE_insert_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3596;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 3595;
				this.with_clause();
				}
			}

			this.state = 3598;
			this.match(PostgreSQLParserParser.INSERT);
			this.state = 3599;
			this.match(PostgreSQLParserParser.INTO);
			this.state = 3600;
			this.table_name_();
			this.state = 3603;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.AS) {
				{
				this.state = 3601;
				this.match(PostgreSQLParserParser.AS);
				this.state = 3602;
				_localctx._alias_ = this.identifier(0);
				}
			}

			this.state = 3609;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 369, this._ctx) ) {
			case 1:
				{
				this.state = 3605;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 3606;
				this.name_list();
				this.state = 3607;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;
			}
			this.state = 3616;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OVERRIDING) {
				{
				this.state = 3611;
				this.match(PostgreSQLParserParser.OVERRIDING);
				this.state = 3613;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.SYSTEM || _la === PostgreSQLParserParser.USER) {
					{
					this.state = 3612;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.SYSTEM || _la === PostgreSQLParserParser.USER)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 3615;
				this.match(PostgreSQLParserParser.VALUE);
				}
			}

			this.state = 3622;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 372, this._ctx) ) {
			case 1:
				{
				this.state = 3618;
				this.match(PostgreSQLParserParser.DEFAULT);
				this.state = 3619;
				this.match(PostgreSQLParserParser.VALUES);
				}
				break;

			case 2:
				{
				this.state = 3620;
				this.select_stmt();
				}
				break;

			case 3:
				{
				this.state = 3621;
				this.values_stmt();
				}
				break;
			}
			this.state = 3651;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.ON) {
				{
				this.state = 3624;
				this.match(PostgreSQLParserParser.ON);
				this.state = 3625;
				this.match(PostgreSQLParserParser.CONFLICT);
				this.state = 3630;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.OPEN_PAREN) {
					{
					this.state = 3626;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 3627;
					this.column_name();
					this.state = 3628;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
				}

				this.state = 3635;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ON) {
					{
					this.state = 3632;
					this.match(PostgreSQLParserParser.ON);
					this.state = 3633;
					this.match(PostgreSQLParserParser.CONSTRAINT);
					this.state = 3634;
					this.column_name();
					}
				}

				this.state = 3638;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.WHERE) {
					{
					this.state = 3637;
					this.where_clause();
					}
				}

				this.state = 3649;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 377, this._ctx) ) {
				case 1:
					{
					{
					this.state = 3640;
					this.match(PostgreSQLParserParser.DO);
					this.state = 3641;
					this.match(PostgreSQLParserParser.NOTHING);
					}
					}
					break;

				case 2:
					{
					{
					this.state = 3642;
					this.match(PostgreSQLParserParser.DO);
					this.state = 3643;
					this.match(PostgreSQLParserParser.UPDATE);
					this.state = 3644;
					this.match(PostgreSQLParserParser.SET);
					this.state = 3645;
					this.updater_clause();
					this.state = 3647;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParserParser.WHERE) {
						{
						this.state = 3646;
						this.where_clause();
						}
					}

					}
					}
					break;
				}
				}
			}

			this.state = 3654;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.RETURNING) {
				{
				this.state = 3653;
				this.returning_clause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public listen_stmt(): Listen_stmtContext {
		let _localctx: Listen_stmtContext = new Listen_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, PostgreSQLParserParser.RULE_listen_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3656;
			this.match(PostgreSQLParserParser.LISTEN);
			this.state = 3657;
			_localctx._channel = this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public load_stmt(): Load_stmtContext {
		let _localctx: Load_stmtContext = new Load_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, PostgreSQLParserParser.RULE_load_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3659;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_stmt(): Lock_stmtContext {
		let _localctx: Lock_stmtContext = new Lock_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, PostgreSQLParserParser.RULE_lock_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3661;
			this.match(PostgreSQLParserParser.LOCK);
			this.state = 3663;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.TABLE) {
				{
				this.state = 3662;
				this.match(PostgreSQLParserParser.TABLE);
				}
			}

			this.state = 3666;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.ONLY) {
				{
				this.state = 3665;
				this.match(PostgreSQLParserParser.ONLY);
				}
			}

			this.state = 3668;
			_localctx._name = this.name_();
			this.state = 3670;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.STAR) {
				{
				this.state = 3669;
				this.match(PostgreSQLParserParser.STAR);
				}
			}

			this.state = 3692;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.IN) {
				{
				this.state = 3672;
				this.match(PostgreSQLParserParser.IN);
				this.state = 3689;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 383, this._ctx) ) {
				case 1:
					{
					this.state = 3673;
					this.match(PostgreSQLParserParser.ACCESS);
					this.state = 3674;
					this.match(PostgreSQLParserParser.SHARE);
					}
					break;

				case 2:
					{
					this.state = 3675;
					this.match(PostgreSQLParserParser.ROW);
					this.state = 3676;
					this.match(PostgreSQLParserParser.SHARE);
					}
					break;

				case 3:
					{
					this.state = 3677;
					this.match(PostgreSQLParserParser.ROW);
					this.state = 3678;
					this.match(PostgreSQLParserParser.EXCLUSIVE);
					}
					break;

				case 4:
					{
					this.state = 3679;
					this.match(PostgreSQLParserParser.SHARE);
					this.state = 3680;
					this.match(PostgreSQLParserParser.UPDATE);
					this.state = 3681;
					this.match(PostgreSQLParserParser.EXCLUSIVE);
					}
					break;

				case 5:
					{
					this.state = 3682;
					this.match(PostgreSQLParserParser.SHARE);
					}
					break;

				case 6:
					{
					this.state = 3683;
					this.match(PostgreSQLParserParser.SHARE);
					this.state = 3684;
					this.match(PostgreSQLParserParser.ROW);
					this.state = 3685;
					this.match(PostgreSQLParserParser.EXCLUSIVE);
					}
					break;

				case 7:
					{
					this.state = 3686;
					this.match(PostgreSQLParserParser.EXCLUSIVE);
					}
					break;

				case 8:
					{
					this.state = 3687;
					this.match(PostgreSQLParserParser.ACCESS);
					this.state = 3688;
					this.match(PostgreSQLParserParser.EXCLUSIVE);
					}
					break;
				}
				this.state = 3691;
				this.match(PostgreSQLParserParser.MODE);
				}
			}

			this.state = 3695;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.NOWAIT) {
				{
				this.state = 3694;
				this.match(PostgreSQLParserParser.NOWAIT);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public move_stmt(): Move_stmtContext {
		let _localctx: Move_stmtContext = new Move_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, PostgreSQLParserParser.RULE_move_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3697;
			this.match(PostgreSQLParserParser.MOVE);
			this.state = 3721;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 390, this._ctx) ) {
			case 1:
				{
				this.state = 3716;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.NEXT:
					{
					this.state = 3698;
					this.match(PostgreSQLParserParser.NEXT);
					}
					break;
				case PostgreSQLParserParser.PRIOR:
					{
					this.state = 3699;
					this.match(PostgreSQLParserParser.PRIOR);
					}
					break;
				case PostgreSQLParserParser.FIRST:
					{
					this.state = 3700;
					this.match(PostgreSQLParserParser.FIRST);
					}
					break;
				case PostgreSQLParserParser.LAST:
					{
					this.state = 3701;
					this.match(PostgreSQLParserParser.LAST);
					}
					break;
				case PostgreSQLParserParser.ABSOLUTE:
					{
					this.state = 3702;
					this.match(PostgreSQLParserParser.ABSOLUTE);
					this.state = 3703;
					this.match(PostgreSQLParserParser.INTEGER);
					}
					break;
				case PostgreSQLParserParser.RELATIVE:
					{
					this.state = 3704;
					this.match(PostgreSQLParserParser.RELATIVE);
					this.state = 3705;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					}
					break;
				case PostgreSQLParserParser.INTEGER_LITERAL:
					{
					this.state = 3706;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					}
					break;
				case PostgreSQLParserParser.ALL:
					{
					this.state = 3707;
					this.match(PostgreSQLParserParser.ALL);
					}
					break;
				case PostgreSQLParserParser.FORWARD:
					{
					this.state = 3708;
					this.match(PostgreSQLParserParser.FORWARD);
					this.state = 3710;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParserParser.ALL || _la === PostgreSQLParserParser.INTEGER_LITERAL) {
						{
						this.state = 3709;
						_la = this._input.LA(1);
						if (!(_la === PostgreSQLParserParser.ALL || _la === PostgreSQLParserParser.INTEGER_LITERAL)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					}
					break;
				case PostgreSQLParserParser.BACKWARD:
					{
					this.state = 3712;
					this.match(PostgreSQLParserParser.BACKWARD);
					this.state = 3714;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParserParser.ALL || _la === PostgreSQLParserParser.INTEGER_LITERAL) {
						{
						this.state = 3713;
						_la = this._input.LA(1);
						if (!(_la === PostgreSQLParserParser.ALL || _la === PostgreSQLParserParser.INTEGER_LITERAL)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3719;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.FROM || _la === PostgreSQLParserParser.IN) {
					{
					this.state = 3718;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.FROM || _la === PostgreSQLParserParser.IN)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;
			}
			this.state = 3723;
			_localctx._cursor_name = this.name_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public notify_stmt(): Notify_stmtContext {
		let _localctx: Notify_stmtContext = new Notify_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, PostgreSQLParserParser.RULE_notify_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3725;
			this.match(PostgreSQLParserParser.NOTIFY);
			this.state = 3726;
			_localctx._channel = this.name_();
			this.state = 3729;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.COMMA) {
				{
				this.state = 3727;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 3728;
				_localctx._payload = this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prepare_stmt(): Prepare_stmtContext {
		let _localctx: Prepare_stmtContext = new Prepare_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, PostgreSQLParserParser.RULE_prepare_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3731;
			this.match(PostgreSQLParserParser.PREPARE);
			this.state = 3732;
			_localctx._name = this.identifier(0);
			this.state = 3737;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OPEN_PAREN) {
				{
				this.state = 3733;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 3734;
				this.data_type_list();
				this.state = 3735;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			this.state = 3739;
			this.match(PostgreSQLParserParser.AS);
			this.state = 3745;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 393, this._ctx) ) {
			case 1:
				{
				this.state = 3740;
				this.select_stmt();
				}
				break;

			case 2:
				{
				this.state = 3741;
				this.insert_stmt();
				}
				break;

			case 3:
				{
				this.state = 3742;
				this.update_stmt();
				}
				break;

			case 4:
				{
				this.state = 3743;
				this.delete_stmt();
				}
				break;

			case 5:
				{
				this.state = 3744;
				this.values_stmt();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prepare_transaction_stmt(): Prepare_transaction_stmtContext {
		let _localctx: Prepare_transaction_stmtContext = new Prepare_transaction_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, PostgreSQLParserParser.RULE_prepare_transaction_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3747;
			this.match(PostgreSQLParserParser.PREPARE);
			this.state = 3748;
			this.match(PostgreSQLParserParser.TRANSACTION);
			this.state = 3749;
			_localctx._name = this.name_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reassign_owned_stmt(): Reassign_owned_stmtContext {
		let _localctx: Reassign_owned_stmtContext = new Reassign_owned_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, PostgreSQLParserParser.RULE_reassign_owned_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3751;
			this.match(PostgreSQLParserParser.REASSIGN);
			this.state = 3752;
			this.match(PostgreSQLParserParser.OWNED);
			this.state = 3753;
			this.match(PostgreSQLParserParser.BY);
			{
			this.state = 3757;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.WHITESPACE:
			case PostgreSQLParserParser.A_:
			case PostgreSQLParserParser.ABORT:
			case PostgreSQLParserParser.ABS:
			case PostgreSQLParserParser.ABSOLUTE:
			case PostgreSQLParserParser.ACCESS:
			case PostgreSQLParserParser.ACTION:
			case PostgreSQLParserParser.ADA:
			case PostgreSQLParserParser.ADD:
			case PostgreSQLParserParser.ADMIN:
			case PostgreSQLParserParser.AFTER:
			case PostgreSQLParserParser.AGGREGATE:
			case PostgreSQLParserParser.ALLOCATE:
			case PostgreSQLParserParser.ALSO:
			case PostgreSQLParserParser.ALTER:
			case PostgreSQLParserParser.ALWAYS:
			case PostgreSQLParserParser.ANY:
			case PostgreSQLParserParser.ARE:
			case PostgreSQLParserParser.ASENSITIVE:
			case PostgreSQLParserParser.ASSERTION:
			case PostgreSQLParserParser.ASSIGNMENT:
			case PostgreSQLParserParser.AT:
			case PostgreSQLParserParser.ATOMIC:
			case PostgreSQLParserParser.ATTRIBUTE:
			case PostgreSQLParserParser.ATTRIBUTES:
			case PostgreSQLParserParser.AVG:
			case PostgreSQLParserParser.BACKWARD:
			case PostgreSQLParserParser.BEFORE:
			case PostgreSQLParserParser.BEGIN:
			case PostgreSQLParserParser.BERNOULLI:
			case PostgreSQLParserParser.BETWEEN:
			case PostgreSQLParserParser.BIGINT:
			case PostgreSQLParserParser.BIT:
			case PostgreSQLParserParser.BIT_LENGTH:
			case PostgreSQLParserParser.BLOB:
			case PostgreSQLParserParser.BOOLEAN:
			case PostgreSQLParserParser.BREADTH:
			case PostgreSQLParserParser.BY:
			case PostgreSQLParserParser.C_:
			case PostgreSQLParserParser.CACHE:
			case PostgreSQLParserParser.CALL:
			case PostgreSQLParserParser.CALLED:
			case PostgreSQLParserParser.CARDINALITY:
			case PostgreSQLParserParser.CASCADE:
			case PostgreSQLParserParser.CASCADED:
			case PostgreSQLParserParser.CATALOG:
			case PostgreSQLParserParser.CATALOG_NAME:
			case PostgreSQLParserParser.CEIL:
			case PostgreSQLParserParser.CEILING:
			case PostgreSQLParserParser.CHAIN:
			case PostgreSQLParserParser.CHAR:
			case PostgreSQLParserParser.CHAR_LENGTH:
			case PostgreSQLParserParser.CHARACTER:
			case PostgreSQLParserParser.CHARACTER_LENGTH:
			case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
			case PostgreSQLParserParser.CHARACTER_SET_NAME:
			case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
			case PostgreSQLParserParser.CHARACTERISTICS:
			case PostgreSQLParserParser.CHARACTERS:
			case PostgreSQLParserParser.CHECKPOINT:
			case PostgreSQLParserParser.CLASS:
			case PostgreSQLParserParser.CLASS_ORIGIN:
			case PostgreSQLParserParser.CLOB:
			case PostgreSQLParserParser.CLOSE:
			case PostgreSQLParserParser.CLUSTER:
			case PostgreSQLParserParser.COALESCE:
			case PostgreSQLParserParser.COBOL:
			case PostgreSQLParserParser.COLLATION_CATALOG:
			case PostgreSQLParserParser.COLLATION_NAME:
			case PostgreSQLParserParser.COLLATION_SCHEMA:
			case PostgreSQLParserParser.COLLECT:
			case PostgreSQLParserParser.COLUMN_NAME:
			case PostgreSQLParserParser.COMMAND_FUNCTION:
			case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
			case PostgreSQLParserParser.COMMENT:
			case PostgreSQLParserParser.COMMIT:
			case PostgreSQLParserParser.COMMITTED:
			case PostgreSQLParserParser.CONDITION:
			case PostgreSQLParserParser.CONDITION_NUMBER:
			case PostgreSQLParserParser.CONNECT:
			case PostgreSQLParserParser.CONNECTION:
			case PostgreSQLParserParser.CONNECTION_NAME:
			case PostgreSQLParserParser.CONSTRAINT_CATALOG:
			case PostgreSQLParserParser.CONSTRAINT_NAME:
			case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
			case PostgreSQLParserParser.CONSTRAINTS:
			case PostgreSQLParserParser.CONSTRUCTOR:
			case PostgreSQLParserParser.CONTAINS:
			case PostgreSQLParserParser.CONTINUE:
			case PostgreSQLParserParser.CONVERSION:
			case PostgreSQLParserParser.CONVERT:
			case PostgreSQLParserParser.COPY:
			case PostgreSQLParserParser.CORR:
			case PostgreSQLParserParser.CORRESPONDING:
			case PostgreSQLParserParser.COUNT:
			case PostgreSQLParserParser.COVAR_POP:
			case PostgreSQLParserParser.COVAR_SAMP:
			case PostgreSQLParserParser.CSV:
			case PostgreSQLParserParser.CUBE:
			case PostgreSQLParserParser.CUME_DIST:
			case PostgreSQLParserParser.CURRENT:
			case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
			case PostgreSQLParserParser.CURRENT_PATH:
			case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case PostgreSQLParserParser.CURSOR:
			case PostgreSQLParserParser.CURSOR_NAME:
			case PostgreSQLParserParser.CYCLE:
			case PostgreSQLParserParser.DATA:
			case PostgreSQLParserParser.DATABASE:
			case PostgreSQLParserParser.DATE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
			case PostgreSQLParserParser.DAY:
			case PostgreSQLParserParser.DEALLOCATE:
			case PostgreSQLParserParser.DEC:
			case PostgreSQLParserParser.DECIMAL:
			case PostgreSQLParserParser.DECLARE:
			case PostgreSQLParserParser.DEFAULTS:
			case PostgreSQLParserParser.DEFERRED:
			case PostgreSQLParserParser.DEFINED:
			case PostgreSQLParserParser.DEFINER:
			case PostgreSQLParserParser.DEGREE:
			case PostgreSQLParserParser.DELETE:
			case PostgreSQLParserParser.DELIMITER:
			case PostgreSQLParserParser.DELIMITERS:
			case PostgreSQLParserParser.DENSE_RANK:
			case PostgreSQLParserParser.DEPTH:
			case PostgreSQLParserParser.DEREF:
			case PostgreSQLParserParser.DERIVED:
			case PostgreSQLParserParser.DESCRIBE:
			case PostgreSQLParserParser.DESCRIPTOR:
			case PostgreSQLParserParser.DETERMINISTIC:
			case PostgreSQLParserParser.DIAGNOSTICS:
			case PostgreSQLParserParser.DICTIONARY:
			case PostgreSQLParserParser.DISCONNECT:
			case PostgreSQLParserParser.DISPATCH:
			case PostgreSQLParserParser.DOMAIN:
			case PostgreSQLParserParser.DOUBLE:
			case PostgreSQLParserParser.DYNAMIC:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
			case PostgreSQLParserParser.EACH:
			case PostgreSQLParserParser.ELEMENT:
			case PostgreSQLParserParser.ENCODING:
			case PostgreSQLParserParser.ENCRYPTED:
			case PostgreSQLParserParser.END:
			case PostgreSQLParserParser.EQUALS:
			case PostgreSQLParserParser.ESCAPE:
			case PostgreSQLParserParser.EVERY:
			case PostgreSQLParserParser.EXCEPTION:
			case PostgreSQLParserParser.EXCLUDE:
			case PostgreSQLParserParser.EXCLUDING:
			case PostgreSQLParserParser.EXCLUSIVE:
			case PostgreSQLParserParser.EXEC:
			case PostgreSQLParserParser.EXECUTE:
			case PostgreSQLParserParser.EXISTS:
			case PostgreSQLParserParser.EXP:
			case PostgreSQLParserParser.EXPLAIN:
			case PostgreSQLParserParser.EXTENSION:
			case PostgreSQLParserParser.EXTERNAL:
			case PostgreSQLParserParser.EXTRACT:
			case PostgreSQLParserParser.FILTER:
			case PostgreSQLParserParser.FINAL:
			case PostgreSQLParserParser.FIRST:
			case PostgreSQLParserParser.FLOAT:
			case PostgreSQLParserParser.FLOOR:
			case PostgreSQLParserParser.FOLLOWING:
			case PostgreSQLParserParser.FORCE:
			case PostgreSQLParserParser.FORMAT:
			case PostgreSQLParserParser.FORTRAN:
			case PostgreSQLParserParser.FORWARD:
			case PostgreSQLParserParser.FOUND:
			case PostgreSQLParserParser.FREE:
			case PostgreSQLParserParser.FUNCTION:
			case PostgreSQLParserParser.FUSION:
			case PostgreSQLParserParser.G_:
			case PostgreSQLParserParser.GENERAL:
			case PostgreSQLParserParser.GENERATED:
			case PostgreSQLParserParser.GET:
			case PostgreSQLParserParser.GLOBAL:
			case PostgreSQLParserParser.GO:
			case PostgreSQLParserParser.GOTO:
			case PostgreSQLParserParser.GRANTED:
			case PostgreSQLParserParser.GREATEST:
			case PostgreSQLParserParser.GROUPING:
			case PostgreSQLParserParser.HANDLER:
			case PostgreSQLParserParser.HIERARCHY:
			case PostgreSQLParserParser.HOLD:
			case PostgreSQLParserParser.HOST:
			case PostgreSQLParserParser.HOUR:
			case PostgreSQLParserParser.IDENTITY:
			case PostgreSQLParserParser.IGNORE:
			case PostgreSQLParserParser.IMMEDIATE:
			case PostgreSQLParserParser.IMMUTABLE:
			case PostgreSQLParserParser.IMPLEMENTATION:
			case PostgreSQLParserParser.IMPLICIT:
			case PostgreSQLParserParser.INCLUDING:
			case PostgreSQLParserParser.INCREMENT:
			case PostgreSQLParserParser.INDEX:
			case PostgreSQLParserParser.INDICATOR:
			case PostgreSQLParserParser.INHERITS:
			case PostgreSQLParserParser.INOUT:
			case PostgreSQLParserParser.INPUT:
			case PostgreSQLParserParser.INSENSITIVE:
			case PostgreSQLParserParser.INSERT:
			case PostgreSQLParserParser.INSTANCE:
			case PostgreSQLParserParser.INSTANTIABLE:
			case PostgreSQLParserParser.INSTEAD:
			case PostgreSQLParserParser.INT:
			case PostgreSQLParserParser.INTEGER:
			case PostgreSQLParserParser.INTERSECTION:
			case PostgreSQLParserParser.INTERVAL:
			case PostgreSQLParserParser.INVOKER:
			case PostgreSQLParserParser.ISOLATION:
			case PostgreSQLParserParser.K_:
			case PostgreSQLParserParser.KEY:
			case PostgreSQLParserParser.KEY_MEMBER:
			case PostgreSQLParserParser.KEY_TYPE:
			case PostgreSQLParserParser.LANGUAGE:
			case PostgreSQLParserParser.LARGE:
			case PostgreSQLParserParser.LAST:
			case PostgreSQLParserParser.LEAST:
			case PostgreSQLParserParser.LEFT:
			case PostgreSQLParserParser.LENGTH:
			case PostgreSQLParserParser.LEVEL:
			case PostgreSQLParserParser.LISTEN:
			case PostgreSQLParserParser.LN:
			case PostgreSQLParserParser.LOAD:
			case PostgreSQLParserParser.LOCAL:
			case PostgreSQLParserParser.LOCATION:
			case PostgreSQLParserParser.LOCATOR:
			case PostgreSQLParserParser.LOCK:
			case PostgreSQLParserParser.LOCKED:
			case PostgreSQLParserParser.LOWER:
			case PostgreSQLParserParser.M_:
			case PostgreSQLParserParser.MAP:
			case PostgreSQLParserParser.MATCH:
			case PostgreSQLParserParser.MATCHED:
			case PostgreSQLParserParser.MAX:
			case PostgreSQLParserParser.MAXVALUE:
			case PostgreSQLParserParser.MEMBER:
			case PostgreSQLParserParser.MERGE:
			case PostgreSQLParserParser.MESSAGE_LENGTH:
			case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
			case PostgreSQLParserParser.MESSAGE_TEXT:
			case PostgreSQLParserParser.METHOD:
			case PostgreSQLParserParser.MIN:
			case PostgreSQLParserParser.MINUTE:
			case PostgreSQLParserParser.MINVALUE:
			case PostgreSQLParserParser.MOD:
			case PostgreSQLParserParser.MODE:
			case PostgreSQLParserParser.MODIFIES:
			case PostgreSQLParserParser.MODULE:
			case PostgreSQLParserParser.MONTH:
			case PostgreSQLParserParser.MORE_:
			case PostgreSQLParserParser.MOVE:
			case PostgreSQLParserParser.MULTISET:
			case PostgreSQLParserParser.MUMPS:
			case PostgreSQLParserParser.NAME:
			case PostgreSQLParserParser.NAMES:
			case PostgreSQLParserParser.NATIONAL:
			case PostgreSQLParserParser.NCHAR:
			case PostgreSQLParserParser.NCLOB:
			case PostgreSQLParserParser.NESTING:
			case PostgreSQLParserParser.NEW:
			case PostgreSQLParserParser.NEXT:
			case PostgreSQLParserParser.NO:
			case PostgreSQLParserParser.NONE:
			case PostgreSQLParserParser.NORMALIZE:
			case PostgreSQLParserParser.NORMALIZED:
			case PostgreSQLParserParser.NOTHING:
			case PostgreSQLParserParser.NOTIFY:
			case PostgreSQLParserParser.NOWAIT:
			case PostgreSQLParserParser.NULLABLE:
			case PostgreSQLParserParser.NULLIF:
			case PostgreSQLParserParser.NULLS:
			case PostgreSQLParserParser.NUMBER:
			case PostgreSQLParserParser.NUMERIC:
			case PostgreSQLParserParser.OBJECT:
			case PostgreSQLParserParser.OCTET_LENGTH:
			case PostgreSQLParserParser.OCTETS:
			case PostgreSQLParserParser.OF:
			case PostgreSQLParserParser.OFF:
			case PostgreSQLParserParser.OIDS:
			case PostgreSQLParserParser.OLD:
			case PostgreSQLParserParser.OPEN:
			case PostgreSQLParserParser.OPERATOR:
			case PostgreSQLParserParser.OPTION:
			case PostgreSQLParserParser.OPTIONS:
			case PostgreSQLParserParser.ORDERING:
			case PostgreSQLParserParser.ORDINALITY:
			case PostgreSQLParserParser.OTHERS:
			case PostgreSQLParserParser.OUT:
			case PostgreSQLParserParser.OUTPUT:
			case PostgreSQLParserParser.OVER:
			case PostgreSQLParserParser.OVERLAY:
			case PostgreSQLParserParser.OVERRIDING:
			case PostgreSQLParserParser.OWNER:
			case PostgreSQLParserParser.PAD:
			case PostgreSQLParserParser.PARAMETER:
			case PostgreSQLParserParser.PARAMETER_MODE:
			case PostgreSQLParserParser.PARAMETER_NAME:
			case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
			case PostgreSQLParserParser.PARTIAL:
			case PostgreSQLParserParser.PARTITION:
			case PostgreSQLParserParser.PASCAL:
			case PostgreSQLParserParser.PASSWORD:
			case PostgreSQLParserParser.PATH:
			case PostgreSQLParserParser.PERCENT_RANK:
			case PostgreSQLParserParser.PERCENTILE_CONT:
			case PostgreSQLParserParser.PERCENTILE_DISC:
			case PostgreSQLParserParser.PLAIN:
			case PostgreSQLParserParser.PLI:
			case PostgreSQLParserParser.POSITION:
			case PostgreSQLParserParser.POWER:
			case PostgreSQLParserParser.PRECEDING:
			case PostgreSQLParserParser.PRECISION:
			case PostgreSQLParserParser.PREPARE:
			case PostgreSQLParserParser.PRESERVE:
			case PostgreSQLParserParser.PRIOR:
			case PostgreSQLParserParser.PRIVILEGES:
			case PostgreSQLParserParser.PROCEDURAL:
			case PostgreSQLParserParser.PROCEDURE:
			case PostgreSQLParserParser.PUBLIC:
			case PostgreSQLParserParser.QUOTE:
			case PostgreSQLParserParser.RANGE:
			case PostgreSQLParserParser.RANK:
			case PostgreSQLParserParser.READ:
			case PostgreSQLParserParser.READS:
			case PostgreSQLParserParser.REAL:
			case PostgreSQLParserParser.RECHECK:
			case PostgreSQLParserParser.RECURSIVE:
			case PostgreSQLParserParser.REF:
			case PostgreSQLParserParser.REFERENCING:
			case PostgreSQLParserParser.REFRESH:
			case PostgreSQLParserParser.REGR_AVGX:
			case PostgreSQLParserParser.REGR_AVGY:
			case PostgreSQLParserParser.REGR_COUNT:
			case PostgreSQLParserParser.REGR_INTERCEPT:
			case PostgreSQLParserParser.REGR_SLOPE:
			case PostgreSQLParserParser.REGR_SXX:
			case PostgreSQLParserParser.REGR_SXY:
			case PostgreSQLParserParser.REGR_SYY:
			case PostgreSQLParserParser.REINDEX:
			case PostgreSQLParserParser.RELATIVE:
			case PostgreSQLParserParser.RELEASE:
			case PostgreSQLParserParser.RENAME:
			case PostgreSQLParserParser.REPEATABLE:
			case PostgreSQLParserParser.REPLACE:
			case PostgreSQLParserParser.RESET:
			case PostgreSQLParserParser.RESTART:
			case PostgreSQLParserParser.RESTRICT:
			case PostgreSQLParserParser.RESULT:
			case PostgreSQLParserParser.RETURN:
			case PostgreSQLParserParser.RETURNED_CARDINALITY:
			case PostgreSQLParserParser.RETURNED_LENGTH:
			case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
			case PostgreSQLParserParser.RETURNED_SQLSTATE:
			case PostgreSQLParserParser.RETURNS:
			case PostgreSQLParserParser.REVOKE:
			case PostgreSQLParserParser.RIGHT:
			case PostgreSQLParserParser.ROLE:
			case PostgreSQLParserParser.ROLLBACK:
			case PostgreSQLParserParser.ROLLUP:
			case PostgreSQLParserParser.ROUTINE:
			case PostgreSQLParserParser.ROUTINE_CATALOG:
			case PostgreSQLParserParser.ROUTINE_NAME:
			case PostgreSQLParserParser.ROUTINE_SCHEMA:
			case PostgreSQLParserParser.ROW:
			case PostgreSQLParserParser.ROW_COUNT:
			case PostgreSQLParserParser.ROW_NUMBER:
			case PostgreSQLParserParser.ROWS:
			case PostgreSQLParserParser.RULE:
			case PostgreSQLParserParser.SAVEPOINT:
			case PostgreSQLParserParser.SCALE:
			case PostgreSQLParserParser.SCHEMA:
			case PostgreSQLParserParser.SCHEMA_NAME:
			case PostgreSQLParserParser.SCOPE:
			case PostgreSQLParserParser.SCOPE_CATALOG:
			case PostgreSQLParserParser.SCOPE_NAME:
			case PostgreSQLParserParser.SCOPE_SCHEMA:
			case PostgreSQLParserParser.SCROLL:
			case PostgreSQLParserParser.SEARCH:
			case PostgreSQLParserParser.SECOND:
			case PostgreSQLParserParser.SECTION:
			case PostgreSQLParserParser.SECURITY:
			case PostgreSQLParserParser.SELF:
			case PostgreSQLParserParser.SENSITIVE:
			case PostgreSQLParserParser.SEQUENCE:
			case PostgreSQLParserParser.SEQUENCES:
			case PostgreSQLParserParser.SERIALIZABLE:
			case PostgreSQLParserParser.SERVER_NAME:
			case PostgreSQLParserParser.SESSION:
			case PostgreSQLParserParser.SET:
			case PostgreSQLParserParser.SETOF:
			case PostgreSQLParserParser.SETS:
			case PostgreSQLParserParser.SHARE:
			case PostgreSQLParserParser.SHOW:
			case PostgreSQLParserParser.SIMPLE:
			case PostgreSQLParserParser.SIZE:
			case PostgreSQLParserParser.SMALLINT:
			case PostgreSQLParserParser.SOME:
			case PostgreSQLParserParser.SOURCE:
			case PostgreSQLParserParser.SPACE:
			case PostgreSQLParserParser.SPECIFIC:
			case PostgreSQLParserParser.SPECIFIC_NAME:
			case PostgreSQLParserParser.SPECIFICTYPE:
			case PostgreSQLParserParser.SQL:
			case PostgreSQLParserParser.SQLCODE:
			case PostgreSQLParserParser.SQLERROR:
			case PostgreSQLParserParser.SQLEXCEPTION:
			case PostgreSQLParserParser.SQLSTATE:
			case PostgreSQLParserParser.SQLWARNING:
			case PostgreSQLParserParser.SQRT:
			case PostgreSQLParserParser.STABLE:
			case PostgreSQLParserParser.START:
			case PostgreSQLParserParser.STATE:
			case PostgreSQLParserParser.STATEMENT:
			case PostgreSQLParserParser.STATIC:
			case PostgreSQLParserParser.STATISTICS:
			case PostgreSQLParserParser.STDDEV_POP:
			case PostgreSQLParserParser.STDDEV_SAMP:
			case PostgreSQLParserParser.STDIN:
			case PostgreSQLParserParser.STDOUT:
			case PostgreSQLParserParser.STORAGE:
			case PostgreSQLParserParser.STRICT:
			case PostgreSQLParserParser.STRUCTURE:
			case PostgreSQLParserParser.STYLE:
			case PostgreSQLParserParser.SUBCLASS_ORIGIN:
			case PostgreSQLParserParser.SUBMULTISET:
			case PostgreSQLParserParser.SUBSTRING:
			case PostgreSQLParserParser.SUM:
			case PostgreSQLParserParser.SYSID:
			case PostgreSQLParserParser.SYSTEM:
			case PostgreSQLParserParser.SYSTEM_USER:
			case PostgreSQLParserParser.TABLE_NAME:
			case PostgreSQLParserParser.TABLESPACE:
			case PostgreSQLParserParser.TEMP:
			case PostgreSQLParserParser.TEMPLATE:
			case PostgreSQLParserParser.TEMPORARY:
			case PostgreSQLParserParser.TIES:
			case PostgreSQLParserParser.TIME:
			case PostgreSQLParserParser.TIMESTAMP:
			case PostgreSQLParserParser.TIMEZONE_HOUR:
			case PostgreSQLParserParser.TIMEZONE_MINUTE:
			case PostgreSQLParserParser.TOP_LEVEL_COUNT:
			case PostgreSQLParserParser.TRANSACTION:
			case PostgreSQLParserParser.TRANSACTION_ACTIVE:
			case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
			case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
			case PostgreSQLParserParser.TRANSFORM:
			case PostgreSQLParserParser.TRANSFORMS:
			case PostgreSQLParserParser.TRANSLATE:
			case PostgreSQLParserParser.TRANSLATION:
			case PostgreSQLParserParser.TREAT:
			case PostgreSQLParserParser.TRIGGER:
			case PostgreSQLParserParser.TRIGGER_CATALOG:
			case PostgreSQLParserParser.TRIGGER_NAME:
			case PostgreSQLParserParser.TRIGGER_SCHEMA:
			case PostgreSQLParserParser.TRIM:
			case PostgreSQLParserParser.TRUE:
			case PostgreSQLParserParser.TRUNCATE:
			case PostgreSQLParserParser.TRUSTED:
			case PostgreSQLParserParser.TYPE:
			case PostgreSQLParserParser.UESCAPE:
			case PostgreSQLParserParser.UNBOUNDED:
			case PostgreSQLParserParser.UNCOMMITTED:
			case PostgreSQLParserParser.UNDER:
			case PostgreSQLParserParser.UNENCRYPTED:
			case PostgreSQLParserParser.UNKNOWN:
			case PostgreSQLParserParser.UNLISTEN:
			case PostgreSQLParserParser.UNNAMED:
			case PostgreSQLParserParser.UNNEST:
			case PostgreSQLParserParser.UNTIL:
			case PostgreSQLParserParser.UPDATE:
			case PostgreSQLParserParser.UPPER:
			case PostgreSQLParserParser.USAGE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
			case PostgreSQLParserParser.VACUUM:
			case PostgreSQLParserParser.VALID:
			case PostgreSQLParserParser.VALIDATOR:
			case PostgreSQLParserParser.VALUE:
			case PostgreSQLParserParser.VALUES:
			case PostgreSQLParserParser.VAR_POP:
			case PostgreSQLParserParser.VAR_SAMP:
			case PostgreSQLParserParser.VARCHAR:
			case PostgreSQLParserParser.VARYING:
			case PostgreSQLParserParser.VIEW:
			case PostgreSQLParserParser.VOLATILE:
			case PostgreSQLParserParser.WHENEVER:
			case PostgreSQLParserParser.WIDTH_BUCKET:
			case PostgreSQLParserParser.WITHIN:
			case PostgreSQLParserParser.WITHOUT:
			case PostgreSQLParserParser.WORK:
			case PostgreSQLParserParser.WRITE:
			case PostgreSQLParserParser.YEAR:
			case PostgreSQLParserParser.ZONE:
			case PostgreSQLParserParser.ABSTIME:
			case PostgreSQLParserParser.BIGSERIAL:
			case PostgreSQLParserParser.BIT_VARYING:
			case PostgreSQLParserParser.BOOL:
			case PostgreSQLParserParser.BOX:
			case PostgreSQLParserParser.BYTEA:
			case PostgreSQLParserParser.CHARACTER_VARYING:
			case PostgreSQLParserParser.CIDR:
			case PostgreSQLParserParser.CIRCLE:
			case PostgreSQLParserParser.FLOAT4:
			case PostgreSQLParserParser.FLOAT8:
			case PostgreSQLParserParser.INET:
			case PostgreSQLParserParser.INT2:
			case PostgreSQLParserParser.INT4:
			case PostgreSQLParserParser.INT8:
			case PostgreSQLParserParser.JSON:
			case PostgreSQLParserParser.JSONB:
			case PostgreSQLParserParser.LINE:
			case PostgreSQLParserParser.LSEG:
			case PostgreSQLParserParser.MACADDR:
			case PostgreSQLParserParser.MACADDR8:
			case PostgreSQLParserParser.MONEY:
			case PostgreSQLParserParser.PG_LSN:
			case PostgreSQLParserParser.POINT:
			case PostgreSQLParserParser.POLYGON:
			case PostgreSQLParserParser.RELTIME:
			case PostgreSQLParserParser.SERIAL:
			case PostgreSQLParserParser.SERIAL2:
			case PostgreSQLParserParser.SERIAL4:
			case PostgreSQLParserParser.SERIAL8:
			case PostgreSQLParserParser.SMALLSERIAL:
			case PostgreSQLParserParser.TEXT:
			case PostgreSQLParserParser.TIMESTAMPTZ:
			case PostgreSQLParserParser.TIMETZ:
			case PostgreSQLParserParser.TSQUERY:
			case PostgreSQLParserParser.TSVECTOR:
			case PostgreSQLParserParser.TXID_SNAPSHOT:
			case PostgreSQLParserParser.UUID:
			case PostgreSQLParserParser.VARBIT:
			case PostgreSQLParserParser.XML:
			case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
			case PostgreSQLParserParser.IDENTIFIER:
			case PostgreSQLParserParser.IDENTIFIER_UNICODE:
				{
				this.state = 3754;
				this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.CURRENT_USER:
				{
				this.state = 3755;
				this.match(PostgreSQLParserParser.CURRENT_USER);
				}
				break;
			case PostgreSQLParserParser.SESSION_USER:
				{
				this.state = 3756;
				this.match(PostgreSQLParserParser.SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3767;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 3759;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 3763;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 3760;
					this.identifier(0);
					}
					break;
				case PostgreSQLParserParser.CURRENT_USER:
					{
					this.state = 3761;
					this.match(PostgreSQLParserParser.CURRENT_USER);
					}
					break;
				case PostgreSQLParserParser.SESSION_USER:
					{
					this.state = 3762;
					this.match(PostgreSQLParserParser.SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				this.state = 3769;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
			this.state = 3770;
			this.match(PostgreSQLParserParser.TO);
			this.state = 3774;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.WHITESPACE:
			case PostgreSQLParserParser.A_:
			case PostgreSQLParserParser.ABORT:
			case PostgreSQLParserParser.ABS:
			case PostgreSQLParserParser.ABSOLUTE:
			case PostgreSQLParserParser.ACCESS:
			case PostgreSQLParserParser.ACTION:
			case PostgreSQLParserParser.ADA:
			case PostgreSQLParserParser.ADD:
			case PostgreSQLParserParser.ADMIN:
			case PostgreSQLParserParser.AFTER:
			case PostgreSQLParserParser.AGGREGATE:
			case PostgreSQLParserParser.ALLOCATE:
			case PostgreSQLParserParser.ALSO:
			case PostgreSQLParserParser.ALTER:
			case PostgreSQLParserParser.ALWAYS:
			case PostgreSQLParserParser.ANY:
			case PostgreSQLParserParser.ARE:
			case PostgreSQLParserParser.ASENSITIVE:
			case PostgreSQLParserParser.ASSERTION:
			case PostgreSQLParserParser.ASSIGNMENT:
			case PostgreSQLParserParser.AT:
			case PostgreSQLParserParser.ATOMIC:
			case PostgreSQLParserParser.ATTRIBUTE:
			case PostgreSQLParserParser.ATTRIBUTES:
			case PostgreSQLParserParser.AVG:
			case PostgreSQLParserParser.BACKWARD:
			case PostgreSQLParserParser.BEFORE:
			case PostgreSQLParserParser.BEGIN:
			case PostgreSQLParserParser.BERNOULLI:
			case PostgreSQLParserParser.BETWEEN:
			case PostgreSQLParserParser.BIGINT:
			case PostgreSQLParserParser.BIT:
			case PostgreSQLParserParser.BIT_LENGTH:
			case PostgreSQLParserParser.BLOB:
			case PostgreSQLParserParser.BOOLEAN:
			case PostgreSQLParserParser.BREADTH:
			case PostgreSQLParserParser.BY:
			case PostgreSQLParserParser.C_:
			case PostgreSQLParserParser.CACHE:
			case PostgreSQLParserParser.CALL:
			case PostgreSQLParserParser.CALLED:
			case PostgreSQLParserParser.CARDINALITY:
			case PostgreSQLParserParser.CASCADE:
			case PostgreSQLParserParser.CASCADED:
			case PostgreSQLParserParser.CATALOG:
			case PostgreSQLParserParser.CATALOG_NAME:
			case PostgreSQLParserParser.CEIL:
			case PostgreSQLParserParser.CEILING:
			case PostgreSQLParserParser.CHAIN:
			case PostgreSQLParserParser.CHAR:
			case PostgreSQLParserParser.CHAR_LENGTH:
			case PostgreSQLParserParser.CHARACTER:
			case PostgreSQLParserParser.CHARACTER_LENGTH:
			case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
			case PostgreSQLParserParser.CHARACTER_SET_NAME:
			case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
			case PostgreSQLParserParser.CHARACTERISTICS:
			case PostgreSQLParserParser.CHARACTERS:
			case PostgreSQLParserParser.CHECKPOINT:
			case PostgreSQLParserParser.CLASS:
			case PostgreSQLParserParser.CLASS_ORIGIN:
			case PostgreSQLParserParser.CLOB:
			case PostgreSQLParserParser.CLOSE:
			case PostgreSQLParserParser.CLUSTER:
			case PostgreSQLParserParser.COALESCE:
			case PostgreSQLParserParser.COBOL:
			case PostgreSQLParserParser.COLLATION_CATALOG:
			case PostgreSQLParserParser.COLLATION_NAME:
			case PostgreSQLParserParser.COLLATION_SCHEMA:
			case PostgreSQLParserParser.COLLECT:
			case PostgreSQLParserParser.COLUMN_NAME:
			case PostgreSQLParserParser.COMMAND_FUNCTION:
			case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
			case PostgreSQLParserParser.COMMENT:
			case PostgreSQLParserParser.COMMIT:
			case PostgreSQLParserParser.COMMITTED:
			case PostgreSQLParserParser.CONDITION:
			case PostgreSQLParserParser.CONDITION_NUMBER:
			case PostgreSQLParserParser.CONNECT:
			case PostgreSQLParserParser.CONNECTION:
			case PostgreSQLParserParser.CONNECTION_NAME:
			case PostgreSQLParserParser.CONSTRAINT_CATALOG:
			case PostgreSQLParserParser.CONSTRAINT_NAME:
			case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
			case PostgreSQLParserParser.CONSTRAINTS:
			case PostgreSQLParserParser.CONSTRUCTOR:
			case PostgreSQLParserParser.CONTAINS:
			case PostgreSQLParserParser.CONTINUE:
			case PostgreSQLParserParser.CONVERSION:
			case PostgreSQLParserParser.CONVERT:
			case PostgreSQLParserParser.COPY:
			case PostgreSQLParserParser.CORR:
			case PostgreSQLParserParser.CORRESPONDING:
			case PostgreSQLParserParser.COUNT:
			case PostgreSQLParserParser.COVAR_POP:
			case PostgreSQLParserParser.COVAR_SAMP:
			case PostgreSQLParserParser.CSV:
			case PostgreSQLParserParser.CUBE:
			case PostgreSQLParserParser.CUME_DIST:
			case PostgreSQLParserParser.CURRENT:
			case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
			case PostgreSQLParserParser.CURRENT_PATH:
			case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case PostgreSQLParserParser.CURSOR:
			case PostgreSQLParserParser.CURSOR_NAME:
			case PostgreSQLParserParser.CYCLE:
			case PostgreSQLParserParser.DATA:
			case PostgreSQLParserParser.DATABASE:
			case PostgreSQLParserParser.DATE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
			case PostgreSQLParserParser.DAY:
			case PostgreSQLParserParser.DEALLOCATE:
			case PostgreSQLParserParser.DEC:
			case PostgreSQLParserParser.DECIMAL:
			case PostgreSQLParserParser.DECLARE:
			case PostgreSQLParserParser.DEFAULTS:
			case PostgreSQLParserParser.DEFERRED:
			case PostgreSQLParserParser.DEFINED:
			case PostgreSQLParserParser.DEFINER:
			case PostgreSQLParserParser.DEGREE:
			case PostgreSQLParserParser.DELETE:
			case PostgreSQLParserParser.DELIMITER:
			case PostgreSQLParserParser.DELIMITERS:
			case PostgreSQLParserParser.DENSE_RANK:
			case PostgreSQLParserParser.DEPTH:
			case PostgreSQLParserParser.DEREF:
			case PostgreSQLParserParser.DERIVED:
			case PostgreSQLParserParser.DESCRIBE:
			case PostgreSQLParserParser.DESCRIPTOR:
			case PostgreSQLParserParser.DETERMINISTIC:
			case PostgreSQLParserParser.DIAGNOSTICS:
			case PostgreSQLParserParser.DICTIONARY:
			case PostgreSQLParserParser.DISCONNECT:
			case PostgreSQLParserParser.DISPATCH:
			case PostgreSQLParserParser.DOMAIN:
			case PostgreSQLParserParser.DOUBLE:
			case PostgreSQLParserParser.DYNAMIC:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
			case PostgreSQLParserParser.EACH:
			case PostgreSQLParserParser.ELEMENT:
			case PostgreSQLParserParser.ENCODING:
			case PostgreSQLParserParser.ENCRYPTED:
			case PostgreSQLParserParser.END:
			case PostgreSQLParserParser.EQUALS:
			case PostgreSQLParserParser.ESCAPE:
			case PostgreSQLParserParser.EVERY:
			case PostgreSQLParserParser.EXCEPTION:
			case PostgreSQLParserParser.EXCLUDE:
			case PostgreSQLParserParser.EXCLUDING:
			case PostgreSQLParserParser.EXCLUSIVE:
			case PostgreSQLParserParser.EXEC:
			case PostgreSQLParserParser.EXECUTE:
			case PostgreSQLParserParser.EXISTS:
			case PostgreSQLParserParser.EXP:
			case PostgreSQLParserParser.EXPLAIN:
			case PostgreSQLParserParser.EXTENSION:
			case PostgreSQLParserParser.EXTERNAL:
			case PostgreSQLParserParser.EXTRACT:
			case PostgreSQLParserParser.FILTER:
			case PostgreSQLParserParser.FINAL:
			case PostgreSQLParserParser.FIRST:
			case PostgreSQLParserParser.FLOAT:
			case PostgreSQLParserParser.FLOOR:
			case PostgreSQLParserParser.FOLLOWING:
			case PostgreSQLParserParser.FORCE:
			case PostgreSQLParserParser.FORMAT:
			case PostgreSQLParserParser.FORTRAN:
			case PostgreSQLParserParser.FORWARD:
			case PostgreSQLParserParser.FOUND:
			case PostgreSQLParserParser.FREE:
			case PostgreSQLParserParser.FUNCTION:
			case PostgreSQLParserParser.FUSION:
			case PostgreSQLParserParser.G_:
			case PostgreSQLParserParser.GENERAL:
			case PostgreSQLParserParser.GENERATED:
			case PostgreSQLParserParser.GET:
			case PostgreSQLParserParser.GLOBAL:
			case PostgreSQLParserParser.GO:
			case PostgreSQLParserParser.GOTO:
			case PostgreSQLParserParser.GRANTED:
			case PostgreSQLParserParser.GREATEST:
			case PostgreSQLParserParser.GROUPING:
			case PostgreSQLParserParser.HANDLER:
			case PostgreSQLParserParser.HIERARCHY:
			case PostgreSQLParserParser.HOLD:
			case PostgreSQLParserParser.HOST:
			case PostgreSQLParserParser.HOUR:
			case PostgreSQLParserParser.IDENTITY:
			case PostgreSQLParserParser.IGNORE:
			case PostgreSQLParserParser.IMMEDIATE:
			case PostgreSQLParserParser.IMMUTABLE:
			case PostgreSQLParserParser.IMPLEMENTATION:
			case PostgreSQLParserParser.IMPLICIT:
			case PostgreSQLParserParser.INCLUDING:
			case PostgreSQLParserParser.INCREMENT:
			case PostgreSQLParserParser.INDEX:
			case PostgreSQLParserParser.INDICATOR:
			case PostgreSQLParserParser.INHERITS:
			case PostgreSQLParserParser.INOUT:
			case PostgreSQLParserParser.INPUT:
			case PostgreSQLParserParser.INSENSITIVE:
			case PostgreSQLParserParser.INSERT:
			case PostgreSQLParserParser.INSTANCE:
			case PostgreSQLParserParser.INSTANTIABLE:
			case PostgreSQLParserParser.INSTEAD:
			case PostgreSQLParserParser.INT:
			case PostgreSQLParserParser.INTEGER:
			case PostgreSQLParserParser.INTERSECTION:
			case PostgreSQLParserParser.INTERVAL:
			case PostgreSQLParserParser.INVOKER:
			case PostgreSQLParserParser.ISOLATION:
			case PostgreSQLParserParser.K_:
			case PostgreSQLParserParser.KEY:
			case PostgreSQLParserParser.KEY_MEMBER:
			case PostgreSQLParserParser.KEY_TYPE:
			case PostgreSQLParserParser.LANGUAGE:
			case PostgreSQLParserParser.LARGE:
			case PostgreSQLParserParser.LAST:
			case PostgreSQLParserParser.LEAST:
			case PostgreSQLParserParser.LEFT:
			case PostgreSQLParserParser.LENGTH:
			case PostgreSQLParserParser.LEVEL:
			case PostgreSQLParserParser.LISTEN:
			case PostgreSQLParserParser.LN:
			case PostgreSQLParserParser.LOAD:
			case PostgreSQLParserParser.LOCAL:
			case PostgreSQLParserParser.LOCATION:
			case PostgreSQLParserParser.LOCATOR:
			case PostgreSQLParserParser.LOCK:
			case PostgreSQLParserParser.LOCKED:
			case PostgreSQLParserParser.LOWER:
			case PostgreSQLParserParser.M_:
			case PostgreSQLParserParser.MAP:
			case PostgreSQLParserParser.MATCH:
			case PostgreSQLParserParser.MATCHED:
			case PostgreSQLParserParser.MAX:
			case PostgreSQLParserParser.MAXVALUE:
			case PostgreSQLParserParser.MEMBER:
			case PostgreSQLParserParser.MERGE:
			case PostgreSQLParserParser.MESSAGE_LENGTH:
			case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
			case PostgreSQLParserParser.MESSAGE_TEXT:
			case PostgreSQLParserParser.METHOD:
			case PostgreSQLParserParser.MIN:
			case PostgreSQLParserParser.MINUTE:
			case PostgreSQLParserParser.MINVALUE:
			case PostgreSQLParserParser.MOD:
			case PostgreSQLParserParser.MODE:
			case PostgreSQLParserParser.MODIFIES:
			case PostgreSQLParserParser.MODULE:
			case PostgreSQLParserParser.MONTH:
			case PostgreSQLParserParser.MORE_:
			case PostgreSQLParserParser.MOVE:
			case PostgreSQLParserParser.MULTISET:
			case PostgreSQLParserParser.MUMPS:
			case PostgreSQLParserParser.NAME:
			case PostgreSQLParserParser.NAMES:
			case PostgreSQLParserParser.NATIONAL:
			case PostgreSQLParserParser.NCHAR:
			case PostgreSQLParserParser.NCLOB:
			case PostgreSQLParserParser.NESTING:
			case PostgreSQLParserParser.NEW:
			case PostgreSQLParserParser.NEXT:
			case PostgreSQLParserParser.NO:
			case PostgreSQLParserParser.NONE:
			case PostgreSQLParserParser.NORMALIZE:
			case PostgreSQLParserParser.NORMALIZED:
			case PostgreSQLParserParser.NOTHING:
			case PostgreSQLParserParser.NOTIFY:
			case PostgreSQLParserParser.NOWAIT:
			case PostgreSQLParserParser.NULLABLE:
			case PostgreSQLParserParser.NULLIF:
			case PostgreSQLParserParser.NULLS:
			case PostgreSQLParserParser.NUMBER:
			case PostgreSQLParserParser.NUMERIC:
			case PostgreSQLParserParser.OBJECT:
			case PostgreSQLParserParser.OCTET_LENGTH:
			case PostgreSQLParserParser.OCTETS:
			case PostgreSQLParserParser.OF:
			case PostgreSQLParserParser.OFF:
			case PostgreSQLParserParser.OIDS:
			case PostgreSQLParserParser.OLD:
			case PostgreSQLParserParser.OPEN:
			case PostgreSQLParserParser.OPERATOR:
			case PostgreSQLParserParser.OPTION:
			case PostgreSQLParserParser.OPTIONS:
			case PostgreSQLParserParser.ORDERING:
			case PostgreSQLParserParser.ORDINALITY:
			case PostgreSQLParserParser.OTHERS:
			case PostgreSQLParserParser.OUT:
			case PostgreSQLParserParser.OUTPUT:
			case PostgreSQLParserParser.OVER:
			case PostgreSQLParserParser.OVERLAY:
			case PostgreSQLParserParser.OVERRIDING:
			case PostgreSQLParserParser.OWNER:
			case PostgreSQLParserParser.PAD:
			case PostgreSQLParserParser.PARAMETER:
			case PostgreSQLParserParser.PARAMETER_MODE:
			case PostgreSQLParserParser.PARAMETER_NAME:
			case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
			case PostgreSQLParserParser.PARTIAL:
			case PostgreSQLParserParser.PARTITION:
			case PostgreSQLParserParser.PASCAL:
			case PostgreSQLParserParser.PASSWORD:
			case PostgreSQLParserParser.PATH:
			case PostgreSQLParserParser.PERCENT_RANK:
			case PostgreSQLParserParser.PERCENTILE_CONT:
			case PostgreSQLParserParser.PERCENTILE_DISC:
			case PostgreSQLParserParser.PLAIN:
			case PostgreSQLParserParser.PLI:
			case PostgreSQLParserParser.POSITION:
			case PostgreSQLParserParser.POWER:
			case PostgreSQLParserParser.PRECEDING:
			case PostgreSQLParserParser.PRECISION:
			case PostgreSQLParserParser.PREPARE:
			case PostgreSQLParserParser.PRESERVE:
			case PostgreSQLParserParser.PRIOR:
			case PostgreSQLParserParser.PRIVILEGES:
			case PostgreSQLParserParser.PROCEDURAL:
			case PostgreSQLParserParser.PROCEDURE:
			case PostgreSQLParserParser.PUBLIC:
			case PostgreSQLParserParser.QUOTE:
			case PostgreSQLParserParser.RANGE:
			case PostgreSQLParserParser.RANK:
			case PostgreSQLParserParser.READ:
			case PostgreSQLParserParser.READS:
			case PostgreSQLParserParser.REAL:
			case PostgreSQLParserParser.RECHECK:
			case PostgreSQLParserParser.RECURSIVE:
			case PostgreSQLParserParser.REF:
			case PostgreSQLParserParser.REFERENCING:
			case PostgreSQLParserParser.REFRESH:
			case PostgreSQLParserParser.REGR_AVGX:
			case PostgreSQLParserParser.REGR_AVGY:
			case PostgreSQLParserParser.REGR_COUNT:
			case PostgreSQLParserParser.REGR_INTERCEPT:
			case PostgreSQLParserParser.REGR_SLOPE:
			case PostgreSQLParserParser.REGR_SXX:
			case PostgreSQLParserParser.REGR_SXY:
			case PostgreSQLParserParser.REGR_SYY:
			case PostgreSQLParserParser.REINDEX:
			case PostgreSQLParserParser.RELATIVE:
			case PostgreSQLParserParser.RELEASE:
			case PostgreSQLParserParser.RENAME:
			case PostgreSQLParserParser.REPEATABLE:
			case PostgreSQLParserParser.REPLACE:
			case PostgreSQLParserParser.RESET:
			case PostgreSQLParserParser.RESTART:
			case PostgreSQLParserParser.RESTRICT:
			case PostgreSQLParserParser.RESULT:
			case PostgreSQLParserParser.RETURN:
			case PostgreSQLParserParser.RETURNED_CARDINALITY:
			case PostgreSQLParserParser.RETURNED_LENGTH:
			case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
			case PostgreSQLParserParser.RETURNED_SQLSTATE:
			case PostgreSQLParserParser.RETURNS:
			case PostgreSQLParserParser.REVOKE:
			case PostgreSQLParserParser.RIGHT:
			case PostgreSQLParserParser.ROLE:
			case PostgreSQLParserParser.ROLLBACK:
			case PostgreSQLParserParser.ROLLUP:
			case PostgreSQLParserParser.ROUTINE:
			case PostgreSQLParserParser.ROUTINE_CATALOG:
			case PostgreSQLParserParser.ROUTINE_NAME:
			case PostgreSQLParserParser.ROUTINE_SCHEMA:
			case PostgreSQLParserParser.ROW:
			case PostgreSQLParserParser.ROW_COUNT:
			case PostgreSQLParserParser.ROW_NUMBER:
			case PostgreSQLParserParser.ROWS:
			case PostgreSQLParserParser.RULE:
			case PostgreSQLParserParser.SAVEPOINT:
			case PostgreSQLParserParser.SCALE:
			case PostgreSQLParserParser.SCHEMA:
			case PostgreSQLParserParser.SCHEMA_NAME:
			case PostgreSQLParserParser.SCOPE:
			case PostgreSQLParserParser.SCOPE_CATALOG:
			case PostgreSQLParserParser.SCOPE_NAME:
			case PostgreSQLParserParser.SCOPE_SCHEMA:
			case PostgreSQLParserParser.SCROLL:
			case PostgreSQLParserParser.SEARCH:
			case PostgreSQLParserParser.SECOND:
			case PostgreSQLParserParser.SECTION:
			case PostgreSQLParserParser.SECURITY:
			case PostgreSQLParserParser.SELF:
			case PostgreSQLParserParser.SENSITIVE:
			case PostgreSQLParserParser.SEQUENCE:
			case PostgreSQLParserParser.SEQUENCES:
			case PostgreSQLParserParser.SERIALIZABLE:
			case PostgreSQLParserParser.SERVER_NAME:
			case PostgreSQLParserParser.SESSION:
			case PostgreSQLParserParser.SET:
			case PostgreSQLParserParser.SETOF:
			case PostgreSQLParserParser.SETS:
			case PostgreSQLParserParser.SHARE:
			case PostgreSQLParserParser.SHOW:
			case PostgreSQLParserParser.SIMPLE:
			case PostgreSQLParserParser.SIZE:
			case PostgreSQLParserParser.SMALLINT:
			case PostgreSQLParserParser.SOME:
			case PostgreSQLParserParser.SOURCE:
			case PostgreSQLParserParser.SPACE:
			case PostgreSQLParserParser.SPECIFIC:
			case PostgreSQLParserParser.SPECIFIC_NAME:
			case PostgreSQLParserParser.SPECIFICTYPE:
			case PostgreSQLParserParser.SQL:
			case PostgreSQLParserParser.SQLCODE:
			case PostgreSQLParserParser.SQLERROR:
			case PostgreSQLParserParser.SQLEXCEPTION:
			case PostgreSQLParserParser.SQLSTATE:
			case PostgreSQLParserParser.SQLWARNING:
			case PostgreSQLParserParser.SQRT:
			case PostgreSQLParserParser.STABLE:
			case PostgreSQLParserParser.START:
			case PostgreSQLParserParser.STATE:
			case PostgreSQLParserParser.STATEMENT:
			case PostgreSQLParserParser.STATIC:
			case PostgreSQLParserParser.STATISTICS:
			case PostgreSQLParserParser.STDDEV_POP:
			case PostgreSQLParserParser.STDDEV_SAMP:
			case PostgreSQLParserParser.STDIN:
			case PostgreSQLParserParser.STDOUT:
			case PostgreSQLParserParser.STORAGE:
			case PostgreSQLParserParser.STRICT:
			case PostgreSQLParserParser.STRUCTURE:
			case PostgreSQLParserParser.STYLE:
			case PostgreSQLParserParser.SUBCLASS_ORIGIN:
			case PostgreSQLParserParser.SUBMULTISET:
			case PostgreSQLParserParser.SUBSTRING:
			case PostgreSQLParserParser.SUM:
			case PostgreSQLParserParser.SYSID:
			case PostgreSQLParserParser.SYSTEM:
			case PostgreSQLParserParser.SYSTEM_USER:
			case PostgreSQLParserParser.TABLE_NAME:
			case PostgreSQLParserParser.TABLESPACE:
			case PostgreSQLParserParser.TEMP:
			case PostgreSQLParserParser.TEMPLATE:
			case PostgreSQLParserParser.TEMPORARY:
			case PostgreSQLParserParser.TIES:
			case PostgreSQLParserParser.TIME:
			case PostgreSQLParserParser.TIMESTAMP:
			case PostgreSQLParserParser.TIMEZONE_HOUR:
			case PostgreSQLParserParser.TIMEZONE_MINUTE:
			case PostgreSQLParserParser.TOP_LEVEL_COUNT:
			case PostgreSQLParserParser.TRANSACTION:
			case PostgreSQLParserParser.TRANSACTION_ACTIVE:
			case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
			case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
			case PostgreSQLParserParser.TRANSFORM:
			case PostgreSQLParserParser.TRANSFORMS:
			case PostgreSQLParserParser.TRANSLATE:
			case PostgreSQLParserParser.TRANSLATION:
			case PostgreSQLParserParser.TREAT:
			case PostgreSQLParserParser.TRIGGER:
			case PostgreSQLParserParser.TRIGGER_CATALOG:
			case PostgreSQLParserParser.TRIGGER_NAME:
			case PostgreSQLParserParser.TRIGGER_SCHEMA:
			case PostgreSQLParserParser.TRIM:
			case PostgreSQLParserParser.TRUE:
			case PostgreSQLParserParser.TRUNCATE:
			case PostgreSQLParserParser.TRUSTED:
			case PostgreSQLParserParser.TYPE:
			case PostgreSQLParserParser.UESCAPE:
			case PostgreSQLParserParser.UNBOUNDED:
			case PostgreSQLParserParser.UNCOMMITTED:
			case PostgreSQLParserParser.UNDER:
			case PostgreSQLParserParser.UNENCRYPTED:
			case PostgreSQLParserParser.UNKNOWN:
			case PostgreSQLParserParser.UNLISTEN:
			case PostgreSQLParserParser.UNNAMED:
			case PostgreSQLParserParser.UNNEST:
			case PostgreSQLParserParser.UNTIL:
			case PostgreSQLParserParser.UPDATE:
			case PostgreSQLParserParser.UPPER:
			case PostgreSQLParserParser.USAGE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
			case PostgreSQLParserParser.VACUUM:
			case PostgreSQLParserParser.VALID:
			case PostgreSQLParserParser.VALIDATOR:
			case PostgreSQLParserParser.VALUE:
			case PostgreSQLParserParser.VALUES:
			case PostgreSQLParserParser.VAR_POP:
			case PostgreSQLParserParser.VAR_SAMP:
			case PostgreSQLParserParser.VARCHAR:
			case PostgreSQLParserParser.VARYING:
			case PostgreSQLParserParser.VIEW:
			case PostgreSQLParserParser.VOLATILE:
			case PostgreSQLParserParser.WHENEVER:
			case PostgreSQLParserParser.WIDTH_BUCKET:
			case PostgreSQLParserParser.WITHIN:
			case PostgreSQLParserParser.WITHOUT:
			case PostgreSQLParserParser.WORK:
			case PostgreSQLParserParser.WRITE:
			case PostgreSQLParserParser.YEAR:
			case PostgreSQLParserParser.ZONE:
			case PostgreSQLParserParser.ABSTIME:
			case PostgreSQLParserParser.BIGSERIAL:
			case PostgreSQLParserParser.BIT_VARYING:
			case PostgreSQLParserParser.BOOL:
			case PostgreSQLParserParser.BOX:
			case PostgreSQLParserParser.BYTEA:
			case PostgreSQLParserParser.CHARACTER_VARYING:
			case PostgreSQLParserParser.CIDR:
			case PostgreSQLParserParser.CIRCLE:
			case PostgreSQLParserParser.FLOAT4:
			case PostgreSQLParserParser.FLOAT8:
			case PostgreSQLParserParser.INET:
			case PostgreSQLParserParser.INT2:
			case PostgreSQLParserParser.INT4:
			case PostgreSQLParserParser.INT8:
			case PostgreSQLParserParser.JSON:
			case PostgreSQLParserParser.JSONB:
			case PostgreSQLParserParser.LINE:
			case PostgreSQLParserParser.LSEG:
			case PostgreSQLParserParser.MACADDR:
			case PostgreSQLParserParser.MACADDR8:
			case PostgreSQLParserParser.MONEY:
			case PostgreSQLParserParser.PG_LSN:
			case PostgreSQLParserParser.POINT:
			case PostgreSQLParserParser.POLYGON:
			case PostgreSQLParserParser.RELTIME:
			case PostgreSQLParserParser.SERIAL:
			case PostgreSQLParserParser.SERIAL2:
			case PostgreSQLParserParser.SERIAL4:
			case PostgreSQLParserParser.SERIAL8:
			case PostgreSQLParserParser.SMALLSERIAL:
			case PostgreSQLParserParser.TEXT:
			case PostgreSQLParserParser.TIMESTAMPTZ:
			case PostgreSQLParserParser.TIMETZ:
			case PostgreSQLParserParser.TSQUERY:
			case PostgreSQLParserParser.TSVECTOR:
			case PostgreSQLParserParser.TXID_SNAPSHOT:
			case PostgreSQLParserParser.UUID:
			case PostgreSQLParserParser.VARBIT:
			case PostgreSQLParserParser.XML:
			case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
			case PostgreSQLParserParser.IDENTIFIER:
			case PostgreSQLParserParser.IDENTIFIER_UNICODE:
				{
				this.state = 3771;
				this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.CURRENT_USER:
				{
				this.state = 3772;
				this.match(PostgreSQLParserParser.CURRENT_USER);
				}
				break;
			case PostgreSQLParserParser.SESSION_USER:
				{
				this.state = 3773;
				this.match(PostgreSQLParserParser.SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public refresh_materialized_view_stmt(): Refresh_materialized_view_stmtContext {
		let _localctx: Refresh_materialized_view_stmtContext = new Refresh_materialized_view_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, PostgreSQLParserParser.RULE_refresh_materialized_view_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3776;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reindex_stmt(): Reindex_stmtContext {
		let _localctx: Reindex_stmtContext = new Reindex_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, PostgreSQLParserParser.RULE_reindex_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3778;
			this.match(PostgreSQLParserParser.REINDEX);
			this.state = 3782;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OPEN_PAREN) {
				{
				this.state = 3779;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 3780;
				this.match(PostgreSQLParserParser.VERBOSE);
				this.state = 3781;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			this.state = 3784;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParserParser.DATABASE || _la === PostgreSQLParserParser.INDEX || _la === PostgreSQLParserParser.SCHEMA || _la === PostgreSQLParserParser.SYSTEM || _la === PostgreSQLParserParser.TABLE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3785;
			_localctx._name = this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public release_savepoint_stmt(): Release_savepoint_stmtContext {
		let _localctx: Release_savepoint_stmtContext = new Release_savepoint_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, PostgreSQLParserParser.RULE_release_savepoint_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3787;
			this.match(PostgreSQLParserParser.RELEASE);
			this.state = 3789;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 399, this._ctx) ) {
			case 1:
				{
				this.state = 3788;
				this.match(PostgreSQLParserParser.SAVEPOINT);
				}
				break;
			}
			this.state = 3791;
			_localctx._savepoint_name = this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reset_stmt(): Reset_stmtContext {
		let _localctx: Reset_stmtContext = new Reset_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, PostgreSQLParserParser.RULE_reset_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3793;
			this.match(PostgreSQLParserParser.RESET);
			this.state = 3796;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.WHITESPACE:
			case PostgreSQLParserParser.A_:
			case PostgreSQLParserParser.ABORT:
			case PostgreSQLParserParser.ABS:
			case PostgreSQLParserParser.ABSOLUTE:
			case PostgreSQLParserParser.ACCESS:
			case PostgreSQLParserParser.ACTION:
			case PostgreSQLParserParser.ADA:
			case PostgreSQLParserParser.ADD:
			case PostgreSQLParserParser.ADMIN:
			case PostgreSQLParserParser.AFTER:
			case PostgreSQLParserParser.AGGREGATE:
			case PostgreSQLParserParser.ALLOCATE:
			case PostgreSQLParserParser.ALSO:
			case PostgreSQLParserParser.ALTER:
			case PostgreSQLParserParser.ALWAYS:
			case PostgreSQLParserParser.ANY:
			case PostgreSQLParserParser.ARE:
			case PostgreSQLParserParser.ASENSITIVE:
			case PostgreSQLParserParser.ASSERTION:
			case PostgreSQLParserParser.ASSIGNMENT:
			case PostgreSQLParserParser.AT:
			case PostgreSQLParserParser.ATOMIC:
			case PostgreSQLParserParser.ATTRIBUTE:
			case PostgreSQLParserParser.ATTRIBUTES:
			case PostgreSQLParserParser.AVG:
			case PostgreSQLParserParser.BACKWARD:
			case PostgreSQLParserParser.BEFORE:
			case PostgreSQLParserParser.BEGIN:
			case PostgreSQLParserParser.BERNOULLI:
			case PostgreSQLParserParser.BETWEEN:
			case PostgreSQLParserParser.BIGINT:
			case PostgreSQLParserParser.BIT:
			case PostgreSQLParserParser.BIT_LENGTH:
			case PostgreSQLParserParser.BLOB:
			case PostgreSQLParserParser.BOOLEAN:
			case PostgreSQLParserParser.BREADTH:
			case PostgreSQLParserParser.BY:
			case PostgreSQLParserParser.C_:
			case PostgreSQLParserParser.CACHE:
			case PostgreSQLParserParser.CALL:
			case PostgreSQLParserParser.CALLED:
			case PostgreSQLParserParser.CARDINALITY:
			case PostgreSQLParserParser.CASCADE:
			case PostgreSQLParserParser.CASCADED:
			case PostgreSQLParserParser.CATALOG:
			case PostgreSQLParserParser.CATALOG_NAME:
			case PostgreSQLParserParser.CEIL:
			case PostgreSQLParserParser.CEILING:
			case PostgreSQLParserParser.CHAIN:
			case PostgreSQLParserParser.CHAR:
			case PostgreSQLParserParser.CHAR_LENGTH:
			case PostgreSQLParserParser.CHARACTER:
			case PostgreSQLParserParser.CHARACTER_LENGTH:
			case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
			case PostgreSQLParserParser.CHARACTER_SET_NAME:
			case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
			case PostgreSQLParserParser.CHARACTERISTICS:
			case PostgreSQLParserParser.CHARACTERS:
			case PostgreSQLParserParser.CHECKPOINT:
			case PostgreSQLParserParser.CLASS:
			case PostgreSQLParserParser.CLASS_ORIGIN:
			case PostgreSQLParserParser.CLOB:
			case PostgreSQLParserParser.CLOSE:
			case PostgreSQLParserParser.CLUSTER:
			case PostgreSQLParserParser.COALESCE:
			case PostgreSQLParserParser.COBOL:
			case PostgreSQLParserParser.COLLATION_CATALOG:
			case PostgreSQLParserParser.COLLATION_NAME:
			case PostgreSQLParserParser.COLLATION_SCHEMA:
			case PostgreSQLParserParser.COLLECT:
			case PostgreSQLParserParser.COLUMN_NAME:
			case PostgreSQLParserParser.COMMAND_FUNCTION:
			case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
			case PostgreSQLParserParser.COMMENT:
			case PostgreSQLParserParser.COMMIT:
			case PostgreSQLParserParser.COMMITTED:
			case PostgreSQLParserParser.CONDITION:
			case PostgreSQLParserParser.CONDITION_NUMBER:
			case PostgreSQLParserParser.CONNECT:
			case PostgreSQLParserParser.CONNECTION:
			case PostgreSQLParserParser.CONNECTION_NAME:
			case PostgreSQLParserParser.CONSTRAINT_CATALOG:
			case PostgreSQLParserParser.CONSTRAINT_NAME:
			case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
			case PostgreSQLParserParser.CONSTRAINTS:
			case PostgreSQLParserParser.CONSTRUCTOR:
			case PostgreSQLParserParser.CONTAINS:
			case PostgreSQLParserParser.CONTINUE:
			case PostgreSQLParserParser.CONVERSION:
			case PostgreSQLParserParser.CONVERT:
			case PostgreSQLParserParser.COPY:
			case PostgreSQLParserParser.CORR:
			case PostgreSQLParserParser.CORRESPONDING:
			case PostgreSQLParserParser.COUNT:
			case PostgreSQLParserParser.COVAR_POP:
			case PostgreSQLParserParser.COVAR_SAMP:
			case PostgreSQLParserParser.CSV:
			case PostgreSQLParserParser.CUBE:
			case PostgreSQLParserParser.CUME_DIST:
			case PostgreSQLParserParser.CURRENT:
			case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
			case PostgreSQLParserParser.CURRENT_PATH:
			case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case PostgreSQLParserParser.CURSOR:
			case PostgreSQLParserParser.CURSOR_NAME:
			case PostgreSQLParserParser.CYCLE:
			case PostgreSQLParserParser.DATA:
			case PostgreSQLParserParser.DATABASE:
			case PostgreSQLParserParser.DATE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
			case PostgreSQLParserParser.DAY:
			case PostgreSQLParserParser.DEALLOCATE:
			case PostgreSQLParserParser.DEC:
			case PostgreSQLParserParser.DECIMAL:
			case PostgreSQLParserParser.DECLARE:
			case PostgreSQLParserParser.DEFAULTS:
			case PostgreSQLParserParser.DEFERRED:
			case PostgreSQLParserParser.DEFINED:
			case PostgreSQLParserParser.DEFINER:
			case PostgreSQLParserParser.DEGREE:
			case PostgreSQLParserParser.DELETE:
			case PostgreSQLParserParser.DELIMITER:
			case PostgreSQLParserParser.DELIMITERS:
			case PostgreSQLParserParser.DENSE_RANK:
			case PostgreSQLParserParser.DEPTH:
			case PostgreSQLParserParser.DEREF:
			case PostgreSQLParserParser.DERIVED:
			case PostgreSQLParserParser.DESCRIBE:
			case PostgreSQLParserParser.DESCRIPTOR:
			case PostgreSQLParserParser.DETERMINISTIC:
			case PostgreSQLParserParser.DIAGNOSTICS:
			case PostgreSQLParserParser.DICTIONARY:
			case PostgreSQLParserParser.DISCONNECT:
			case PostgreSQLParserParser.DISPATCH:
			case PostgreSQLParserParser.DOMAIN:
			case PostgreSQLParserParser.DOUBLE:
			case PostgreSQLParserParser.DYNAMIC:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
			case PostgreSQLParserParser.EACH:
			case PostgreSQLParserParser.ELEMENT:
			case PostgreSQLParserParser.ENCODING:
			case PostgreSQLParserParser.ENCRYPTED:
			case PostgreSQLParserParser.END:
			case PostgreSQLParserParser.EQUALS:
			case PostgreSQLParserParser.ESCAPE:
			case PostgreSQLParserParser.EVERY:
			case PostgreSQLParserParser.EXCEPTION:
			case PostgreSQLParserParser.EXCLUDE:
			case PostgreSQLParserParser.EXCLUDING:
			case PostgreSQLParserParser.EXCLUSIVE:
			case PostgreSQLParserParser.EXEC:
			case PostgreSQLParserParser.EXECUTE:
			case PostgreSQLParserParser.EXISTS:
			case PostgreSQLParserParser.EXP:
			case PostgreSQLParserParser.EXPLAIN:
			case PostgreSQLParserParser.EXTENSION:
			case PostgreSQLParserParser.EXTERNAL:
			case PostgreSQLParserParser.EXTRACT:
			case PostgreSQLParserParser.FILTER:
			case PostgreSQLParserParser.FINAL:
			case PostgreSQLParserParser.FIRST:
			case PostgreSQLParserParser.FLOAT:
			case PostgreSQLParserParser.FLOOR:
			case PostgreSQLParserParser.FOLLOWING:
			case PostgreSQLParserParser.FORCE:
			case PostgreSQLParserParser.FORMAT:
			case PostgreSQLParserParser.FORTRAN:
			case PostgreSQLParserParser.FORWARD:
			case PostgreSQLParserParser.FOUND:
			case PostgreSQLParserParser.FREE:
			case PostgreSQLParserParser.FUNCTION:
			case PostgreSQLParserParser.FUSION:
			case PostgreSQLParserParser.G_:
			case PostgreSQLParserParser.GENERAL:
			case PostgreSQLParserParser.GENERATED:
			case PostgreSQLParserParser.GET:
			case PostgreSQLParserParser.GLOBAL:
			case PostgreSQLParserParser.GO:
			case PostgreSQLParserParser.GOTO:
			case PostgreSQLParserParser.GRANTED:
			case PostgreSQLParserParser.GREATEST:
			case PostgreSQLParserParser.GROUPING:
			case PostgreSQLParserParser.HANDLER:
			case PostgreSQLParserParser.HIERARCHY:
			case PostgreSQLParserParser.HOLD:
			case PostgreSQLParserParser.HOST:
			case PostgreSQLParserParser.HOUR:
			case PostgreSQLParserParser.IDENTITY:
			case PostgreSQLParserParser.IGNORE:
			case PostgreSQLParserParser.IMMEDIATE:
			case PostgreSQLParserParser.IMMUTABLE:
			case PostgreSQLParserParser.IMPLEMENTATION:
			case PostgreSQLParserParser.IMPLICIT:
			case PostgreSQLParserParser.INCLUDING:
			case PostgreSQLParserParser.INCREMENT:
			case PostgreSQLParserParser.INDEX:
			case PostgreSQLParserParser.INDICATOR:
			case PostgreSQLParserParser.INHERITS:
			case PostgreSQLParserParser.INOUT:
			case PostgreSQLParserParser.INPUT:
			case PostgreSQLParserParser.INSENSITIVE:
			case PostgreSQLParserParser.INSERT:
			case PostgreSQLParserParser.INSTANCE:
			case PostgreSQLParserParser.INSTANTIABLE:
			case PostgreSQLParserParser.INSTEAD:
			case PostgreSQLParserParser.INT:
			case PostgreSQLParserParser.INTEGER:
			case PostgreSQLParserParser.INTERSECTION:
			case PostgreSQLParserParser.INTERVAL:
			case PostgreSQLParserParser.INVOKER:
			case PostgreSQLParserParser.ISOLATION:
			case PostgreSQLParserParser.K_:
			case PostgreSQLParserParser.KEY:
			case PostgreSQLParserParser.KEY_MEMBER:
			case PostgreSQLParserParser.KEY_TYPE:
			case PostgreSQLParserParser.LANGUAGE:
			case PostgreSQLParserParser.LARGE:
			case PostgreSQLParserParser.LAST:
			case PostgreSQLParserParser.LEAST:
			case PostgreSQLParserParser.LEFT:
			case PostgreSQLParserParser.LENGTH:
			case PostgreSQLParserParser.LEVEL:
			case PostgreSQLParserParser.LISTEN:
			case PostgreSQLParserParser.LN:
			case PostgreSQLParserParser.LOAD:
			case PostgreSQLParserParser.LOCAL:
			case PostgreSQLParserParser.LOCATION:
			case PostgreSQLParserParser.LOCATOR:
			case PostgreSQLParserParser.LOCK:
			case PostgreSQLParserParser.LOCKED:
			case PostgreSQLParserParser.LOWER:
			case PostgreSQLParserParser.M_:
			case PostgreSQLParserParser.MAP:
			case PostgreSQLParserParser.MATCH:
			case PostgreSQLParserParser.MATCHED:
			case PostgreSQLParserParser.MAX:
			case PostgreSQLParserParser.MAXVALUE:
			case PostgreSQLParserParser.MEMBER:
			case PostgreSQLParserParser.MERGE:
			case PostgreSQLParserParser.MESSAGE_LENGTH:
			case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
			case PostgreSQLParserParser.MESSAGE_TEXT:
			case PostgreSQLParserParser.METHOD:
			case PostgreSQLParserParser.MIN:
			case PostgreSQLParserParser.MINUTE:
			case PostgreSQLParserParser.MINVALUE:
			case PostgreSQLParserParser.MOD:
			case PostgreSQLParserParser.MODE:
			case PostgreSQLParserParser.MODIFIES:
			case PostgreSQLParserParser.MODULE:
			case PostgreSQLParserParser.MONTH:
			case PostgreSQLParserParser.MORE_:
			case PostgreSQLParserParser.MOVE:
			case PostgreSQLParserParser.MULTISET:
			case PostgreSQLParserParser.MUMPS:
			case PostgreSQLParserParser.NAME:
			case PostgreSQLParserParser.NAMES:
			case PostgreSQLParserParser.NATIONAL:
			case PostgreSQLParserParser.NCHAR:
			case PostgreSQLParserParser.NCLOB:
			case PostgreSQLParserParser.NESTING:
			case PostgreSQLParserParser.NEW:
			case PostgreSQLParserParser.NEXT:
			case PostgreSQLParserParser.NO:
			case PostgreSQLParserParser.NONE:
			case PostgreSQLParserParser.NORMALIZE:
			case PostgreSQLParserParser.NORMALIZED:
			case PostgreSQLParserParser.NOTHING:
			case PostgreSQLParserParser.NOTIFY:
			case PostgreSQLParserParser.NOWAIT:
			case PostgreSQLParserParser.NULLABLE:
			case PostgreSQLParserParser.NULLIF:
			case PostgreSQLParserParser.NULLS:
			case PostgreSQLParserParser.NUMBER:
			case PostgreSQLParserParser.NUMERIC:
			case PostgreSQLParserParser.OBJECT:
			case PostgreSQLParserParser.OCTET_LENGTH:
			case PostgreSQLParserParser.OCTETS:
			case PostgreSQLParserParser.OF:
			case PostgreSQLParserParser.OFF:
			case PostgreSQLParserParser.OIDS:
			case PostgreSQLParserParser.OLD:
			case PostgreSQLParserParser.OPEN:
			case PostgreSQLParserParser.OPERATOR:
			case PostgreSQLParserParser.OPTION:
			case PostgreSQLParserParser.OPTIONS:
			case PostgreSQLParserParser.ORDERING:
			case PostgreSQLParserParser.ORDINALITY:
			case PostgreSQLParserParser.OTHERS:
			case PostgreSQLParserParser.OUT:
			case PostgreSQLParserParser.OUTPUT:
			case PostgreSQLParserParser.OVER:
			case PostgreSQLParserParser.OVERLAY:
			case PostgreSQLParserParser.OVERRIDING:
			case PostgreSQLParserParser.OWNER:
			case PostgreSQLParserParser.PAD:
			case PostgreSQLParserParser.PARAMETER:
			case PostgreSQLParserParser.PARAMETER_MODE:
			case PostgreSQLParserParser.PARAMETER_NAME:
			case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
			case PostgreSQLParserParser.PARTIAL:
			case PostgreSQLParserParser.PARTITION:
			case PostgreSQLParserParser.PASCAL:
			case PostgreSQLParserParser.PASSWORD:
			case PostgreSQLParserParser.PATH:
			case PostgreSQLParserParser.PERCENT_RANK:
			case PostgreSQLParserParser.PERCENTILE_CONT:
			case PostgreSQLParserParser.PERCENTILE_DISC:
			case PostgreSQLParserParser.PLAIN:
			case PostgreSQLParserParser.PLI:
			case PostgreSQLParserParser.POSITION:
			case PostgreSQLParserParser.POWER:
			case PostgreSQLParserParser.PRECEDING:
			case PostgreSQLParserParser.PRECISION:
			case PostgreSQLParserParser.PREPARE:
			case PostgreSQLParserParser.PRESERVE:
			case PostgreSQLParserParser.PRIOR:
			case PostgreSQLParserParser.PRIVILEGES:
			case PostgreSQLParserParser.PROCEDURAL:
			case PostgreSQLParserParser.PROCEDURE:
			case PostgreSQLParserParser.PUBLIC:
			case PostgreSQLParserParser.QUOTE:
			case PostgreSQLParserParser.RANGE:
			case PostgreSQLParserParser.RANK:
			case PostgreSQLParserParser.READ:
			case PostgreSQLParserParser.READS:
			case PostgreSQLParserParser.REAL:
			case PostgreSQLParserParser.RECHECK:
			case PostgreSQLParserParser.RECURSIVE:
			case PostgreSQLParserParser.REF:
			case PostgreSQLParserParser.REFERENCING:
			case PostgreSQLParserParser.REFRESH:
			case PostgreSQLParserParser.REGR_AVGX:
			case PostgreSQLParserParser.REGR_AVGY:
			case PostgreSQLParserParser.REGR_COUNT:
			case PostgreSQLParserParser.REGR_INTERCEPT:
			case PostgreSQLParserParser.REGR_SLOPE:
			case PostgreSQLParserParser.REGR_SXX:
			case PostgreSQLParserParser.REGR_SXY:
			case PostgreSQLParserParser.REGR_SYY:
			case PostgreSQLParserParser.REINDEX:
			case PostgreSQLParserParser.RELATIVE:
			case PostgreSQLParserParser.RELEASE:
			case PostgreSQLParserParser.RENAME:
			case PostgreSQLParserParser.REPEATABLE:
			case PostgreSQLParserParser.REPLACE:
			case PostgreSQLParserParser.RESET:
			case PostgreSQLParserParser.RESTART:
			case PostgreSQLParserParser.RESTRICT:
			case PostgreSQLParserParser.RESULT:
			case PostgreSQLParserParser.RETURN:
			case PostgreSQLParserParser.RETURNED_CARDINALITY:
			case PostgreSQLParserParser.RETURNED_LENGTH:
			case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
			case PostgreSQLParserParser.RETURNED_SQLSTATE:
			case PostgreSQLParserParser.RETURNS:
			case PostgreSQLParserParser.REVOKE:
			case PostgreSQLParserParser.RIGHT:
			case PostgreSQLParserParser.ROLE:
			case PostgreSQLParserParser.ROLLBACK:
			case PostgreSQLParserParser.ROLLUP:
			case PostgreSQLParserParser.ROUTINE:
			case PostgreSQLParserParser.ROUTINE_CATALOG:
			case PostgreSQLParserParser.ROUTINE_NAME:
			case PostgreSQLParserParser.ROUTINE_SCHEMA:
			case PostgreSQLParserParser.ROW:
			case PostgreSQLParserParser.ROW_COUNT:
			case PostgreSQLParserParser.ROW_NUMBER:
			case PostgreSQLParserParser.ROWS:
			case PostgreSQLParserParser.RULE:
			case PostgreSQLParserParser.SAVEPOINT:
			case PostgreSQLParserParser.SCALE:
			case PostgreSQLParserParser.SCHEMA:
			case PostgreSQLParserParser.SCHEMA_NAME:
			case PostgreSQLParserParser.SCOPE:
			case PostgreSQLParserParser.SCOPE_CATALOG:
			case PostgreSQLParserParser.SCOPE_NAME:
			case PostgreSQLParserParser.SCOPE_SCHEMA:
			case PostgreSQLParserParser.SCROLL:
			case PostgreSQLParserParser.SEARCH:
			case PostgreSQLParserParser.SECOND:
			case PostgreSQLParserParser.SECTION:
			case PostgreSQLParserParser.SECURITY:
			case PostgreSQLParserParser.SELF:
			case PostgreSQLParserParser.SENSITIVE:
			case PostgreSQLParserParser.SEQUENCE:
			case PostgreSQLParserParser.SEQUENCES:
			case PostgreSQLParserParser.SERIALIZABLE:
			case PostgreSQLParserParser.SERVER_NAME:
			case PostgreSQLParserParser.SESSION:
			case PostgreSQLParserParser.SET:
			case PostgreSQLParserParser.SETOF:
			case PostgreSQLParserParser.SETS:
			case PostgreSQLParserParser.SHARE:
			case PostgreSQLParserParser.SHOW:
			case PostgreSQLParserParser.SIMPLE:
			case PostgreSQLParserParser.SIZE:
			case PostgreSQLParserParser.SMALLINT:
			case PostgreSQLParserParser.SOME:
			case PostgreSQLParserParser.SOURCE:
			case PostgreSQLParserParser.SPACE:
			case PostgreSQLParserParser.SPECIFIC:
			case PostgreSQLParserParser.SPECIFIC_NAME:
			case PostgreSQLParserParser.SPECIFICTYPE:
			case PostgreSQLParserParser.SQL:
			case PostgreSQLParserParser.SQLCODE:
			case PostgreSQLParserParser.SQLERROR:
			case PostgreSQLParserParser.SQLEXCEPTION:
			case PostgreSQLParserParser.SQLSTATE:
			case PostgreSQLParserParser.SQLWARNING:
			case PostgreSQLParserParser.SQRT:
			case PostgreSQLParserParser.STABLE:
			case PostgreSQLParserParser.START:
			case PostgreSQLParserParser.STATE:
			case PostgreSQLParserParser.STATEMENT:
			case PostgreSQLParserParser.STATIC:
			case PostgreSQLParserParser.STATISTICS:
			case PostgreSQLParserParser.STDDEV_POP:
			case PostgreSQLParserParser.STDDEV_SAMP:
			case PostgreSQLParserParser.STDIN:
			case PostgreSQLParserParser.STDOUT:
			case PostgreSQLParserParser.STORAGE:
			case PostgreSQLParserParser.STRICT:
			case PostgreSQLParserParser.STRUCTURE:
			case PostgreSQLParserParser.STYLE:
			case PostgreSQLParserParser.SUBCLASS_ORIGIN:
			case PostgreSQLParserParser.SUBMULTISET:
			case PostgreSQLParserParser.SUBSTRING:
			case PostgreSQLParserParser.SUM:
			case PostgreSQLParserParser.SYSID:
			case PostgreSQLParserParser.SYSTEM:
			case PostgreSQLParserParser.SYSTEM_USER:
			case PostgreSQLParserParser.TABLE_NAME:
			case PostgreSQLParserParser.TABLESPACE:
			case PostgreSQLParserParser.TEMP:
			case PostgreSQLParserParser.TEMPLATE:
			case PostgreSQLParserParser.TEMPORARY:
			case PostgreSQLParserParser.TIES:
			case PostgreSQLParserParser.TIME:
			case PostgreSQLParserParser.TIMESTAMP:
			case PostgreSQLParserParser.TIMEZONE_HOUR:
			case PostgreSQLParserParser.TIMEZONE_MINUTE:
			case PostgreSQLParserParser.TOP_LEVEL_COUNT:
			case PostgreSQLParserParser.TRANSACTION:
			case PostgreSQLParserParser.TRANSACTION_ACTIVE:
			case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
			case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
			case PostgreSQLParserParser.TRANSFORM:
			case PostgreSQLParserParser.TRANSFORMS:
			case PostgreSQLParserParser.TRANSLATE:
			case PostgreSQLParserParser.TRANSLATION:
			case PostgreSQLParserParser.TREAT:
			case PostgreSQLParserParser.TRIGGER:
			case PostgreSQLParserParser.TRIGGER_CATALOG:
			case PostgreSQLParserParser.TRIGGER_NAME:
			case PostgreSQLParserParser.TRIGGER_SCHEMA:
			case PostgreSQLParserParser.TRIM:
			case PostgreSQLParserParser.TRUE:
			case PostgreSQLParserParser.TRUNCATE:
			case PostgreSQLParserParser.TRUSTED:
			case PostgreSQLParserParser.TYPE:
			case PostgreSQLParserParser.UESCAPE:
			case PostgreSQLParserParser.UNBOUNDED:
			case PostgreSQLParserParser.UNCOMMITTED:
			case PostgreSQLParserParser.UNDER:
			case PostgreSQLParserParser.UNENCRYPTED:
			case PostgreSQLParserParser.UNKNOWN:
			case PostgreSQLParserParser.UNLISTEN:
			case PostgreSQLParserParser.UNNAMED:
			case PostgreSQLParserParser.UNNEST:
			case PostgreSQLParserParser.UNTIL:
			case PostgreSQLParserParser.UPDATE:
			case PostgreSQLParserParser.UPPER:
			case PostgreSQLParserParser.USAGE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
			case PostgreSQLParserParser.VACUUM:
			case PostgreSQLParserParser.VALID:
			case PostgreSQLParserParser.VALIDATOR:
			case PostgreSQLParserParser.VALUE:
			case PostgreSQLParserParser.VALUES:
			case PostgreSQLParserParser.VAR_POP:
			case PostgreSQLParserParser.VAR_SAMP:
			case PostgreSQLParserParser.VARCHAR:
			case PostgreSQLParserParser.VARYING:
			case PostgreSQLParserParser.VIEW:
			case PostgreSQLParserParser.VOLATILE:
			case PostgreSQLParserParser.WHENEVER:
			case PostgreSQLParserParser.WIDTH_BUCKET:
			case PostgreSQLParserParser.WITHIN:
			case PostgreSQLParserParser.WITHOUT:
			case PostgreSQLParserParser.WORK:
			case PostgreSQLParserParser.WRITE:
			case PostgreSQLParserParser.YEAR:
			case PostgreSQLParserParser.ZONE:
			case PostgreSQLParserParser.ABSTIME:
			case PostgreSQLParserParser.BIGSERIAL:
			case PostgreSQLParserParser.BIT_VARYING:
			case PostgreSQLParserParser.BOOL:
			case PostgreSQLParserParser.BOX:
			case PostgreSQLParserParser.BYTEA:
			case PostgreSQLParserParser.CHARACTER_VARYING:
			case PostgreSQLParserParser.CIDR:
			case PostgreSQLParserParser.CIRCLE:
			case PostgreSQLParserParser.FLOAT4:
			case PostgreSQLParserParser.FLOAT8:
			case PostgreSQLParserParser.INET:
			case PostgreSQLParserParser.INT2:
			case PostgreSQLParserParser.INT4:
			case PostgreSQLParserParser.INT8:
			case PostgreSQLParserParser.JSON:
			case PostgreSQLParserParser.JSONB:
			case PostgreSQLParserParser.LINE:
			case PostgreSQLParserParser.LSEG:
			case PostgreSQLParserParser.MACADDR:
			case PostgreSQLParserParser.MACADDR8:
			case PostgreSQLParserParser.MONEY:
			case PostgreSQLParserParser.PG_LSN:
			case PostgreSQLParserParser.POINT:
			case PostgreSQLParserParser.POLYGON:
			case PostgreSQLParserParser.RELTIME:
			case PostgreSQLParserParser.SERIAL:
			case PostgreSQLParserParser.SERIAL2:
			case PostgreSQLParserParser.SERIAL4:
			case PostgreSQLParserParser.SERIAL8:
			case PostgreSQLParserParser.SMALLSERIAL:
			case PostgreSQLParserParser.TEXT:
			case PostgreSQLParserParser.TIMESTAMPTZ:
			case PostgreSQLParserParser.TIMETZ:
			case PostgreSQLParserParser.TSQUERY:
			case PostgreSQLParserParser.TSVECTOR:
			case PostgreSQLParserParser.TXID_SNAPSHOT:
			case PostgreSQLParserParser.UUID:
			case PostgreSQLParserParser.VARBIT:
			case PostgreSQLParserParser.XML:
			case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
			case PostgreSQLParserParser.IDENTIFIER:
			case PostgreSQLParserParser.IDENTIFIER_UNICODE:
				{
				this.state = 3794;
				_localctx._configuration_parameter = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.ALL:
				{
				this.state = 3795;
				this.match(PostgreSQLParserParser.ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revoke_stmt(): Revoke_stmtContext {
		let _localctx: Revoke_stmtContext = new Revoke_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, PostgreSQLParserParser.RULE_revoke_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3798;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollback_stmt(): Rollback_stmtContext {
		let _localctx: Rollback_stmtContext = new Rollback_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, PostgreSQLParserParser.RULE_rollback_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3800;
			this.match(PostgreSQLParserParser.ROLLBACK);
			this.state = 3802;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.TRANSACTION || _la === PostgreSQLParserParser.WORK) {
				{
				this.state = 3801;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.TRANSACTION || _la === PostgreSQLParserParser.WORK)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollback_prepared_stmt(): Rollback_prepared_stmtContext {
		let _localctx: Rollback_prepared_stmtContext = new Rollback_prepared_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, PostgreSQLParserParser.RULE_rollback_prepared_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3804;
			this.match(PostgreSQLParserParser.ROLLBACK);
			this.state = 3805;
			this.match(PostgreSQLParserParser.PREPARED);
			this.state = 3806;
			_localctx._transaction_id = this.match(PostgreSQLParserParser.INTEGER_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollback_to_savepoint_stmt(): Rollback_to_savepoint_stmtContext {
		let _localctx: Rollback_to_savepoint_stmtContext = new Rollback_to_savepoint_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, PostgreSQLParserParser.RULE_rollback_to_savepoint_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3808;
			this.match(PostgreSQLParserParser.ROLLBACK);
			this.state = 3810;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.TRANSACTION || _la === PostgreSQLParserParser.WORK) {
				{
				this.state = 3809;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.TRANSACTION || _la === PostgreSQLParserParser.WORK)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 3812;
			this.match(PostgreSQLParserParser.TO);
			this.state = 3814;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 403, this._ctx) ) {
			case 1:
				{
				this.state = 3813;
				this.match(PostgreSQLParserParser.SAVEPOINT);
				}
				break;
			}
			this.state = 3816;
			_localctx._savepoint_name = this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public savepoint_stmt(): Savepoint_stmtContext {
		let _localctx: Savepoint_stmtContext = new Savepoint_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, PostgreSQLParserParser.RULE_savepoint_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3818;
			this.match(PostgreSQLParserParser.SAVEPOINT);
			this.state = 3819;
			_localctx._savepoint_name = this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public security_label_stmt(): Security_label_stmtContext {
		let _localctx: Security_label_stmtContext = new Security_label_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, PostgreSQLParserParser.RULE_security_label_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3821;
			this.match(PostgreSQLParserParser.SECURITY);
			this.state = 3822;
			this.match(PostgreSQLParserParser.LABEL);
			this.state = 3825;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.FOR) {
				{
				this.state = 3823;
				this.match(PostgreSQLParserParser.FOR);
				this.state = 3824;
				_localctx._provider = this.name_();
				}
			}

			this.state = 3827;
			this.match(PostgreSQLParserParser.ON);
			this.state = 3882;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.TABLE:
				{
				this.state = 3828;
				this.match(PostgreSQLParserParser.TABLE);
				this.state = 3829;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.COLUMN:
				{
				this.state = 3830;
				this.match(PostgreSQLParserParser.COLUMN);
				this.state = 3831;
				_localctx._table_name = this.identifier(0);
				this.state = 3832;
				this.match(PostgreSQLParserParser.DOT);
				this.state = 3833;
				_localctx._column_name_ = this.column_name();
				}
				break;
			case PostgreSQLParserParser.AGGREGATE:
				{
				this.state = 3835;
				this.match(PostgreSQLParserParser.AGGREGATE);
				this.state = 3836;
				_localctx._aggregate_name = this.identifier(0);
				this.state = 3837;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 3838;
				this.aggregate_signature();
				this.state = 3839;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParserParser.DATABASE:
				{
				this.state = 3841;
				this.match(PostgreSQLParserParser.DATABASE);
				this.state = 3842;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.DOMAIN:
				{
				this.state = 3843;
				this.match(PostgreSQLParserParser.DOMAIN);
				this.state = 3844;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.EVENT:
				{
				this.state = 3845;
				this.match(PostgreSQLParserParser.EVENT);
				this.state = 3846;
				this.match(PostgreSQLParserParser.TRIGGER);
				this.state = 3847;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.FOREIGN:
				{
				this.state = 3848;
				this.match(PostgreSQLParserParser.FOREIGN);
				this.state = 3849;
				this.match(PostgreSQLParserParser.TABLE);
				this.state = 3850;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.FUNCTION:
				{
				this.state = 3851;
				this.match(PostgreSQLParserParser.FUNCTION);
				this.state = 3852;
				_localctx._function_name = this.identifier(0);
				this.state = 3853;
				this.func_sig();
				}
				break;
			case PostgreSQLParserParser.LARGE:
				{
				this.state = 3855;
				this.match(PostgreSQLParserParser.LARGE);
				this.state = 3856;
				this.match(PostgreSQLParserParser.OBJECT);
				this.state = 3857;
				_localctx._large_object_oid = this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				}
				break;
			case PostgreSQLParserParser.MATERIALIZED:
				{
				this.state = 3858;
				this.match(PostgreSQLParserParser.MATERIALIZED);
				this.state = 3859;
				this.match(PostgreSQLParserParser.VIEW);
				this.state = 3860;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.LANGUAGE:
			case PostgreSQLParserParser.PROCEDURAL:
				{
				this.state = 3862;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.PROCEDURAL) {
					{
					this.state = 3861;
					this.match(PostgreSQLParserParser.PROCEDURAL);
					}
				}

				this.state = 3864;
				this.match(PostgreSQLParserParser.LANGUAGE);
				this.state = 3865;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.PUBLICATION:
				{
				this.state = 3866;
				this.match(PostgreSQLParserParser.PUBLICATION);
				this.state = 3867;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.ROLE:
				{
				this.state = 3868;
				this.match(PostgreSQLParserParser.ROLE);
				this.state = 3869;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.SCHEMA:
				{
				this.state = 3870;
				this.match(PostgreSQLParserParser.SCHEMA);
				this.state = 3871;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.SEQUENCE:
				{
				this.state = 3872;
				this.match(PostgreSQLParserParser.SEQUENCE);
				this.state = 3873;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.SUBSCRIPTION:
				{
				this.state = 3874;
				this.match(PostgreSQLParserParser.SUBSCRIPTION);
				this.state = 3875;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.TABLESPACE:
				{
				this.state = 3876;
				this.match(PostgreSQLParserParser.TABLESPACE);
				this.state = 3877;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.TYPE:
				{
				this.state = 3878;
				this.match(PostgreSQLParserParser.TYPE);
				this.state = 3879;
				_localctx._object_name = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.VIEW:
				{
				this.state = 3880;
				this.match(PostgreSQLParserParser.VIEW);
				this.state = 3881;
				_localctx._object_name = this.identifier(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3884;
			this.match(PostgreSQLParserParser.IS);
			this.state = 3885;
			_localctx._label = this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_stmt(): Select_stmtContext {
		let _localctx: Select_stmtContext = new Select_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, PostgreSQLParserParser.RULE_select_stmt);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3888;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 3887;
				this.with_clause();
				}
			}

			this.state = 3916;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.SELECT:
				{
				{
				this.state = 3890;
				this.match(PostgreSQLParserParser.SELECT);
				this.state = 3891;
				this.selector_clause();
				this.state = 3893;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 408, this._ctx) ) {
				case 1:
					{
					this.state = 3892;
					this.from_clause();
					}
					break;
				}
				}
				}
				break;
			case PostgreSQLParserParser.TABLE:
				{
				{
				this.state = 3895;
				this.match(PostgreSQLParserParser.TABLE);
				this.state = 3897;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ONLY) {
					{
					this.state = 3896;
					this.match(PostgreSQLParserParser.ONLY);
					}
				}

				this.state = 3899;
				this.table_name_();
				this.state = 3901;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 410, this._ctx) ) {
				case 1:
					{
					this.state = 3900;
					this.match(PostgreSQLParserParser.STAR);
					}
					break;
				}
				}
				}
				break;
			case PostgreSQLParserParser.OPEN_PAREN:
				{
				{
				this.state = 3904;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3903;
						this.match(PostgreSQLParserParser.OPEN_PAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3906;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 411, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 3908;
				this.select_stmt();
				this.state = 3910;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3909;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					}
					this.state = 3912;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 3914;
				this.combine_clause();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3919;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 414, this._ctx) ) {
			case 1:
				{
				this.state = 3918;
				this.where_clause();
				}
				break;
			}
			this.state = 3922;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 415, this._ctx) ) {
			case 1:
				{
				this.state = 3921;
				this.group_by_clause();
				}
				break;
			}
			this.state = 3925;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 416, this._ctx) ) {
			case 1:
				{
				this.state = 3924;
				this.having_clause();
				}
				break;
			}
			this.state = 3928;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 417, this._ctx) ) {
			case 1:
				{
				this.state = 3927;
				this.window_clause();
				}
				break;
			}
			this.state = 3931;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 418, this._ctx) ) {
			case 1:
				{
				this.state = 3930;
				this.combine_clause();
				}
				break;
			}
			this.state = 3934;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 419, this._ctx) ) {
			case 1:
				{
				this.state = 3933;
				this.order_by_clause();
				}
				break;
			}
			this.state = 3937;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 420, this._ctx) ) {
			case 1:
				{
				this.state = 3936;
				this.limit_clause();
				}
				break;
			}
			this.state = 3940;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 421, this._ctx) ) {
			case 1:
				{
				this.state = 3939;
				this.offset_clause();
				}
				break;
			}
			this.state = 3943;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 422, this._ctx) ) {
			case 1:
				{
				this.state = 3942;
				this.fetch_clause();
				}
				break;
			}
			this.state = 3946;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 423, this._ctx) ) {
			case 1:
				{
				this.state = 3945;
				this.for_clause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_into_stmt(): Select_into_stmtContext {
		let _localctx: Select_into_stmtContext = new Select_into_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, PostgreSQLParserParser.RULE_select_into_stmt);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3949;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 3948;
				this.with_clause();
				}
			}

			this.state = 3985;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.SELECT:
				{
				{
				this.state = 3951;
				this.match(PostgreSQLParserParser.SELECT);
				this.state = 3952;
				this.selector_clause();
				this.state = 3953;
				this.match(PostgreSQLParserParser.INTO);
				this.state = 3955;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 425, this._ctx) ) {
				case 1:
					{
					this.state = 3954;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.TEMP || _la === PostgreSQLParserParser.TEMPORARY || _la === PostgreSQLParserParser.UNLOGGED)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 3958;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.TABLE) {
					{
					this.state = 3957;
					this.match(PostgreSQLParserParser.TABLE);
					}
				}

				this.state = 3960;
				_localctx._new_table = this.table_name_();
				this.state = 3962;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.FROM) {
					{
					this.state = 3961;
					this.from_clause();
					}
				}

				}
				}
				break;
			case PostgreSQLParserParser.TABLE:
				{
				{
				this.state = 3964;
				this.match(PostgreSQLParserParser.TABLE);
				this.state = 3966;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ONLY) {
					{
					this.state = 3965;
					this.match(PostgreSQLParserParser.ONLY);
					}
				}

				this.state = 3968;
				this.table_name_();
				this.state = 3970;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.STAR) {
					{
					this.state = 3969;
					this.match(PostgreSQLParserParser.STAR);
					}
				}

				}
				}
				break;
			case PostgreSQLParserParser.OPEN_PAREN:
				{
				{
				this.state = 3973;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3972;
						this.match(PostgreSQLParserParser.OPEN_PAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3975;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 430, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 3977;
				this.select_stmt();
				this.state = 3979;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3978;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					}
					this.state = 3981;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 3983;
				this.combine_clause();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3988;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WHERE) {
				{
				this.state = 3987;
				this.where_clause();
				}
			}

			this.state = 3991;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.GROUP) {
				{
				this.state = 3990;
				this.group_by_clause();
				}
			}

			this.state = 3994;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.HAVING) {
				{
				this.state = 3993;
				this.having_clause();
				}
			}

			this.state = 3997;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WINDOW) {
				{
				this.state = 3996;
				this.window_clause();
				}
			}

			this.state = 4000;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.EXCEPT || _la === PostgreSQLParserParser.INTERSECT || _la === PostgreSQLParserParser.UNION) {
				{
				this.state = 3999;
				this.combine_clause();
				}
			}

			this.state = 4003;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.ORDER) {
				{
				this.state = 4002;
				this.order_by_clause();
				}
			}

			this.state = 4006;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.LIMIT) {
				{
				this.state = 4005;
				this.limit_clause();
				}
			}

			this.state = 4009;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OFFSET) {
				{
				this.state = 4008;
				this.offset_clause();
				}
			}

			this.state = 4012;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.FETCH) {
				{
				this.state = 4011;
				this.fetch_clause();
				}
			}

			this.state = 4015;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.FOR) {
				{
				this.state = 4014;
				this.for_clause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_clause(): With_clauseContext {
		let _localctx: With_clauseContext = new With_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, PostgreSQLParserParser.RULE_with_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4017;
			this.match(PostgreSQLParserParser.WITH);
			this.state = 4019;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 443, this._ctx) ) {
			case 1:
				{
				this.state = 4018;
				this.match(PostgreSQLParserParser.RECURSIVE);
				}
				break;
			}
			this.state = 4021;
			this.with_expr();
			this.state = 4026;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 4022;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 4023;
				this.with_expr();
				}
				}
				this.state = 4028;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_expr(): With_exprContext {
		let _localctx: With_exprContext = new With_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, PostgreSQLParserParser.RULE_with_expr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4029;
			this.table_name_();
			this.state = 4034;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OPEN_PAREN) {
				{
				this.state = 4030;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 4031;
				this.name_list();
				this.state = 4032;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			this.state = 4036;
			this.match(PostgreSQLParserParser.AS);
			this.state = 4037;
			this.match(PostgreSQLParserParser.OPEN_PAREN);
			this.state = 4043;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 446, this._ctx) ) {
			case 1:
				{
				this.state = 4038;
				this.select_stmt();
				}
				break;

			case 2:
				{
				this.state = 4039;
				this.insert_stmt();
				}
				break;

			case 3:
				{
				this.state = 4040;
				this.delete_stmt();
				}
				break;

			case 4:
				{
				this.state = 4041;
				this.update_stmt();
				}
				break;

			case 5:
				{
				this.state = 4042;
				this.values_stmt();
				}
				break;
			}
			this.state = 4045;
			this.match(PostgreSQLParserParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_stmt(): Set_stmtContext {
		let _localctx: Set_stmtContext = new Set_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, PostgreSQLParserParser.RULE_set_stmt);
		let _la: number;
		try {
			this.state = 4068;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 451, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4047;
				this.match(PostgreSQLParserParser.SET);
				this.state = 4049;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 447, this._ctx) ) {
				case 1:
					{
					this.state = 4048;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.LOCAL || _la === PostgreSQLParserParser.SESSION)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 4051;
				_localctx._configuration_parameter = this.identifier(0);
				this.state = 4052;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.TO || _la === PostgreSQLParserParser.EQUAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4055;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.WHITESPACE:
				case PostgreSQLParserParser.A_:
				case PostgreSQLParserParser.ABORT:
				case PostgreSQLParserParser.ABS:
				case PostgreSQLParserParser.ABSOLUTE:
				case PostgreSQLParserParser.ACCESS:
				case PostgreSQLParserParser.ACTION:
				case PostgreSQLParserParser.ADA:
				case PostgreSQLParserParser.ADD:
				case PostgreSQLParserParser.ADMIN:
				case PostgreSQLParserParser.AFTER:
				case PostgreSQLParserParser.AGGREGATE:
				case PostgreSQLParserParser.ALLOCATE:
				case PostgreSQLParserParser.ALSO:
				case PostgreSQLParserParser.ALTER:
				case PostgreSQLParserParser.ALWAYS:
				case PostgreSQLParserParser.ANY:
				case PostgreSQLParserParser.ARE:
				case PostgreSQLParserParser.ASENSITIVE:
				case PostgreSQLParserParser.ASSERTION:
				case PostgreSQLParserParser.ASSIGNMENT:
				case PostgreSQLParserParser.AT:
				case PostgreSQLParserParser.ATOMIC:
				case PostgreSQLParserParser.ATTRIBUTE:
				case PostgreSQLParserParser.ATTRIBUTES:
				case PostgreSQLParserParser.AVG:
				case PostgreSQLParserParser.BACKWARD:
				case PostgreSQLParserParser.BEFORE:
				case PostgreSQLParserParser.BEGIN:
				case PostgreSQLParserParser.BERNOULLI:
				case PostgreSQLParserParser.BETWEEN:
				case PostgreSQLParserParser.BIGINT:
				case PostgreSQLParserParser.BIT:
				case PostgreSQLParserParser.BIT_LENGTH:
				case PostgreSQLParserParser.BLOB:
				case PostgreSQLParserParser.BOOLEAN:
				case PostgreSQLParserParser.BREADTH:
				case PostgreSQLParserParser.BY:
				case PostgreSQLParserParser.C_:
				case PostgreSQLParserParser.CACHE:
				case PostgreSQLParserParser.CALL:
				case PostgreSQLParserParser.CALLED:
				case PostgreSQLParserParser.CARDINALITY:
				case PostgreSQLParserParser.CASCADE:
				case PostgreSQLParserParser.CASCADED:
				case PostgreSQLParserParser.CATALOG:
				case PostgreSQLParserParser.CATALOG_NAME:
				case PostgreSQLParserParser.CEIL:
				case PostgreSQLParserParser.CEILING:
				case PostgreSQLParserParser.CHAIN:
				case PostgreSQLParserParser.CHAR:
				case PostgreSQLParserParser.CHAR_LENGTH:
				case PostgreSQLParserParser.CHARACTER:
				case PostgreSQLParserParser.CHARACTER_LENGTH:
				case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
				case PostgreSQLParserParser.CHARACTER_SET_NAME:
				case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
				case PostgreSQLParserParser.CHARACTERISTICS:
				case PostgreSQLParserParser.CHARACTERS:
				case PostgreSQLParserParser.CHECKPOINT:
				case PostgreSQLParserParser.CLASS:
				case PostgreSQLParserParser.CLASS_ORIGIN:
				case PostgreSQLParserParser.CLOB:
				case PostgreSQLParserParser.CLOSE:
				case PostgreSQLParserParser.CLUSTER:
				case PostgreSQLParserParser.COALESCE:
				case PostgreSQLParserParser.COBOL:
				case PostgreSQLParserParser.COLLATION_CATALOG:
				case PostgreSQLParserParser.COLLATION_NAME:
				case PostgreSQLParserParser.COLLATION_SCHEMA:
				case PostgreSQLParserParser.COLLECT:
				case PostgreSQLParserParser.COLUMN_NAME:
				case PostgreSQLParserParser.COMMAND_FUNCTION:
				case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
				case PostgreSQLParserParser.COMMENT:
				case PostgreSQLParserParser.COMMIT:
				case PostgreSQLParserParser.COMMITTED:
				case PostgreSQLParserParser.CONDITION:
				case PostgreSQLParserParser.CONDITION_NUMBER:
				case PostgreSQLParserParser.CONNECT:
				case PostgreSQLParserParser.CONNECTION:
				case PostgreSQLParserParser.CONNECTION_NAME:
				case PostgreSQLParserParser.CONSTRAINT_CATALOG:
				case PostgreSQLParserParser.CONSTRAINT_NAME:
				case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
				case PostgreSQLParserParser.CONSTRAINTS:
				case PostgreSQLParserParser.CONSTRUCTOR:
				case PostgreSQLParserParser.CONTAINS:
				case PostgreSQLParserParser.CONTINUE:
				case PostgreSQLParserParser.CONVERSION:
				case PostgreSQLParserParser.CONVERT:
				case PostgreSQLParserParser.COPY:
				case PostgreSQLParserParser.CORR:
				case PostgreSQLParserParser.CORRESPONDING:
				case PostgreSQLParserParser.COUNT:
				case PostgreSQLParserParser.COVAR_POP:
				case PostgreSQLParserParser.COVAR_SAMP:
				case PostgreSQLParserParser.CSV:
				case PostgreSQLParserParser.CUBE:
				case PostgreSQLParserParser.CUME_DIST:
				case PostgreSQLParserParser.CURRENT:
				case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
				case PostgreSQLParserParser.CURRENT_PATH:
				case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case PostgreSQLParserParser.CURSOR:
				case PostgreSQLParserParser.CURSOR_NAME:
				case PostgreSQLParserParser.CYCLE:
				case PostgreSQLParserParser.DATA:
				case PostgreSQLParserParser.DATABASE:
				case PostgreSQLParserParser.DATE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
				case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
				case PostgreSQLParserParser.DAY:
				case PostgreSQLParserParser.DEALLOCATE:
				case PostgreSQLParserParser.DEC:
				case PostgreSQLParserParser.DECIMAL:
				case PostgreSQLParserParser.DECLARE:
				case PostgreSQLParserParser.DEFAULTS:
				case PostgreSQLParserParser.DEFERRED:
				case PostgreSQLParserParser.DEFINED:
				case PostgreSQLParserParser.DEFINER:
				case PostgreSQLParserParser.DEGREE:
				case PostgreSQLParserParser.DELETE:
				case PostgreSQLParserParser.DELIMITER:
				case PostgreSQLParserParser.DELIMITERS:
				case PostgreSQLParserParser.DENSE_RANK:
				case PostgreSQLParserParser.DEPTH:
				case PostgreSQLParserParser.DEREF:
				case PostgreSQLParserParser.DERIVED:
				case PostgreSQLParserParser.DESCRIBE:
				case PostgreSQLParserParser.DESCRIPTOR:
				case PostgreSQLParserParser.DETERMINISTIC:
				case PostgreSQLParserParser.DIAGNOSTICS:
				case PostgreSQLParserParser.DICTIONARY:
				case PostgreSQLParserParser.DISCONNECT:
				case PostgreSQLParserParser.DISPATCH:
				case PostgreSQLParserParser.DOMAIN:
				case PostgreSQLParserParser.DOUBLE:
				case PostgreSQLParserParser.DYNAMIC:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION:
				case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
				case PostgreSQLParserParser.EACH:
				case PostgreSQLParserParser.ELEMENT:
				case PostgreSQLParserParser.ENCODING:
				case PostgreSQLParserParser.ENCRYPTED:
				case PostgreSQLParserParser.END:
				case PostgreSQLParserParser.EQUALS:
				case PostgreSQLParserParser.ESCAPE:
				case PostgreSQLParserParser.EVERY:
				case PostgreSQLParserParser.EXCEPTION:
				case PostgreSQLParserParser.EXCLUDE:
				case PostgreSQLParserParser.EXCLUDING:
				case PostgreSQLParserParser.EXCLUSIVE:
				case PostgreSQLParserParser.EXEC:
				case PostgreSQLParserParser.EXECUTE:
				case PostgreSQLParserParser.EXISTS:
				case PostgreSQLParserParser.EXP:
				case PostgreSQLParserParser.EXPLAIN:
				case PostgreSQLParserParser.EXTENSION:
				case PostgreSQLParserParser.EXTERNAL:
				case PostgreSQLParserParser.EXTRACT:
				case PostgreSQLParserParser.FALSE:
				case PostgreSQLParserParser.FILTER:
				case PostgreSQLParserParser.FINAL:
				case PostgreSQLParserParser.FIRST:
				case PostgreSQLParserParser.FLOAT:
				case PostgreSQLParserParser.FLOOR:
				case PostgreSQLParserParser.FOLLOWING:
				case PostgreSQLParserParser.FORCE:
				case PostgreSQLParserParser.FORMAT:
				case PostgreSQLParserParser.FORTRAN:
				case PostgreSQLParserParser.FORWARD:
				case PostgreSQLParserParser.FOUND:
				case PostgreSQLParserParser.FREE:
				case PostgreSQLParserParser.FUNCTION:
				case PostgreSQLParserParser.FUSION:
				case PostgreSQLParserParser.G_:
				case PostgreSQLParserParser.GENERAL:
				case PostgreSQLParserParser.GENERATED:
				case PostgreSQLParserParser.GET:
				case PostgreSQLParserParser.GLOBAL:
				case PostgreSQLParserParser.GO:
				case PostgreSQLParserParser.GOTO:
				case PostgreSQLParserParser.GRANTED:
				case PostgreSQLParserParser.GREATEST:
				case PostgreSQLParserParser.GROUPING:
				case PostgreSQLParserParser.HANDLER:
				case PostgreSQLParserParser.HIERARCHY:
				case PostgreSQLParserParser.HOLD:
				case PostgreSQLParserParser.HOST:
				case PostgreSQLParserParser.HOUR:
				case PostgreSQLParserParser.IDENTITY:
				case PostgreSQLParserParser.IGNORE:
				case PostgreSQLParserParser.IMMEDIATE:
				case PostgreSQLParserParser.IMMUTABLE:
				case PostgreSQLParserParser.IMPLEMENTATION:
				case PostgreSQLParserParser.IMPLICIT:
				case PostgreSQLParserParser.INCLUDING:
				case PostgreSQLParserParser.INCREMENT:
				case PostgreSQLParserParser.INDEX:
				case PostgreSQLParserParser.INDICATOR:
				case PostgreSQLParserParser.INHERITS:
				case PostgreSQLParserParser.INOUT:
				case PostgreSQLParserParser.INPUT:
				case PostgreSQLParserParser.INSENSITIVE:
				case PostgreSQLParserParser.INSERT:
				case PostgreSQLParserParser.INSTANCE:
				case PostgreSQLParserParser.INSTANTIABLE:
				case PostgreSQLParserParser.INSTEAD:
				case PostgreSQLParserParser.INT:
				case PostgreSQLParserParser.INTEGER:
				case PostgreSQLParserParser.INTERSECTION:
				case PostgreSQLParserParser.INTERVAL:
				case PostgreSQLParserParser.INVOKER:
				case PostgreSQLParserParser.ISOLATION:
				case PostgreSQLParserParser.K_:
				case PostgreSQLParserParser.KEY:
				case PostgreSQLParserParser.KEY_MEMBER:
				case PostgreSQLParserParser.KEY_TYPE:
				case PostgreSQLParserParser.LANGUAGE:
				case PostgreSQLParserParser.LARGE:
				case PostgreSQLParserParser.LAST:
				case PostgreSQLParserParser.LEAST:
				case PostgreSQLParserParser.LEFT:
				case PostgreSQLParserParser.LENGTH:
				case PostgreSQLParserParser.LEVEL:
				case PostgreSQLParserParser.LISTEN:
				case PostgreSQLParserParser.LN:
				case PostgreSQLParserParser.LOAD:
				case PostgreSQLParserParser.LOCAL:
				case PostgreSQLParserParser.LOCATION:
				case PostgreSQLParserParser.LOCATOR:
				case PostgreSQLParserParser.LOCK:
				case PostgreSQLParserParser.LOCKED:
				case PostgreSQLParserParser.LOWER:
				case PostgreSQLParserParser.M_:
				case PostgreSQLParserParser.MAP:
				case PostgreSQLParserParser.MATCH:
				case PostgreSQLParserParser.MATCHED:
				case PostgreSQLParserParser.MAX:
				case PostgreSQLParserParser.MAXVALUE:
				case PostgreSQLParserParser.MEMBER:
				case PostgreSQLParserParser.MERGE:
				case PostgreSQLParserParser.MESSAGE_LENGTH:
				case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
				case PostgreSQLParserParser.MESSAGE_TEXT:
				case PostgreSQLParserParser.METHOD:
				case PostgreSQLParserParser.MIN:
				case PostgreSQLParserParser.MINUTE:
				case PostgreSQLParserParser.MINVALUE:
				case PostgreSQLParserParser.MOD:
				case PostgreSQLParserParser.MODE:
				case PostgreSQLParserParser.MODIFIES:
				case PostgreSQLParserParser.MODULE:
				case PostgreSQLParserParser.MONTH:
				case PostgreSQLParserParser.MORE_:
				case PostgreSQLParserParser.MOVE:
				case PostgreSQLParserParser.MULTISET:
				case PostgreSQLParserParser.MUMPS:
				case PostgreSQLParserParser.NAME:
				case PostgreSQLParserParser.NAMES:
				case PostgreSQLParserParser.NATIONAL:
				case PostgreSQLParserParser.NCHAR:
				case PostgreSQLParserParser.NCLOB:
				case PostgreSQLParserParser.NESTING:
				case PostgreSQLParserParser.NEW:
				case PostgreSQLParserParser.NEXT:
				case PostgreSQLParserParser.NO:
				case PostgreSQLParserParser.NONE:
				case PostgreSQLParserParser.NORMALIZE:
				case PostgreSQLParserParser.NORMALIZED:
				case PostgreSQLParserParser.NOTHING:
				case PostgreSQLParserParser.NOTIFY:
				case PostgreSQLParserParser.NOWAIT:
				case PostgreSQLParserParser.NULLABLE:
				case PostgreSQLParserParser.NULLIF:
				case PostgreSQLParserParser.NULLS:
				case PostgreSQLParserParser.NUMBER:
				case PostgreSQLParserParser.NUMERIC:
				case PostgreSQLParserParser.OBJECT:
				case PostgreSQLParserParser.OCTET_LENGTH:
				case PostgreSQLParserParser.OCTETS:
				case PostgreSQLParserParser.OF:
				case PostgreSQLParserParser.OFF:
				case PostgreSQLParserParser.OIDS:
				case PostgreSQLParserParser.OLD:
				case PostgreSQLParserParser.ON:
				case PostgreSQLParserParser.OPEN:
				case PostgreSQLParserParser.OPERATOR:
				case PostgreSQLParserParser.OPTION:
				case PostgreSQLParserParser.OPTIONS:
				case PostgreSQLParserParser.ORDERING:
				case PostgreSQLParserParser.ORDINALITY:
				case PostgreSQLParserParser.OTHERS:
				case PostgreSQLParserParser.OUT:
				case PostgreSQLParserParser.OUTPUT:
				case PostgreSQLParserParser.OVER:
				case PostgreSQLParserParser.OVERLAY:
				case PostgreSQLParserParser.OVERRIDING:
				case PostgreSQLParserParser.OWNER:
				case PostgreSQLParserParser.PAD:
				case PostgreSQLParserParser.PARAMETER:
				case PostgreSQLParserParser.PARAMETER_MODE:
				case PostgreSQLParserParser.PARAMETER_NAME:
				case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
				case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
				case PostgreSQLParserParser.PARTIAL:
				case PostgreSQLParserParser.PARTITION:
				case PostgreSQLParserParser.PASCAL:
				case PostgreSQLParserParser.PASSWORD:
				case PostgreSQLParserParser.PATH:
				case PostgreSQLParserParser.PERCENT_RANK:
				case PostgreSQLParserParser.PERCENTILE_CONT:
				case PostgreSQLParserParser.PERCENTILE_DISC:
				case PostgreSQLParserParser.PLAIN:
				case PostgreSQLParserParser.PLI:
				case PostgreSQLParserParser.POSITION:
				case PostgreSQLParserParser.POWER:
				case PostgreSQLParserParser.PRECEDING:
				case PostgreSQLParserParser.PRECISION:
				case PostgreSQLParserParser.PREPARE:
				case PostgreSQLParserParser.PRESERVE:
				case PostgreSQLParserParser.PRIOR:
				case PostgreSQLParserParser.PRIVILEGES:
				case PostgreSQLParserParser.PROCEDURAL:
				case PostgreSQLParserParser.PROCEDURE:
				case PostgreSQLParserParser.PUBLIC:
				case PostgreSQLParserParser.QUOTE:
				case PostgreSQLParserParser.RANGE:
				case PostgreSQLParserParser.RANK:
				case PostgreSQLParserParser.READ:
				case PostgreSQLParserParser.READS:
				case PostgreSQLParserParser.REAL:
				case PostgreSQLParserParser.RECHECK:
				case PostgreSQLParserParser.RECURSIVE:
				case PostgreSQLParserParser.REF:
				case PostgreSQLParserParser.REFERENCING:
				case PostgreSQLParserParser.REFRESH:
				case PostgreSQLParserParser.REGR_AVGX:
				case PostgreSQLParserParser.REGR_AVGY:
				case PostgreSQLParserParser.REGR_COUNT:
				case PostgreSQLParserParser.REGR_INTERCEPT:
				case PostgreSQLParserParser.REGR_SLOPE:
				case PostgreSQLParserParser.REGR_SXX:
				case PostgreSQLParserParser.REGR_SXY:
				case PostgreSQLParserParser.REGR_SYY:
				case PostgreSQLParserParser.REINDEX:
				case PostgreSQLParserParser.RELATIVE:
				case PostgreSQLParserParser.RELEASE:
				case PostgreSQLParserParser.RENAME:
				case PostgreSQLParserParser.REPEATABLE:
				case PostgreSQLParserParser.REPLACE:
				case PostgreSQLParserParser.RESET:
				case PostgreSQLParserParser.RESTART:
				case PostgreSQLParserParser.RESTRICT:
				case PostgreSQLParserParser.RESULT:
				case PostgreSQLParserParser.RETURN:
				case PostgreSQLParserParser.RETURNED_CARDINALITY:
				case PostgreSQLParserParser.RETURNED_LENGTH:
				case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
				case PostgreSQLParserParser.RETURNED_SQLSTATE:
				case PostgreSQLParserParser.RETURNS:
				case PostgreSQLParserParser.REVOKE:
				case PostgreSQLParserParser.RIGHT:
				case PostgreSQLParserParser.ROLE:
				case PostgreSQLParserParser.ROLLBACK:
				case PostgreSQLParserParser.ROLLUP:
				case PostgreSQLParserParser.ROUTINE:
				case PostgreSQLParserParser.ROUTINE_CATALOG:
				case PostgreSQLParserParser.ROUTINE_NAME:
				case PostgreSQLParserParser.ROUTINE_SCHEMA:
				case PostgreSQLParserParser.ROW:
				case PostgreSQLParserParser.ROW_COUNT:
				case PostgreSQLParserParser.ROW_NUMBER:
				case PostgreSQLParserParser.ROWS:
				case PostgreSQLParserParser.RULE:
				case PostgreSQLParserParser.SAVEPOINT:
				case PostgreSQLParserParser.SCALE:
				case PostgreSQLParserParser.SCHEMA:
				case PostgreSQLParserParser.SCHEMA_NAME:
				case PostgreSQLParserParser.SCOPE:
				case PostgreSQLParserParser.SCOPE_CATALOG:
				case PostgreSQLParserParser.SCOPE_NAME:
				case PostgreSQLParserParser.SCOPE_SCHEMA:
				case PostgreSQLParserParser.SCROLL:
				case PostgreSQLParserParser.SEARCH:
				case PostgreSQLParserParser.SECOND:
				case PostgreSQLParserParser.SECTION:
				case PostgreSQLParserParser.SECURITY:
				case PostgreSQLParserParser.SELF:
				case PostgreSQLParserParser.SENSITIVE:
				case PostgreSQLParserParser.SEQUENCE:
				case PostgreSQLParserParser.SEQUENCES:
				case PostgreSQLParserParser.SERIALIZABLE:
				case PostgreSQLParserParser.SERVER_NAME:
				case PostgreSQLParserParser.SESSION:
				case PostgreSQLParserParser.SET:
				case PostgreSQLParserParser.SETOF:
				case PostgreSQLParserParser.SETS:
				case PostgreSQLParserParser.SHARE:
				case PostgreSQLParserParser.SHOW:
				case PostgreSQLParserParser.SIMPLE:
				case PostgreSQLParserParser.SIZE:
				case PostgreSQLParserParser.SMALLINT:
				case PostgreSQLParserParser.SOME:
				case PostgreSQLParserParser.SOURCE:
				case PostgreSQLParserParser.SPACE:
				case PostgreSQLParserParser.SPECIFIC:
				case PostgreSQLParserParser.SPECIFIC_NAME:
				case PostgreSQLParserParser.SPECIFICTYPE:
				case PostgreSQLParserParser.SQL:
				case PostgreSQLParserParser.SQLCODE:
				case PostgreSQLParserParser.SQLERROR:
				case PostgreSQLParserParser.SQLEXCEPTION:
				case PostgreSQLParserParser.SQLSTATE:
				case PostgreSQLParserParser.SQLWARNING:
				case PostgreSQLParserParser.SQRT:
				case PostgreSQLParserParser.STABLE:
				case PostgreSQLParserParser.START:
				case PostgreSQLParserParser.STATE:
				case PostgreSQLParserParser.STATEMENT:
				case PostgreSQLParserParser.STATIC:
				case PostgreSQLParserParser.STATISTICS:
				case PostgreSQLParserParser.STDDEV_POP:
				case PostgreSQLParserParser.STDDEV_SAMP:
				case PostgreSQLParserParser.STDIN:
				case PostgreSQLParserParser.STDOUT:
				case PostgreSQLParserParser.STORAGE:
				case PostgreSQLParserParser.STRICT:
				case PostgreSQLParserParser.STRUCTURE:
				case PostgreSQLParserParser.STYLE:
				case PostgreSQLParserParser.SUBCLASS_ORIGIN:
				case PostgreSQLParserParser.SUBMULTISET:
				case PostgreSQLParserParser.SUBSTRING:
				case PostgreSQLParserParser.SUM:
				case PostgreSQLParserParser.SYSID:
				case PostgreSQLParserParser.SYSTEM:
				case PostgreSQLParserParser.SYSTEM_USER:
				case PostgreSQLParserParser.TABLE_NAME:
				case PostgreSQLParserParser.TABLESPACE:
				case PostgreSQLParserParser.TEMP:
				case PostgreSQLParserParser.TEMPLATE:
				case PostgreSQLParserParser.TEMPORARY:
				case PostgreSQLParserParser.TIES:
				case PostgreSQLParserParser.TIME:
				case PostgreSQLParserParser.TIMESTAMP:
				case PostgreSQLParserParser.TIMEZONE_HOUR:
				case PostgreSQLParserParser.TIMEZONE_MINUTE:
				case PostgreSQLParserParser.TOP_LEVEL_COUNT:
				case PostgreSQLParserParser.TRANSACTION:
				case PostgreSQLParserParser.TRANSACTION_ACTIVE:
				case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
				case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
				case PostgreSQLParserParser.TRANSFORM:
				case PostgreSQLParserParser.TRANSFORMS:
				case PostgreSQLParserParser.TRANSLATE:
				case PostgreSQLParserParser.TRANSLATION:
				case PostgreSQLParserParser.TREAT:
				case PostgreSQLParserParser.TRIGGER:
				case PostgreSQLParserParser.TRIGGER_CATALOG:
				case PostgreSQLParserParser.TRIGGER_NAME:
				case PostgreSQLParserParser.TRIGGER_SCHEMA:
				case PostgreSQLParserParser.TRIM:
				case PostgreSQLParserParser.TRUE:
				case PostgreSQLParserParser.TRUNCATE:
				case PostgreSQLParserParser.TRUSTED:
				case PostgreSQLParserParser.TYPE:
				case PostgreSQLParserParser.UESCAPE:
				case PostgreSQLParserParser.UNBOUNDED:
				case PostgreSQLParserParser.UNCOMMITTED:
				case PostgreSQLParserParser.UNDER:
				case PostgreSQLParserParser.UNENCRYPTED:
				case PostgreSQLParserParser.UNKNOWN:
				case PostgreSQLParserParser.UNLISTEN:
				case PostgreSQLParserParser.UNNAMED:
				case PostgreSQLParserParser.UNNEST:
				case PostgreSQLParserParser.UNTIL:
				case PostgreSQLParserParser.UPDATE:
				case PostgreSQLParserParser.UPPER:
				case PostgreSQLParserParser.USAGE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
				case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
				case PostgreSQLParserParser.VACUUM:
				case PostgreSQLParserParser.VALID:
				case PostgreSQLParserParser.VALIDATOR:
				case PostgreSQLParserParser.VALUE:
				case PostgreSQLParserParser.VALUES:
				case PostgreSQLParserParser.VAR_POP:
				case PostgreSQLParserParser.VAR_SAMP:
				case PostgreSQLParserParser.VARCHAR:
				case PostgreSQLParserParser.VARYING:
				case PostgreSQLParserParser.VIEW:
				case PostgreSQLParserParser.VOLATILE:
				case PostgreSQLParserParser.WHENEVER:
				case PostgreSQLParserParser.WIDTH_BUCKET:
				case PostgreSQLParserParser.WITHIN:
				case PostgreSQLParserParser.WITHOUT:
				case PostgreSQLParserParser.WORK:
				case PostgreSQLParserParser.WRITE:
				case PostgreSQLParserParser.YEAR:
				case PostgreSQLParserParser.YES:
				case PostgreSQLParserParser.ZONE:
				case PostgreSQLParserParser.ABSTIME:
				case PostgreSQLParserParser.BIGSERIAL:
				case PostgreSQLParserParser.BIT_VARYING:
				case PostgreSQLParserParser.BOOL:
				case PostgreSQLParserParser.BOX:
				case PostgreSQLParserParser.BYTEA:
				case PostgreSQLParserParser.CHARACTER_VARYING:
				case PostgreSQLParserParser.CIDR:
				case PostgreSQLParserParser.CIRCLE:
				case PostgreSQLParserParser.FLOAT4:
				case PostgreSQLParserParser.FLOAT8:
				case PostgreSQLParserParser.INET:
				case PostgreSQLParserParser.INT2:
				case PostgreSQLParserParser.INT4:
				case PostgreSQLParserParser.INT8:
				case PostgreSQLParserParser.JSON:
				case PostgreSQLParserParser.JSONB:
				case PostgreSQLParserParser.LINE:
				case PostgreSQLParserParser.LSEG:
				case PostgreSQLParserParser.MACADDR:
				case PostgreSQLParserParser.MACADDR8:
				case PostgreSQLParserParser.MONEY:
				case PostgreSQLParserParser.PG_LSN:
				case PostgreSQLParserParser.POINT:
				case PostgreSQLParserParser.POLYGON:
				case PostgreSQLParserParser.RELTIME:
				case PostgreSQLParserParser.SERIAL:
				case PostgreSQLParserParser.SERIAL2:
				case PostgreSQLParserParser.SERIAL4:
				case PostgreSQLParserParser.SERIAL8:
				case PostgreSQLParserParser.SMALLSERIAL:
				case PostgreSQLParserParser.TEXT:
				case PostgreSQLParserParser.TIMESTAMPTZ:
				case PostgreSQLParserParser.TIMETZ:
				case PostgreSQLParserParser.TSQUERY:
				case PostgreSQLParserParser.TSVECTOR:
				case PostgreSQLParserParser.TXID_SNAPSHOT:
				case PostgreSQLParserParser.UUID:
				case PostgreSQLParserParser.VARBIT:
				case PostgreSQLParserParser.XML:
				case PostgreSQLParserParser.NUMERIC_LITERAL:
				case PostgreSQLParserParser.INTEGER_LITERAL:
				case PostgreSQLParserParser.SINGLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.IDENTIFIER:
				case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					{
					this.state = 4053;
					_localctx._value = this.param_value();
					}
					break;
				case PostgreSQLParserParser.DEFAULT:
					{
					this.state = 4054;
					this.match(PostgreSQLParserParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4057;
				this.match(PostgreSQLParserParser.SET);
				this.state = 4059;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.LOCAL || _la === PostgreSQLParserParser.SESSION) {
					{
					this.state = 4058;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.LOCAL || _la === PostgreSQLParserParser.SESSION)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 4061;
				this.match(PostgreSQLParserParser.TIME);
				this.state = 4062;
				this.match(PostgreSQLParserParser.ZONE);
				this.state = 4066;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParserParser.NUMERIC_LITERAL:
				case PostgreSQLParserParser.INTEGER_LITERAL:
				case PostgreSQLParserParser.SINGLEQ_STRING_LITERAL:
				case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
					{
					this.state = 4063;
					this.timezone();
					}
					break;
				case PostgreSQLParserParser.LOCAL:
					{
					this.state = 4064;
					this.match(PostgreSQLParserParser.LOCAL);
					}
					break;
				case PostgreSQLParserParser.DEFAULT:
					{
					this.state = 4065;
					this.match(PostgreSQLParserParser.DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_constraints_stmt(): Set_constraints_stmtContext {
		let _localctx: Set_constraints_stmtContext = new Set_constraints_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, PostgreSQLParserParser.RULE_set_constraints_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4070;
			this.match(PostgreSQLParserParser.SET);
			this.state = 4071;
			this.match(PostgreSQLParserParser.CONSTRAINTS);
			this.state = 4074;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.ALL:
				{
				this.state = 4072;
				this.match(PostgreSQLParserParser.ALL);
				}
				break;
			case PostgreSQLParserParser.WHITESPACE:
			case PostgreSQLParserParser.A_:
			case PostgreSQLParserParser.ABORT:
			case PostgreSQLParserParser.ABS:
			case PostgreSQLParserParser.ABSOLUTE:
			case PostgreSQLParserParser.ACCESS:
			case PostgreSQLParserParser.ACTION:
			case PostgreSQLParserParser.ADA:
			case PostgreSQLParserParser.ADD:
			case PostgreSQLParserParser.ADMIN:
			case PostgreSQLParserParser.AFTER:
			case PostgreSQLParserParser.AGGREGATE:
			case PostgreSQLParserParser.ALLOCATE:
			case PostgreSQLParserParser.ALSO:
			case PostgreSQLParserParser.ALTER:
			case PostgreSQLParserParser.ALWAYS:
			case PostgreSQLParserParser.ANY:
			case PostgreSQLParserParser.ARE:
			case PostgreSQLParserParser.ASENSITIVE:
			case PostgreSQLParserParser.ASSERTION:
			case PostgreSQLParserParser.ASSIGNMENT:
			case PostgreSQLParserParser.AT:
			case PostgreSQLParserParser.ATOMIC:
			case PostgreSQLParserParser.ATTRIBUTE:
			case PostgreSQLParserParser.ATTRIBUTES:
			case PostgreSQLParserParser.AVG:
			case PostgreSQLParserParser.BACKWARD:
			case PostgreSQLParserParser.BEFORE:
			case PostgreSQLParserParser.BEGIN:
			case PostgreSQLParserParser.BERNOULLI:
			case PostgreSQLParserParser.BETWEEN:
			case PostgreSQLParserParser.BIGINT:
			case PostgreSQLParserParser.BIT:
			case PostgreSQLParserParser.BIT_LENGTH:
			case PostgreSQLParserParser.BLOB:
			case PostgreSQLParserParser.BOOLEAN:
			case PostgreSQLParserParser.BREADTH:
			case PostgreSQLParserParser.BY:
			case PostgreSQLParserParser.C_:
			case PostgreSQLParserParser.CACHE:
			case PostgreSQLParserParser.CALL:
			case PostgreSQLParserParser.CALLED:
			case PostgreSQLParserParser.CARDINALITY:
			case PostgreSQLParserParser.CASCADE:
			case PostgreSQLParserParser.CASCADED:
			case PostgreSQLParserParser.CATALOG:
			case PostgreSQLParserParser.CATALOG_NAME:
			case PostgreSQLParserParser.CEIL:
			case PostgreSQLParserParser.CEILING:
			case PostgreSQLParserParser.CHAIN:
			case PostgreSQLParserParser.CHAR:
			case PostgreSQLParserParser.CHAR_LENGTH:
			case PostgreSQLParserParser.CHARACTER:
			case PostgreSQLParserParser.CHARACTER_LENGTH:
			case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
			case PostgreSQLParserParser.CHARACTER_SET_NAME:
			case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
			case PostgreSQLParserParser.CHARACTERISTICS:
			case PostgreSQLParserParser.CHARACTERS:
			case PostgreSQLParserParser.CHECKPOINT:
			case PostgreSQLParserParser.CLASS:
			case PostgreSQLParserParser.CLASS_ORIGIN:
			case PostgreSQLParserParser.CLOB:
			case PostgreSQLParserParser.CLOSE:
			case PostgreSQLParserParser.CLUSTER:
			case PostgreSQLParserParser.COALESCE:
			case PostgreSQLParserParser.COBOL:
			case PostgreSQLParserParser.COLLATION_CATALOG:
			case PostgreSQLParserParser.COLLATION_NAME:
			case PostgreSQLParserParser.COLLATION_SCHEMA:
			case PostgreSQLParserParser.COLLECT:
			case PostgreSQLParserParser.COLUMN_NAME:
			case PostgreSQLParserParser.COMMAND_FUNCTION:
			case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
			case PostgreSQLParserParser.COMMENT:
			case PostgreSQLParserParser.COMMIT:
			case PostgreSQLParserParser.COMMITTED:
			case PostgreSQLParserParser.CONDITION:
			case PostgreSQLParserParser.CONDITION_NUMBER:
			case PostgreSQLParserParser.CONNECT:
			case PostgreSQLParserParser.CONNECTION:
			case PostgreSQLParserParser.CONNECTION_NAME:
			case PostgreSQLParserParser.CONSTRAINT_CATALOG:
			case PostgreSQLParserParser.CONSTRAINT_NAME:
			case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
			case PostgreSQLParserParser.CONSTRAINTS:
			case PostgreSQLParserParser.CONSTRUCTOR:
			case PostgreSQLParserParser.CONTAINS:
			case PostgreSQLParserParser.CONTINUE:
			case PostgreSQLParserParser.CONVERSION:
			case PostgreSQLParserParser.CONVERT:
			case PostgreSQLParserParser.COPY:
			case PostgreSQLParserParser.CORR:
			case PostgreSQLParserParser.CORRESPONDING:
			case PostgreSQLParserParser.COUNT:
			case PostgreSQLParserParser.COVAR_POP:
			case PostgreSQLParserParser.COVAR_SAMP:
			case PostgreSQLParserParser.CSV:
			case PostgreSQLParserParser.CUBE:
			case PostgreSQLParserParser.CUME_DIST:
			case PostgreSQLParserParser.CURRENT:
			case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
			case PostgreSQLParserParser.CURRENT_PATH:
			case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case PostgreSQLParserParser.CURSOR:
			case PostgreSQLParserParser.CURSOR_NAME:
			case PostgreSQLParserParser.CYCLE:
			case PostgreSQLParserParser.DATA:
			case PostgreSQLParserParser.DATABASE:
			case PostgreSQLParserParser.DATE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
			case PostgreSQLParserParser.DAY:
			case PostgreSQLParserParser.DEALLOCATE:
			case PostgreSQLParserParser.DEC:
			case PostgreSQLParserParser.DECIMAL:
			case PostgreSQLParserParser.DECLARE:
			case PostgreSQLParserParser.DEFAULTS:
			case PostgreSQLParserParser.DEFERRED:
			case PostgreSQLParserParser.DEFINED:
			case PostgreSQLParserParser.DEFINER:
			case PostgreSQLParserParser.DEGREE:
			case PostgreSQLParserParser.DELETE:
			case PostgreSQLParserParser.DELIMITER:
			case PostgreSQLParserParser.DELIMITERS:
			case PostgreSQLParserParser.DENSE_RANK:
			case PostgreSQLParserParser.DEPTH:
			case PostgreSQLParserParser.DEREF:
			case PostgreSQLParserParser.DERIVED:
			case PostgreSQLParserParser.DESCRIBE:
			case PostgreSQLParserParser.DESCRIPTOR:
			case PostgreSQLParserParser.DETERMINISTIC:
			case PostgreSQLParserParser.DIAGNOSTICS:
			case PostgreSQLParserParser.DICTIONARY:
			case PostgreSQLParserParser.DISCONNECT:
			case PostgreSQLParserParser.DISPATCH:
			case PostgreSQLParserParser.DOMAIN:
			case PostgreSQLParserParser.DOUBLE:
			case PostgreSQLParserParser.DYNAMIC:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
			case PostgreSQLParserParser.EACH:
			case PostgreSQLParserParser.ELEMENT:
			case PostgreSQLParserParser.ENCODING:
			case PostgreSQLParserParser.ENCRYPTED:
			case PostgreSQLParserParser.END:
			case PostgreSQLParserParser.EQUALS:
			case PostgreSQLParserParser.ESCAPE:
			case PostgreSQLParserParser.EVERY:
			case PostgreSQLParserParser.EXCEPTION:
			case PostgreSQLParserParser.EXCLUDE:
			case PostgreSQLParserParser.EXCLUDING:
			case PostgreSQLParserParser.EXCLUSIVE:
			case PostgreSQLParserParser.EXEC:
			case PostgreSQLParserParser.EXECUTE:
			case PostgreSQLParserParser.EXISTS:
			case PostgreSQLParserParser.EXP:
			case PostgreSQLParserParser.EXPLAIN:
			case PostgreSQLParserParser.EXTENSION:
			case PostgreSQLParserParser.EXTERNAL:
			case PostgreSQLParserParser.EXTRACT:
			case PostgreSQLParserParser.FILTER:
			case PostgreSQLParserParser.FINAL:
			case PostgreSQLParserParser.FIRST:
			case PostgreSQLParserParser.FLOAT:
			case PostgreSQLParserParser.FLOOR:
			case PostgreSQLParserParser.FOLLOWING:
			case PostgreSQLParserParser.FORCE:
			case PostgreSQLParserParser.FORMAT:
			case PostgreSQLParserParser.FORTRAN:
			case PostgreSQLParserParser.FORWARD:
			case PostgreSQLParserParser.FOUND:
			case PostgreSQLParserParser.FREE:
			case PostgreSQLParserParser.FUNCTION:
			case PostgreSQLParserParser.FUSION:
			case PostgreSQLParserParser.G_:
			case PostgreSQLParserParser.GENERAL:
			case PostgreSQLParserParser.GENERATED:
			case PostgreSQLParserParser.GET:
			case PostgreSQLParserParser.GLOBAL:
			case PostgreSQLParserParser.GO:
			case PostgreSQLParserParser.GOTO:
			case PostgreSQLParserParser.GRANTED:
			case PostgreSQLParserParser.GREATEST:
			case PostgreSQLParserParser.GROUPING:
			case PostgreSQLParserParser.HANDLER:
			case PostgreSQLParserParser.HIERARCHY:
			case PostgreSQLParserParser.HOLD:
			case PostgreSQLParserParser.HOST:
			case PostgreSQLParserParser.HOUR:
			case PostgreSQLParserParser.IDENTITY:
			case PostgreSQLParserParser.IGNORE:
			case PostgreSQLParserParser.IMMEDIATE:
			case PostgreSQLParserParser.IMMUTABLE:
			case PostgreSQLParserParser.IMPLEMENTATION:
			case PostgreSQLParserParser.IMPLICIT:
			case PostgreSQLParserParser.INCLUDING:
			case PostgreSQLParserParser.INCREMENT:
			case PostgreSQLParserParser.INDEX:
			case PostgreSQLParserParser.INDICATOR:
			case PostgreSQLParserParser.INHERITS:
			case PostgreSQLParserParser.INOUT:
			case PostgreSQLParserParser.INPUT:
			case PostgreSQLParserParser.INSENSITIVE:
			case PostgreSQLParserParser.INSERT:
			case PostgreSQLParserParser.INSTANCE:
			case PostgreSQLParserParser.INSTANTIABLE:
			case PostgreSQLParserParser.INSTEAD:
			case PostgreSQLParserParser.INT:
			case PostgreSQLParserParser.INTEGER:
			case PostgreSQLParserParser.INTERSECTION:
			case PostgreSQLParserParser.INTERVAL:
			case PostgreSQLParserParser.INVOKER:
			case PostgreSQLParserParser.ISOLATION:
			case PostgreSQLParserParser.K_:
			case PostgreSQLParserParser.KEY:
			case PostgreSQLParserParser.KEY_MEMBER:
			case PostgreSQLParserParser.KEY_TYPE:
			case PostgreSQLParserParser.LANGUAGE:
			case PostgreSQLParserParser.LARGE:
			case PostgreSQLParserParser.LAST:
			case PostgreSQLParserParser.LEAST:
			case PostgreSQLParserParser.LEFT:
			case PostgreSQLParserParser.LENGTH:
			case PostgreSQLParserParser.LEVEL:
			case PostgreSQLParserParser.LISTEN:
			case PostgreSQLParserParser.LN:
			case PostgreSQLParserParser.LOAD:
			case PostgreSQLParserParser.LOCAL:
			case PostgreSQLParserParser.LOCATION:
			case PostgreSQLParserParser.LOCATOR:
			case PostgreSQLParserParser.LOCK:
			case PostgreSQLParserParser.LOCKED:
			case PostgreSQLParserParser.LOWER:
			case PostgreSQLParserParser.M_:
			case PostgreSQLParserParser.MAP:
			case PostgreSQLParserParser.MATCH:
			case PostgreSQLParserParser.MATCHED:
			case PostgreSQLParserParser.MAX:
			case PostgreSQLParserParser.MAXVALUE:
			case PostgreSQLParserParser.MEMBER:
			case PostgreSQLParserParser.MERGE:
			case PostgreSQLParserParser.MESSAGE_LENGTH:
			case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
			case PostgreSQLParserParser.MESSAGE_TEXT:
			case PostgreSQLParserParser.METHOD:
			case PostgreSQLParserParser.MIN:
			case PostgreSQLParserParser.MINUTE:
			case PostgreSQLParserParser.MINVALUE:
			case PostgreSQLParserParser.MOD:
			case PostgreSQLParserParser.MODE:
			case PostgreSQLParserParser.MODIFIES:
			case PostgreSQLParserParser.MODULE:
			case PostgreSQLParserParser.MONTH:
			case PostgreSQLParserParser.MORE_:
			case PostgreSQLParserParser.MOVE:
			case PostgreSQLParserParser.MULTISET:
			case PostgreSQLParserParser.MUMPS:
			case PostgreSQLParserParser.NAME:
			case PostgreSQLParserParser.NAMES:
			case PostgreSQLParserParser.NATIONAL:
			case PostgreSQLParserParser.NCHAR:
			case PostgreSQLParserParser.NCLOB:
			case PostgreSQLParserParser.NESTING:
			case PostgreSQLParserParser.NEW:
			case PostgreSQLParserParser.NEXT:
			case PostgreSQLParserParser.NO:
			case PostgreSQLParserParser.NONE:
			case PostgreSQLParserParser.NORMALIZE:
			case PostgreSQLParserParser.NORMALIZED:
			case PostgreSQLParserParser.NOTHING:
			case PostgreSQLParserParser.NOTIFY:
			case PostgreSQLParserParser.NOWAIT:
			case PostgreSQLParserParser.NULLABLE:
			case PostgreSQLParserParser.NULLIF:
			case PostgreSQLParserParser.NULLS:
			case PostgreSQLParserParser.NUMBER:
			case PostgreSQLParserParser.NUMERIC:
			case PostgreSQLParserParser.OBJECT:
			case PostgreSQLParserParser.OCTET_LENGTH:
			case PostgreSQLParserParser.OCTETS:
			case PostgreSQLParserParser.OF:
			case PostgreSQLParserParser.OFF:
			case PostgreSQLParserParser.OIDS:
			case PostgreSQLParserParser.OLD:
			case PostgreSQLParserParser.OPEN:
			case PostgreSQLParserParser.OPERATOR:
			case PostgreSQLParserParser.OPTION:
			case PostgreSQLParserParser.OPTIONS:
			case PostgreSQLParserParser.ORDERING:
			case PostgreSQLParserParser.ORDINALITY:
			case PostgreSQLParserParser.OTHERS:
			case PostgreSQLParserParser.OUT:
			case PostgreSQLParserParser.OUTPUT:
			case PostgreSQLParserParser.OVER:
			case PostgreSQLParserParser.OVERLAY:
			case PostgreSQLParserParser.OVERRIDING:
			case PostgreSQLParserParser.OWNER:
			case PostgreSQLParserParser.PAD:
			case PostgreSQLParserParser.PARAMETER:
			case PostgreSQLParserParser.PARAMETER_MODE:
			case PostgreSQLParserParser.PARAMETER_NAME:
			case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
			case PostgreSQLParserParser.PARTIAL:
			case PostgreSQLParserParser.PARTITION:
			case PostgreSQLParserParser.PASCAL:
			case PostgreSQLParserParser.PASSWORD:
			case PostgreSQLParserParser.PATH:
			case PostgreSQLParserParser.PERCENT_RANK:
			case PostgreSQLParserParser.PERCENTILE_CONT:
			case PostgreSQLParserParser.PERCENTILE_DISC:
			case PostgreSQLParserParser.PLAIN:
			case PostgreSQLParserParser.PLI:
			case PostgreSQLParserParser.POSITION:
			case PostgreSQLParserParser.POWER:
			case PostgreSQLParserParser.PRECEDING:
			case PostgreSQLParserParser.PRECISION:
			case PostgreSQLParserParser.PREPARE:
			case PostgreSQLParserParser.PRESERVE:
			case PostgreSQLParserParser.PRIOR:
			case PostgreSQLParserParser.PRIVILEGES:
			case PostgreSQLParserParser.PROCEDURAL:
			case PostgreSQLParserParser.PROCEDURE:
			case PostgreSQLParserParser.PUBLIC:
			case PostgreSQLParserParser.QUOTE:
			case PostgreSQLParserParser.RANGE:
			case PostgreSQLParserParser.RANK:
			case PostgreSQLParserParser.READ:
			case PostgreSQLParserParser.READS:
			case PostgreSQLParserParser.REAL:
			case PostgreSQLParserParser.RECHECK:
			case PostgreSQLParserParser.RECURSIVE:
			case PostgreSQLParserParser.REF:
			case PostgreSQLParserParser.REFERENCING:
			case PostgreSQLParserParser.REFRESH:
			case PostgreSQLParserParser.REGR_AVGX:
			case PostgreSQLParserParser.REGR_AVGY:
			case PostgreSQLParserParser.REGR_COUNT:
			case PostgreSQLParserParser.REGR_INTERCEPT:
			case PostgreSQLParserParser.REGR_SLOPE:
			case PostgreSQLParserParser.REGR_SXX:
			case PostgreSQLParserParser.REGR_SXY:
			case PostgreSQLParserParser.REGR_SYY:
			case PostgreSQLParserParser.REINDEX:
			case PostgreSQLParserParser.RELATIVE:
			case PostgreSQLParserParser.RELEASE:
			case PostgreSQLParserParser.RENAME:
			case PostgreSQLParserParser.REPEATABLE:
			case PostgreSQLParserParser.REPLACE:
			case PostgreSQLParserParser.RESET:
			case PostgreSQLParserParser.RESTART:
			case PostgreSQLParserParser.RESTRICT:
			case PostgreSQLParserParser.RESULT:
			case PostgreSQLParserParser.RETURN:
			case PostgreSQLParserParser.RETURNED_CARDINALITY:
			case PostgreSQLParserParser.RETURNED_LENGTH:
			case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
			case PostgreSQLParserParser.RETURNED_SQLSTATE:
			case PostgreSQLParserParser.RETURNS:
			case PostgreSQLParserParser.REVOKE:
			case PostgreSQLParserParser.RIGHT:
			case PostgreSQLParserParser.ROLE:
			case PostgreSQLParserParser.ROLLBACK:
			case PostgreSQLParserParser.ROLLUP:
			case PostgreSQLParserParser.ROUTINE:
			case PostgreSQLParserParser.ROUTINE_CATALOG:
			case PostgreSQLParserParser.ROUTINE_NAME:
			case PostgreSQLParserParser.ROUTINE_SCHEMA:
			case PostgreSQLParserParser.ROW:
			case PostgreSQLParserParser.ROW_COUNT:
			case PostgreSQLParserParser.ROW_NUMBER:
			case PostgreSQLParserParser.ROWS:
			case PostgreSQLParserParser.RULE:
			case PostgreSQLParserParser.SAVEPOINT:
			case PostgreSQLParserParser.SCALE:
			case PostgreSQLParserParser.SCHEMA:
			case PostgreSQLParserParser.SCHEMA_NAME:
			case PostgreSQLParserParser.SCOPE:
			case PostgreSQLParserParser.SCOPE_CATALOG:
			case PostgreSQLParserParser.SCOPE_NAME:
			case PostgreSQLParserParser.SCOPE_SCHEMA:
			case PostgreSQLParserParser.SCROLL:
			case PostgreSQLParserParser.SEARCH:
			case PostgreSQLParserParser.SECOND:
			case PostgreSQLParserParser.SECTION:
			case PostgreSQLParserParser.SECURITY:
			case PostgreSQLParserParser.SELF:
			case PostgreSQLParserParser.SENSITIVE:
			case PostgreSQLParserParser.SEQUENCE:
			case PostgreSQLParserParser.SEQUENCES:
			case PostgreSQLParserParser.SERIALIZABLE:
			case PostgreSQLParserParser.SERVER_NAME:
			case PostgreSQLParserParser.SESSION:
			case PostgreSQLParserParser.SET:
			case PostgreSQLParserParser.SETOF:
			case PostgreSQLParserParser.SETS:
			case PostgreSQLParserParser.SHARE:
			case PostgreSQLParserParser.SHOW:
			case PostgreSQLParserParser.SIMPLE:
			case PostgreSQLParserParser.SIZE:
			case PostgreSQLParserParser.SMALLINT:
			case PostgreSQLParserParser.SOME:
			case PostgreSQLParserParser.SOURCE:
			case PostgreSQLParserParser.SPACE:
			case PostgreSQLParserParser.SPECIFIC:
			case PostgreSQLParserParser.SPECIFIC_NAME:
			case PostgreSQLParserParser.SPECIFICTYPE:
			case PostgreSQLParserParser.SQL:
			case PostgreSQLParserParser.SQLCODE:
			case PostgreSQLParserParser.SQLERROR:
			case PostgreSQLParserParser.SQLEXCEPTION:
			case PostgreSQLParserParser.SQLSTATE:
			case PostgreSQLParserParser.SQLWARNING:
			case PostgreSQLParserParser.SQRT:
			case PostgreSQLParserParser.STABLE:
			case PostgreSQLParserParser.START:
			case PostgreSQLParserParser.STATE:
			case PostgreSQLParserParser.STATEMENT:
			case PostgreSQLParserParser.STATIC:
			case PostgreSQLParserParser.STATISTICS:
			case PostgreSQLParserParser.STDDEV_POP:
			case PostgreSQLParserParser.STDDEV_SAMP:
			case PostgreSQLParserParser.STDIN:
			case PostgreSQLParserParser.STDOUT:
			case PostgreSQLParserParser.STORAGE:
			case PostgreSQLParserParser.STRICT:
			case PostgreSQLParserParser.STRUCTURE:
			case PostgreSQLParserParser.STYLE:
			case PostgreSQLParserParser.SUBCLASS_ORIGIN:
			case PostgreSQLParserParser.SUBMULTISET:
			case PostgreSQLParserParser.SUBSTRING:
			case PostgreSQLParserParser.SUM:
			case PostgreSQLParserParser.SYSID:
			case PostgreSQLParserParser.SYSTEM:
			case PostgreSQLParserParser.SYSTEM_USER:
			case PostgreSQLParserParser.TABLE_NAME:
			case PostgreSQLParserParser.TABLESPACE:
			case PostgreSQLParserParser.TEMP:
			case PostgreSQLParserParser.TEMPLATE:
			case PostgreSQLParserParser.TEMPORARY:
			case PostgreSQLParserParser.TIES:
			case PostgreSQLParserParser.TIME:
			case PostgreSQLParserParser.TIMESTAMP:
			case PostgreSQLParserParser.TIMEZONE_HOUR:
			case PostgreSQLParserParser.TIMEZONE_MINUTE:
			case PostgreSQLParserParser.TOP_LEVEL_COUNT:
			case PostgreSQLParserParser.TRANSACTION:
			case PostgreSQLParserParser.TRANSACTION_ACTIVE:
			case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
			case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
			case PostgreSQLParserParser.TRANSFORM:
			case PostgreSQLParserParser.TRANSFORMS:
			case PostgreSQLParserParser.TRANSLATE:
			case PostgreSQLParserParser.TRANSLATION:
			case PostgreSQLParserParser.TREAT:
			case PostgreSQLParserParser.TRIGGER:
			case PostgreSQLParserParser.TRIGGER_CATALOG:
			case PostgreSQLParserParser.TRIGGER_NAME:
			case PostgreSQLParserParser.TRIGGER_SCHEMA:
			case PostgreSQLParserParser.TRIM:
			case PostgreSQLParserParser.TRUE:
			case PostgreSQLParserParser.TRUNCATE:
			case PostgreSQLParserParser.TRUSTED:
			case PostgreSQLParserParser.TYPE:
			case PostgreSQLParserParser.UESCAPE:
			case PostgreSQLParserParser.UNBOUNDED:
			case PostgreSQLParserParser.UNCOMMITTED:
			case PostgreSQLParserParser.UNDER:
			case PostgreSQLParserParser.UNENCRYPTED:
			case PostgreSQLParserParser.UNKNOWN:
			case PostgreSQLParserParser.UNLISTEN:
			case PostgreSQLParserParser.UNNAMED:
			case PostgreSQLParserParser.UNNEST:
			case PostgreSQLParserParser.UNTIL:
			case PostgreSQLParserParser.UPDATE:
			case PostgreSQLParserParser.UPPER:
			case PostgreSQLParserParser.USAGE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
			case PostgreSQLParserParser.VACUUM:
			case PostgreSQLParserParser.VALID:
			case PostgreSQLParserParser.VALIDATOR:
			case PostgreSQLParserParser.VALUE:
			case PostgreSQLParserParser.VALUES:
			case PostgreSQLParserParser.VAR_POP:
			case PostgreSQLParserParser.VAR_SAMP:
			case PostgreSQLParserParser.VARCHAR:
			case PostgreSQLParserParser.VARYING:
			case PostgreSQLParserParser.VIEW:
			case PostgreSQLParserParser.VOLATILE:
			case PostgreSQLParserParser.WHENEVER:
			case PostgreSQLParserParser.WIDTH_BUCKET:
			case PostgreSQLParserParser.WITHIN:
			case PostgreSQLParserParser.WITHOUT:
			case PostgreSQLParserParser.WORK:
			case PostgreSQLParserParser.WRITE:
			case PostgreSQLParserParser.YEAR:
			case PostgreSQLParserParser.ZONE:
			case PostgreSQLParserParser.ABSTIME:
			case PostgreSQLParserParser.BIGSERIAL:
			case PostgreSQLParserParser.BIT_VARYING:
			case PostgreSQLParserParser.BOOL:
			case PostgreSQLParserParser.BOX:
			case PostgreSQLParserParser.BYTEA:
			case PostgreSQLParserParser.CHARACTER_VARYING:
			case PostgreSQLParserParser.CIDR:
			case PostgreSQLParserParser.CIRCLE:
			case PostgreSQLParserParser.FLOAT4:
			case PostgreSQLParserParser.FLOAT8:
			case PostgreSQLParserParser.INET:
			case PostgreSQLParserParser.INT2:
			case PostgreSQLParserParser.INT4:
			case PostgreSQLParserParser.INT8:
			case PostgreSQLParserParser.JSON:
			case PostgreSQLParserParser.JSONB:
			case PostgreSQLParserParser.LINE:
			case PostgreSQLParserParser.LSEG:
			case PostgreSQLParserParser.MACADDR:
			case PostgreSQLParserParser.MACADDR8:
			case PostgreSQLParserParser.MONEY:
			case PostgreSQLParserParser.PG_LSN:
			case PostgreSQLParserParser.POINT:
			case PostgreSQLParserParser.POLYGON:
			case PostgreSQLParserParser.RELTIME:
			case PostgreSQLParserParser.SERIAL:
			case PostgreSQLParserParser.SERIAL2:
			case PostgreSQLParserParser.SERIAL4:
			case PostgreSQLParserParser.SERIAL8:
			case PostgreSQLParserParser.SMALLSERIAL:
			case PostgreSQLParserParser.TEXT:
			case PostgreSQLParserParser.TIMESTAMPTZ:
			case PostgreSQLParserParser.TIMETZ:
			case PostgreSQLParserParser.TSQUERY:
			case PostgreSQLParserParser.TSVECTOR:
			case PostgreSQLParserParser.TXID_SNAPSHOT:
			case PostgreSQLParserParser.UUID:
			case PostgreSQLParserParser.VARBIT:
			case PostgreSQLParserParser.XML:
			case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
			case PostgreSQLParserParser.IDENTIFIER:
			case PostgreSQLParserParser.IDENTIFIER_UNICODE:
				{
				this.state = 4073;
				_localctx._constraints = this.identifier_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4076;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParserParser.DEFERRED || _la === PostgreSQLParserParser.IMMEDIATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_role_stmt(): Set_role_stmtContext {
		let _localctx: Set_role_stmtContext = new Set_role_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, PostgreSQLParserParser.RULE_set_role_stmt);
		let _la: number;
		try {
			this.state = 4089;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.SET:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4078;
				this.match(PostgreSQLParserParser.SET);
				this.state = 4080;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.LOCAL || _la === PostgreSQLParserParser.SESSION) {
					{
					this.state = 4079;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.LOCAL || _la === PostgreSQLParserParser.SESSION)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 4082;
				this.match(PostgreSQLParserParser.ROLE);
				this.state = 4085;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 454, this._ctx) ) {
				case 1:
					{
					this.state = 4083;
					_localctx._role_name_ = this.role_name();
					}
					break;

				case 2:
					{
					this.state = 4084;
					this.match(PostgreSQLParserParser.NONE);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.RESET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4087;
				this.match(PostgreSQLParserParser.RESET);
				this.state = 4088;
				this.match(PostgreSQLParserParser.ROLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_session_authorization_stmt(): Set_session_authorization_stmtContext {
		let _localctx: Set_session_authorization_stmtContext = new Set_session_authorization_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, PostgreSQLParserParser.RULE_set_session_authorization_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4091;
			this.todo_implement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transaction_mode(): Transaction_modeContext {
		let _localctx: Transaction_modeContext = new Transaction_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, PostgreSQLParserParser.RULE_transaction_mode);
		let _la: number;
		try {
			this.state = 4112;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 458, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4093;
				this.match(PostgreSQLParserParser.ISOLATION);
				this.state = 4094;
				this.match(PostgreSQLParserParser.LEVEL);
				this.state = 4102;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 456, this._ctx) ) {
				case 1:
					{
					this.state = 4095;
					this.match(PostgreSQLParserParser.SERIALIZABLE);
					}
					break;

				case 2:
					{
					this.state = 4096;
					this.match(PostgreSQLParserParser.REPEATABLE);
					this.state = 4097;
					this.match(PostgreSQLParserParser.READ);
					}
					break;

				case 3:
					{
					this.state = 4098;
					this.match(PostgreSQLParserParser.READ);
					this.state = 4099;
					this.match(PostgreSQLParserParser.COMMITTED);
					}
					break;

				case 4:
					{
					this.state = 4100;
					this.match(PostgreSQLParserParser.READ);
					this.state = 4101;
					this.match(PostgreSQLParserParser.UNCOMMITTED);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4104;
				this.match(PostgreSQLParserParser.READ);
				this.state = 4105;
				this.match(PostgreSQLParserParser.WRITE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4106;
				this.match(PostgreSQLParserParser.READ);
				this.state = 4107;
				this.match(PostgreSQLParserParser.ONLY);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4109;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.NOT) {
					{
					this.state = 4108;
					this.match(PostgreSQLParserParser.NOT);
					}
				}

				this.state = 4111;
				this.match(PostgreSQLParserParser.DEFERRABLE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transaction_mode_list(): Transaction_mode_listContext {
		let _localctx: Transaction_mode_listContext = new Transaction_mode_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, PostgreSQLParserParser.RULE_transaction_mode_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4114;
			this.transaction_mode();
			this.state = 4119;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 4115;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 4116;
				this.transaction_mode();
				}
				}
				this.state = 4121;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_transaction_stmt(): Set_transaction_stmtContext {
		let _localctx: Set_transaction_stmtContext = new Set_transaction_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, PostgreSQLParserParser.RULE_set_transaction_stmt);
		try {
			this.state = 4135;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 460, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4122;
				this.match(PostgreSQLParserParser.SET);
				this.state = 4123;
				this.match(PostgreSQLParserParser.TRANSACTION);
				this.state = 4124;
				this.transaction_mode_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4125;
				this.match(PostgreSQLParserParser.SET);
				this.state = 4126;
				this.match(PostgreSQLParserParser.TRANSACTION);
				this.state = 4127;
				this.match(PostgreSQLParserParser.SNAPSHOT);
				this.state = 4128;
				_localctx._snapshot_id = this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4129;
				this.match(PostgreSQLParserParser.SET);
				this.state = 4130;
				this.match(PostgreSQLParserParser.SESSION);
				this.state = 4131;
				this.match(PostgreSQLParserParser.CHARACTERISTICS);
				this.state = 4132;
				this.match(PostgreSQLParserParser.AS);
				this.state = 4133;
				this.match(PostgreSQLParserParser.TRANSACTION);
				this.state = 4134;
				this.transaction_mode_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public show_stmt(): Show_stmtContext {
		let _localctx: Show_stmtContext = new Show_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, PostgreSQLParserParser.RULE_show_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4137;
			this.match(PostgreSQLParserParser.SHOW);
			this.state = 4142;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 461, this._ctx) ) {
			case 1:
				{
				this.state = 4138;
				_localctx._name = this.identifier(0);
				}
				break;

			case 2:
				{
				this.state = 4139;
				this.match(PostgreSQLParserParser.TIME);
				this.state = 4140;
				this.match(PostgreSQLParserParser.ZONE);
				}
				break;

			case 3:
				{
				this.state = 4141;
				this.match(PostgreSQLParserParser.ALL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truncate_stmt(): Truncate_stmtContext {
		let _localctx: Truncate_stmtContext = new Truncate_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, PostgreSQLParserParser.RULE_truncate_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4144;
			this.match(PostgreSQLParserParser.TRUNCATE);
			this.state = 4146;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.TABLE) {
				{
				this.state = 4145;
				this.match(PostgreSQLParserParser.TABLE);
				}
			}

			this.state = 4149;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.ONLY) {
				{
				this.state = 4148;
				this.match(PostgreSQLParserParser.ONLY);
				}
			}

			this.state = 4151;
			this.table_name_();
			this.state = 4153;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.STAR) {
				{
				this.state = 4152;
				this.match(PostgreSQLParserParser.STAR);
				}
			}

			this.state = 4160;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.COMMA) {
				{
				this.state = 4155;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 4157;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ONLY) {
					{
					this.state = 4156;
					this.match(PostgreSQLParserParser.ONLY);
					}
				}

				this.state = 4159;
				this.identifier_list();
				}
			}

			this.state = 4164;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CONTINUE || _la === PostgreSQLParserParser.RESTART) {
				{
				this.state = 4162;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CONTINUE || _la === PostgreSQLParserParser.RESTART)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4163;
				this.match(PostgreSQLParserParser.IDENTITY);
				}
			}

			this.state = 4167;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT) {
				{
				this.state = 4166;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CASCADE || _la === PostgreSQLParserParser.RESTRICT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unlisten_stmt(): Unlisten_stmtContext {
		let _localctx: Unlisten_stmtContext = new Unlisten_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, PostgreSQLParserParser.RULE_unlisten_stmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4169;
			this.match(PostgreSQLParserParser.UNLISTEN);
			this.state = 4172;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.WHITESPACE:
			case PostgreSQLParserParser.A_:
			case PostgreSQLParserParser.ABORT:
			case PostgreSQLParserParser.ABS:
			case PostgreSQLParserParser.ABSOLUTE:
			case PostgreSQLParserParser.ACCESS:
			case PostgreSQLParserParser.ACTION:
			case PostgreSQLParserParser.ADA:
			case PostgreSQLParserParser.ADD:
			case PostgreSQLParserParser.ADMIN:
			case PostgreSQLParserParser.AFTER:
			case PostgreSQLParserParser.AGGREGATE:
			case PostgreSQLParserParser.ALLOCATE:
			case PostgreSQLParserParser.ALSO:
			case PostgreSQLParserParser.ALTER:
			case PostgreSQLParserParser.ALWAYS:
			case PostgreSQLParserParser.ANY:
			case PostgreSQLParserParser.ARE:
			case PostgreSQLParserParser.ASENSITIVE:
			case PostgreSQLParserParser.ASSERTION:
			case PostgreSQLParserParser.ASSIGNMENT:
			case PostgreSQLParserParser.AT:
			case PostgreSQLParserParser.ATOMIC:
			case PostgreSQLParserParser.ATTRIBUTE:
			case PostgreSQLParserParser.ATTRIBUTES:
			case PostgreSQLParserParser.AVG:
			case PostgreSQLParserParser.BACKWARD:
			case PostgreSQLParserParser.BEFORE:
			case PostgreSQLParserParser.BEGIN:
			case PostgreSQLParserParser.BERNOULLI:
			case PostgreSQLParserParser.BETWEEN:
			case PostgreSQLParserParser.BIGINT:
			case PostgreSQLParserParser.BIT:
			case PostgreSQLParserParser.BIT_LENGTH:
			case PostgreSQLParserParser.BLOB:
			case PostgreSQLParserParser.BOOLEAN:
			case PostgreSQLParserParser.BREADTH:
			case PostgreSQLParserParser.BY:
			case PostgreSQLParserParser.C_:
			case PostgreSQLParserParser.CACHE:
			case PostgreSQLParserParser.CALL:
			case PostgreSQLParserParser.CALLED:
			case PostgreSQLParserParser.CARDINALITY:
			case PostgreSQLParserParser.CASCADE:
			case PostgreSQLParserParser.CASCADED:
			case PostgreSQLParserParser.CATALOG:
			case PostgreSQLParserParser.CATALOG_NAME:
			case PostgreSQLParserParser.CEIL:
			case PostgreSQLParserParser.CEILING:
			case PostgreSQLParserParser.CHAIN:
			case PostgreSQLParserParser.CHAR:
			case PostgreSQLParserParser.CHAR_LENGTH:
			case PostgreSQLParserParser.CHARACTER:
			case PostgreSQLParserParser.CHARACTER_LENGTH:
			case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
			case PostgreSQLParserParser.CHARACTER_SET_NAME:
			case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
			case PostgreSQLParserParser.CHARACTERISTICS:
			case PostgreSQLParserParser.CHARACTERS:
			case PostgreSQLParserParser.CHECKPOINT:
			case PostgreSQLParserParser.CLASS:
			case PostgreSQLParserParser.CLASS_ORIGIN:
			case PostgreSQLParserParser.CLOB:
			case PostgreSQLParserParser.CLOSE:
			case PostgreSQLParserParser.CLUSTER:
			case PostgreSQLParserParser.COALESCE:
			case PostgreSQLParserParser.COBOL:
			case PostgreSQLParserParser.COLLATION_CATALOG:
			case PostgreSQLParserParser.COLLATION_NAME:
			case PostgreSQLParserParser.COLLATION_SCHEMA:
			case PostgreSQLParserParser.COLLECT:
			case PostgreSQLParserParser.COLUMN_NAME:
			case PostgreSQLParserParser.COMMAND_FUNCTION:
			case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
			case PostgreSQLParserParser.COMMENT:
			case PostgreSQLParserParser.COMMIT:
			case PostgreSQLParserParser.COMMITTED:
			case PostgreSQLParserParser.CONDITION:
			case PostgreSQLParserParser.CONDITION_NUMBER:
			case PostgreSQLParserParser.CONNECT:
			case PostgreSQLParserParser.CONNECTION:
			case PostgreSQLParserParser.CONNECTION_NAME:
			case PostgreSQLParserParser.CONSTRAINT_CATALOG:
			case PostgreSQLParserParser.CONSTRAINT_NAME:
			case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
			case PostgreSQLParserParser.CONSTRAINTS:
			case PostgreSQLParserParser.CONSTRUCTOR:
			case PostgreSQLParserParser.CONTAINS:
			case PostgreSQLParserParser.CONTINUE:
			case PostgreSQLParserParser.CONVERSION:
			case PostgreSQLParserParser.CONVERT:
			case PostgreSQLParserParser.COPY:
			case PostgreSQLParserParser.CORR:
			case PostgreSQLParserParser.CORRESPONDING:
			case PostgreSQLParserParser.COUNT:
			case PostgreSQLParserParser.COVAR_POP:
			case PostgreSQLParserParser.COVAR_SAMP:
			case PostgreSQLParserParser.CSV:
			case PostgreSQLParserParser.CUBE:
			case PostgreSQLParserParser.CUME_DIST:
			case PostgreSQLParserParser.CURRENT:
			case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
			case PostgreSQLParserParser.CURRENT_PATH:
			case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case PostgreSQLParserParser.CURSOR:
			case PostgreSQLParserParser.CURSOR_NAME:
			case PostgreSQLParserParser.CYCLE:
			case PostgreSQLParserParser.DATA:
			case PostgreSQLParserParser.DATABASE:
			case PostgreSQLParserParser.DATE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
			case PostgreSQLParserParser.DAY:
			case PostgreSQLParserParser.DEALLOCATE:
			case PostgreSQLParserParser.DEC:
			case PostgreSQLParserParser.DECIMAL:
			case PostgreSQLParserParser.DECLARE:
			case PostgreSQLParserParser.DEFAULTS:
			case PostgreSQLParserParser.DEFERRED:
			case PostgreSQLParserParser.DEFINED:
			case PostgreSQLParserParser.DEFINER:
			case PostgreSQLParserParser.DEGREE:
			case PostgreSQLParserParser.DELETE:
			case PostgreSQLParserParser.DELIMITER:
			case PostgreSQLParserParser.DELIMITERS:
			case PostgreSQLParserParser.DENSE_RANK:
			case PostgreSQLParserParser.DEPTH:
			case PostgreSQLParserParser.DEREF:
			case PostgreSQLParserParser.DERIVED:
			case PostgreSQLParserParser.DESCRIBE:
			case PostgreSQLParserParser.DESCRIPTOR:
			case PostgreSQLParserParser.DETERMINISTIC:
			case PostgreSQLParserParser.DIAGNOSTICS:
			case PostgreSQLParserParser.DICTIONARY:
			case PostgreSQLParserParser.DISCONNECT:
			case PostgreSQLParserParser.DISPATCH:
			case PostgreSQLParserParser.DOMAIN:
			case PostgreSQLParserParser.DOUBLE:
			case PostgreSQLParserParser.DYNAMIC:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
			case PostgreSQLParserParser.EACH:
			case PostgreSQLParserParser.ELEMENT:
			case PostgreSQLParserParser.ENCODING:
			case PostgreSQLParserParser.ENCRYPTED:
			case PostgreSQLParserParser.END:
			case PostgreSQLParserParser.EQUALS:
			case PostgreSQLParserParser.ESCAPE:
			case PostgreSQLParserParser.EVERY:
			case PostgreSQLParserParser.EXCEPTION:
			case PostgreSQLParserParser.EXCLUDE:
			case PostgreSQLParserParser.EXCLUDING:
			case PostgreSQLParserParser.EXCLUSIVE:
			case PostgreSQLParserParser.EXEC:
			case PostgreSQLParserParser.EXECUTE:
			case PostgreSQLParserParser.EXISTS:
			case PostgreSQLParserParser.EXP:
			case PostgreSQLParserParser.EXPLAIN:
			case PostgreSQLParserParser.EXTENSION:
			case PostgreSQLParserParser.EXTERNAL:
			case PostgreSQLParserParser.EXTRACT:
			case PostgreSQLParserParser.FILTER:
			case PostgreSQLParserParser.FINAL:
			case PostgreSQLParserParser.FIRST:
			case PostgreSQLParserParser.FLOAT:
			case PostgreSQLParserParser.FLOOR:
			case PostgreSQLParserParser.FOLLOWING:
			case PostgreSQLParserParser.FORCE:
			case PostgreSQLParserParser.FORMAT:
			case PostgreSQLParserParser.FORTRAN:
			case PostgreSQLParserParser.FORWARD:
			case PostgreSQLParserParser.FOUND:
			case PostgreSQLParserParser.FREE:
			case PostgreSQLParserParser.FUNCTION:
			case PostgreSQLParserParser.FUSION:
			case PostgreSQLParserParser.G_:
			case PostgreSQLParserParser.GENERAL:
			case PostgreSQLParserParser.GENERATED:
			case PostgreSQLParserParser.GET:
			case PostgreSQLParserParser.GLOBAL:
			case PostgreSQLParserParser.GO:
			case PostgreSQLParserParser.GOTO:
			case PostgreSQLParserParser.GRANTED:
			case PostgreSQLParserParser.GREATEST:
			case PostgreSQLParserParser.GROUPING:
			case PostgreSQLParserParser.HANDLER:
			case PostgreSQLParserParser.HIERARCHY:
			case PostgreSQLParserParser.HOLD:
			case PostgreSQLParserParser.HOST:
			case PostgreSQLParserParser.HOUR:
			case PostgreSQLParserParser.IDENTITY:
			case PostgreSQLParserParser.IGNORE:
			case PostgreSQLParserParser.IMMEDIATE:
			case PostgreSQLParserParser.IMMUTABLE:
			case PostgreSQLParserParser.IMPLEMENTATION:
			case PostgreSQLParserParser.IMPLICIT:
			case PostgreSQLParserParser.INCLUDING:
			case PostgreSQLParserParser.INCREMENT:
			case PostgreSQLParserParser.INDEX:
			case PostgreSQLParserParser.INDICATOR:
			case PostgreSQLParserParser.INHERITS:
			case PostgreSQLParserParser.INOUT:
			case PostgreSQLParserParser.INPUT:
			case PostgreSQLParserParser.INSENSITIVE:
			case PostgreSQLParserParser.INSERT:
			case PostgreSQLParserParser.INSTANCE:
			case PostgreSQLParserParser.INSTANTIABLE:
			case PostgreSQLParserParser.INSTEAD:
			case PostgreSQLParserParser.INT:
			case PostgreSQLParserParser.INTEGER:
			case PostgreSQLParserParser.INTERSECTION:
			case PostgreSQLParserParser.INTERVAL:
			case PostgreSQLParserParser.INVOKER:
			case PostgreSQLParserParser.ISOLATION:
			case PostgreSQLParserParser.K_:
			case PostgreSQLParserParser.KEY:
			case PostgreSQLParserParser.KEY_MEMBER:
			case PostgreSQLParserParser.KEY_TYPE:
			case PostgreSQLParserParser.LANGUAGE:
			case PostgreSQLParserParser.LARGE:
			case PostgreSQLParserParser.LAST:
			case PostgreSQLParserParser.LEAST:
			case PostgreSQLParserParser.LEFT:
			case PostgreSQLParserParser.LENGTH:
			case PostgreSQLParserParser.LEVEL:
			case PostgreSQLParserParser.LISTEN:
			case PostgreSQLParserParser.LN:
			case PostgreSQLParserParser.LOAD:
			case PostgreSQLParserParser.LOCAL:
			case PostgreSQLParserParser.LOCATION:
			case PostgreSQLParserParser.LOCATOR:
			case PostgreSQLParserParser.LOCK:
			case PostgreSQLParserParser.LOCKED:
			case PostgreSQLParserParser.LOWER:
			case PostgreSQLParserParser.M_:
			case PostgreSQLParserParser.MAP:
			case PostgreSQLParserParser.MATCH:
			case PostgreSQLParserParser.MATCHED:
			case PostgreSQLParserParser.MAX:
			case PostgreSQLParserParser.MAXVALUE:
			case PostgreSQLParserParser.MEMBER:
			case PostgreSQLParserParser.MERGE:
			case PostgreSQLParserParser.MESSAGE_LENGTH:
			case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
			case PostgreSQLParserParser.MESSAGE_TEXT:
			case PostgreSQLParserParser.METHOD:
			case PostgreSQLParserParser.MIN:
			case PostgreSQLParserParser.MINUTE:
			case PostgreSQLParserParser.MINVALUE:
			case PostgreSQLParserParser.MOD:
			case PostgreSQLParserParser.MODE:
			case PostgreSQLParserParser.MODIFIES:
			case PostgreSQLParserParser.MODULE:
			case PostgreSQLParserParser.MONTH:
			case PostgreSQLParserParser.MORE_:
			case PostgreSQLParserParser.MOVE:
			case PostgreSQLParserParser.MULTISET:
			case PostgreSQLParserParser.MUMPS:
			case PostgreSQLParserParser.NAME:
			case PostgreSQLParserParser.NAMES:
			case PostgreSQLParserParser.NATIONAL:
			case PostgreSQLParserParser.NCHAR:
			case PostgreSQLParserParser.NCLOB:
			case PostgreSQLParserParser.NESTING:
			case PostgreSQLParserParser.NEW:
			case PostgreSQLParserParser.NEXT:
			case PostgreSQLParserParser.NO:
			case PostgreSQLParserParser.NONE:
			case PostgreSQLParserParser.NORMALIZE:
			case PostgreSQLParserParser.NORMALIZED:
			case PostgreSQLParserParser.NOTHING:
			case PostgreSQLParserParser.NOTIFY:
			case PostgreSQLParserParser.NOWAIT:
			case PostgreSQLParserParser.NULLABLE:
			case PostgreSQLParserParser.NULLIF:
			case PostgreSQLParserParser.NULLS:
			case PostgreSQLParserParser.NUMBER:
			case PostgreSQLParserParser.NUMERIC:
			case PostgreSQLParserParser.OBJECT:
			case PostgreSQLParserParser.OCTET_LENGTH:
			case PostgreSQLParserParser.OCTETS:
			case PostgreSQLParserParser.OF:
			case PostgreSQLParserParser.OFF:
			case PostgreSQLParserParser.OIDS:
			case PostgreSQLParserParser.OLD:
			case PostgreSQLParserParser.OPEN:
			case PostgreSQLParserParser.OPERATOR:
			case PostgreSQLParserParser.OPTION:
			case PostgreSQLParserParser.OPTIONS:
			case PostgreSQLParserParser.ORDERING:
			case PostgreSQLParserParser.ORDINALITY:
			case PostgreSQLParserParser.OTHERS:
			case PostgreSQLParserParser.OUT:
			case PostgreSQLParserParser.OUTPUT:
			case PostgreSQLParserParser.OVER:
			case PostgreSQLParserParser.OVERLAY:
			case PostgreSQLParserParser.OVERRIDING:
			case PostgreSQLParserParser.OWNER:
			case PostgreSQLParserParser.PAD:
			case PostgreSQLParserParser.PARAMETER:
			case PostgreSQLParserParser.PARAMETER_MODE:
			case PostgreSQLParserParser.PARAMETER_NAME:
			case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
			case PostgreSQLParserParser.PARTIAL:
			case PostgreSQLParserParser.PARTITION:
			case PostgreSQLParserParser.PASCAL:
			case PostgreSQLParserParser.PASSWORD:
			case PostgreSQLParserParser.PATH:
			case PostgreSQLParserParser.PERCENT_RANK:
			case PostgreSQLParserParser.PERCENTILE_CONT:
			case PostgreSQLParserParser.PERCENTILE_DISC:
			case PostgreSQLParserParser.PLAIN:
			case PostgreSQLParserParser.PLI:
			case PostgreSQLParserParser.POSITION:
			case PostgreSQLParserParser.POWER:
			case PostgreSQLParserParser.PRECEDING:
			case PostgreSQLParserParser.PRECISION:
			case PostgreSQLParserParser.PREPARE:
			case PostgreSQLParserParser.PRESERVE:
			case PostgreSQLParserParser.PRIOR:
			case PostgreSQLParserParser.PRIVILEGES:
			case PostgreSQLParserParser.PROCEDURAL:
			case PostgreSQLParserParser.PROCEDURE:
			case PostgreSQLParserParser.PUBLIC:
			case PostgreSQLParserParser.QUOTE:
			case PostgreSQLParserParser.RANGE:
			case PostgreSQLParserParser.RANK:
			case PostgreSQLParserParser.READ:
			case PostgreSQLParserParser.READS:
			case PostgreSQLParserParser.REAL:
			case PostgreSQLParserParser.RECHECK:
			case PostgreSQLParserParser.RECURSIVE:
			case PostgreSQLParserParser.REF:
			case PostgreSQLParserParser.REFERENCING:
			case PostgreSQLParserParser.REFRESH:
			case PostgreSQLParserParser.REGR_AVGX:
			case PostgreSQLParserParser.REGR_AVGY:
			case PostgreSQLParserParser.REGR_COUNT:
			case PostgreSQLParserParser.REGR_INTERCEPT:
			case PostgreSQLParserParser.REGR_SLOPE:
			case PostgreSQLParserParser.REGR_SXX:
			case PostgreSQLParserParser.REGR_SXY:
			case PostgreSQLParserParser.REGR_SYY:
			case PostgreSQLParserParser.REINDEX:
			case PostgreSQLParserParser.RELATIVE:
			case PostgreSQLParserParser.RELEASE:
			case PostgreSQLParserParser.RENAME:
			case PostgreSQLParserParser.REPEATABLE:
			case PostgreSQLParserParser.REPLACE:
			case PostgreSQLParserParser.RESET:
			case PostgreSQLParserParser.RESTART:
			case PostgreSQLParserParser.RESTRICT:
			case PostgreSQLParserParser.RESULT:
			case PostgreSQLParserParser.RETURN:
			case PostgreSQLParserParser.RETURNED_CARDINALITY:
			case PostgreSQLParserParser.RETURNED_LENGTH:
			case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
			case PostgreSQLParserParser.RETURNED_SQLSTATE:
			case PostgreSQLParserParser.RETURNS:
			case PostgreSQLParserParser.REVOKE:
			case PostgreSQLParserParser.RIGHT:
			case PostgreSQLParserParser.ROLE:
			case PostgreSQLParserParser.ROLLBACK:
			case PostgreSQLParserParser.ROLLUP:
			case PostgreSQLParserParser.ROUTINE:
			case PostgreSQLParserParser.ROUTINE_CATALOG:
			case PostgreSQLParserParser.ROUTINE_NAME:
			case PostgreSQLParserParser.ROUTINE_SCHEMA:
			case PostgreSQLParserParser.ROW:
			case PostgreSQLParserParser.ROW_COUNT:
			case PostgreSQLParserParser.ROW_NUMBER:
			case PostgreSQLParserParser.ROWS:
			case PostgreSQLParserParser.RULE:
			case PostgreSQLParserParser.SAVEPOINT:
			case PostgreSQLParserParser.SCALE:
			case PostgreSQLParserParser.SCHEMA:
			case PostgreSQLParserParser.SCHEMA_NAME:
			case PostgreSQLParserParser.SCOPE:
			case PostgreSQLParserParser.SCOPE_CATALOG:
			case PostgreSQLParserParser.SCOPE_NAME:
			case PostgreSQLParserParser.SCOPE_SCHEMA:
			case PostgreSQLParserParser.SCROLL:
			case PostgreSQLParserParser.SEARCH:
			case PostgreSQLParserParser.SECOND:
			case PostgreSQLParserParser.SECTION:
			case PostgreSQLParserParser.SECURITY:
			case PostgreSQLParserParser.SELF:
			case PostgreSQLParserParser.SENSITIVE:
			case PostgreSQLParserParser.SEQUENCE:
			case PostgreSQLParserParser.SEQUENCES:
			case PostgreSQLParserParser.SERIALIZABLE:
			case PostgreSQLParserParser.SERVER_NAME:
			case PostgreSQLParserParser.SESSION:
			case PostgreSQLParserParser.SET:
			case PostgreSQLParserParser.SETOF:
			case PostgreSQLParserParser.SETS:
			case PostgreSQLParserParser.SHARE:
			case PostgreSQLParserParser.SHOW:
			case PostgreSQLParserParser.SIMPLE:
			case PostgreSQLParserParser.SIZE:
			case PostgreSQLParserParser.SMALLINT:
			case PostgreSQLParserParser.SOME:
			case PostgreSQLParserParser.SOURCE:
			case PostgreSQLParserParser.SPACE:
			case PostgreSQLParserParser.SPECIFIC:
			case PostgreSQLParserParser.SPECIFIC_NAME:
			case PostgreSQLParserParser.SPECIFICTYPE:
			case PostgreSQLParserParser.SQL:
			case PostgreSQLParserParser.SQLCODE:
			case PostgreSQLParserParser.SQLERROR:
			case PostgreSQLParserParser.SQLEXCEPTION:
			case PostgreSQLParserParser.SQLSTATE:
			case PostgreSQLParserParser.SQLWARNING:
			case PostgreSQLParserParser.SQRT:
			case PostgreSQLParserParser.STABLE:
			case PostgreSQLParserParser.START:
			case PostgreSQLParserParser.STATE:
			case PostgreSQLParserParser.STATEMENT:
			case PostgreSQLParserParser.STATIC:
			case PostgreSQLParserParser.STATISTICS:
			case PostgreSQLParserParser.STDDEV_POP:
			case PostgreSQLParserParser.STDDEV_SAMP:
			case PostgreSQLParserParser.STDIN:
			case PostgreSQLParserParser.STDOUT:
			case PostgreSQLParserParser.STORAGE:
			case PostgreSQLParserParser.STRICT:
			case PostgreSQLParserParser.STRUCTURE:
			case PostgreSQLParserParser.STYLE:
			case PostgreSQLParserParser.SUBCLASS_ORIGIN:
			case PostgreSQLParserParser.SUBMULTISET:
			case PostgreSQLParserParser.SUBSTRING:
			case PostgreSQLParserParser.SUM:
			case PostgreSQLParserParser.SYSID:
			case PostgreSQLParserParser.SYSTEM:
			case PostgreSQLParserParser.SYSTEM_USER:
			case PostgreSQLParserParser.TABLE_NAME:
			case PostgreSQLParserParser.TABLESPACE:
			case PostgreSQLParserParser.TEMP:
			case PostgreSQLParserParser.TEMPLATE:
			case PostgreSQLParserParser.TEMPORARY:
			case PostgreSQLParserParser.TIES:
			case PostgreSQLParserParser.TIME:
			case PostgreSQLParserParser.TIMESTAMP:
			case PostgreSQLParserParser.TIMEZONE_HOUR:
			case PostgreSQLParserParser.TIMEZONE_MINUTE:
			case PostgreSQLParserParser.TOP_LEVEL_COUNT:
			case PostgreSQLParserParser.TRANSACTION:
			case PostgreSQLParserParser.TRANSACTION_ACTIVE:
			case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
			case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
			case PostgreSQLParserParser.TRANSFORM:
			case PostgreSQLParserParser.TRANSFORMS:
			case PostgreSQLParserParser.TRANSLATE:
			case PostgreSQLParserParser.TRANSLATION:
			case PostgreSQLParserParser.TREAT:
			case PostgreSQLParserParser.TRIGGER:
			case PostgreSQLParserParser.TRIGGER_CATALOG:
			case PostgreSQLParserParser.TRIGGER_NAME:
			case PostgreSQLParserParser.TRIGGER_SCHEMA:
			case PostgreSQLParserParser.TRIM:
			case PostgreSQLParserParser.TRUE:
			case PostgreSQLParserParser.TRUNCATE:
			case PostgreSQLParserParser.TRUSTED:
			case PostgreSQLParserParser.TYPE:
			case PostgreSQLParserParser.UESCAPE:
			case PostgreSQLParserParser.UNBOUNDED:
			case PostgreSQLParserParser.UNCOMMITTED:
			case PostgreSQLParserParser.UNDER:
			case PostgreSQLParserParser.UNENCRYPTED:
			case PostgreSQLParserParser.UNKNOWN:
			case PostgreSQLParserParser.UNLISTEN:
			case PostgreSQLParserParser.UNNAMED:
			case PostgreSQLParserParser.UNNEST:
			case PostgreSQLParserParser.UNTIL:
			case PostgreSQLParserParser.UPDATE:
			case PostgreSQLParserParser.UPPER:
			case PostgreSQLParserParser.USAGE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
			case PostgreSQLParserParser.VACUUM:
			case PostgreSQLParserParser.VALID:
			case PostgreSQLParserParser.VALIDATOR:
			case PostgreSQLParserParser.VALUE:
			case PostgreSQLParserParser.VALUES:
			case PostgreSQLParserParser.VAR_POP:
			case PostgreSQLParserParser.VAR_SAMP:
			case PostgreSQLParserParser.VARCHAR:
			case PostgreSQLParserParser.VARYING:
			case PostgreSQLParserParser.VIEW:
			case PostgreSQLParserParser.VOLATILE:
			case PostgreSQLParserParser.WHENEVER:
			case PostgreSQLParserParser.WIDTH_BUCKET:
			case PostgreSQLParserParser.WITHIN:
			case PostgreSQLParserParser.WITHOUT:
			case PostgreSQLParserParser.WORK:
			case PostgreSQLParserParser.WRITE:
			case PostgreSQLParserParser.YEAR:
			case PostgreSQLParserParser.ZONE:
			case PostgreSQLParserParser.ABSTIME:
			case PostgreSQLParserParser.BIGSERIAL:
			case PostgreSQLParserParser.BIT_VARYING:
			case PostgreSQLParserParser.BOOL:
			case PostgreSQLParserParser.BOX:
			case PostgreSQLParserParser.BYTEA:
			case PostgreSQLParserParser.CHARACTER_VARYING:
			case PostgreSQLParserParser.CIDR:
			case PostgreSQLParserParser.CIRCLE:
			case PostgreSQLParserParser.FLOAT4:
			case PostgreSQLParserParser.FLOAT8:
			case PostgreSQLParserParser.INET:
			case PostgreSQLParserParser.INT2:
			case PostgreSQLParserParser.INT4:
			case PostgreSQLParserParser.INT8:
			case PostgreSQLParserParser.JSON:
			case PostgreSQLParserParser.JSONB:
			case PostgreSQLParserParser.LINE:
			case PostgreSQLParserParser.LSEG:
			case PostgreSQLParserParser.MACADDR:
			case PostgreSQLParserParser.MACADDR8:
			case PostgreSQLParserParser.MONEY:
			case PostgreSQLParserParser.PG_LSN:
			case PostgreSQLParserParser.POINT:
			case PostgreSQLParserParser.POLYGON:
			case PostgreSQLParserParser.RELTIME:
			case PostgreSQLParserParser.SERIAL:
			case PostgreSQLParserParser.SERIAL2:
			case PostgreSQLParserParser.SERIAL4:
			case PostgreSQLParserParser.SERIAL8:
			case PostgreSQLParserParser.SMALLSERIAL:
			case PostgreSQLParserParser.TEXT:
			case PostgreSQLParserParser.TIMESTAMPTZ:
			case PostgreSQLParserParser.TIMETZ:
			case PostgreSQLParserParser.TSQUERY:
			case PostgreSQLParserParser.TSVECTOR:
			case PostgreSQLParserParser.TXID_SNAPSHOT:
			case PostgreSQLParserParser.UUID:
			case PostgreSQLParserParser.VARBIT:
			case PostgreSQLParserParser.XML:
			case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
			case PostgreSQLParserParser.IDENTIFIER:
			case PostgreSQLParserParser.IDENTIFIER_UNICODE:
				{
				this.state = 4170;
				_localctx._channel = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.STAR:
				{
				this.state = 4171;
				this.match(PostgreSQLParserParser.STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public update_stmt(): Update_stmtContext {
		let _localctx: Update_stmtContext = new Update_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, PostgreSQLParserParser.RULE_update_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4175;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 4174;
				this.with_clause();
				}
			}

			this.state = 4177;
			this.match(PostgreSQLParserParser.UPDATE);
			this.state = 4179;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.ONLY) {
				{
				this.state = 4178;
				this.match(PostgreSQLParserParser.ONLY);
				}
			}

			this.state = 4181;
			this.table_name_();
			this.state = 4183;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.STAR) {
				{
				this.state = 4182;
				this.match(PostgreSQLParserParser.STAR);
				}
			}

			this.state = 4189;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 474, this._ctx) ) {
			case 1:
				{
				this.state = 4186;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.AS) {
					{
					this.state = 4185;
					this.match(PostgreSQLParserParser.AS);
					}
				}

				this.state = 4188;
				_localctx._alias_ = this.identifier(0);
				}
				break;
			}
			this.state = 4191;
			this.match(PostgreSQLParserParser.SET);
			this.state = 4192;
			this.updater_clause();
			this.state = 4194;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.FROM) {
				{
				this.state = 4193;
				this.from_clause();
				}
			}

			this.state = 4201;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 476, this._ctx) ) {
			case 1:
				{
				this.state = 4196;
				this.where_clause();
				}
				break;

			case 2:
				{
				{
				this.state = 4197;
				this.match(PostgreSQLParserParser.WHERE);
				this.state = 4198;
				this.match(PostgreSQLParserParser.CURRENT);
				this.state = 4199;
				this.match(PostgreSQLParserParser.OF);
				this.state = 4200;
				_localctx._cursor_name_ = this.identifier(0);
				}
				}
				break;
			}
			this.state = 4204;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.RETURNING) {
				{
				this.state = 4203;
				this.returning_clause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vacuum_opt(): Vacuum_optContext {
		let _localctx: Vacuum_optContext = new Vacuum_optContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, PostgreSQLParserParser.RULE_vacuum_opt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4206;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParserParser.ANALYZE || _la === PostgreSQLParserParser.DISABLE_PAGE_SKIPPING || _la === PostgreSQLParserParser.FREEZE || _la === PostgreSQLParserParser.FULL || _la === PostgreSQLParserParser.VERBOSE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vacuum_opt_list(): Vacuum_opt_listContext {
		let _localctx: Vacuum_opt_listContext = new Vacuum_opt_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, PostgreSQLParserParser.RULE_vacuum_opt_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4208;
			this.vacuum_opt();
			this.state = 4213;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 4209;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 4210;
				this.vacuum_opt();
				}
				}
				this.state = 4215;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vacuum_stmt(): Vacuum_stmtContext {
		let _localctx: Vacuum_stmtContext = new Vacuum_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, PostgreSQLParserParser.RULE_vacuum_stmt);
		let _la: number;
		try {
			this.state = 4263;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 490, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4216;
				this.match(PostgreSQLParserParser.VACUUM);
				this.state = 4221;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.OPEN_PAREN) {
					{
					this.state = 4217;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4218;
					this.vacuum_opt_list();
					this.state = 4219;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
				}

				{
				this.state = 4223;
				_localctx._table_name = this.table_name_();
				this.state = 4228;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.OPEN_PAREN) {
					{
					this.state = 4224;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4225;
					this.column_list();
					this.state = 4226;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
				}

				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4230;
				this.match(PostgreSQLParserParser.VACUUM);
				this.state = 4232;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.FULL) {
					{
					this.state = 4231;
					this.match(PostgreSQLParserParser.FULL);
					}
				}

				this.state = 4235;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.FREEZE) {
					{
					this.state = 4234;
					this.match(PostgreSQLParserParser.FREEZE);
					}
				}

				this.state = 4238;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.VERBOSE) {
					{
					this.state = 4237;
					this.match(PostgreSQLParserParser.VERBOSE);
					}
				}

				this.state = 4241;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0)) {
					{
					this.state = 4240;
					_localctx._table_name = this.table_name_();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4243;
				this.match(PostgreSQLParserParser.VACUUM);
				this.state = 4245;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.FULL) {
					{
					this.state = 4244;
					this.match(PostgreSQLParserParser.FULL);
					}
				}

				this.state = 4248;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.FREEZE) {
					{
					this.state = 4247;
					this.match(PostgreSQLParserParser.FREEZE);
					}
				}

				this.state = 4251;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.VERBOSE) {
					{
					this.state = 4250;
					this.match(PostgreSQLParserParser.VERBOSE);
					}
				}

				this.state = 4253;
				this.match(PostgreSQLParserParser.ANALYZE);
				this.state = 4261;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0)) {
					{
					this.state = 4254;
					_localctx._table_name = this.table_name_();
					this.state = 4259;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParserParser.OPEN_PAREN) {
						{
						this.state = 4255;
						this.match(PostgreSQLParserParser.OPEN_PAREN);
						this.state = 4256;
						this.column_list();
						this.state = 4257;
						this.match(PostgreSQLParserParser.CLOSE_PAREN);
						}
					}

					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public values_stmt(): Values_stmtContext {
		let _localctx: Values_stmtContext = new Values_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, PostgreSQLParserParser.RULE_values_stmt);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4266;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 4265;
				this.with_clause();
				}
			}

			this.state = 4283;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.VALUES:
				{
				{
				this.state = 4268;
				this.match(PostgreSQLParserParser.VALUES);
				this.state = 4269;
				this.expr_list_list();
				}
				}
				break;
			case PostgreSQLParserParser.OPEN_PAREN:
				{
				{
				this.state = 4271;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4270;
						this.match(PostgreSQLParserParser.OPEN_PAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4273;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 492, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 4275;
				this.values_stmt();
				this.state = 4277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4276;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					}
					this.state = 4279;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 4281;
				this.combine_clause();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4286;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 495, this._ctx) ) {
			case 1:
				{
				this.state = 4285;
				this.order_by_clause();
				}
				break;
			}
			this.state = 4289;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 496, this._ctx) ) {
			case 1:
				{
				this.state = 4288;
				this.combine_clause();
				}
				break;
			}
			this.state = 4292;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 497, this._ctx) ) {
			case 1:
				{
				this.state = 4291;
				this.limit_clause();
				}
				break;
			}
			this.state = 4295;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 498, this._ctx) ) {
			case 1:
				{
				this.state = 4294;
				this.offset_clause();
				}
				break;
			}
			this.state = 4298;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 499, this._ctx) ) {
			case 1:
				{
				this.state = 4297;
				this.fetch_clause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selector_clause(): Selector_clauseContext {
		let _localctx: Selector_clauseContext = new Selector_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, PostgreSQLParserParser.RULE_selector_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4306;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 501, this._ctx) ) {
			case 1:
				{
				this.state = 4300;
				this.match(PostgreSQLParserParser.ALL);
				}
				break;

			case 2:
				{
				{
				this.state = 4301;
				this.match(PostgreSQLParserParser.DISTINCT);
				this.state = 4304;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ON) {
					{
					this.state = 4302;
					this.match(PostgreSQLParserParser.ON);
					this.state = 4303;
					this.expr_list();
					}
				}

				}
				}
				break;
			}
			this.state = 4308;
			this.column_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_clause(): From_clauseContext {
		let _localctx: From_clauseContext = new From_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, PostgreSQLParserParser.RULE_from_clause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4310;
			this.match(PostgreSQLParserParser.FROM);
			this.state = 4311;
			this.from_item(0);
			this.state = 4316;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4312;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 4313;
					this.from_item(0);
					}
					}
				}
				this.state = 4318;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 502, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public where_clause(): Where_clauseContext {
		let _localctx: Where_clauseContext = new Where_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, PostgreSQLParserParser.RULE_where_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4319;
			this.match(PostgreSQLParserParser.WHERE);
			this.state = 4320;
			this.predicate(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_by_clause(): Group_by_clauseContext {
		let _localctx: Group_by_clauseContext = new Group_by_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, PostgreSQLParserParser.RULE_group_by_clause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4322;
			this.match(PostgreSQLParserParser.GROUP);
			this.state = 4323;
			this.match(PostgreSQLParserParser.BY);
			this.state = 4324;
			this.grouping_elem();
			this.state = 4329;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 503, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4325;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 4326;
					this.grouping_elem();
					}
					}
				}
				this.state = 4331;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 503, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grouping_elem(): Grouping_elemContext {
		let _localctx: Grouping_elemContext = new Grouping_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, PostgreSQLParserParser.RULE_grouping_elem);
		let _la: number;
		try {
			this.state = 4357;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 507, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4332;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 4333;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4334;
				this.expr(0);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4335;
				this.expr_list();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4336;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.CUBE || _la === PostgreSQLParserParser.ROLLUP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4337;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 4340;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 504, this._ctx) ) {
				case 1:
					{
					this.state = 4338;
					this.expr(0);
					}
					break;

				case 2:
					{
					this.state = 4339;
					this.expr_list();
					}
					break;
				}
				this.state = 4349;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PostgreSQLParserParser.COMMA) {
					{
					{
					this.state = 4342;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 4345;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 505, this._ctx) ) {
					case 1:
						{
						this.state = 4343;
						this.expr(0);
						}
						break;

					case 2:
						{
						this.state = 4344;
						this.expr_list();
						}
						break;
					}
					}
					}
					this.state = 4351;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4352;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4354;
				this.match(PostgreSQLParserParser.GROUPING);
				this.state = 4355;
				this.match(PostgreSQLParserParser.SETS);
				this.state = 4356;
				this.grouping_elem_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grouping_elem_list(): Grouping_elem_listContext {
		let _localctx: Grouping_elem_listContext = new Grouping_elem_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, PostgreSQLParserParser.RULE_grouping_elem_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4359;
			this.match(PostgreSQLParserParser.OPEN_PAREN);
			this.state = 4360;
			this.grouping_elem();
			this.state = 4365;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 4361;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 4362;
				this.grouping_elem();
				}
				}
				this.state = 4367;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4368;
			this.match(PostgreSQLParserParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public having_clause(): Having_clauseContext {
		let _localctx: Having_clauseContext = new Having_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, PostgreSQLParserParser.RULE_having_clause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4370;
			this.match(PostgreSQLParserParser.HAVING);
			this.state = 4371;
			this.predicate(0);
			this.state = 4376;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 509, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4372;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 4373;
					this.predicate(0);
					}
					}
				}
				this.state = 4378;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 509, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_list(): Column_listContext {
		let _localctx: Column_listContext = new Column_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, PostgreSQLParserParser.RULE_column_list);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4387;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.WHITESPACE:
			case PostgreSQLParserParser.A_:
			case PostgreSQLParserParser.ABORT:
			case PostgreSQLParserParser.ABS:
			case PostgreSQLParserParser.ABSOLUTE:
			case PostgreSQLParserParser.ACCESS:
			case PostgreSQLParserParser.ACTION:
			case PostgreSQLParserParser.ADA:
			case PostgreSQLParserParser.ADD:
			case PostgreSQLParserParser.ADMIN:
			case PostgreSQLParserParser.AFTER:
			case PostgreSQLParserParser.AGGREGATE:
			case PostgreSQLParserParser.ALL:
			case PostgreSQLParserParser.ALLOCATE:
			case PostgreSQLParserParser.ALSO:
			case PostgreSQLParserParser.ALTER:
			case PostgreSQLParserParser.ALWAYS:
			case PostgreSQLParserParser.ANY:
			case PostgreSQLParserParser.ARE:
			case PostgreSQLParserParser.ARRAY:
			case PostgreSQLParserParser.ASENSITIVE:
			case PostgreSQLParserParser.ASSERTION:
			case PostgreSQLParserParser.ASSIGNMENT:
			case PostgreSQLParserParser.AT:
			case PostgreSQLParserParser.ATOMIC:
			case PostgreSQLParserParser.ATTRIBUTE:
			case PostgreSQLParserParser.ATTRIBUTES:
			case PostgreSQLParserParser.AVG:
			case PostgreSQLParserParser.BACKWARD:
			case PostgreSQLParserParser.BEFORE:
			case PostgreSQLParserParser.BEGIN:
			case PostgreSQLParserParser.BERNOULLI:
			case PostgreSQLParserParser.BETWEEN:
			case PostgreSQLParserParser.BIGINT:
			case PostgreSQLParserParser.BIT:
			case PostgreSQLParserParser.BIT_LENGTH:
			case PostgreSQLParserParser.BLOB:
			case PostgreSQLParserParser.BOOLEAN:
			case PostgreSQLParserParser.BREADTH:
			case PostgreSQLParserParser.BY:
			case PostgreSQLParserParser.C_:
			case PostgreSQLParserParser.CACHE:
			case PostgreSQLParserParser.CALL:
			case PostgreSQLParserParser.CALLED:
			case PostgreSQLParserParser.CARDINALITY:
			case PostgreSQLParserParser.CASCADE:
			case PostgreSQLParserParser.CASCADED:
			case PostgreSQLParserParser.CASE:
			case PostgreSQLParserParser.CAST:
			case PostgreSQLParserParser.CATALOG:
			case PostgreSQLParserParser.CATALOG_NAME:
			case PostgreSQLParserParser.CEIL:
			case PostgreSQLParserParser.CEILING:
			case PostgreSQLParserParser.CHAIN:
			case PostgreSQLParserParser.CHAR:
			case PostgreSQLParserParser.CHAR_LENGTH:
			case PostgreSQLParserParser.CHARACTER:
			case PostgreSQLParserParser.CHARACTER_LENGTH:
			case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
			case PostgreSQLParserParser.CHARACTER_SET_NAME:
			case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
			case PostgreSQLParserParser.CHARACTERISTICS:
			case PostgreSQLParserParser.CHARACTERS:
			case PostgreSQLParserParser.CHECKPOINT:
			case PostgreSQLParserParser.CLASS:
			case PostgreSQLParserParser.CLASS_ORIGIN:
			case PostgreSQLParserParser.CLOB:
			case PostgreSQLParserParser.CLOSE:
			case PostgreSQLParserParser.CLUSTER:
			case PostgreSQLParserParser.COALESCE:
			case PostgreSQLParserParser.COBOL:
			case PostgreSQLParserParser.COLLATION_CATALOG:
			case PostgreSQLParserParser.COLLATION_NAME:
			case PostgreSQLParserParser.COLLATION_SCHEMA:
			case PostgreSQLParserParser.COLLECT:
			case PostgreSQLParserParser.COLUMN_NAME:
			case PostgreSQLParserParser.COMMAND_FUNCTION:
			case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
			case PostgreSQLParserParser.COMMENT:
			case PostgreSQLParserParser.COMMIT:
			case PostgreSQLParserParser.COMMITTED:
			case PostgreSQLParserParser.CONDITION:
			case PostgreSQLParserParser.CONDITION_NUMBER:
			case PostgreSQLParserParser.CONNECT:
			case PostgreSQLParserParser.CONNECTION:
			case PostgreSQLParserParser.CONNECTION_NAME:
			case PostgreSQLParserParser.CONSTRAINT_CATALOG:
			case PostgreSQLParserParser.CONSTRAINT_NAME:
			case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
			case PostgreSQLParserParser.CONSTRAINTS:
			case PostgreSQLParserParser.CONSTRUCTOR:
			case PostgreSQLParserParser.CONTAINS:
			case PostgreSQLParserParser.CONTINUE:
			case PostgreSQLParserParser.CONVERSION:
			case PostgreSQLParserParser.CONVERT:
			case PostgreSQLParserParser.COPY:
			case PostgreSQLParserParser.CORR:
			case PostgreSQLParserParser.CORRESPONDING:
			case PostgreSQLParserParser.COUNT:
			case PostgreSQLParserParser.COVAR_POP:
			case PostgreSQLParserParser.COVAR_SAMP:
			case PostgreSQLParserParser.CSV:
			case PostgreSQLParserParser.CUBE:
			case PostgreSQLParserParser.CUME_DIST:
			case PostgreSQLParserParser.CURRENT:
			case PostgreSQLParserParser.CURRENT_DATE:
			case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
			case PostgreSQLParserParser.CURRENT_PATH:
			case PostgreSQLParserParser.CURRENT_ROLE:
			case PostgreSQLParserParser.CURRENT_TIME:
			case PostgreSQLParserParser.CURRENT_TIMESTAMP:
			case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case PostgreSQLParserParser.CURRENT_USER:
			case PostgreSQLParserParser.CURSOR:
			case PostgreSQLParserParser.CURSOR_NAME:
			case PostgreSQLParserParser.CYCLE:
			case PostgreSQLParserParser.DATA:
			case PostgreSQLParserParser.DATABASE:
			case PostgreSQLParserParser.DATE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
			case PostgreSQLParserParser.DAY:
			case PostgreSQLParserParser.DEALLOCATE:
			case PostgreSQLParserParser.DEC:
			case PostgreSQLParserParser.DECIMAL:
			case PostgreSQLParserParser.DECLARE:
			case PostgreSQLParserParser.DEFAULT:
			case PostgreSQLParserParser.DEFAULTS:
			case PostgreSQLParserParser.DEFERRED:
			case PostgreSQLParserParser.DEFINED:
			case PostgreSQLParserParser.DEFINER:
			case PostgreSQLParserParser.DEGREE:
			case PostgreSQLParserParser.DELETE:
			case PostgreSQLParserParser.DELIMITER:
			case PostgreSQLParserParser.DELIMITERS:
			case PostgreSQLParserParser.DENSE_RANK:
			case PostgreSQLParserParser.DEPTH:
			case PostgreSQLParserParser.DEREF:
			case PostgreSQLParserParser.DERIVED:
			case PostgreSQLParserParser.DESCRIBE:
			case PostgreSQLParserParser.DESCRIPTOR:
			case PostgreSQLParserParser.DETERMINISTIC:
			case PostgreSQLParserParser.DIAGNOSTICS:
			case PostgreSQLParserParser.DICTIONARY:
			case PostgreSQLParserParser.DISCONNECT:
			case PostgreSQLParserParser.DISPATCH:
			case PostgreSQLParserParser.DOMAIN:
			case PostgreSQLParserParser.DOUBLE:
			case PostgreSQLParserParser.DYNAMIC:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
			case PostgreSQLParserParser.EACH:
			case PostgreSQLParserParser.ELEMENT:
			case PostgreSQLParserParser.ENCODING:
			case PostgreSQLParserParser.ENCRYPTED:
			case PostgreSQLParserParser.END:
			case PostgreSQLParserParser.EQUALS:
			case PostgreSQLParserParser.ESCAPE:
			case PostgreSQLParserParser.EVERY:
			case PostgreSQLParserParser.EXCEPTION:
			case PostgreSQLParserParser.EXCLUDE:
			case PostgreSQLParserParser.EXCLUDING:
			case PostgreSQLParserParser.EXCLUSIVE:
			case PostgreSQLParserParser.EXEC:
			case PostgreSQLParserParser.EXECUTE:
			case PostgreSQLParserParser.EXISTS:
			case PostgreSQLParserParser.EXP:
			case PostgreSQLParserParser.EXPLAIN:
			case PostgreSQLParserParser.EXTENSION:
			case PostgreSQLParserParser.EXTERNAL:
			case PostgreSQLParserParser.EXTRACT:
			case PostgreSQLParserParser.FALSE:
			case PostgreSQLParserParser.FILTER:
			case PostgreSQLParserParser.FINAL:
			case PostgreSQLParserParser.FIRST:
			case PostgreSQLParserParser.FLOAT:
			case PostgreSQLParserParser.FLOOR:
			case PostgreSQLParserParser.FOLLOWING:
			case PostgreSQLParserParser.FORCE:
			case PostgreSQLParserParser.FORMAT:
			case PostgreSQLParserParser.FORTRAN:
			case PostgreSQLParserParser.FORWARD:
			case PostgreSQLParserParser.FOUND:
			case PostgreSQLParserParser.FREE:
			case PostgreSQLParserParser.FUNCTION:
			case PostgreSQLParserParser.FUSION:
			case PostgreSQLParserParser.G_:
			case PostgreSQLParserParser.GENERAL:
			case PostgreSQLParserParser.GENERATED:
			case PostgreSQLParserParser.GET:
			case PostgreSQLParserParser.GLOBAL:
			case PostgreSQLParserParser.GO:
			case PostgreSQLParserParser.GOTO:
			case PostgreSQLParserParser.GRANTED:
			case PostgreSQLParserParser.GREATEST:
			case PostgreSQLParserParser.GROUPING:
			case PostgreSQLParserParser.HANDLER:
			case PostgreSQLParserParser.HIERARCHY:
			case PostgreSQLParserParser.HOLD:
			case PostgreSQLParserParser.HOST:
			case PostgreSQLParserParser.HOUR:
			case PostgreSQLParserParser.IDENTITY:
			case PostgreSQLParserParser.IGNORE:
			case PostgreSQLParserParser.IMMEDIATE:
			case PostgreSQLParserParser.IMMUTABLE:
			case PostgreSQLParserParser.IMPLEMENTATION:
			case PostgreSQLParserParser.IMPLICIT:
			case PostgreSQLParserParser.INCLUDING:
			case PostgreSQLParserParser.INCREMENT:
			case PostgreSQLParserParser.INDEX:
			case PostgreSQLParserParser.INDICATOR:
			case PostgreSQLParserParser.INHERITS:
			case PostgreSQLParserParser.INOUT:
			case PostgreSQLParserParser.INPUT:
			case PostgreSQLParserParser.INSENSITIVE:
			case PostgreSQLParserParser.INSERT:
			case PostgreSQLParserParser.INSTANCE:
			case PostgreSQLParserParser.INSTANTIABLE:
			case PostgreSQLParserParser.INSTEAD:
			case PostgreSQLParserParser.INT:
			case PostgreSQLParserParser.INTEGER:
			case PostgreSQLParserParser.INTERSECTION:
			case PostgreSQLParserParser.INTERVAL:
			case PostgreSQLParserParser.INVOKER:
			case PostgreSQLParserParser.ISOLATION:
			case PostgreSQLParserParser.K_:
			case PostgreSQLParserParser.KEY:
			case PostgreSQLParserParser.KEY_MEMBER:
			case PostgreSQLParserParser.KEY_TYPE:
			case PostgreSQLParserParser.LANGUAGE:
			case PostgreSQLParserParser.LARGE:
			case PostgreSQLParserParser.LAST:
			case PostgreSQLParserParser.LEAST:
			case PostgreSQLParserParser.LEFT:
			case PostgreSQLParserParser.LENGTH:
			case PostgreSQLParserParser.LEVEL:
			case PostgreSQLParserParser.LISTEN:
			case PostgreSQLParserParser.LN:
			case PostgreSQLParserParser.LOAD:
			case PostgreSQLParserParser.LOCAL:
			case PostgreSQLParserParser.LOCATION:
			case PostgreSQLParserParser.LOCATOR:
			case PostgreSQLParserParser.LOCK:
			case PostgreSQLParserParser.LOCKED:
			case PostgreSQLParserParser.LOWER:
			case PostgreSQLParserParser.M_:
			case PostgreSQLParserParser.MAP:
			case PostgreSQLParserParser.MATCH:
			case PostgreSQLParserParser.MATCHED:
			case PostgreSQLParserParser.MAX:
			case PostgreSQLParserParser.MAXVALUE:
			case PostgreSQLParserParser.MEMBER:
			case PostgreSQLParserParser.MERGE:
			case PostgreSQLParserParser.MESSAGE_LENGTH:
			case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
			case PostgreSQLParserParser.MESSAGE_TEXT:
			case PostgreSQLParserParser.METHOD:
			case PostgreSQLParserParser.MIN:
			case PostgreSQLParserParser.MINUTE:
			case PostgreSQLParserParser.MINVALUE:
			case PostgreSQLParserParser.MOD:
			case PostgreSQLParserParser.MODE:
			case PostgreSQLParserParser.MODIFIES:
			case PostgreSQLParserParser.MODULE:
			case PostgreSQLParserParser.MONTH:
			case PostgreSQLParserParser.MORE_:
			case PostgreSQLParserParser.MOVE:
			case PostgreSQLParserParser.MULTISET:
			case PostgreSQLParserParser.MUMPS:
			case PostgreSQLParserParser.NAME:
			case PostgreSQLParserParser.NAMES:
			case PostgreSQLParserParser.NATIONAL:
			case PostgreSQLParserParser.NCHAR:
			case PostgreSQLParserParser.NCLOB:
			case PostgreSQLParserParser.NESTING:
			case PostgreSQLParserParser.NEW:
			case PostgreSQLParserParser.NEXT:
			case PostgreSQLParserParser.NO:
			case PostgreSQLParserParser.NONE:
			case PostgreSQLParserParser.NORMALIZE:
			case PostgreSQLParserParser.NORMALIZED:
			case PostgreSQLParserParser.NOT:
			case PostgreSQLParserParser.NOTHING:
			case PostgreSQLParserParser.NOTIFY:
			case PostgreSQLParserParser.NOWAIT:
			case PostgreSQLParserParser.NULL:
			case PostgreSQLParserParser.NULLABLE:
			case PostgreSQLParserParser.NULLIF:
			case PostgreSQLParserParser.NULLS:
			case PostgreSQLParserParser.NUMBER:
			case PostgreSQLParserParser.NUMERIC:
			case PostgreSQLParserParser.OBJECT:
			case PostgreSQLParserParser.OCTET_LENGTH:
			case PostgreSQLParserParser.OCTETS:
			case PostgreSQLParserParser.OF:
			case PostgreSQLParserParser.OFF:
			case PostgreSQLParserParser.OIDS:
			case PostgreSQLParserParser.OLD:
			case PostgreSQLParserParser.OPEN:
			case PostgreSQLParserParser.OPERATOR:
			case PostgreSQLParserParser.OPTION:
			case PostgreSQLParserParser.OPTIONS:
			case PostgreSQLParserParser.ORDERING:
			case PostgreSQLParserParser.ORDINALITY:
			case PostgreSQLParserParser.OTHERS:
			case PostgreSQLParserParser.OUT:
			case PostgreSQLParserParser.OUTPUT:
			case PostgreSQLParserParser.OVER:
			case PostgreSQLParserParser.OVERLAY:
			case PostgreSQLParserParser.OVERRIDING:
			case PostgreSQLParserParser.OWNER:
			case PostgreSQLParserParser.PAD:
			case PostgreSQLParserParser.PARAMETER:
			case PostgreSQLParserParser.PARAMETER_MODE:
			case PostgreSQLParserParser.PARAMETER_NAME:
			case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
			case PostgreSQLParserParser.PARTIAL:
			case PostgreSQLParserParser.PARTITION:
			case PostgreSQLParserParser.PASCAL:
			case PostgreSQLParserParser.PASSWORD:
			case PostgreSQLParserParser.PATH:
			case PostgreSQLParserParser.PERCENT_RANK:
			case PostgreSQLParserParser.PERCENTILE_CONT:
			case PostgreSQLParserParser.PERCENTILE_DISC:
			case PostgreSQLParserParser.PLAIN:
			case PostgreSQLParserParser.PLI:
			case PostgreSQLParserParser.POSITION:
			case PostgreSQLParserParser.POWER:
			case PostgreSQLParserParser.PRECEDING:
			case PostgreSQLParserParser.PRECISION:
			case PostgreSQLParserParser.PREPARE:
			case PostgreSQLParserParser.PRESERVE:
			case PostgreSQLParserParser.PRIOR:
			case PostgreSQLParserParser.PRIVILEGES:
			case PostgreSQLParserParser.PROCEDURAL:
			case PostgreSQLParserParser.PROCEDURE:
			case PostgreSQLParserParser.PUBLIC:
			case PostgreSQLParserParser.QUOTE:
			case PostgreSQLParserParser.RANGE:
			case PostgreSQLParserParser.RANK:
			case PostgreSQLParserParser.READ:
			case PostgreSQLParserParser.READS:
			case PostgreSQLParserParser.REAL:
			case PostgreSQLParserParser.RECHECK:
			case PostgreSQLParserParser.RECURSIVE:
			case PostgreSQLParserParser.REF:
			case PostgreSQLParserParser.REFERENCING:
			case PostgreSQLParserParser.REFRESH:
			case PostgreSQLParserParser.REGR_AVGX:
			case PostgreSQLParserParser.REGR_AVGY:
			case PostgreSQLParserParser.REGR_COUNT:
			case PostgreSQLParserParser.REGR_INTERCEPT:
			case PostgreSQLParserParser.REGR_SLOPE:
			case PostgreSQLParserParser.REGR_SXX:
			case PostgreSQLParserParser.REGR_SXY:
			case PostgreSQLParserParser.REGR_SYY:
			case PostgreSQLParserParser.REINDEX:
			case PostgreSQLParserParser.RELATIVE:
			case PostgreSQLParserParser.RELEASE:
			case PostgreSQLParserParser.RENAME:
			case PostgreSQLParserParser.REPEATABLE:
			case PostgreSQLParserParser.REPLACE:
			case PostgreSQLParserParser.RESET:
			case PostgreSQLParserParser.RESTART:
			case PostgreSQLParserParser.RESTRICT:
			case PostgreSQLParserParser.RESULT:
			case PostgreSQLParserParser.RETURN:
			case PostgreSQLParserParser.RETURNED_CARDINALITY:
			case PostgreSQLParserParser.RETURNED_LENGTH:
			case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
			case PostgreSQLParserParser.RETURNED_SQLSTATE:
			case PostgreSQLParserParser.RETURNS:
			case PostgreSQLParserParser.REVOKE:
			case PostgreSQLParserParser.RIGHT:
			case PostgreSQLParserParser.ROLE:
			case PostgreSQLParserParser.ROLLBACK:
			case PostgreSQLParserParser.ROLLUP:
			case PostgreSQLParserParser.ROUTINE:
			case PostgreSQLParserParser.ROUTINE_CATALOG:
			case PostgreSQLParserParser.ROUTINE_NAME:
			case PostgreSQLParserParser.ROUTINE_SCHEMA:
			case PostgreSQLParserParser.ROW:
			case PostgreSQLParserParser.ROW_COUNT:
			case PostgreSQLParserParser.ROW_NUMBER:
			case PostgreSQLParserParser.ROWS:
			case PostgreSQLParserParser.RULE:
			case PostgreSQLParserParser.SAVEPOINT:
			case PostgreSQLParserParser.SCALE:
			case PostgreSQLParserParser.SCHEMA:
			case PostgreSQLParserParser.SCHEMA_NAME:
			case PostgreSQLParserParser.SCOPE:
			case PostgreSQLParserParser.SCOPE_CATALOG:
			case PostgreSQLParserParser.SCOPE_NAME:
			case PostgreSQLParserParser.SCOPE_SCHEMA:
			case PostgreSQLParserParser.SCROLL:
			case PostgreSQLParserParser.SEARCH:
			case PostgreSQLParserParser.SECOND:
			case PostgreSQLParserParser.SECTION:
			case PostgreSQLParserParser.SECURITY:
			case PostgreSQLParserParser.SELF:
			case PostgreSQLParserParser.SENSITIVE:
			case PostgreSQLParserParser.SEQUENCE:
			case PostgreSQLParserParser.SEQUENCES:
			case PostgreSQLParserParser.SERIALIZABLE:
			case PostgreSQLParserParser.SERVER_NAME:
			case PostgreSQLParserParser.SESSION:
			case PostgreSQLParserParser.SET:
			case PostgreSQLParserParser.SETOF:
			case PostgreSQLParserParser.SETS:
			case PostgreSQLParserParser.SHARE:
			case PostgreSQLParserParser.SHOW:
			case PostgreSQLParserParser.SIMPLE:
			case PostgreSQLParserParser.SIZE:
			case PostgreSQLParserParser.SMALLINT:
			case PostgreSQLParserParser.SOME:
			case PostgreSQLParserParser.SOURCE:
			case PostgreSQLParserParser.SPACE:
			case PostgreSQLParserParser.SPECIFIC:
			case PostgreSQLParserParser.SPECIFIC_NAME:
			case PostgreSQLParserParser.SPECIFICTYPE:
			case PostgreSQLParserParser.SQL:
			case PostgreSQLParserParser.SQLCODE:
			case PostgreSQLParserParser.SQLERROR:
			case PostgreSQLParserParser.SQLEXCEPTION:
			case PostgreSQLParserParser.SQLSTATE:
			case PostgreSQLParserParser.SQLWARNING:
			case PostgreSQLParserParser.SQRT:
			case PostgreSQLParserParser.STABLE:
			case PostgreSQLParserParser.START:
			case PostgreSQLParserParser.STATE:
			case PostgreSQLParserParser.STATEMENT:
			case PostgreSQLParserParser.STATIC:
			case PostgreSQLParserParser.STATISTICS:
			case PostgreSQLParserParser.STDDEV_POP:
			case PostgreSQLParserParser.STDDEV_SAMP:
			case PostgreSQLParserParser.STDIN:
			case PostgreSQLParserParser.STDOUT:
			case PostgreSQLParserParser.STORAGE:
			case PostgreSQLParserParser.STRICT:
			case PostgreSQLParserParser.STRUCTURE:
			case PostgreSQLParserParser.STYLE:
			case PostgreSQLParserParser.SUBCLASS_ORIGIN:
			case PostgreSQLParserParser.SUBMULTISET:
			case PostgreSQLParserParser.SUBSTRING:
			case PostgreSQLParserParser.SUM:
			case PostgreSQLParserParser.SYSID:
			case PostgreSQLParserParser.SYSTEM:
			case PostgreSQLParserParser.SYSTEM_USER:
			case PostgreSQLParserParser.TABLE_NAME:
			case PostgreSQLParserParser.TABLESPACE:
			case PostgreSQLParserParser.TEMP:
			case PostgreSQLParserParser.TEMPLATE:
			case PostgreSQLParserParser.TEMPORARY:
			case PostgreSQLParserParser.TIES:
			case PostgreSQLParserParser.TIME:
			case PostgreSQLParserParser.TIMESTAMP:
			case PostgreSQLParserParser.TIMEZONE_HOUR:
			case PostgreSQLParserParser.TIMEZONE_MINUTE:
			case PostgreSQLParserParser.TOP_LEVEL_COUNT:
			case PostgreSQLParserParser.TRANSACTION:
			case PostgreSQLParserParser.TRANSACTION_ACTIVE:
			case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
			case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
			case PostgreSQLParserParser.TRANSFORM:
			case PostgreSQLParserParser.TRANSFORMS:
			case PostgreSQLParserParser.TRANSLATE:
			case PostgreSQLParserParser.TRANSLATION:
			case PostgreSQLParserParser.TREAT:
			case PostgreSQLParserParser.TRIGGER:
			case PostgreSQLParserParser.TRIGGER_CATALOG:
			case PostgreSQLParserParser.TRIGGER_NAME:
			case PostgreSQLParserParser.TRIGGER_SCHEMA:
			case PostgreSQLParserParser.TRIM:
			case PostgreSQLParserParser.TRUE:
			case PostgreSQLParserParser.TRUNCATE:
			case PostgreSQLParserParser.TRUSTED:
			case PostgreSQLParserParser.TYPE:
			case PostgreSQLParserParser.UESCAPE:
			case PostgreSQLParserParser.UNBOUNDED:
			case PostgreSQLParserParser.UNCOMMITTED:
			case PostgreSQLParserParser.UNDER:
			case PostgreSQLParserParser.UNENCRYPTED:
			case PostgreSQLParserParser.UNKNOWN:
			case PostgreSQLParserParser.UNLISTEN:
			case PostgreSQLParserParser.UNNAMED:
			case PostgreSQLParserParser.UNNEST:
			case PostgreSQLParserParser.UNTIL:
			case PostgreSQLParserParser.UPDATE:
			case PostgreSQLParserParser.UPPER:
			case PostgreSQLParserParser.USAGE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
			case PostgreSQLParserParser.VACUUM:
			case PostgreSQLParserParser.VALID:
			case PostgreSQLParserParser.VALIDATOR:
			case PostgreSQLParserParser.VALUE:
			case PostgreSQLParserParser.VALUES:
			case PostgreSQLParserParser.VAR_POP:
			case PostgreSQLParserParser.VAR_SAMP:
			case PostgreSQLParserParser.VARCHAR:
			case PostgreSQLParserParser.VARYING:
			case PostgreSQLParserParser.VIEW:
			case PostgreSQLParserParser.VOLATILE:
			case PostgreSQLParserParser.WHENEVER:
			case PostgreSQLParserParser.WIDTH_BUCKET:
			case PostgreSQLParserParser.WITH:
			case PostgreSQLParserParser.WITHIN:
			case PostgreSQLParserParser.WITHOUT:
			case PostgreSQLParserParser.WORK:
			case PostgreSQLParserParser.WRITE:
			case PostgreSQLParserParser.YEAR:
			case PostgreSQLParserParser.ZONE:
			case PostgreSQLParserParser.ABSTIME:
			case PostgreSQLParserParser.BIGSERIAL:
			case PostgreSQLParserParser.BIT_VARYING:
			case PostgreSQLParserParser.BOOL:
			case PostgreSQLParserParser.BOX:
			case PostgreSQLParserParser.BYTEA:
			case PostgreSQLParserParser.CHARACTER_VARYING:
			case PostgreSQLParserParser.CIDR:
			case PostgreSQLParserParser.CIRCLE:
			case PostgreSQLParserParser.FLOAT4:
			case PostgreSQLParserParser.FLOAT8:
			case PostgreSQLParserParser.INET:
			case PostgreSQLParserParser.INT2:
			case PostgreSQLParserParser.INT4:
			case PostgreSQLParserParser.INT8:
			case PostgreSQLParserParser.JSON:
			case PostgreSQLParserParser.JSONB:
			case PostgreSQLParserParser.LINE:
			case PostgreSQLParserParser.LSEG:
			case PostgreSQLParserParser.MACADDR:
			case PostgreSQLParserParser.MACADDR8:
			case PostgreSQLParserParser.MONEY:
			case PostgreSQLParserParser.PG_LSN:
			case PostgreSQLParserParser.POINT:
			case PostgreSQLParserParser.POLYGON:
			case PostgreSQLParserParser.RELTIME:
			case PostgreSQLParserParser.SERIAL:
			case PostgreSQLParserParser.SERIAL2:
			case PostgreSQLParserParser.SERIAL4:
			case PostgreSQLParserParser.SERIAL8:
			case PostgreSQLParserParser.SMALLSERIAL:
			case PostgreSQLParserParser.TEXT:
			case PostgreSQLParserParser.TIMESTAMPTZ:
			case PostgreSQLParserParser.TIMETZ:
			case PostgreSQLParserParser.TSQUERY:
			case PostgreSQLParserParser.TSVECTOR:
			case PostgreSQLParserParser.TXID_SNAPSHOT:
			case PostgreSQLParserParser.UUID:
			case PostgreSQLParserParser.VARBIT:
			case PostgreSQLParserParser.XML:
			case PostgreSQLParserParser.DOLLAR:
			case PostgreSQLParserParser.DOLLAR_DOLLAR:
			case PostgreSQLParserParser.OPEN_PAREN:
			case PostgreSQLParserParser.BIT_STRING:
			case PostgreSQLParserParser.REGEX_STRING:
			case PostgreSQLParserParser.NUMERIC_LITERAL:
			case PostgreSQLParserParser.INTEGER_LITERAL:
			case PostgreSQLParserParser.HEX_INTEGER_LITERAL:
			case PostgreSQLParserParser.SINGLEQ_STRING_LITERAL:
			case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
			case PostgreSQLParserParser.IDENTIFIER:
			case PostgreSQLParserParser.DOLLAR_DEC:
			case PostgreSQLParserParser.IDENTIFIER_UNICODE:
			case PostgreSQLParserParser.AT_SIGN:
			case PostgreSQLParserParser.BANG_BANG:
			case PostgreSQLParserParser.MINUS:
			case PostgreSQLParserParser.PLUS:
			case PostgreSQLParserParser.QMARK_HYPHEN:
			case PostgreSQLParserParser.TIL:
				{
				{
				this.state = 4379;
				_localctx._column_name_ = this.expr(0);
				this.state = 4384;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 511, this._ctx) ) {
				case 1:
					{
					this.state = 4381;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParserParser.AS) {
						{
						this.state = 4380;
						this.match(PostgreSQLParserParser.AS);
						}
					}

					this.state = 4383;
					_localctx._output_name = this.name_();
					}
					break;
				}
				}
				}
				break;
			case PostgreSQLParserParser.STAR:
				{
				this.state = 4386;
				this.match(PostgreSQLParserParser.STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4402;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 516, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4389;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 4398;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PostgreSQLParserParser.WHITESPACE:
					case PostgreSQLParserParser.A_:
					case PostgreSQLParserParser.ABORT:
					case PostgreSQLParserParser.ABS:
					case PostgreSQLParserParser.ABSOLUTE:
					case PostgreSQLParserParser.ACCESS:
					case PostgreSQLParserParser.ACTION:
					case PostgreSQLParserParser.ADA:
					case PostgreSQLParserParser.ADD:
					case PostgreSQLParserParser.ADMIN:
					case PostgreSQLParserParser.AFTER:
					case PostgreSQLParserParser.AGGREGATE:
					case PostgreSQLParserParser.ALL:
					case PostgreSQLParserParser.ALLOCATE:
					case PostgreSQLParserParser.ALSO:
					case PostgreSQLParserParser.ALTER:
					case PostgreSQLParserParser.ALWAYS:
					case PostgreSQLParserParser.ANY:
					case PostgreSQLParserParser.ARE:
					case PostgreSQLParserParser.ARRAY:
					case PostgreSQLParserParser.ASENSITIVE:
					case PostgreSQLParserParser.ASSERTION:
					case PostgreSQLParserParser.ASSIGNMENT:
					case PostgreSQLParserParser.AT:
					case PostgreSQLParserParser.ATOMIC:
					case PostgreSQLParserParser.ATTRIBUTE:
					case PostgreSQLParserParser.ATTRIBUTES:
					case PostgreSQLParserParser.AVG:
					case PostgreSQLParserParser.BACKWARD:
					case PostgreSQLParserParser.BEFORE:
					case PostgreSQLParserParser.BEGIN:
					case PostgreSQLParserParser.BERNOULLI:
					case PostgreSQLParserParser.BETWEEN:
					case PostgreSQLParserParser.BIGINT:
					case PostgreSQLParserParser.BIT:
					case PostgreSQLParserParser.BIT_LENGTH:
					case PostgreSQLParserParser.BLOB:
					case PostgreSQLParserParser.BOOLEAN:
					case PostgreSQLParserParser.BREADTH:
					case PostgreSQLParserParser.BY:
					case PostgreSQLParserParser.C_:
					case PostgreSQLParserParser.CACHE:
					case PostgreSQLParserParser.CALL:
					case PostgreSQLParserParser.CALLED:
					case PostgreSQLParserParser.CARDINALITY:
					case PostgreSQLParserParser.CASCADE:
					case PostgreSQLParserParser.CASCADED:
					case PostgreSQLParserParser.CASE:
					case PostgreSQLParserParser.CAST:
					case PostgreSQLParserParser.CATALOG:
					case PostgreSQLParserParser.CATALOG_NAME:
					case PostgreSQLParserParser.CEIL:
					case PostgreSQLParserParser.CEILING:
					case PostgreSQLParserParser.CHAIN:
					case PostgreSQLParserParser.CHAR:
					case PostgreSQLParserParser.CHAR_LENGTH:
					case PostgreSQLParserParser.CHARACTER:
					case PostgreSQLParserParser.CHARACTER_LENGTH:
					case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
					case PostgreSQLParserParser.CHARACTER_SET_NAME:
					case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
					case PostgreSQLParserParser.CHARACTERISTICS:
					case PostgreSQLParserParser.CHARACTERS:
					case PostgreSQLParserParser.CHECKPOINT:
					case PostgreSQLParserParser.CLASS:
					case PostgreSQLParserParser.CLASS_ORIGIN:
					case PostgreSQLParserParser.CLOB:
					case PostgreSQLParserParser.CLOSE:
					case PostgreSQLParserParser.CLUSTER:
					case PostgreSQLParserParser.COALESCE:
					case PostgreSQLParserParser.COBOL:
					case PostgreSQLParserParser.COLLATION_CATALOG:
					case PostgreSQLParserParser.COLLATION_NAME:
					case PostgreSQLParserParser.COLLATION_SCHEMA:
					case PostgreSQLParserParser.COLLECT:
					case PostgreSQLParserParser.COLUMN_NAME:
					case PostgreSQLParserParser.COMMAND_FUNCTION:
					case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
					case PostgreSQLParserParser.COMMENT:
					case PostgreSQLParserParser.COMMIT:
					case PostgreSQLParserParser.COMMITTED:
					case PostgreSQLParserParser.CONDITION:
					case PostgreSQLParserParser.CONDITION_NUMBER:
					case PostgreSQLParserParser.CONNECT:
					case PostgreSQLParserParser.CONNECTION:
					case PostgreSQLParserParser.CONNECTION_NAME:
					case PostgreSQLParserParser.CONSTRAINT_CATALOG:
					case PostgreSQLParserParser.CONSTRAINT_NAME:
					case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
					case PostgreSQLParserParser.CONSTRAINTS:
					case PostgreSQLParserParser.CONSTRUCTOR:
					case PostgreSQLParserParser.CONTAINS:
					case PostgreSQLParserParser.CONTINUE:
					case PostgreSQLParserParser.CONVERSION:
					case PostgreSQLParserParser.CONVERT:
					case PostgreSQLParserParser.COPY:
					case PostgreSQLParserParser.CORR:
					case PostgreSQLParserParser.CORRESPONDING:
					case PostgreSQLParserParser.COUNT:
					case PostgreSQLParserParser.COVAR_POP:
					case PostgreSQLParserParser.COVAR_SAMP:
					case PostgreSQLParserParser.CSV:
					case PostgreSQLParserParser.CUBE:
					case PostgreSQLParserParser.CUME_DIST:
					case PostgreSQLParserParser.CURRENT:
					case PostgreSQLParserParser.CURRENT_DATE:
					case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
					case PostgreSQLParserParser.CURRENT_PATH:
					case PostgreSQLParserParser.CURRENT_ROLE:
					case PostgreSQLParserParser.CURRENT_TIME:
					case PostgreSQLParserParser.CURRENT_TIMESTAMP:
					case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
					case PostgreSQLParserParser.CURRENT_USER:
					case PostgreSQLParserParser.CURSOR:
					case PostgreSQLParserParser.CURSOR_NAME:
					case PostgreSQLParserParser.CYCLE:
					case PostgreSQLParserParser.DATA:
					case PostgreSQLParserParser.DATABASE:
					case PostgreSQLParserParser.DATE:
					case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
					case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
					case PostgreSQLParserParser.DAY:
					case PostgreSQLParserParser.DEALLOCATE:
					case PostgreSQLParserParser.DEC:
					case PostgreSQLParserParser.DECIMAL:
					case PostgreSQLParserParser.DECLARE:
					case PostgreSQLParserParser.DEFAULT:
					case PostgreSQLParserParser.DEFAULTS:
					case PostgreSQLParserParser.DEFERRED:
					case PostgreSQLParserParser.DEFINED:
					case PostgreSQLParserParser.DEFINER:
					case PostgreSQLParserParser.DEGREE:
					case PostgreSQLParserParser.DELETE:
					case PostgreSQLParserParser.DELIMITER:
					case PostgreSQLParserParser.DELIMITERS:
					case PostgreSQLParserParser.DENSE_RANK:
					case PostgreSQLParserParser.DEPTH:
					case PostgreSQLParserParser.DEREF:
					case PostgreSQLParserParser.DERIVED:
					case PostgreSQLParserParser.DESCRIBE:
					case PostgreSQLParserParser.DESCRIPTOR:
					case PostgreSQLParserParser.DETERMINISTIC:
					case PostgreSQLParserParser.DIAGNOSTICS:
					case PostgreSQLParserParser.DICTIONARY:
					case PostgreSQLParserParser.DISCONNECT:
					case PostgreSQLParserParser.DISPATCH:
					case PostgreSQLParserParser.DOMAIN:
					case PostgreSQLParserParser.DOUBLE:
					case PostgreSQLParserParser.DYNAMIC:
					case PostgreSQLParserParser.DYNAMIC_FUNCTION:
					case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
					case PostgreSQLParserParser.EACH:
					case PostgreSQLParserParser.ELEMENT:
					case PostgreSQLParserParser.ENCODING:
					case PostgreSQLParserParser.ENCRYPTED:
					case PostgreSQLParserParser.END:
					case PostgreSQLParserParser.EQUALS:
					case PostgreSQLParserParser.ESCAPE:
					case PostgreSQLParserParser.EVERY:
					case PostgreSQLParserParser.EXCEPTION:
					case PostgreSQLParserParser.EXCLUDE:
					case PostgreSQLParserParser.EXCLUDING:
					case PostgreSQLParserParser.EXCLUSIVE:
					case PostgreSQLParserParser.EXEC:
					case PostgreSQLParserParser.EXECUTE:
					case PostgreSQLParserParser.EXISTS:
					case PostgreSQLParserParser.EXP:
					case PostgreSQLParserParser.EXPLAIN:
					case PostgreSQLParserParser.EXTENSION:
					case PostgreSQLParserParser.EXTERNAL:
					case PostgreSQLParserParser.EXTRACT:
					case PostgreSQLParserParser.FALSE:
					case PostgreSQLParserParser.FILTER:
					case PostgreSQLParserParser.FINAL:
					case PostgreSQLParserParser.FIRST:
					case PostgreSQLParserParser.FLOAT:
					case PostgreSQLParserParser.FLOOR:
					case PostgreSQLParserParser.FOLLOWING:
					case PostgreSQLParserParser.FORCE:
					case PostgreSQLParserParser.FORMAT:
					case PostgreSQLParserParser.FORTRAN:
					case PostgreSQLParserParser.FORWARD:
					case PostgreSQLParserParser.FOUND:
					case PostgreSQLParserParser.FREE:
					case PostgreSQLParserParser.FUNCTION:
					case PostgreSQLParserParser.FUSION:
					case PostgreSQLParserParser.G_:
					case PostgreSQLParserParser.GENERAL:
					case PostgreSQLParserParser.GENERATED:
					case PostgreSQLParserParser.GET:
					case PostgreSQLParserParser.GLOBAL:
					case PostgreSQLParserParser.GO:
					case PostgreSQLParserParser.GOTO:
					case PostgreSQLParserParser.GRANTED:
					case PostgreSQLParserParser.GREATEST:
					case PostgreSQLParserParser.GROUPING:
					case PostgreSQLParserParser.HANDLER:
					case PostgreSQLParserParser.HIERARCHY:
					case PostgreSQLParserParser.HOLD:
					case PostgreSQLParserParser.HOST:
					case PostgreSQLParserParser.HOUR:
					case PostgreSQLParserParser.IDENTITY:
					case PostgreSQLParserParser.IGNORE:
					case PostgreSQLParserParser.IMMEDIATE:
					case PostgreSQLParserParser.IMMUTABLE:
					case PostgreSQLParserParser.IMPLEMENTATION:
					case PostgreSQLParserParser.IMPLICIT:
					case PostgreSQLParserParser.INCLUDING:
					case PostgreSQLParserParser.INCREMENT:
					case PostgreSQLParserParser.INDEX:
					case PostgreSQLParserParser.INDICATOR:
					case PostgreSQLParserParser.INHERITS:
					case PostgreSQLParserParser.INOUT:
					case PostgreSQLParserParser.INPUT:
					case PostgreSQLParserParser.INSENSITIVE:
					case PostgreSQLParserParser.INSERT:
					case PostgreSQLParserParser.INSTANCE:
					case PostgreSQLParserParser.INSTANTIABLE:
					case PostgreSQLParserParser.INSTEAD:
					case PostgreSQLParserParser.INT:
					case PostgreSQLParserParser.INTEGER:
					case PostgreSQLParserParser.INTERSECTION:
					case PostgreSQLParserParser.INTERVAL:
					case PostgreSQLParserParser.INVOKER:
					case PostgreSQLParserParser.ISOLATION:
					case PostgreSQLParserParser.K_:
					case PostgreSQLParserParser.KEY:
					case PostgreSQLParserParser.KEY_MEMBER:
					case PostgreSQLParserParser.KEY_TYPE:
					case PostgreSQLParserParser.LANGUAGE:
					case PostgreSQLParserParser.LARGE:
					case PostgreSQLParserParser.LAST:
					case PostgreSQLParserParser.LEAST:
					case PostgreSQLParserParser.LEFT:
					case PostgreSQLParserParser.LENGTH:
					case PostgreSQLParserParser.LEVEL:
					case PostgreSQLParserParser.LISTEN:
					case PostgreSQLParserParser.LN:
					case PostgreSQLParserParser.LOAD:
					case PostgreSQLParserParser.LOCAL:
					case PostgreSQLParserParser.LOCATION:
					case PostgreSQLParserParser.LOCATOR:
					case PostgreSQLParserParser.LOCK:
					case PostgreSQLParserParser.LOCKED:
					case PostgreSQLParserParser.LOWER:
					case PostgreSQLParserParser.M_:
					case PostgreSQLParserParser.MAP:
					case PostgreSQLParserParser.MATCH:
					case PostgreSQLParserParser.MATCHED:
					case PostgreSQLParserParser.MAX:
					case PostgreSQLParserParser.MAXVALUE:
					case PostgreSQLParserParser.MEMBER:
					case PostgreSQLParserParser.MERGE:
					case PostgreSQLParserParser.MESSAGE_LENGTH:
					case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
					case PostgreSQLParserParser.MESSAGE_TEXT:
					case PostgreSQLParserParser.METHOD:
					case PostgreSQLParserParser.MIN:
					case PostgreSQLParserParser.MINUTE:
					case PostgreSQLParserParser.MINVALUE:
					case PostgreSQLParserParser.MOD:
					case PostgreSQLParserParser.MODE:
					case PostgreSQLParserParser.MODIFIES:
					case PostgreSQLParserParser.MODULE:
					case PostgreSQLParserParser.MONTH:
					case PostgreSQLParserParser.MORE_:
					case PostgreSQLParserParser.MOVE:
					case PostgreSQLParserParser.MULTISET:
					case PostgreSQLParserParser.MUMPS:
					case PostgreSQLParserParser.NAME:
					case PostgreSQLParserParser.NAMES:
					case PostgreSQLParserParser.NATIONAL:
					case PostgreSQLParserParser.NCHAR:
					case PostgreSQLParserParser.NCLOB:
					case PostgreSQLParserParser.NESTING:
					case PostgreSQLParserParser.NEW:
					case PostgreSQLParserParser.NEXT:
					case PostgreSQLParserParser.NO:
					case PostgreSQLParserParser.NONE:
					case PostgreSQLParserParser.NORMALIZE:
					case PostgreSQLParserParser.NORMALIZED:
					case PostgreSQLParserParser.NOT:
					case PostgreSQLParserParser.NOTHING:
					case PostgreSQLParserParser.NOTIFY:
					case PostgreSQLParserParser.NOWAIT:
					case PostgreSQLParserParser.NULL:
					case PostgreSQLParserParser.NULLABLE:
					case PostgreSQLParserParser.NULLIF:
					case PostgreSQLParserParser.NULLS:
					case PostgreSQLParserParser.NUMBER:
					case PostgreSQLParserParser.NUMERIC:
					case PostgreSQLParserParser.OBJECT:
					case PostgreSQLParserParser.OCTET_LENGTH:
					case PostgreSQLParserParser.OCTETS:
					case PostgreSQLParserParser.OF:
					case PostgreSQLParserParser.OFF:
					case PostgreSQLParserParser.OIDS:
					case PostgreSQLParserParser.OLD:
					case PostgreSQLParserParser.OPEN:
					case PostgreSQLParserParser.OPERATOR:
					case PostgreSQLParserParser.OPTION:
					case PostgreSQLParserParser.OPTIONS:
					case PostgreSQLParserParser.ORDERING:
					case PostgreSQLParserParser.ORDINALITY:
					case PostgreSQLParserParser.OTHERS:
					case PostgreSQLParserParser.OUT:
					case PostgreSQLParserParser.OUTPUT:
					case PostgreSQLParserParser.OVER:
					case PostgreSQLParserParser.OVERLAY:
					case PostgreSQLParserParser.OVERRIDING:
					case PostgreSQLParserParser.OWNER:
					case PostgreSQLParserParser.PAD:
					case PostgreSQLParserParser.PARAMETER:
					case PostgreSQLParserParser.PARAMETER_MODE:
					case PostgreSQLParserParser.PARAMETER_NAME:
					case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
					case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
					case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
					case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
					case PostgreSQLParserParser.PARTIAL:
					case PostgreSQLParserParser.PARTITION:
					case PostgreSQLParserParser.PASCAL:
					case PostgreSQLParserParser.PASSWORD:
					case PostgreSQLParserParser.PATH:
					case PostgreSQLParserParser.PERCENT_RANK:
					case PostgreSQLParserParser.PERCENTILE_CONT:
					case PostgreSQLParserParser.PERCENTILE_DISC:
					case PostgreSQLParserParser.PLAIN:
					case PostgreSQLParserParser.PLI:
					case PostgreSQLParserParser.POSITION:
					case PostgreSQLParserParser.POWER:
					case PostgreSQLParserParser.PRECEDING:
					case PostgreSQLParserParser.PRECISION:
					case PostgreSQLParserParser.PREPARE:
					case PostgreSQLParserParser.PRESERVE:
					case PostgreSQLParserParser.PRIOR:
					case PostgreSQLParserParser.PRIVILEGES:
					case PostgreSQLParserParser.PROCEDURAL:
					case PostgreSQLParserParser.PROCEDURE:
					case PostgreSQLParserParser.PUBLIC:
					case PostgreSQLParserParser.QUOTE:
					case PostgreSQLParserParser.RANGE:
					case PostgreSQLParserParser.RANK:
					case PostgreSQLParserParser.READ:
					case PostgreSQLParserParser.READS:
					case PostgreSQLParserParser.REAL:
					case PostgreSQLParserParser.RECHECK:
					case PostgreSQLParserParser.RECURSIVE:
					case PostgreSQLParserParser.REF:
					case PostgreSQLParserParser.REFERENCING:
					case PostgreSQLParserParser.REFRESH:
					case PostgreSQLParserParser.REGR_AVGX:
					case PostgreSQLParserParser.REGR_AVGY:
					case PostgreSQLParserParser.REGR_COUNT:
					case PostgreSQLParserParser.REGR_INTERCEPT:
					case PostgreSQLParserParser.REGR_SLOPE:
					case PostgreSQLParserParser.REGR_SXX:
					case PostgreSQLParserParser.REGR_SXY:
					case PostgreSQLParserParser.REGR_SYY:
					case PostgreSQLParserParser.REINDEX:
					case PostgreSQLParserParser.RELATIVE:
					case PostgreSQLParserParser.RELEASE:
					case PostgreSQLParserParser.RENAME:
					case PostgreSQLParserParser.REPEATABLE:
					case PostgreSQLParserParser.REPLACE:
					case PostgreSQLParserParser.RESET:
					case PostgreSQLParserParser.RESTART:
					case PostgreSQLParserParser.RESTRICT:
					case PostgreSQLParserParser.RESULT:
					case PostgreSQLParserParser.RETURN:
					case PostgreSQLParserParser.RETURNED_CARDINALITY:
					case PostgreSQLParserParser.RETURNED_LENGTH:
					case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
					case PostgreSQLParserParser.RETURNED_SQLSTATE:
					case PostgreSQLParserParser.RETURNS:
					case PostgreSQLParserParser.REVOKE:
					case PostgreSQLParserParser.RIGHT:
					case PostgreSQLParserParser.ROLE:
					case PostgreSQLParserParser.ROLLBACK:
					case PostgreSQLParserParser.ROLLUP:
					case PostgreSQLParserParser.ROUTINE:
					case PostgreSQLParserParser.ROUTINE_CATALOG:
					case PostgreSQLParserParser.ROUTINE_NAME:
					case PostgreSQLParserParser.ROUTINE_SCHEMA:
					case PostgreSQLParserParser.ROW:
					case PostgreSQLParserParser.ROW_COUNT:
					case PostgreSQLParserParser.ROW_NUMBER:
					case PostgreSQLParserParser.ROWS:
					case PostgreSQLParserParser.RULE:
					case PostgreSQLParserParser.SAVEPOINT:
					case PostgreSQLParserParser.SCALE:
					case PostgreSQLParserParser.SCHEMA:
					case PostgreSQLParserParser.SCHEMA_NAME:
					case PostgreSQLParserParser.SCOPE:
					case PostgreSQLParserParser.SCOPE_CATALOG:
					case PostgreSQLParserParser.SCOPE_NAME:
					case PostgreSQLParserParser.SCOPE_SCHEMA:
					case PostgreSQLParserParser.SCROLL:
					case PostgreSQLParserParser.SEARCH:
					case PostgreSQLParserParser.SECOND:
					case PostgreSQLParserParser.SECTION:
					case PostgreSQLParserParser.SECURITY:
					case PostgreSQLParserParser.SELF:
					case PostgreSQLParserParser.SENSITIVE:
					case PostgreSQLParserParser.SEQUENCE:
					case PostgreSQLParserParser.SEQUENCES:
					case PostgreSQLParserParser.SERIALIZABLE:
					case PostgreSQLParserParser.SERVER_NAME:
					case PostgreSQLParserParser.SESSION:
					case PostgreSQLParserParser.SET:
					case PostgreSQLParserParser.SETOF:
					case PostgreSQLParserParser.SETS:
					case PostgreSQLParserParser.SHARE:
					case PostgreSQLParserParser.SHOW:
					case PostgreSQLParserParser.SIMPLE:
					case PostgreSQLParserParser.SIZE:
					case PostgreSQLParserParser.SMALLINT:
					case PostgreSQLParserParser.SOME:
					case PostgreSQLParserParser.SOURCE:
					case PostgreSQLParserParser.SPACE:
					case PostgreSQLParserParser.SPECIFIC:
					case PostgreSQLParserParser.SPECIFIC_NAME:
					case PostgreSQLParserParser.SPECIFICTYPE:
					case PostgreSQLParserParser.SQL:
					case PostgreSQLParserParser.SQLCODE:
					case PostgreSQLParserParser.SQLERROR:
					case PostgreSQLParserParser.SQLEXCEPTION:
					case PostgreSQLParserParser.SQLSTATE:
					case PostgreSQLParserParser.SQLWARNING:
					case PostgreSQLParserParser.SQRT:
					case PostgreSQLParserParser.STABLE:
					case PostgreSQLParserParser.START:
					case PostgreSQLParserParser.STATE:
					case PostgreSQLParserParser.STATEMENT:
					case PostgreSQLParserParser.STATIC:
					case PostgreSQLParserParser.STATISTICS:
					case PostgreSQLParserParser.STDDEV_POP:
					case PostgreSQLParserParser.STDDEV_SAMP:
					case PostgreSQLParserParser.STDIN:
					case PostgreSQLParserParser.STDOUT:
					case PostgreSQLParserParser.STORAGE:
					case PostgreSQLParserParser.STRICT:
					case PostgreSQLParserParser.STRUCTURE:
					case PostgreSQLParserParser.STYLE:
					case PostgreSQLParserParser.SUBCLASS_ORIGIN:
					case PostgreSQLParserParser.SUBMULTISET:
					case PostgreSQLParserParser.SUBSTRING:
					case PostgreSQLParserParser.SUM:
					case PostgreSQLParserParser.SYSID:
					case PostgreSQLParserParser.SYSTEM:
					case PostgreSQLParserParser.SYSTEM_USER:
					case PostgreSQLParserParser.TABLE_NAME:
					case PostgreSQLParserParser.TABLESPACE:
					case PostgreSQLParserParser.TEMP:
					case PostgreSQLParserParser.TEMPLATE:
					case PostgreSQLParserParser.TEMPORARY:
					case PostgreSQLParserParser.TIES:
					case PostgreSQLParserParser.TIME:
					case PostgreSQLParserParser.TIMESTAMP:
					case PostgreSQLParserParser.TIMEZONE_HOUR:
					case PostgreSQLParserParser.TIMEZONE_MINUTE:
					case PostgreSQLParserParser.TOP_LEVEL_COUNT:
					case PostgreSQLParserParser.TRANSACTION:
					case PostgreSQLParserParser.TRANSACTION_ACTIVE:
					case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
					case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
					case PostgreSQLParserParser.TRANSFORM:
					case PostgreSQLParserParser.TRANSFORMS:
					case PostgreSQLParserParser.TRANSLATE:
					case PostgreSQLParserParser.TRANSLATION:
					case PostgreSQLParserParser.TREAT:
					case PostgreSQLParserParser.TRIGGER:
					case PostgreSQLParserParser.TRIGGER_CATALOG:
					case PostgreSQLParserParser.TRIGGER_NAME:
					case PostgreSQLParserParser.TRIGGER_SCHEMA:
					case PostgreSQLParserParser.TRIM:
					case PostgreSQLParserParser.TRUE:
					case PostgreSQLParserParser.TRUNCATE:
					case PostgreSQLParserParser.TRUSTED:
					case PostgreSQLParserParser.TYPE:
					case PostgreSQLParserParser.UESCAPE:
					case PostgreSQLParserParser.UNBOUNDED:
					case PostgreSQLParserParser.UNCOMMITTED:
					case PostgreSQLParserParser.UNDER:
					case PostgreSQLParserParser.UNENCRYPTED:
					case PostgreSQLParserParser.UNKNOWN:
					case PostgreSQLParserParser.UNLISTEN:
					case PostgreSQLParserParser.UNNAMED:
					case PostgreSQLParserParser.UNNEST:
					case PostgreSQLParserParser.UNTIL:
					case PostgreSQLParserParser.UPDATE:
					case PostgreSQLParserParser.UPPER:
					case PostgreSQLParserParser.USAGE:
					case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
					case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
					case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
					case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
					case PostgreSQLParserParser.VACUUM:
					case PostgreSQLParserParser.VALID:
					case PostgreSQLParserParser.VALIDATOR:
					case PostgreSQLParserParser.VALUE:
					case PostgreSQLParserParser.VALUES:
					case PostgreSQLParserParser.VAR_POP:
					case PostgreSQLParserParser.VAR_SAMP:
					case PostgreSQLParserParser.VARCHAR:
					case PostgreSQLParserParser.VARYING:
					case PostgreSQLParserParser.VIEW:
					case PostgreSQLParserParser.VOLATILE:
					case PostgreSQLParserParser.WHENEVER:
					case PostgreSQLParserParser.WIDTH_BUCKET:
					case PostgreSQLParserParser.WITH:
					case PostgreSQLParserParser.WITHIN:
					case PostgreSQLParserParser.WITHOUT:
					case PostgreSQLParserParser.WORK:
					case PostgreSQLParserParser.WRITE:
					case PostgreSQLParserParser.YEAR:
					case PostgreSQLParserParser.ZONE:
					case PostgreSQLParserParser.ABSTIME:
					case PostgreSQLParserParser.BIGSERIAL:
					case PostgreSQLParserParser.BIT_VARYING:
					case PostgreSQLParserParser.BOOL:
					case PostgreSQLParserParser.BOX:
					case PostgreSQLParserParser.BYTEA:
					case PostgreSQLParserParser.CHARACTER_VARYING:
					case PostgreSQLParserParser.CIDR:
					case PostgreSQLParserParser.CIRCLE:
					case PostgreSQLParserParser.FLOAT4:
					case PostgreSQLParserParser.FLOAT8:
					case PostgreSQLParserParser.INET:
					case PostgreSQLParserParser.INT2:
					case PostgreSQLParserParser.INT4:
					case PostgreSQLParserParser.INT8:
					case PostgreSQLParserParser.JSON:
					case PostgreSQLParserParser.JSONB:
					case PostgreSQLParserParser.LINE:
					case PostgreSQLParserParser.LSEG:
					case PostgreSQLParserParser.MACADDR:
					case PostgreSQLParserParser.MACADDR8:
					case PostgreSQLParserParser.MONEY:
					case PostgreSQLParserParser.PG_LSN:
					case PostgreSQLParserParser.POINT:
					case PostgreSQLParserParser.POLYGON:
					case PostgreSQLParserParser.RELTIME:
					case PostgreSQLParserParser.SERIAL:
					case PostgreSQLParserParser.SERIAL2:
					case PostgreSQLParserParser.SERIAL4:
					case PostgreSQLParserParser.SERIAL8:
					case PostgreSQLParserParser.SMALLSERIAL:
					case PostgreSQLParserParser.TEXT:
					case PostgreSQLParserParser.TIMESTAMPTZ:
					case PostgreSQLParserParser.TIMETZ:
					case PostgreSQLParserParser.TSQUERY:
					case PostgreSQLParserParser.TSVECTOR:
					case PostgreSQLParserParser.TXID_SNAPSHOT:
					case PostgreSQLParserParser.UUID:
					case PostgreSQLParserParser.VARBIT:
					case PostgreSQLParserParser.XML:
					case PostgreSQLParserParser.DOLLAR:
					case PostgreSQLParserParser.DOLLAR_DOLLAR:
					case PostgreSQLParserParser.OPEN_PAREN:
					case PostgreSQLParserParser.BIT_STRING:
					case PostgreSQLParserParser.REGEX_STRING:
					case PostgreSQLParserParser.NUMERIC_LITERAL:
					case PostgreSQLParserParser.INTEGER_LITERAL:
					case PostgreSQLParserParser.HEX_INTEGER_LITERAL:
					case PostgreSQLParserParser.SINGLEQ_STRING_LITERAL:
					case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
					case PostgreSQLParserParser.IDENTIFIER:
					case PostgreSQLParserParser.DOLLAR_DEC:
					case PostgreSQLParserParser.IDENTIFIER_UNICODE:
					case PostgreSQLParserParser.AT_SIGN:
					case PostgreSQLParserParser.BANG_BANG:
					case PostgreSQLParserParser.MINUS:
					case PostgreSQLParserParser.PLUS:
					case PostgreSQLParserParser.QMARK_HYPHEN:
					case PostgreSQLParserParser.TIL:
						{
						{
						this.state = 4390;
						_localctx._column_name_ = this.expr(0);
						this.state = 4395;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 514, this._ctx) ) {
						case 1:
							{
							this.state = 4392;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === PostgreSQLParserParser.AS) {
								{
								this.state = 4391;
								this.match(PostgreSQLParserParser.AS);
								}
							}

							this.state = 4394;
							_localctx._output_name = this.name_();
							}
							break;
						}
						}
						}
						break;
					case PostgreSQLParserParser.STAR:
						{
						this.state = 4397;
						this.match(PostgreSQLParserParser.STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 4404;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 516, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explain_parameter(): Explain_parameterContext {
		let _localctx: Explain_parameterContext = new Explain_parameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, PostgreSQLParserParser.RULE_explain_parameter);
		let _la: number;
		try {
			this.state = 4411;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.ANALYZE:
			case PostgreSQLParserParser.BUFFERS:
			case PostgreSQLParserParser.COSTS:
			case PostgreSQLParserParser.TIMING:
			case PostgreSQLParserParser.VERBOSE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4405;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.ANALYZE || _la === PostgreSQLParserParser.BUFFERS || _la === PostgreSQLParserParser.COSTS || _la === PostgreSQLParserParser.TIMING || _la === PostgreSQLParserParser.VERBOSE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4407;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FALSE - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.ON - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.YES - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.NUMERIC_LITERAL - 751)) | (1 << (PostgreSQLParserParser.INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.SINGLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0)) {
					{
					this.state = 4406;
					this.param_value();
					}
				}

				}
				break;
			case PostgreSQLParserParser.FORMAT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4409;
				this.match(PostgreSQLParserParser.FORMAT);
				this.state = 4410;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.YAML || ((((_la - 734)) & ~0x1F) === 0 && ((1 << (_la - 734)) & ((1 << (PostgreSQLParserParser.JSON - 734)) | (1 << (PostgreSQLParserParser.TEXT - 734)) | (1 << (PostgreSQLParserParser.XML - 734)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frame(): FrameContext {
		let _localctx: FrameContext = new FrameContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, PostgreSQLParserParser.RULE_frame);
		try {
			this.state = 4423;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 519, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4413;
				this.match(PostgreSQLParserParser.UNBOUNDED);
				this.state = 4414;
				this.match(PostgreSQLParserParser.PRECEDING);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4415;
				this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				this.state = 4416;
				this.match(PostgreSQLParserParser.PRECEDING);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4417;
				this.match(PostgreSQLParserParser.CURRENT);
				this.state = 4418;
				this.match(PostgreSQLParserParser.ROW);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4419;
				this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				this.state = 4420;
				this.match(PostgreSQLParserParser.FOLLOWING);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4421;
				this.match(PostgreSQLParserParser.UNBOUNDED);
				this.state = 4422;
				this.match(PostgreSQLParserParser.FOLLOWING);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frame_start(): Frame_startContext {
		let _localctx: Frame_startContext = new Frame_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, PostgreSQLParserParser.RULE_frame_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4425;
			this.frame();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frame_end(): Frame_endContext {
		let _localctx: Frame_endContext = new Frame_endContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, PostgreSQLParserParser.RULE_frame_end);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4427;
			this.frame();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frame_clause(): Frame_clauseContext {
		let _localctx: Frame_clauseContext = new Frame_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, PostgreSQLParserParser.RULE_frame_clause);
		let _la: number;
		try {
			this.state = 4437;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 520, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4429;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.RANGE || _la === PostgreSQLParserParser.ROWS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4430;
				this.frame_start();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4431;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.RANGE || _la === PostgreSQLParserParser.ROWS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4432;
				this.match(PostgreSQLParserParser.BETWEEN);
				this.state = 4433;
				this.frame_start();
				this.state = 4434;
				this.match(PostgreSQLParserParser.AND);
				this.state = 4435;
				this.frame_end();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_definition(): Window_definitionContext {
		let _localctx: Window_definitionContext = new Window_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, PostgreSQLParserParser.RULE_window_definition);
		let _la: number;
		try {
			this.state = 4451;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 522, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4439;
				this.window_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4440;
				this.match(PostgreSQLParserParser.PARTITION);
				this.state = 4441;
				this.match(PostgreSQLParserParser.BY);
				this.state = 4442;
				this.expr(0);
				this.state = 4447;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PostgreSQLParserParser.COMMA) {
					{
					{
					this.state = 4443;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 4444;
					this.expr(0);
					}
					}
					this.state = 4449;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4450;
				this.order_by_clause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_clause(): Window_clauseContext {
		let _localctx: Window_clauseContext = new Window_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, PostgreSQLParserParser.RULE_window_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4453;
			this.match(PostgreSQLParserParser.WINDOW);
			this.state = 4454;
			this.window_name();
			this.state = 4455;
			this.match(PostgreSQLParserParser.AS);
			this.state = 4456;
			this.match(PostgreSQLParserParser.OPEN_PAREN);
			this.state = 4457;
			this.window_definition();
			this.state = 4458;
			this.match(PostgreSQLParserParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public combine_clause(): Combine_clauseContext {
		let _localctx: Combine_clauseContext = new Combine_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, PostgreSQLParserParser.RULE_combine_clause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4460;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParserParser.EXCEPT || _la === PostgreSQLParserParser.INTERSECT || _la === PostgreSQLParserParser.UNION)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4462;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.ALL || _la === PostgreSQLParserParser.DISTINCT) {
				{
				this.state = 4461;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.ALL || _la === PostgreSQLParserParser.DISTINCT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 4467;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 524, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4464;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					}
					}
				}
				this.state = 4469;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 524, this._ctx);
			}
			this.state = 4472;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 525, this._ctx) ) {
			case 1:
				{
				this.state = 4470;
				this.select_stmt();
				}
				break;

			case 2:
				{
				this.state = 4471;
				this.values_stmt();
				}
				break;
			}
			this.state = 4477;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 526, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4474;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					}
				}
				this.state = 4479;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 526, this._ctx);
			}
			this.state = 4481;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 527, this._ctx) ) {
			case 1:
				{
				this.state = 4480;
				this.combine_clause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public order_by_clause(): Order_by_clauseContext {
		let _localctx: Order_by_clauseContext = new Order_by_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, PostgreSQLParserParser.RULE_order_by_clause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4483;
			this.match(PostgreSQLParserParser.ORDER);
			this.state = 4484;
			this.match(PostgreSQLParserParser.BY);
			this.state = 4485;
			this.order_by_item();
			this.state = 4490;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 528, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4486;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 4487;
					this.order_by_item();
					}
					}
				}
				this.state = 4492;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 528, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public order_by_item(): Order_by_itemContext {
		let _localctx: Order_by_itemContext = new Order_by_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, PostgreSQLParserParser.RULE_order_by_item);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4495;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 529, this._ctx) ) {
			case 1:
				{
				this.state = 4493;
				this.expr(0);
				}
				break;

			case 2:
				{
				this.state = 4494;
				this.match(PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL);
				}
				break;
			}
			this.state = 4501;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 530, this._ctx) ) {
			case 1:
				{
				this.state = 4497;
				this.match(PostgreSQLParserParser.ASC);
				}
				break;

			case 2:
				{
				this.state = 4498;
				this.match(PostgreSQLParserParser.DESC);
				}
				break;

			case 3:
				{
				this.state = 4499;
				this.match(PostgreSQLParserParser.USING);
				this.state = 4500;
				this.expr(0);
				}
				break;
			}
			this.state = 4514;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 532, this._ctx) ) {
			case 1:
				{
				{
				this.state = 4503;
				this.match(PostgreSQLParserParser.NULLS);
				this.state = 4504;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.FIRST || _la === PostgreSQLParserParser.LAST)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				this.state = 4511;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 531, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4506;
						this.match(PostgreSQLParserParser.COMMA);
						{
						this.state = 4507;
						this.match(PostgreSQLParserParser.NULLS);
						this.state = 4508;
						_la = this._input.LA(1);
						if (!(_la === PostgreSQLParserParser.FIRST || _la === PostgreSQLParserParser.LAST)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						}
						}
					}
					this.state = 4513;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 531, this._ctx);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limit_clause(): Limit_clauseContext {
		let _localctx: Limit_clauseContext = new Limit_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, PostgreSQLParserParser.RULE_limit_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4516;
			this.match(PostgreSQLParserParser.LIMIT);
			this.state = 4520;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.INTEGER_LITERAL:
				{
				this.state = 4517;
				this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				}
				break;
			case PostgreSQLParserParser.ALL:
				{
				this.state = 4518;
				this.match(PostgreSQLParserParser.ALL);
				}
				break;
			case PostgreSQLParserParser.WHITESPACE:
			case PostgreSQLParserParser.A_:
			case PostgreSQLParserParser.ABORT:
			case PostgreSQLParserParser.ABS:
			case PostgreSQLParserParser.ABSOLUTE:
			case PostgreSQLParserParser.ACCESS:
			case PostgreSQLParserParser.ACTION:
			case PostgreSQLParserParser.ADA:
			case PostgreSQLParserParser.ADD:
			case PostgreSQLParserParser.ADMIN:
			case PostgreSQLParserParser.AFTER:
			case PostgreSQLParserParser.AGGREGATE:
			case PostgreSQLParserParser.ALLOCATE:
			case PostgreSQLParserParser.ALSO:
			case PostgreSQLParserParser.ALTER:
			case PostgreSQLParserParser.ALWAYS:
			case PostgreSQLParserParser.ANY:
			case PostgreSQLParserParser.ARE:
			case PostgreSQLParserParser.ASENSITIVE:
			case PostgreSQLParserParser.ASSERTION:
			case PostgreSQLParserParser.ASSIGNMENT:
			case PostgreSQLParserParser.AT:
			case PostgreSQLParserParser.ATOMIC:
			case PostgreSQLParserParser.ATTRIBUTE:
			case PostgreSQLParserParser.ATTRIBUTES:
			case PostgreSQLParserParser.AVG:
			case PostgreSQLParserParser.BACKWARD:
			case PostgreSQLParserParser.BEFORE:
			case PostgreSQLParserParser.BEGIN:
			case PostgreSQLParserParser.BERNOULLI:
			case PostgreSQLParserParser.BETWEEN:
			case PostgreSQLParserParser.BIGINT:
			case PostgreSQLParserParser.BIT:
			case PostgreSQLParserParser.BIT_LENGTH:
			case PostgreSQLParserParser.BLOB:
			case PostgreSQLParserParser.BOOLEAN:
			case PostgreSQLParserParser.BREADTH:
			case PostgreSQLParserParser.BY:
			case PostgreSQLParserParser.C_:
			case PostgreSQLParserParser.CACHE:
			case PostgreSQLParserParser.CALL:
			case PostgreSQLParserParser.CALLED:
			case PostgreSQLParserParser.CARDINALITY:
			case PostgreSQLParserParser.CASCADE:
			case PostgreSQLParserParser.CASCADED:
			case PostgreSQLParserParser.CATALOG:
			case PostgreSQLParserParser.CATALOG_NAME:
			case PostgreSQLParserParser.CEIL:
			case PostgreSQLParserParser.CEILING:
			case PostgreSQLParserParser.CHAIN:
			case PostgreSQLParserParser.CHAR:
			case PostgreSQLParserParser.CHAR_LENGTH:
			case PostgreSQLParserParser.CHARACTER:
			case PostgreSQLParserParser.CHARACTER_LENGTH:
			case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
			case PostgreSQLParserParser.CHARACTER_SET_NAME:
			case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
			case PostgreSQLParserParser.CHARACTERISTICS:
			case PostgreSQLParserParser.CHARACTERS:
			case PostgreSQLParserParser.CHECKPOINT:
			case PostgreSQLParserParser.CLASS:
			case PostgreSQLParserParser.CLASS_ORIGIN:
			case PostgreSQLParserParser.CLOB:
			case PostgreSQLParserParser.CLOSE:
			case PostgreSQLParserParser.CLUSTER:
			case PostgreSQLParserParser.COALESCE:
			case PostgreSQLParserParser.COBOL:
			case PostgreSQLParserParser.COLLATION_CATALOG:
			case PostgreSQLParserParser.COLLATION_NAME:
			case PostgreSQLParserParser.COLLATION_SCHEMA:
			case PostgreSQLParserParser.COLLECT:
			case PostgreSQLParserParser.COLUMN_NAME:
			case PostgreSQLParserParser.COMMAND_FUNCTION:
			case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
			case PostgreSQLParserParser.COMMENT:
			case PostgreSQLParserParser.COMMIT:
			case PostgreSQLParserParser.COMMITTED:
			case PostgreSQLParserParser.CONDITION:
			case PostgreSQLParserParser.CONDITION_NUMBER:
			case PostgreSQLParserParser.CONNECT:
			case PostgreSQLParserParser.CONNECTION:
			case PostgreSQLParserParser.CONNECTION_NAME:
			case PostgreSQLParserParser.CONSTRAINT_CATALOG:
			case PostgreSQLParserParser.CONSTRAINT_NAME:
			case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
			case PostgreSQLParserParser.CONSTRAINTS:
			case PostgreSQLParserParser.CONSTRUCTOR:
			case PostgreSQLParserParser.CONTAINS:
			case PostgreSQLParserParser.CONTINUE:
			case PostgreSQLParserParser.CONVERSION:
			case PostgreSQLParserParser.CONVERT:
			case PostgreSQLParserParser.COPY:
			case PostgreSQLParserParser.CORR:
			case PostgreSQLParserParser.CORRESPONDING:
			case PostgreSQLParserParser.COUNT:
			case PostgreSQLParserParser.COVAR_POP:
			case PostgreSQLParserParser.COVAR_SAMP:
			case PostgreSQLParserParser.CSV:
			case PostgreSQLParserParser.CUBE:
			case PostgreSQLParserParser.CUME_DIST:
			case PostgreSQLParserParser.CURRENT:
			case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
			case PostgreSQLParserParser.CURRENT_PATH:
			case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case PostgreSQLParserParser.CURSOR:
			case PostgreSQLParserParser.CURSOR_NAME:
			case PostgreSQLParserParser.CYCLE:
			case PostgreSQLParserParser.DATA:
			case PostgreSQLParserParser.DATABASE:
			case PostgreSQLParserParser.DATE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
			case PostgreSQLParserParser.DAY:
			case PostgreSQLParserParser.DEALLOCATE:
			case PostgreSQLParserParser.DEC:
			case PostgreSQLParserParser.DECIMAL:
			case PostgreSQLParserParser.DECLARE:
			case PostgreSQLParserParser.DEFAULTS:
			case PostgreSQLParserParser.DEFERRED:
			case PostgreSQLParserParser.DEFINED:
			case PostgreSQLParserParser.DEFINER:
			case PostgreSQLParserParser.DEGREE:
			case PostgreSQLParserParser.DELETE:
			case PostgreSQLParserParser.DELIMITER:
			case PostgreSQLParserParser.DELIMITERS:
			case PostgreSQLParserParser.DENSE_RANK:
			case PostgreSQLParserParser.DEPTH:
			case PostgreSQLParserParser.DEREF:
			case PostgreSQLParserParser.DERIVED:
			case PostgreSQLParserParser.DESCRIBE:
			case PostgreSQLParserParser.DESCRIPTOR:
			case PostgreSQLParserParser.DETERMINISTIC:
			case PostgreSQLParserParser.DIAGNOSTICS:
			case PostgreSQLParserParser.DICTIONARY:
			case PostgreSQLParserParser.DISCONNECT:
			case PostgreSQLParserParser.DISPATCH:
			case PostgreSQLParserParser.DOMAIN:
			case PostgreSQLParserParser.DOUBLE:
			case PostgreSQLParserParser.DYNAMIC:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
			case PostgreSQLParserParser.EACH:
			case PostgreSQLParserParser.ELEMENT:
			case PostgreSQLParserParser.ENCODING:
			case PostgreSQLParserParser.ENCRYPTED:
			case PostgreSQLParserParser.END:
			case PostgreSQLParserParser.EQUALS:
			case PostgreSQLParserParser.ESCAPE:
			case PostgreSQLParserParser.EVERY:
			case PostgreSQLParserParser.EXCEPTION:
			case PostgreSQLParserParser.EXCLUDE:
			case PostgreSQLParserParser.EXCLUDING:
			case PostgreSQLParserParser.EXCLUSIVE:
			case PostgreSQLParserParser.EXEC:
			case PostgreSQLParserParser.EXECUTE:
			case PostgreSQLParserParser.EXISTS:
			case PostgreSQLParserParser.EXP:
			case PostgreSQLParserParser.EXPLAIN:
			case PostgreSQLParserParser.EXTENSION:
			case PostgreSQLParserParser.EXTERNAL:
			case PostgreSQLParserParser.EXTRACT:
			case PostgreSQLParserParser.FILTER:
			case PostgreSQLParserParser.FINAL:
			case PostgreSQLParserParser.FIRST:
			case PostgreSQLParserParser.FLOAT:
			case PostgreSQLParserParser.FLOOR:
			case PostgreSQLParserParser.FOLLOWING:
			case PostgreSQLParserParser.FORCE:
			case PostgreSQLParserParser.FORMAT:
			case PostgreSQLParserParser.FORTRAN:
			case PostgreSQLParserParser.FORWARD:
			case PostgreSQLParserParser.FOUND:
			case PostgreSQLParserParser.FREE:
			case PostgreSQLParserParser.FUNCTION:
			case PostgreSQLParserParser.FUSION:
			case PostgreSQLParserParser.G_:
			case PostgreSQLParserParser.GENERAL:
			case PostgreSQLParserParser.GENERATED:
			case PostgreSQLParserParser.GET:
			case PostgreSQLParserParser.GLOBAL:
			case PostgreSQLParserParser.GO:
			case PostgreSQLParserParser.GOTO:
			case PostgreSQLParserParser.GRANTED:
			case PostgreSQLParserParser.GREATEST:
			case PostgreSQLParserParser.GROUPING:
			case PostgreSQLParserParser.HANDLER:
			case PostgreSQLParserParser.HIERARCHY:
			case PostgreSQLParserParser.HOLD:
			case PostgreSQLParserParser.HOST:
			case PostgreSQLParserParser.HOUR:
			case PostgreSQLParserParser.IDENTITY:
			case PostgreSQLParserParser.IGNORE:
			case PostgreSQLParserParser.IMMEDIATE:
			case PostgreSQLParserParser.IMMUTABLE:
			case PostgreSQLParserParser.IMPLEMENTATION:
			case PostgreSQLParserParser.IMPLICIT:
			case PostgreSQLParserParser.INCLUDING:
			case PostgreSQLParserParser.INCREMENT:
			case PostgreSQLParserParser.INDEX:
			case PostgreSQLParserParser.INDICATOR:
			case PostgreSQLParserParser.INHERITS:
			case PostgreSQLParserParser.INOUT:
			case PostgreSQLParserParser.INPUT:
			case PostgreSQLParserParser.INSENSITIVE:
			case PostgreSQLParserParser.INSERT:
			case PostgreSQLParserParser.INSTANCE:
			case PostgreSQLParserParser.INSTANTIABLE:
			case PostgreSQLParserParser.INSTEAD:
			case PostgreSQLParserParser.INT:
			case PostgreSQLParserParser.INTEGER:
			case PostgreSQLParserParser.INTERSECTION:
			case PostgreSQLParserParser.INTERVAL:
			case PostgreSQLParserParser.INVOKER:
			case PostgreSQLParserParser.ISOLATION:
			case PostgreSQLParserParser.K_:
			case PostgreSQLParserParser.KEY:
			case PostgreSQLParserParser.KEY_MEMBER:
			case PostgreSQLParserParser.KEY_TYPE:
			case PostgreSQLParserParser.LANGUAGE:
			case PostgreSQLParserParser.LARGE:
			case PostgreSQLParserParser.LAST:
			case PostgreSQLParserParser.LEAST:
			case PostgreSQLParserParser.LEFT:
			case PostgreSQLParserParser.LENGTH:
			case PostgreSQLParserParser.LEVEL:
			case PostgreSQLParserParser.LISTEN:
			case PostgreSQLParserParser.LN:
			case PostgreSQLParserParser.LOAD:
			case PostgreSQLParserParser.LOCAL:
			case PostgreSQLParserParser.LOCATION:
			case PostgreSQLParserParser.LOCATOR:
			case PostgreSQLParserParser.LOCK:
			case PostgreSQLParserParser.LOCKED:
			case PostgreSQLParserParser.LOWER:
			case PostgreSQLParserParser.M_:
			case PostgreSQLParserParser.MAP:
			case PostgreSQLParserParser.MATCH:
			case PostgreSQLParserParser.MATCHED:
			case PostgreSQLParserParser.MAX:
			case PostgreSQLParserParser.MAXVALUE:
			case PostgreSQLParserParser.MEMBER:
			case PostgreSQLParserParser.MERGE:
			case PostgreSQLParserParser.MESSAGE_LENGTH:
			case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
			case PostgreSQLParserParser.MESSAGE_TEXT:
			case PostgreSQLParserParser.METHOD:
			case PostgreSQLParserParser.MIN:
			case PostgreSQLParserParser.MINUTE:
			case PostgreSQLParserParser.MINVALUE:
			case PostgreSQLParserParser.MOD:
			case PostgreSQLParserParser.MODE:
			case PostgreSQLParserParser.MODIFIES:
			case PostgreSQLParserParser.MODULE:
			case PostgreSQLParserParser.MONTH:
			case PostgreSQLParserParser.MORE_:
			case PostgreSQLParserParser.MOVE:
			case PostgreSQLParserParser.MULTISET:
			case PostgreSQLParserParser.MUMPS:
			case PostgreSQLParserParser.NAME:
			case PostgreSQLParserParser.NAMES:
			case PostgreSQLParserParser.NATIONAL:
			case PostgreSQLParserParser.NCHAR:
			case PostgreSQLParserParser.NCLOB:
			case PostgreSQLParserParser.NESTING:
			case PostgreSQLParserParser.NEW:
			case PostgreSQLParserParser.NEXT:
			case PostgreSQLParserParser.NO:
			case PostgreSQLParserParser.NONE:
			case PostgreSQLParserParser.NORMALIZE:
			case PostgreSQLParserParser.NORMALIZED:
			case PostgreSQLParserParser.NOTHING:
			case PostgreSQLParserParser.NOTIFY:
			case PostgreSQLParserParser.NOWAIT:
			case PostgreSQLParserParser.NULLABLE:
			case PostgreSQLParserParser.NULLIF:
			case PostgreSQLParserParser.NULLS:
			case PostgreSQLParserParser.NUMBER:
			case PostgreSQLParserParser.NUMERIC:
			case PostgreSQLParserParser.OBJECT:
			case PostgreSQLParserParser.OCTET_LENGTH:
			case PostgreSQLParserParser.OCTETS:
			case PostgreSQLParserParser.OF:
			case PostgreSQLParserParser.OFF:
			case PostgreSQLParserParser.OIDS:
			case PostgreSQLParserParser.OLD:
			case PostgreSQLParserParser.OPEN:
			case PostgreSQLParserParser.OPERATOR:
			case PostgreSQLParserParser.OPTION:
			case PostgreSQLParserParser.OPTIONS:
			case PostgreSQLParserParser.ORDERING:
			case PostgreSQLParserParser.ORDINALITY:
			case PostgreSQLParserParser.OTHERS:
			case PostgreSQLParserParser.OUT:
			case PostgreSQLParserParser.OUTPUT:
			case PostgreSQLParserParser.OVER:
			case PostgreSQLParserParser.OVERLAY:
			case PostgreSQLParserParser.OVERRIDING:
			case PostgreSQLParserParser.OWNER:
			case PostgreSQLParserParser.PAD:
			case PostgreSQLParserParser.PARAMETER:
			case PostgreSQLParserParser.PARAMETER_MODE:
			case PostgreSQLParserParser.PARAMETER_NAME:
			case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
			case PostgreSQLParserParser.PARTIAL:
			case PostgreSQLParserParser.PARTITION:
			case PostgreSQLParserParser.PASCAL:
			case PostgreSQLParserParser.PASSWORD:
			case PostgreSQLParserParser.PATH:
			case PostgreSQLParserParser.PERCENT_RANK:
			case PostgreSQLParserParser.PERCENTILE_CONT:
			case PostgreSQLParserParser.PERCENTILE_DISC:
			case PostgreSQLParserParser.PLAIN:
			case PostgreSQLParserParser.PLI:
			case PostgreSQLParserParser.POSITION:
			case PostgreSQLParserParser.POWER:
			case PostgreSQLParserParser.PRECEDING:
			case PostgreSQLParserParser.PRECISION:
			case PostgreSQLParserParser.PREPARE:
			case PostgreSQLParserParser.PRESERVE:
			case PostgreSQLParserParser.PRIOR:
			case PostgreSQLParserParser.PRIVILEGES:
			case PostgreSQLParserParser.PROCEDURAL:
			case PostgreSQLParserParser.PROCEDURE:
			case PostgreSQLParserParser.PUBLIC:
			case PostgreSQLParserParser.QUOTE:
			case PostgreSQLParserParser.RANGE:
			case PostgreSQLParserParser.RANK:
			case PostgreSQLParserParser.READ:
			case PostgreSQLParserParser.READS:
			case PostgreSQLParserParser.REAL:
			case PostgreSQLParserParser.RECHECK:
			case PostgreSQLParserParser.RECURSIVE:
			case PostgreSQLParserParser.REF:
			case PostgreSQLParserParser.REFERENCING:
			case PostgreSQLParserParser.REFRESH:
			case PostgreSQLParserParser.REGR_AVGX:
			case PostgreSQLParserParser.REGR_AVGY:
			case PostgreSQLParserParser.REGR_COUNT:
			case PostgreSQLParserParser.REGR_INTERCEPT:
			case PostgreSQLParserParser.REGR_SLOPE:
			case PostgreSQLParserParser.REGR_SXX:
			case PostgreSQLParserParser.REGR_SXY:
			case PostgreSQLParserParser.REGR_SYY:
			case PostgreSQLParserParser.REINDEX:
			case PostgreSQLParserParser.RELATIVE:
			case PostgreSQLParserParser.RELEASE:
			case PostgreSQLParserParser.RENAME:
			case PostgreSQLParserParser.REPEATABLE:
			case PostgreSQLParserParser.REPLACE:
			case PostgreSQLParserParser.RESET:
			case PostgreSQLParserParser.RESTART:
			case PostgreSQLParserParser.RESTRICT:
			case PostgreSQLParserParser.RESULT:
			case PostgreSQLParserParser.RETURN:
			case PostgreSQLParserParser.RETURNED_CARDINALITY:
			case PostgreSQLParserParser.RETURNED_LENGTH:
			case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
			case PostgreSQLParserParser.RETURNED_SQLSTATE:
			case PostgreSQLParserParser.RETURNS:
			case PostgreSQLParserParser.REVOKE:
			case PostgreSQLParserParser.RIGHT:
			case PostgreSQLParserParser.ROLE:
			case PostgreSQLParserParser.ROLLBACK:
			case PostgreSQLParserParser.ROLLUP:
			case PostgreSQLParserParser.ROUTINE:
			case PostgreSQLParserParser.ROUTINE_CATALOG:
			case PostgreSQLParserParser.ROUTINE_NAME:
			case PostgreSQLParserParser.ROUTINE_SCHEMA:
			case PostgreSQLParserParser.ROW:
			case PostgreSQLParserParser.ROW_COUNT:
			case PostgreSQLParserParser.ROW_NUMBER:
			case PostgreSQLParserParser.ROWS:
			case PostgreSQLParserParser.RULE:
			case PostgreSQLParserParser.SAVEPOINT:
			case PostgreSQLParserParser.SCALE:
			case PostgreSQLParserParser.SCHEMA:
			case PostgreSQLParserParser.SCHEMA_NAME:
			case PostgreSQLParserParser.SCOPE:
			case PostgreSQLParserParser.SCOPE_CATALOG:
			case PostgreSQLParserParser.SCOPE_NAME:
			case PostgreSQLParserParser.SCOPE_SCHEMA:
			case PostgreSQLParserParser.SCROLL:
			case PostgreSQLParserParser.SEARCH:
			case PostgreSQLParserParser.SECOND:
			case PostgreSQLParserParser.SECTION:
			case PostgreSQLParserParser.SECURITY:
			case PostgreSQLParserParser.SELF:
			case PostgreSQLParserParser.SENSITIVE:
			case PostgreSQLParserParser.SEQUENCE:
			case PostgreSQLParserParser.SEQUENCES:
			case PostgreSQLParserParser.SERIALIZABLE:
			case PostgreSQLParserParser.SERVER_NAME:
			case PostgreSQLParserParser.SESSION:
			case PostgreSQLParserParser.SET:
			case PostgreSQLParserParser.SETOF:
			case PostgreSQLParserParser.SETS:
			case PostgreSQLParserParser.SHARE:
			case PostgreSQLParserParser.SHOW:
			case PostgreSQLParserParser.SIMPLE:
			case PostgreSQLParserParser.SIZE:
			case PostgreSQLParserParser.SMALLINT:
			case PostgreSQLParserParser.SOME:
			case PostgreSQLParserParser.SOURCE:
			case PostgreSQLParserParser.SPACE:
			case PostgreSQLParserParser.SPECIFIC:
			case PostgreSQLParserParser.SPECIFIC_NAME:
			case PostgreSQLParserParser.SPECIFICTYPE:
			case PostgreSQLParserParser.SQL:
			case PostgreSQLParserParser.SQLCODE:
			case PostgreSQLParserParser.SQLERROR:
			case PostgreSQLParserParser.SQLEXCEPTION:
			case PostgreSQLParserParser.SQLSTATE:
			case PostgreSQLParserParser.SQLWARNING:
			case PostgreSQLParserParser.SQRT:
			case PostgreSQLParserParser.STABLE:
			case PostgreSQLParserParser.START:
			case PostgreSQLParserParser.STATE:
			case PostgreSQLParserParser.STATEMENT:
			case PostgreSQLParserParser.STATIC:
			case PostgreSQLParserParser.STATISTICS:
			case PostgreSQLParserParser.STDDEV_POP:
			case PostgreSQLParserParser.STDDEV_SAMP:
			case PostgreSQLParserParser.STDIN:
			case PostgreSQLParserParser.STDOUT:
			case PostgreSQLParserParser.STORAGE:
			case PostgreSQLParserParser.STRICT:
			case PostgreSQLParserParser.STRUCTURE:
			case PostgreSQLParserParser.STYLE:
			case PostgreSQLParserParser.SUBCLASS_ORIGIN:
			case PostgreSQLParserParser.SUBMULTISET:
			case PostgreSQLParserParser.SUBSTRING:
			case PostgreSQLParserParser.SUM:
			case PostgreSQLParserParser.SYSID:
			case PostgreSQLParserParser.SYSTEM:
			case PostgreSQLParserParser.SYSTEM_USER:
			case PostgreSQLParserParser.TABLE_NAME:
			case PostgreSQLParserParser.TABLESPACE:
			case PostgreSQLParserParser.TEMP:
			case PostgreSQLParserParser.TEMPLATE:
			case PostgreSQLParserParser.TEMPORARY:
			case PostgreSQLParserParser.TIES:
			case PostgreSQLParserParser.TIME:
			case PostgreSQLParserParser.TIMESTAMP:
			case PostgreSQLParserParser.TIMEZONE_HOUR:
			case PostgreSQLParserParser.TIMEZONE_MINUTE:
			case PostgreSQLParserParser.TOP_LEVEL_COUNT:
			case PostgreSQLParserParser.TRANSACTION:
			case PostgreSQLParserParser.TRANSACTION_ACTIVE:
			case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
			case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
			case PostgreSQLParserParser.TRANSFORM:
			case PostgreSQLParserParser.TRANSFORMS:
			case PostgreSQLParserParser.TRANSLATE:
			case PostgreSQLParserParser.TRANSLATION:
			case PostgreSQLParserParser.TREAT:
			case PostgreSQLParserParser.TRIGGER:
			case PostgreSQLParserParser.TRIGGER_CATALOG:
			case PostgreSQLParserParser.TRIGGER_NAME:
			case PostgreSQLParserParser.TRIGGER_SCHEMA:
			case PostgreSQLParserParser.TRIM:
			case PostgreSQLParserParser.TRUE:
			case PostgreSQLParserParser.TRUNCATE:
			case PostgreSQLParserParser.TRUSTED:
			case PostgreSQLParserParser.TYPE:
			case PostgreSQLParserParser.UESCAPE:
			case PostgreSQLParserParser.UNBOUNDED:
			case PostgreSQLParserParser.UNCOMMITTED:
			case PostgreSQLParserParser.UNDER:
			case PostgreSQLParserParser.UNENCRYPTED:
			case PostgreSQLParserParser.UNKNOWN:
			case PostgreSQLParserParser.UNLISTEN:
			case PostgreSQLParserParser.UNNAMED:
			case PostgreSQLParserParser.UNNEST:
			case PostgreSQLParserParser.UNTIL:
			case PostgreSQLParserParser.UPDATE:
			case PostgreSQLParserParser.UPPER:
			case PostgreSQLParserParser.USAGE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
			case PostgreSQLParserParser.VACUUM:
			case PostgreSQLParserParser.VALID:
			case PostgreSQLParserParser.VALIDATOR:
			case PostgreSQLParserParser.VALUE:
			case PostgreSQLParserParser.VALUES:
			case PostgreSQLParserParser.VAR_POP:
			case PostgreSQLParserParser.VAR_SAMP:
			case PostgreSQLParserParser.VARCHAR:
			case PostgreSQLParserParser.VARYING:
			case PostgreSQLParserParser.VIEW:
			case PostgreSQLParserParser.VOLATILE:
			case PostgreSQLParserParser.WHENEVER:
			case PostgreSQLParserParser.WIDTH_BUCKET:
			case PostgreSQLParserParser.WITHIN:
			case PostgreSQLParserParser.WITHOUT:
			case PostgreSQLParserParser.WORK:
			case PostgreSQLParserParser.WRITE:
			case PostgreSQLParserParser.YEAR:
			case PostgreSQLParserParser.ZONE:
			case PostgreSQLParserParser.ABSTIME:
			case PostgreSQLParserParser.BIGSERIAL:
			case PostgreSQLParserParser.BIT_VARYING:
			case PostgreSQLParserParser.BOOL:
			case PostgreSQLParserParser.BOX:
			case PostgreSQLParserParser.BYTEA:
			case PostgreSQLParserParser.CHARACTER_VARYING:
			case PostgreSQLParserParser.CIDR:
			case PostgreSQLParserParser.CIRCLE:
			case PostgreSQLParserParser.FLOAT4:
			case PostgreSQLParserParser.FLOAT8:
			case PostgreSQLParserParser.INET:
			case PostgreSQLParserParser.INT2:
			case PostgreSQLParserParser.INT4:
			case PostgreSQLParserParser.INT8:
			case PostgreSQLParserParser.JSON:
			case PostgreSQLParserParser.JSONB:
			case PostgreSQLParserParser.LINE:
			case PostgreSQLParserParser.LSEG:
			case PostgreSQLParserParser.MACADDR:
			case PostgreSQLParserParser.MACADDR8:
			case PostgreSQLParserParser.MONEY:
			case PostgreSQLParserParser.PG_LSN:
			case PostgreSQLParserParser.POINT:
			case PostgreSQLParserParser.POLYGON:
			case PostgreSQLParserParser.RELTIME:
			case PostgreSQLParserParser.SERIAL:
			case PostgreSQLParserParser.SERIAL2:
			case PostgreSQLParserParser.SERIAL4:
			case PostgreSQLParserParser.SERIAL8:
			case PostgreSQLParserParser.SMALLSERIAL:
			case PostgreSQLParserParser.TEXT:
			case PostgreSQLParserParser.TIMESTAMPTZ:
			case PostgreSQLParserParser.TIMETZ:
			case PostgreSQLParserParser.TSQUERY:
			case PostgreSQLParserParser.TSVECTOR:
			case PostgreSQLParserParser.TXID_SNAPSHOT:
			case PostgreSQLParserParser.UUID:
			case PostgreSQLParserParser.VARBIT:
			case PostgreSQLParserParser.XML:
			case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
			case PostgreSQLParserParser.IDENTIFIER:
			case PostgreSQLParserParser.IDENTIFIER_UNICODE:
				{
				this.state = 4519;
				this.func_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public offset_clause(): Offset_clauseContext {
		let _localctx: Offset_clauseContext = new Offset_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, PostgreSQLParserParser.RULE_offset_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4522;
			this.match(PostgreSQLParserParser.OFFSET);
			this.state = 4523;
			this.match(PostgreSQLParserParser.INTEGER_LITERAL);
			this.state = 4525;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 534, this._ctx) ) {
			case 1:
				{
				this.state = 4524;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.ROW || _la === PostgreSQLParserParser.ROWS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fetch_clause(): Fetch_clauseContext {
		let _localctx: Fetch_clauseContext = new Fetch_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, PostgreSQLParserParser.RULE_fetch_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4527;
			this.match(PostgreSQLParserParser.FETCH);
			this.state = 4528;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParserParser.FIRST || _la === PostgreSQLParserParser.NEXT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4530;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.INTEGER_LITERAL) {
				{
				this.state = 4529;
				this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				}
			}

			this.state = 4532;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParserParser.ROW || _la === PostgreSQLParserParser.ROWS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 4533;
			this.match(PostgreSQLParserParser.ONLY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_clause(): For_clauseContext {
		let _localctx: For_clauseContext = new For_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, PostgreSQLParserParser.RULE_for_clause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4535;
			this.match(PostgreSQLParserParser.FOR);
			this.state = 4543;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.UPDATE:
				{
				this.state = 4536;
				this.match(PostgreSQLParserParser.UPDATE);
				}
				break;
			case PostgreSQLParserParser.NO:
				{
				this.state = 4537;
				this.match(PostgreSQLParserParser.NO);
				this.state = 4538;
				this.match(PostgreSQLParserParser.KEY);
				this.state = 4539;
				this.match(PostgreSQLParserParser.UPDATE);
				}
				break;
			case PostgreSQLParserParser.SHARE:
				{
				this.state = 4540;
				this.match(PostgreSQLParserParser.SHARE);
				}
				break;
			case PostgreSQLParserParser.KEY:
				{
				this.state = 4541;
				this.match(PostgreSQLParserParser.KEY);
				this.state = 4542;
				this.match(PostgreSQLParserParser.SHARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4554;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 538, this._ctx) ) {
			case 1:
				{
				this.state = 4545;
				this.match(PostgreSQLParserParser.OF);
				this.state = 4546;
				this.table_name_();
				this.state = 4551;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 537, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 4547;
						this.match(PostgreSQLParserParser.COMMA);
						this.state = 4548;
						this.table_name_();
						}
						}
					}
					this.state = 4553;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 537, this._ctx);
				}
				}
				break;
			}
			this.state = 4561;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 540, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 4559;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PostgreSQLParserParser.NOWAIT:
						{
						this.state = 4556;
						this.match(PostgreSQLParserParser.NOWAIT);
						}
						break;
					case PostgreSQLParserParser.SKIP_:
						{
						this.state = 4557;
						this.match(PostgreSQLParserParser.SKIP_);
						this.state = 4558;
						this.match(PostgreSQLParserParser.LOCKED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 4563;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 540, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updater_clause(): Updater_clauseContext {
		let _localctx: Updater_clauseContext = new Updater_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, PostgreSQLParserParser.RULE_updater_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4564;
			this.updater_expr();
			this.state = 4569;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 4565;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 4566;
				this.updater_expr();
				}
				}
				this.state = 4571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updater_expr(): Updater_exprContext {
		let _localctx: Updater_exprContext = new Updater_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, PostgreSQLParserParser.RULE_updater_expr);
		try {
			this.state = 4581;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 543, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4572;
				this.expr(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 4573;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 4574;
				this.name_list();
				this.state = 4575;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 4576;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 4579;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 542, this._ctx) ) {
				case 1:
					{
					this.state = 4577;
					this.expr(0);
					}
					break;

				case 2:
					{
					this.state = 4578;
					this.expr_list();
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returning_clause(): Returning_clauseContext {
		let _localctx: Returning_clauseContext = new Returning_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, PostgreSQLParserParser.RULE_returning_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4583;
			this.match(PostgreSQLParserParser.RETURNING);
			this.state = 4584;
			this.column_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public expr(): ExprContext;
	public expr(_p: number): ExprContext;
	// @RuleVersion(0)
	public expr(_p?: number): ExprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExprContext = new ExprContext(this._ctx, _parentState);
		let _prevctx: ExprContext = _localctx;
		let _startState: number = 432;
		this.enterRecursionRule(_localctx, 432, PostgreSQLParserParser.RULE_expr, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4660;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 546, this._ctx) ) {
			case 1:
				{
				this.state = 4587;
				this.match(PostgreSQLParserParser.NULL);
				}
				break;

			case 2:
				{
				this.state = 4588;
				this.match(PostgreSQLParserParser.CURRENT_DATE);
				}
				break;

			case 3:
				{
				this.state = 4589;
				this.match(PostgreSQLParserParser.CURRENT_ROLE);
				}
				break;

			case 4:
				{
				this.state = 4590;
				this.match(PostgreSQLParserParser.CURRENT_TIME);
				}
				break;

			case 5:
				{
				this.state = 4591;
				this.match(PostgreSQLParserParser.CURRENT_TIMESTAMP);
				}
				break;

			case 6:
				{
				this.state = 4592;
				this.match(PostgreSQLParserParser.CURRENT_USER);
				}
				break;

			case 7:
				{
				this.state = 4593;
				this.match(PostgreSQLParserParser.DEFAULT);
				}
				break;

			case 8:
				{
				this.state = 4594;
				this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				}
				break;

			case 9:
				{
				this.state = 4595;
				this.match(PostgreSQLParserParser.HEX_INTEGER_LITERAL);
				}
				break;

			case 10:
				{
				this.state = 4596;
				this.match(PostgreSQLParserParser.NUMERIC_LITERAL);
				}
				break;

			case 11:
				{
				this.state = 4597;
				this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
				}
				break;

			case 12:
				{
				this.state = 4598;
				this.match(PostgreSQLParserParser.BIT_STRING);
				}
				break;

			case 13:
				{
				this.state = 4599;
				this.match(PostgreSQLParserParser.REGEX_STRING);
				}
				break;

			case 14:
				{
				this.state = 4600;
				this.match(PostgreSQLParserParser.DOLLAR_DOLLAR);
				this.state = 4602;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 4601;
						_la = this._input.LA(1);
						if (_la <= 0 || (_la === PostgreSQLParserParser.DOLLAR)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 4604;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 544, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				this.state = 4606;
				this.match(PostgreSQLParserParser.DOLLAR_DOLLAR);
				}
				break;

			case 15:
				{
				this.state = 4607;
				this.match(PostgreSQLParserParser.DOLLAR);
				this.state = 4608;
				this.identifier(0);
				this.state = 4610;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4609;
					_la = this._input.LA(1);
					if (_la <= 0 || (_la === PostgreSQLParserParser.DOLLAR)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					this.state = 4612;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.BLOCK_COMMENT) | (1 << PostgreSQLParserParser.LINE_COMMENT) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALIAS) | (1 << PostgreSQLParserParser.ALL) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANALYSE) | (1 << PostgreSQLParserParser.ANALYZE) | (1 << PostgreSQLParserParser.AND) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ARRAY) | (1 << PostgreSQLParserParser.AS) | (1 << PostgreSQLParserParser.ASC) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PostgreSQLParserParser.ASYMMETRIC - 32)) | (1 << (PostgreSQLParserParser.AT - 32)) | (1 << (PostgreSQLParserParser.ATOMIC - 32)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 32)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 32)) | (1 << (PostgreSQLParserParser.AUTHORIZATION - 32)) | (1 << (PostgreSQLParserParser.AVG - 32)) | (1 << (PostgreSQLParserParser.BACKWARD - 32)) | (1 << (PostgreSQLParserParser.BEFORE - 32)) | (1 << (PostgreSQLParserParser.BEGIN - 32)) | (1 << (PostgreSQLParserParser.BERNOULLI - 32)) | (1 << (PostgreSQLParserParser.BETWEEN - 32)) | (1 << (PostgreSQLParserParser.BIGINT - 32)) | (1 << (PostgreSQLParserParser.BINARY - 32)) | (1 << (PostgreSQLParserParser.BIT - 32)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 32)) | (1 << (PostgreSQLParserParser.BITVAR - 32)) | (1 << (PostgreSQLParserParser.BLOB - 32)) | (1 << (PostgreSQLParserParser.BOOLEAN - 32)) | (1 << (PostgreSQLParserParser.BOTH - 32)) | (1 << (PostgreSQLParserParser.BREADTH - 32)) | (1 << (PostgreSQLParserParser.BUFFERS - 32)) | (1 << (PostgreSQLParserParser.BY - 32)) | (1 << (PostgreSQLParserParser.C_ - 32)) | (1 << (PostgreSQLParserParser.CACHE - 32)) | (1 << (PostgreSQLParserParser.CALL - 32)) | (1 << (PostgreSQLParserParser.CALLED - 32)) | (1 << (PostgreSQLParserParser.CARDINALITY - 32)) | (1 << (PostgreSQLParserParser.CASCADE - 32)) | (1 << (PostgreSQLParserParser.CASCADED - 32)) | (1 << (PostgreSQLParserParser.CASE - 32)) | (1 << (PostgreSQLParserParser.CAST - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (PostgreSQLParserParser.CATALOG - 64)) | (1 << (PostgreSQLParserParser.CATALOG_NAME - 64)) | (1 << (PostgreSQLParserParser.CEIL - 64)) | (1 << (PostgreSQLParserParser.CEILING - 64)) | (1 << (PostgreSQLParserParser.CHAIN - 64)) | (1 << (PostgreSQLParserParser.CHAR - 64)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 64)) | (1 << (PostgreSQLParserParser.CHARACTER - 64)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 64)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 64)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 64)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 64)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 64)) | (1 << (PostgreSQLParserParser.CHARACTERS - 64)) | (1 << (PostgreSQLParserParser.CHECK - 64)) | (1 << (PostgreSQLParserParser.CHECKED - 64)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 64)) | (1 << (PostgreSQLParserParser.CLASS - 64)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 64)) | (1 << (PostgreSQLParserParser.CLOB - 64)) | (1 << (PostgreSQLParserParser.CLOSE - 64)) | (1 << (PostgreSQLParserParser.CLUSTER - 64)) | (1 << (PostgreSQLParserParser.COALESCE - 64)) | (1 << (PostgreSQLParserParser.COBOL - 64)) | (1 << (PostgreSQLParserParser.COLLATE - 64)) | (1 << (PostgreSQLParserParser.COLLATION - 64)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 64)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 64)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 64)) | (1 << (PostgreSQLParserParser.COLLECT - 64)) | (1 << (PostgreSQLParserParser.COLUMN - 64)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 96)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 96)) | (1 << (PostgreSQLParserParser.COMMENT - 96)) | (1 << (PostgreSQLParserParser.COMMIT - 96)) | (1 << (PostgreSQLParserParser.COMMITTED - 96)) | (1 << (PostgreSQLParserParser.COMPLETION - 96)) | (1 << (PostgreSQLParserParser.CONDITION - 96)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 96)) | (1 << (PostgreSQLParserParser.CONFIGURATION - 96)) | (1 << (PostgreSQLParserParser.CONFLICT - 96)) | (1 << (PostgreSQLParserParser.CONNECT - 96)) | (1 << (PostgreSQLParserParser.CONNECTION - 96)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 96)) | (1 << (PostgreSQLParserParser.CONSTRAINT - 96)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 96)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 96)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 96)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 96)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 96)) | (1 << (PostgreSQLParserParser.CONTAINS - 96)) | (1 << (PostgreSQLParserParser.CONTINUE - 96)) | (1 << (PostgreSQLParserParser.CONVERSION - 96)) | (1 << (PostgreSQLParserParser.CONVERT - 96)) | (1 << (PostgreSQLParserParser.COPY - 96)) | (1 << (PostgreSQLParserParser.CORR - 96)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 96)) | (1 << (PostgreSQLParserParser.COSTS - 96)) | (1 << (PostgreSQLParserParser.COUNT - 96)) | (1 << (PostgreSQLParserParser.COVAR_POP - 96)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 96)) | (1 << (PostgreSQLParserParser.CREATE - 96)) | (1 << (PostgreSQLParserParser.CREATEDB - 96)))) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & ((1 << (PostgreSQLParserParser.CREATEUSER - 128)) | (1 << (PostgreSQLParserParser.CROSS - 128)) | (1 << (PostgreSQLParserParser.CSV - 128)) | (1 << (PostgreSQLParserParser.CUBE - 128)) | (1 << (PostgreSQLParserParser.CUME_DIST - 128)) | (1 << (PostgreSQLParserParser.CURRENT - 128)) | (1 << (PostgreSQLParserParser.CURRENT_DATE - 128)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 128)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 128)) | (1 << (PostgreSQLParserParser.CURRENT_ROLE - 128)) | (1 << (PostgreSQLParserParser.CURRENT_TIME - 128)) | (1 << (PostgreSQLParserParser.CURRENT_TIMESTAMP - 128)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 128)) | (1 << (PostgreSQLParserParser.CURRENT_USER - 128)) | (1 << (PostgreSQLParserParser.CURSOR - 128)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 128)) | (1 << (PostgreSQLParserParser.CYCLE - 128)) | (1 << (PostgreSQLParserParser.DATA - 128)) | (1 << (PostgreSQLParserParser.DATABASE - 128)) | (1 << (PostgreSQLParserParser.DATE - 128)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 128)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 128)) | (1 << (PostgreSQLParserParser.DAY - 128)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 128)) | (1 << (PostgreSQLParserParser.DEC - 128)) | (1 << (PostgreSQLParserParser.DECIMAL - 128)) | (1 << (PostgreSQLParserParser.DECLARE - 128)) | (1 << (PostgreSQLParserParser.DEFAULT - 128)) | (1 << (PostgreSQLParserParser.DEFAULTS - 128)) | (1 << (PostgreSQLParserParser.DEFERABLE - 128)) | (1 << (PostgreSQLParserParser.DEFERRABLE - 128)) | (1 << (PostgreSQLParserParser.DEFERRED - 128)))) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PostgreSQLParserParser.DEFINED - 160)) | (1 << (PostgreSQLParserParser.DEFINER - 160)) | (1 << (PostgreSQLParserParser.DEGREE - 160)) | (1 << (PostgreSQLParserParser.DELETE - 160)) | (1 << (PostgreSQLParserParser.DELIMITER - 160)) | (1 << (PostgreSQLParserParser.DELIMITERS - 160)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 160)) | (1 << (PostgreSQLParserParser.DEPENDS - 160)) | (1 << (PostgreSQLParserParser.DEPTH - 160)) | (1 << (PostgreSQLParserParser.DEREF - 160)) | (1 << (PostgreSQLParserParser.DERIVED - 160)) | (1 << (PostgreSQLParserParser.DESC - 160)) | (1 << (PostgreSQLParserParser.DESCRIBE - 160)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 160)) | (1 << (PostgreSQLParserParser.DESTROY - 160)) | (1 << (PostgreSQLParserParser.DESTRUCTOR - 160)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 160)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 160)) | (1 << (PostgreSQLParserParser.DICTIONARY - 160)) | (1 << (PostgreSQLParserParser.DISABLE - 160)) | (1 << (PostgreSQLParserParser.DISABLE_PAGE_SKIPPING - 160)) | (1 << (PostgreSQLParserParser.DISCARD - 160)) | (1 << (PostgreSQLParserParser.DISCONNECT - 160)) | (1 << (PostgreSQLParserParser.DISPATCH - 160)) | (1 << (PostgreSQLParserParser.DISTINCT - 160)) | (1 << (PostgreSQLParserParser.DO - 160)) | (1 << (PostgreSQLParserParser.DOMAIN - 160)) | (1 << (PostgreSQLParserParser.DOUBLE - 160)) | (1 << (PostgreSQLParserParser.DROP - 160)) | (1 << (PostgreSQLParserParser.DYNAMIC - 160)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 160)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 160)))) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & ((1 << (PostgreSQLParserParser.EACH - 192)) | (1 << (PostgreSQLParserParser.ELEMENT - 192)) | (1 << (PostgreSQLParserParser.ELSE - 192)) | (1 << (PostgreSQLParserParser.ENABLE - 192)) | (1 << (PostgreSQLParserParser.ENCODING - 192)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 192)) | (1 << (PostgreSQLParserParser.END - 192)) | (1 << (PostgreSQLParserParser.END_EXEC - 192)) | (1 << (PostgreSQLParserParser.EQUALS - 192)) | (1 << (PostgreSQLParserParser.ESCAPE - 192)) | (1 << (PostgreSQLParserParser.EVERY - 192)) | (1 << (PostgreSQLParserParser.EXCEPT - 192)) | (1 << (PostgreSQLParserParser.EXCEPTION - 192)) | (1 << (PostgreSQLParserParser.EXCLUDE - 192)) | (1 << (PostgreSQLParserParser.EXCLUDING - 192)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 192)) | (1 << (PostgreSQLParserParser.EXEC - 192)) | (1 << (PostgreSQLParserParser.EXECUTE - 192)) | (1 << (PostgreSQLParserParser.EXISTING - 192)) | (1 << (PostgreSQLParserParser.EXISTS - 192)) | (1 << (PostgreSQLParserParser.EXP - 192)) | (1 << (PostgreSQLParserParser.EXPLAIN - 192)) | (1 << (PostgreSQLParserParser.EXTENDED - 192)) | (1 << (PostgreSQLParserParser.EXTENSION - 192)) | (1 << (PostgreSQLParserParser.EXTERNAL - 192)) | (1 << (PostgreSQLParserParser.EXTRACT - 192)) | (1 << (PostgreSQLParserParser.FALSE - 192)) | (1 << (PostgreSQLParserParser.FETCH - 192)) | (1 << (PostgreSQLParserParser.FIELDS - 192)) | (1 << (PostgreSQLParserParser.FILTER - 192)) | (1 << (PostgreSQLParserParser.FINAL - 192)) | (1 << (PostgreSQLParserParser.FIRST - 192)))) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & ((1 << (PostgreSQLParserParser.FLOAT - 224)) | (1 << (PostgreSQLParserParser.FLOOR - 224)) | (1 << (PostgreSQLParserParser.FOLLOWING - 224)) | (1 << (PostgreSQLParserParser.FOR - 224)) | (1 << (PostgreSQLParserParser.FORCE - 224)) | (1 << (PostgreSQLParserParser.FOREIGN - 224)) | (1 << (PostgreSQLParserParser.FORMAT - 224)) | (1 << (PostgreSQLParserParser.FORTRAN - 224)) | (1 << (PostgreSQLParserParser.FORWARD - 224)) | (1 << (PostgreSQLParserParser.FOUND - 224)) | (1 << (PostgreSQLParserParser.FREE - 224)) | (1 << (PostgreSQLParserParser.FREEZE - 224)) | (1 << (PostgreSQLParserParser.FROM - 224)) | (1 << (PostgreSQLParserParser.FULL - 224)) | (1 << (PostgreSQLParserParser.FUNCTION - 224)) | (1 << (PostgreSQLParserParser.FUSION - 224)) | (1 << (PostgreSQLParserParser.G_ - 224)) | (1 << (PostgreSQLParserParser.GENERAL - 224)) | (1 << (PostgreSQLParserParser.GENERATED - 224)) | (1 << (PostgreSQLParserParser.GET - 224)) | (1 << (PostgreSQLParserParser.GLOBAL - 224)) | (1 << (PostgreSQLParserParser.GO - 224)) | (1 << (PostgreSQLParserParser.GOTO - 224)) | (1 << (PostgreSQLParserParser.GRANT - 224)) | (1 << (PostgreSQLParserParser.GRANTED - 224)) | (1 << (PostgreSQLParserParser.GREATEST - 224)) | (1 << (PostgreSQLParserParser.GROUP - 224)) | (1 << (PostgreSQLParserParser.GROUPING - 224)) | (1 << (PostgreSQLParserParser.HANDLER - 224)) | (1 << (PostgreSQLParserParser.HAVING - 224)) | (1 << (PostgreSQLParserParser.HIERARCHY - 224)) | (1 << (PostgreSQLParserParser.HOLD - 224)))) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & ((1 << (PostgreSQLParserParser.HOST - 256)) | (1 << (PostgreSQLParserParser.HOUR - 256)) | (1 << (PostgreSQLParserParser.IDENTITY - 256)) | (1 << (PostgreSQLParserParser.IGNORE - 256)) | (1 << (PostgreSQLParserParser.ILIKE - 256)) | (1 << (PostgreSQLParserParser.IMMEDIATE - 256)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 256)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 256)) | (1 << (PostgreSQLParserParser.IMPLICIT - 256)) | (1 << (PostgreSQLParserParser.IN - 256)) | (1 << (PostgreSQLParserParser.INCLUDING - 256)) | (1 << (PostgreSQLParserParser.INCREMENT - 256)) | (1 << (PostgreSQLParserParser.INDEX - 256)) | (1 << (PostgreSQLParserParser.INDICATOR - 256)) | (1 << (PostgreSQLParserParser.INFIX - 256)) | (1 << (PostgreSQLParserParser.INHERITS - 256)) | (1 << (PostgreSQLParserParser.INITIALIZE - 256)) | (1 << (PostgreSQLParserParser.INITIALLY - 256)) | (1 << (PostgreSQLParserParser.INNER - 256)) | (1 << (PostgreSQLParserParser.INOUT - 256)) | (1 << (PostgreSQLParserParser.INPUT - 256)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 256)) | (1 << (PostgreSQLParserParser.INSERT - 256)) | (1 << (PostgreSQLParserParser.INSTANCE - 256)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 256)) | (1 << (PostgreSQLParserParser.INSTEAD - 256)) | (1 << (PostgreSQLParserParser.INT - 256)) | (1 << (PostgreSQLParserParser.INTEGER - 256)) | (1 << (PostgreSQLParserParser.INTERSECT - 256)) | (1 << (PostgreSQLParserParser.INTERSECTION - 256)) | (1 << (PostgreSQLParserParser.INTERVAL - 256)) | (1 << (PostgreSQLParserParser.INTO - 256)))) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & ((1 << (PostgreSQLParserParser.INVOKER - 288)) | (1 << (PostgreSQLParserParser.IS - 288)) | (1 << (PostgreSQLParserParser.ISOLATION - 288)) | (1 << (PostgreSQLParserParser.ITERATE - 288)) | (1 << (PostgreSQLParserParser.JOIN - 288)) | (1 << (PostgreSQLParserParser.K_ - 288)) | (1 << (PostgreSQLParserParser.KEY - 288)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 288)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 288)) | (1 << (PostgreSQLParserParser.LABEL - 288)) | (1 << (PostgreSQLParserParser.LANCOMPILER - 288)) | (1 << (PostgreSQLParserParser.LANGUAGE - 288)) | (1 << (PostgreSQLParserParser.LARGE - 288)) | (1 << (PostgreSQLParserParser.LAST - 288)) | (1 << (PostgreSQLParserParser.LATERAL - 288)) | (1 << (PostgreSQLParserParser.LEADING - 288)) | (1 << (PostgreSQLParserParser.LEAST - 288)) | (1 << (PostgreSQLParserParser.LEFT - 288)) | (1 << (PostgreSQLParserParser.LENGTH - 288)) | (1 << (PostgreSQLParserParser.LESS - 288)) | (1 << (PostgreSQLParserParser.LEVEL - 288)) | (1 << (PostgreSQLParserParser.LIKE - 288)) | (1 << (PostgreSQLParserParser.LIMIT - 288)) | (1 << (PostgreSQLParserParser.LISTEN - 288)) | (1 << (PostgreSQLParserParser.LN - 288)) | (1 << (PostgreSQLParserParser.LOAD - 288)) | (1 << (PostgreSQLParserParser.LOCAL - 288)) | (1 << (PostgreSQLParserParser.LOCALTIME - 288)) | (1 << (PostgreSQLParserParser.LOCALTIMESTAMP - 288)) | (1 << (PostgreSQLParserParser.LOCATION - 288)) | (1 << (PostgreSQLParserParser.LOCATOR - 288)) | (1 << (PostgreSQLParserParser.LOCK - 288)))) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & ((1 << (PostgreSQLParserParser.LOCKED - 320)) | (1 << (PostgreSQLParserParser.LOWER - 320)) | (1 << (PostgreSQLParserParser.M_ - 320)) | (1 << (PostgreSQLParserParser.MAIN - 320)) | (1 << (PostgreSQLParserParser.MAP - 320)) | (1 << (PostgreSQLParserParser.MAPPING - 320)) | (1 << (PostgreSQLParserParser.MATCH - 320)) | (1 << (PostgreSQLParserParser.MATCH_SIMPLE - 320)) | (1 << (PostgreSQLParserParser.MATCHED - 320)) | (1 << (PostgreSQLParserParser.MAX - 320)) | (1 << (PostgreSQLParserParser.MAXVALUE - 320)) | (1 << (PostgreSQLParserParser.MEMBER - 320)) | (1 << (PostgreSQLParserParser.MERGE - 320)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 320)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 320)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 320)) | (1 << (PostgreSQLParserParser.METHOD - 320)) | (1 << (PostgreSQLParserParser.MIN - 320)) | (1 << (PostgreSQLParserParser.MINUTE - 320)) | (1 << (PostgreSQLParserParser.MINVALUE - 320)) | (1 << (PostgreSQLParserParser.MOD - 320)) | (1 << (PostgreSQLParserParser.MODE - 320)) | (1 << (PostgreSQLParserParser.MODIFIES - 320)) | (1 << (PostgreSQLParserParser.MODIFY - 320)) | (1 << (PostgreSQLParserParser.MODULE - 320)) | (1 << (PostgreSQLParserParser.MONTH - 320)) | (1 << (PostgreSQLParserParser.MORE_ - 320)) | (1 << (PostgreSQLParserParser.MOVE - 320)) | (1 << (PostgreSQLParserParser.MULTISET - 320)) | (1 << (PostgreSQLParserParser.MUMPS - 320)) | (1 << (PostgreSQLParserParser.NAME - 320)) | (1 << (PostgreSQLParserParser.NAMES - 320)))) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PostgreSQLParserParser.NATIONAL - 352)) | (1 << (PostgreSQLParserParser.NATURAL - 352)) | (1 << (PostgreSQLParserParser.NCHAR - 352)) | (1 << (PostgreSQLParserParser.NCLOB - 352)) | (1 << (PostgreSQLParserParser.NESTING - 352)) | (1 << (PostgreSQLParserParser.NEW - 352)) | (1 << (PostgreSQLParserParser.NEXT - 352)) | (1 << (PostgreSQLParserParser.NO - 352)) | (1 << (PostgreSQLParserParser.NOCREATEDB - 352)) | (1 << (PostgreSQLParserParser.NOCREATEUSER - 352)) | (1 << (PostgreSQLParserParser.NONE - 352)) | (1 << (PostgreSQLParserParser.NORMALIZE - 352)) | (1 << (PostgreSQLParserParser.NORMALIZED - 352)) | (1 << (PostgreSQLParserParser.NOT - 352)) | (1 << (PostgreSQLParserParser.NOTHING - 352)) | (1 << (PostgreSQLParserParser.NOTIFY - 352)) | (1 << (PostgreSQLParserParser.NOTNULL - 352)) | (1 << (PostgreSQLParserParser.NOWAIT - 352)) | (1 << (PostgreSQLParserParser.NULL - 352)) | (1 << (PostgreSQLParserParser.NULLABLE - 352)) | (1 << (PostgreSQLParserParser.NULLIF - 352)) | (1 << (PostgreSQLParserParser.NULLS - 352)) | (1 << (PostgreSQLParserParser.NUMBER - 352)) | (1 << (PostgreSQLParserParser.NUMERIC - 352)) | (1 << (PostgreSQLParserParser.OBJECT - 352)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 352)) | (1 << (PostgreSQLParserParser.OCTETS - 352)) | (1 << (PostgreSQLParserParser.OF - 352)) | (1 << (PostgreSQLParserParser.OFF - 352)) | (1 << (PostgreSQLParserParser.OFFSET - 352)) | (1 << (PostgreSQLParserParser.OIDS - 352)) | (1 << (PostgreSQLParserParser.OLD - 352)))) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & ((1 << (PostgreSQLParserParser.ON - 384)) | (1 << (PostgreSQLParserParser.ONLY - 384)) | (1 << (PostgreSQLParserParser.OPEN - 384)) | (1 << (PostgreSQLParserParser.OPERATION - 384)) | (1 << (PostgreSQLParserParser.OPERATOR - 384)) | (1 << (PostgreSQLParserParser.OPTION - 384)) | (1 << (PostgreSQLParserParser.OPTIONS - 384)) | (1 << (PostgreSQLParserParser.OR - 384)) | (1 << (PostgreSQLParserParser.ORDER - 384)) | (1 << (PostgreSQLParserParser.ORDERING - 384)) | (1 << (PostgreSQLParserParser.ORDINALITY - 384)) | (1 << (PostgreSQLParserParser.OTHERS - 384)) | (1 << (PostgreSQLParserParser.OUT - 384)) | (1 << (PostgreSQLParserParser.OUTER - 384)) | (1 << (PostgreSQLParserParser.OUTPUT - 384)) | (1 << (PostgreSQLParserParser.OVER - 384)) | (1 << (PostgreSQLParserParser.OVERLAPS - 384)) | (1 << (PostgreSQLParserParser.OVERLAY - 384)) | (1 << (PostgreSQLParserParser.OVERRIDING - 384)) | (1 << (PostgreSQLParserParser.OWNER - 384)) | (1 << (PostgreSQLParserParser.PAD - 384)) | (1 << (PostgreSQLParserParser.PARAMETER - 384)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 384)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 384)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 384)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 384)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 384)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 384)) | (1 << (PostgreSQLParserParser.PARAMETERS - 384)) | (1 << (PostgreSQLParserParser.PARSER - 384)) | (1 << (PostgreSQLParserParser.PARTIAL - 384)) | (1 << (PostgreSQLParserParser.PARTITION - 384)))) !== 0) || ((((_la - 416)) & ~0x1F) === 0 && ((1 << (_la - 416)) & ((1 << (PostgreSQLParserParser.PASCAL - 416)) | (1 << (PostgreSQLParserParser.PASSWORD - 416)) | (1 << (PostgreSQLParserParser.PATH - 416)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 416)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 416)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 416)) | (1 << (PostgreSQLParserParser.PLACING - 416)) | (1 << (PostgreSQLParserParser.PLAIN - 416)) | (1 << (PostgreSQLParserParser.PLANS - 416)) | (1 << (PostgreSQLParserParser.PLI - 416)) | (1 << (PostgreSQLParserParser.POSITION - 416)) | (1 << (PostgreSQLParserParser.POSTFIX - 416)) | (1 << (PostgreSQLParserParser.POWER - 416)) | (1 << (PostgreSQLParserParser.PRECEDING - 416)) | (1 << (PostgreSQLParserParser.PRECISION - 416)) | (1 << (PostgreSQLParserParser.PREFIX - 416)) | (1 << (PostgreSQLParserParser.PREORDER - 416)) | (1 << (PostgreSQLParserParser.PREPARE - 416)) | (1 << (PostgreSQLParserParser.PREPARED - 416)) | (1 << (PostgreSQLParserParser.PRESERVE - 416)) | (1 << (PostgreSQLParserParser.PRIMARY - 416)) | (1 << (PostgreSQLParserParser.PRIOR - 416)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 416)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 416)) | (1 << (PostgreSQLParserParser.PROCEDURE - 416)) | (1 << (PostgreSQLParserParser.PUBLIC - 416)) | (1 << (PostgreSQLParserParser.PUBLICATION - 416)) | (1 << (PostgreSQLParserParser.QUOTE - 416)) | (1 << (PostgreSQLParserParser.RANGE - 416)) | (1 << (PostgreSQLParserParser.RANK - 416)) | (1 << (PostgreSQLParserParser.READ - 416)) | (1 << (PostgreSQLParserParser.READS - 416)))) !== 0) || ((((_la - 448)) & ~0x1F) === 0 && ((1 << (_la - 448)) & ((1 << (PostgreSQLParserParser.REAL - 448)) | (1 << (PostgreSQLParserParser.REASSIGN - 448)) | (1 << (PostgreSQLParserParser.RECHECK - 448)) | (1 << (PostgreSQLParserParser.RECURSIVE - 448)) | (1 << (PostgreSQLParserParser.REF - 448)) | (1 << (PostgreSQLParserParser.REFERENCES - 448)) | (1 << (PostgreSQLParserParser.REFERENCING - 448)) | (1 << (PostgreSQLParserParser.REFRESH - 448)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 448)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 448)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 448)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 448)) | (1 << (PostgreSQLParserParser.REGR_R2 - 448)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 448)) | (1 << (PostgreSQLParserParser.REGR_SXX - 448)) | (1 << (PostgreSQLParserParser.REGR_SXY - 448)) | (1 << (PostgreSQLParserParser.REGR_SYY - 448)) | (1 << (PostgreSQLParserParser.REINDEX - 448)) | (1 << (PostgreSQLParserParser.RELATIVE - 448)) | (1 << (PostgreSQLParserParser.RELEASE - 448)) | (1 << (PostgreSQLParserParser.RENAME - 448)) | (1 << (PostgreSQLParserParser.REPEATABLE - 448)) | (1 << (PostgreSQLParserParser.REPLACE - 448)) | (1 << (PostgreSQLParserParser.REPLICA - 448)) | (1 << (PostgreSQLParserParser.RESET - 448)) | (1 << (PostgreSQLParserParser.RESTART - 448)) | (1 << (PostgreSQLParserParser.RESTRICT - 448)) | (1 << (PostgreSQLParserParser.RESULT - 448)) | (1 << (PostgreSQLParserParser.RETURN - 448)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 448)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 448)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 448)))) !== 0) || ((((_la - 480)) & ~0x1F) === 0 && ((1 << (_la - 480)) & ((1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 480)) | (1 << (PostgreSQLParserParser.RETURNING - 480)) | (1 << (PostgreSQLParserParser.RETURNS - 480)) | (1 << (PostgreSQLParserParser.REVOKE - 480)) | (1 << (PostgreSQLParserParser.RIGHT - 480)) | (1 << (PostgreSQLParserParser.ROLE - 480)) | (1 << (PostgreSQLParserParser.ROLLBACK - 480)) | (1 << (PostgreSQLParserParser.ROLLUP - 480)) | (1 << (PostgreSQLParserParser.ROUTINE - 480)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 480)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 480)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 480)) | (1 << (PostgreSQLParserParser.ROW - 480)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 480)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 480)) | (1 << (PostgreSQLParserParser.ROWS - 480)) | (1 << (PostgreSQLParserParser.RULE - 480)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 480)) | (1 << (PostgreSQLParserParser.SCALE - 480)) | (1 << (PostgreSQLParserParser.SCHEMA - 480)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 480)) | (1 << (PostgreSQLParserParser.SCOPE - 480)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 480)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 480)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 480)) | (1 << (PostgreSQLParserParser.SCROLL - 480)) | (1 << (PostgreSQLParserParser.SEARCH - 480)) | (1 << (PostgreSQLParserParser.SECOND - 480)) | (1 << (PostgreSQLParserParser.SECTION - 480)) | (1 << (PostgreSQLParserParser.SECURITY - 480)) | (1 << (PostgreSQLParserParser.SELECT - 480)) | (1 << (PostgreSQLParserParser.SELF - 480)))) !== 0) || ((((_la - 512)) & ~0x1F) === 0 && ((1 << (_la - 512)) & ((1 << (PostgreSQLParserParser.SENSITIVE - 512)) | (1 << (PostgreSQLParserParser.SEQUENCE - 512)) | (1 << (PostgreSQLParserParser.SEQUENCES - 512)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 512)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 512)) | (1 << (PostgreSQLParserParser.SESSION - 512)) | (1 << (PostgreSQLParserParser.SESSION_USER - 512)) | (1 << (PostgreSQLParserParser.SET - 512)) | (1 << (PostgreSQLParserParser.SETOF - 512)) | (1 << (PostgreSQLParserParser.SETS - 512)) | (1 << (PostgreSQLParserParser.SHARE - 512)) | (1 << (PostgreSQLParserParser.SHOW - 512)) | (1 << (PostgreSQLParserParser.SIMILAR - 512)) | (1 << (PostgreSQLParserParser.SIMPLE - 512)) | (1 << (PostgreSQLParserParser.SIZE - 512)) | (1 << (PostgreSQLParserParser.SKIP_ - 512)) | (1 << (PostgreSQLParserParser.SMALLINT - 512)) | (1 << (PostgreSQLParserParser.SNAPSHOT - 512)) | (1 << (PostgreSQLParserParser.SOME - 512)) | (1 << (PostgreSQLParserParser.SOURCE - 512)) | (1 << (PostgreSQLParserParser.SPACE - 512)) | (1 << (PostgreSQLParserParser.SPECIFIC - 512)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 512)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 512)) | (1 << (PostgreSQLParserParser.SQL - 512)) | (1 << (PostgreSQLParserParser.SQLCODE - 512)) | (1 << (PostgreSQLParserParser.SQLERROR - 512)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 512)) | (1 << (PostgreSQLParserParser.SQLSTATE - 512)) | (1 << (PostgreSQLParserParser.SQLWARNING - 512)) | (1 << (PostgreSQLParserParser.SQRT - 512)) | (1 << (PostgreSQLParserParser.STABLE - 512)))) !== 0) || ((((_la - 544)) & ~0x1F) === 0 && ((1 << (_la - 544)) & ((1 << (PostgreSQLParserParser.START - 544)) | (1 << (PostgreSQLParserParser.STATE - 544)) | (1 << (PostgreSQLParserParser.STATEMENT - 544)) | (1 << (PostgreSQLParserParser.STATIC - 544)) | (1 << (PostgreSQLParserParser.STATISTICS - 544)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 544)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 544)) | (1 << (PostgreSQLParserParser.STDIN - 544)) | (1 << (PostgreSQLParserParser.STDOUT - 544)) | (1 << (PostgreSQLParserParser.STORAGE - 544)) | (1 << (PostgreSQLParserParser.STRICT - 544)) | (1 << (PostgreSQLParserParser.STRUCTURE - 544)) | (1 << (PostgreSQLParserParser.STYLE - 544)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 544)) | (1 << (PostgreSQLParserParser.SUBLIST - 544)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 544)) | (1 << (PostgreSQLParserParser.SUBSCRIPTION - 544)) | (1 << (PostgreSQLParserParser.SUBSTRING - 544)) | (1 << (PostgreSQLParserParser.SUM - 544)) | (1 << (PostgreSQLParserParser.SYMMETRIC - 544)) | (1 << (PostgreSQLParserParser.SYSID - 544)) | (1 << (PostgreSQLParserParser.SYSTEM - 544)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 544)) | (1 << (PostgreSQLParserParser.TABLE - 544)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 544)) | (1 << (PostgreSQLParserParser.TABLESAMPLE - 544)) | (1 << (PostgreSQLParserParser.TABLESPACE - 544)) | (1 << (PostgreSQLParserParser.TEMP - 544)) | (1 << (PostgreSQLParserParser.TEMPLATE - 544)) | (1 << (PostgreSQLParserParser.TEMPORARY - 544)) | (1 << (PostgreSQLParserParser.TERMINATE - 544)) | (1 << (PostgreSQLParserParser.THAN - 544)))) !== 0) || ((((_la - 576)) & ~0x1F) === 0 && ((1 << (_la - 576)) & ((1 << (PostgreSQLParserParser.THEN - 576)) | (1 << (PostgreSQLParserParser.TIES - 576)) | (1 << (PostgreSQLParserParser.TIME - 576)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 576)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 576)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 576)) | (1 << (PostgreSQLParserParser.TIMING - 576)) | (1 << (PostgreSQLParserParser.TO - 576)) | (1 << (PostgreSQLParserParser.TOAST - 576)) | (1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 576)) | (1 << (PostgreSQLParserParser.TRAILING - 576)) | (1 << (PostgreSQLParserParser.TRANSACTION - 576)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 576)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 576)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 576)) | (1 << (PostgreSQLParserParser.TRANSFORM - 576)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 576)) | (1 << (PostgreSQLParserParser.TRANSLATE - 576)) | (1 << (PostgreSQLParserParser.TRANSLATION - 576)) | (1 << (PostgreSQLParserParser.TREAT - 576)) | (1 << (PostgreSQLParserParser.TRIGGER - 576)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 576)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 576)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 576)) | (1 << (PostgreSQLParserParser.TRIM - 576)) | (1 << (PostgreSQLParserParser.TRUE - 576)) | (1 << (PostgreSQLParserParser.TRUNCATE - 576)) | (1 << (PostgreSQLParserParser.TRUSTED - 576)) | (1 << (PostgreSQLParserParser.TYPE - 576)) | (1 << (PostgreSQLParserParser.UESCAPE - 576)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 576)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 576)))) !== 0) || ((((_la - 608)) & ~0x1F) === 0 && ((1 << (_la - 608)) & ((1 << (PostgreSQLParserParser.UNDER - 608)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 608)) | (1 << (PostgreSQLParserParser.UNION - 608)) | (1 << (PostgreSQLParserParser.UNIQUE - 608)) | (1 << (PostgreSQLParserParser.UNKNOWN - 608)) | (1 << (PostgreSQLParserParser.UNLISTEN - 608)) | (1 << (PostgreSQLParserParser.UNNAMED - 608)) | (1 << (PostgreSQLParserParser.UNNEST - 608)) | (1 << (PostgreSQLParserParser.UNTIL - 608)) | (1 << (PostgreSQLParserParser.UPDATE - 608)) | (1 << (PostgreSQLParserParser.UPPER - 608)) | (1 << (PostgreSQLParserParser.USAGE - 608)) | (1 << (PostgreSQLParserParser.USER - 608)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 608)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 608)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 608)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 608)) | (1 << (PostgreSQLParserParser.USING - 608)) | (1 << (PostgreSQLParserParser.VACUUM - 608)) | (1 << (PostgreSQLParserParser.VALID - 608)) | (1 << (PostgreSQLParserParser.VALIDATE - 608)) | (1 << (PostgreSQLParserParser.VALIDATOR - 608)) | (1 << (PostgreSQLParserParser.VALUE - 608)) | (1 << (PostgreSQLParserParser.VALUES - 608)) | (1 << (PostgreSQLParserParser.VAR_POP - 608)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 608)) | (1 << (PostgreSQLParserParser.VARCHAR - 608)) | (1 << (PostgreSQLParserParser.VARIABLE - 608)) | (1 << (PostgreSQLParserParser.VARIADIC - 608)) | (1 << (PostgreSQLParserParser.VARYING - 608)) | (1 << (PostgreSQLParserParser.VERBOSE - 608)) | (1 << (PostgreSQLParserParser.VIEW - 608)))) !== 0) || ((((_la - 640)) & ~0x1F) === 0 && ((1 << (_la - 640)) & ((1 << (PostgreSQLParserParser.VOLATILE - 640)) | (1 << (PostgreSQLParserParser.WHEN - 640)) | (1 << (PostgreSQLParserParser.WHENEVER - 640)) | (1 << (PostgreSQLParserParser.WHERE - 640)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 640)) | (1 << (PostgreSQLParserParser.WINDOW - 640)) | (1 << (PostgreSQLParserParser.WITH - 640)) | (1 << (PostgreSQLParserParser.WITHIN - 640)) | (1 << (PostgreSQLParserParser.WITHOUT - 640)) | (1 << (PostgreSQLParserParser.WORK - 640)) | (1 << (PostgreSQLParserParser.WRITE - 640)) | (1 << (PostgreSQLParserParser.YAML - 640)) | (1 << (PostgreSQLParserParser.YEAR - 640)) | (1 << (PostgreSQLParserParser.YES - 640)) | (1 << (PostgreSQLParserParser.ZONE - 640)) | (1 << (PostgreSQLParserParser.SUPERUSER - 640)) | (1 << (PostgreSQLParserParser.NOSUPERUSER - 640)) | (1 << (PostgreSQLParserParser.CREATEROLE - 640)) | (1 << (PostgreSQLParserParser.NOCREATEROLE - 640)) | (1 << (PostgreSQLParserParser.INHERIT - 640)) | (1 << (PostgreSQLParserParser.NOINHERIT - 640)) | (1 << (PostgreSQLParserParser.LOGIN - 640)) | (1 << (PostgreSQLParserParser.NOLOGIN - 640)) | (1 << (PostgreSQLParserParser.REPLICATION - 640)) | (1 << (PostgreSQLParserParser.NOREPLICATION - 640)) | (1 << (PostgreSQLParserParser.BYPASSRLS - 640)) | (1 << (PostgreSQLParserParser.NOBYPASSRLS - 640)) | (1 << (PostgreSQLParserParser.SFUNC - 640)) | (1 << (PostgreSQLParserParser.STYPE - 640)) | (1 << (PostgreSQLParserParser.SSPACE - 640)) | (1 << (PostgreSQLParserParser.FINALFUNC - 640)) | (1 << (PostgreSQLParserParser.FINALFUNC_EXTRA - 640)))) !== 0) || ((((_la - 672)) & ~0x1F) === 0 && ((1 << (_la - 672)) & ((1 << (PostgreSQLParserParser.COMBINEFUNC - 672)) | (1 << (PostgreSQLParserParser.SERIALFUNC - 672)) | (1 << (PostgreSQLParserParser.DESERIALFUNC - 672)) | (1 << (PostgreSQLParserParser.INITCOND - 672)) | (1 << (PostgreSQLParserParser.MSFUNC - 672)) | (1 << (PostgreSQLParserParser.MINVFUNC - 672)) | (1 << (PostgreSQLParserParser.MSTYPE - 672)) | (1 << (PostgreSQLParserParser.MSSPACE - 672)) | (1 << (PostgreSQLParserParser.MFINALFUNC - 672)) | (1 << (PostgreSQLParserParser.MFINALFUNC_EXTRA - 672)) | (1 << (PostgreSQLParserParser.MINITCOND - 672)) | (1 << (PostgreSQLParserParser.SORTOP - 672)) | (1 << (PostgreSQLParserParser.PARALLEL - 672)) | (1 << (PostgreSQLParserParser.HYPOTHETICAL - 672)) | (1 << (PostgreSQLParserParser.SAFE - 672)) | (1 << (PostgreSQLParserParser.RESTRICTED - 672)) | (1 << (PostgreSQLParserParser.UNSAFE - 672)) | (1 << (PostgreSQLParserParser.BASETYPE - 672)) | (1 << (PostgreSQLParserParser.IF - 672)) | (1 << (PostgreSQLParserParser.LOCALE - 672)) | (1 << (PostgreSQLParserParser.LC_COLLATE - 672)) | (1 << (PostgreSQLParserParser.LC_CTYPE - 672)) | (1 << (PostgreSQLParserParser.PROVIDER - 672)) | (1 << (PostgreSQLParserParser.VERSION - 672)) | (1 << (PostgreSQLParserParser.ALLOW_CONNECTIONS - 672)) | (1 << (PostgreSQLParserParser.IS_TEMPLATE - 672)) | (1 << (PostgreSQLParserParser.EVENT - 672)) | (1 << (PostgreSQLParserParser.WRAPPER - 672)) | (1 << (PostgreSQLParserParser.SERVER - 672)) | (1 << (PostgreSQLParserParser.BTREE - 672)) | (1 << (PostgreSQLParserParser.HASH_ - 672)) | (1 << (PostgreSQLParserParser.GIST - 672)))) !== 0) || ((((_la - 704)) & ~0x1F) === 0 && ((1 << (_la - 704)) & ((1 << (PostgreSQLParserParser.SPGIST - 704)) | (1 << (PostgreSQLParserParser.GIN - 704)) | (1 << (PostgreSQLParserParser.BRIN - 704)) | (1 << (PostgreSQLParserParser.CONCURRENTLY - 704)) | (1 << (PostgreSQLParserParser.INLINE - 704)) | (1 << (PostgreSQLParserParser.MATERIALIZED - 704)) | (1 << (PostgreSQLParserParser.LEFTARG - 704)) | (1 << (PostgreSQLParserParser.RIGHTARG - 704)) | (1 << (PostgreSQLParserParser.COMMUTATOR - 704)) | (1 << (PostgreSQLParserParser.NEGATOR - 704)) | (1 << (PostgreSQLParserParser.HASHES - 704)) | (1 << (PostgreSQLParserParser.MERGES - 704)) | (1 << (PostgreSQLParserParser.FAMILY - 704)) | (1 << (PostgreSQLParserParser.POLICY - 704)) | (1 << (PostgreSQLParserParser.OWNED - 704)) | (1 << (PostgreSQLParserParser.ABSTIME - 704)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 704)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 704)) | (1 << (PostgreSQLParserParser.BOOL - 704)) | (1 << (PostgreSQLParserParser.BOX - 704)) | (1 << (PostgreSQLParserParser.BYTEA - 704)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 704)) | (1 << (PostgreSQLParserParser.CIDR - 704)) | (1 << (PostgreSQLParserParser.CIRCLE - 704)) | (1 << (PostgreSQLParserParser.FLOAT4 - 704)) | (1 << (PostgreSQLParserParser.FLOAT8 - 704)) | (1 << (PostgreSQLParserParser.INET - 704)) | (1 << (PostgreSQLParserParser.INT2 - 704)) | (1 << (PostgreSQLParserParser.INT4 - 704)) | (1 << (PostgreSQLParserParser.INT8 - 704)) | (1 << (PostgreSQLParserParser.JSON - 704)) | (1 << (PostgreSQLParserParser.JSONB - 704)))) !== 0) || ((((_la - 736)) & ~0x1F) === 0 && ((1 << (_la - 736)) & ((1 << (PostgreSQLParserParser.LINE - 736)) | (1 << (PostgreSQLParserParser.LSEG - 736)) | (1 << (PostgreSQLParserParser.MACADDR - 736)) | (1 << (PostgreSQLParserParser.MACADDR8 - 736)) | (1 << (PostgreSQLParserParser.MONEY - 736)) | (1 << (PostgreSQLParserParser.PG_LSN - 736)) | (1 << (PostgreSQLParserParser.POINT - 736)) | (1 << (PostgreSQLParserParser.POLYGON - 736)) | (1 << (PostgreSQLParserParser.RELTIME - 736)) | (1 << (PostgreSQLParserParser.SERIAL - 736)) | (1 << (PostgreSQLParserParser.SERIAL2 - 736)) | (1 << (PostgreSQLParserParser.SERIAL4 - 736)) | (1 << (PostgreSQLParserParser.SERIAL8 - 736)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 736)) | (1 << (PostgreSQLParserParser.STSTEM - 736)) | (1 << (PostgreSQLParserParser.TEXT - 736)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 736)) | (1 << (PostgreSQLParserParser.TIMETZ - 736)) | (1 << (PostgreSQLParserParser.TSQUERY - 736)) | (1 << (PostgreSQLParserParser.TSVECTOR - 736)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 736)) | (1 << (PostgreSQLParserParser.UUID - 736)) | (1 << (PostgreSQLParserParser.VARBIT - 736)) | (1 << (PostgreSQLParserParser.XML - 736)) | (1 << (PostgreSQLParserParser.COMMA - 736)) | (1 << (PostgreSQLParserParser.COLON - 736)) | (1 << (PostgreSQLParserParser.COLON_COLON - 736)) | (1 << (PostgreSQLParserParser.DOLLAR_DOLLAR - 736)) | (1 << (PostgreSQLParserParser.STAR - 736)) | (1 << (PostgreSQLParserParser.OPEN_PAREN - 736)) | (1 << (PostgreSQLParserParser.CLOSE_PAREN - 736)))) !== 0) || ((((_la - 768)) & ~0x1F) === 0 && ((1 << (_la - 768)) & ((1 << (PostgreSQLParserParser.OPEN_BRACKET - 768)) | (1 << (PostgreSQLParserParser.CLOSE_BRACKET - 768)) | (1 << (PostgreSQLParserParser.BIT_STRING - 768)) | (1 << (PostgreSQLParserParser.REGEX_STRING - 768)) | (1 << (PostgreSQLParserParser.NUMERIC_LITERAL - 768)) | (1 << (PostgreSQLParserParser.INTEGER_LITERAL - 768)) | (1 << (PostgreSQLParserParser.HEX_INTEGER_LITERAL - 768)) | (1 << (PostgreSQLParserParser.DOT - 768)) | (1 << (PostgreSQLParserParser.SINGLEQ_STRING_LITERAL - 768)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 768)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 768)) | (1 << (PostgreSQLParserParser.DOLLAR_DEC - 768)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 768)) | (1 << (PostgreSQLParserParser.AMP - 768)) | (1 << (PostgreSQLParserParser.AMP_AMP - 768)) | (1 << (PostgreSQLParserParser.AMP_LT - 768)) | (1 << (PostgreSQLParserParser.AT_AT - 768)) | (1 << (PostgreSQLParserParser.AT_GT - 768)) | (1 << (PostgreSQLParserParser.AT_SIGN - 768)) | (1 << (PostgreSQLParserParser.BANG - 768)) | (1 << (PostgreSQLParserParser.BANG_BANG - 768)) | (1 << (PostgreSQLParserParser.BANG_EQUAL - 768)) | (1 << (PostgreSQLParserParser.CARET - 768)) | (1 << (PostgreSQLParserParser.EQUAL - 768)) | (1 << (PostgreSQLParserParser.EQUAL_GT - 768)) | (1 << (PostgreSQLParserParser.GT - 768)) | (1 << (PostgreSQLParserParser.GTE - 768)) | (1 << (PostgreSQLParserParser.GT_GT - 768)) | (1 << (PostgreSQLParserParser.HASH - 768)) | (1 << (PostgreSQLParserParser.HASH_EQ - 768)) | (1 << (PostgreSQLParserParser.HASH_GT - 768)) | (1 << (PostgreSQLParserParser.HASH_GT_GT - 768)))) !== 0) || ((((_la - 800)) & ~0x1F) === 0 && ((1 << (_la - 800)) & ((1 << (PostgreSQLParserParser.HASH_HASH - 800)) | (1 << (PostgreSQLParserParser.HYPHEN_GT - 800)) | (1 << (PostgreSQLParserParser.HYPHEN_GT_GT - 800)) | (1 << (PostgreSQLParserParser.HYPHEN_PIPE_HYPHEN - 800)) | (1 << (PostgreSQLParserParser.LT - 800)) | (1 << (PostgreSQLParserParser.LTE - 800)) | (1 << (PostgreSQLParserParser.LT_AT - 800)) | (1 << (PostgreSQLParserParser.LT_CARET - 800)) | (1 << (PostgreSQLParserParser.LT_GT - 800)) | (1 << (PostgreSQLParserParser.LT_HYPHEN_GT - 800)) | (1 << (PostgreSQLParserParser.LT_LT - 800)) | (1 << (PostgreSQLParserParser.LT_LT_EQ - 800)) | (1 << (PostgreSQLParserParser.LT_QMARK_GT - 800)) | (1 << (PostgreSQLParserParser.MINUS - 800)) | (1 << (PostgreSQLParserParser.PERCENT - 800)) | (1 << (PostgreSQLParserParser.PIPE - 800)) | (1 << (PostgreSQLParserParser.PIPE_PIPE - 800)) | (1 << (PostgreSQLParserParser.PIPE_PIPE_SLASH - 800)) | (1 << (PostgreSQLParserParser.PIPE_SLASH - 800)) | (1 << (PostgreSQLParserParser.PLUS - 800)) | (1 << (PostgreSQLParserParser.QMARK - 800)) | (1 << (PostgreSQLParserParser.QMARK_AMP - 800)) | (1 << (PostgreSQLParserParser.QMARK_HASH - 800)) | (1 << (PostgreSQLParserParser.QMARK_HYPHEN - 800)) | (1 << (PostgreSQLParserParser.QMARK_PIPE - 800)) | (1 << (PostgreSQLParserParser.SLASH - 800)) | (1 << (PostgreSQLParserParser.TIL - 800)) | (1 << (PostgreSQLParserParser.TIL_EQ - 800)) | (1 << (PostgreSQLParserParser.TIL_GTE_TIL - 800)) | (1 << (PostgreSQLParserParser.TIL_GT_TIL - 800)) | (1 << (PostgreSQLParserParser.TIL_LTE_TIL - 800)) | (1 << (PostgreSQLParserParser.TIL_LT_TIL - 800)))) !== 0) || ((((_la - 832)) & ~0x1F) === 0 && ((1 << (_la - 832)) & ((1 << (PostgreSQLParserParser.TIL_STAR - 832)) | (1 << (PostgreSQLParserParser.TIL_TIL - 832)) | (1 << (PostgreSQLParserParser.SEMI - 832)) | (1 << (PostgreSQLParserParser.UNLOGGED - 832)))) !== 0));
				this.state = 4614;
				this.match(PostgreSQLParserParser.DOLLAR);
				this.state = 4615;
				this.identifier(0);
				this.state = 4616;
				this.match(PostgreSQLParserParser.DOLLAR);
				}
				break;

			case 16:
				{
				this.state = 4618;
				this.bool_expr(0);
				}
				break;

			case 17:
				{
				this.state = 4619;
				this.values_stmt();
				}
				break;

			case 18:
				{
				this.state = 4620;
				this.expr_list();
				}
				break;

			case 19:
				{
				this.state = 4621;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 4622;
				this.expr(0);
				this.state = 4623;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 20:
				{
				this.state = 4625;
				this.type_name();
				this.state = 4626;
				this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
				}
				break;

			case 21:
				{
				this.state = 4628;
				_localctx._op = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 786)) & ~0x1F) === 0 && ((1 << (_la - 786)) & ((1 << (PostgreSQLParserParser.AT_SIGN - 786)) | (1 << (PostgreSQLParserParser.BANG_BANG - 786)) | (1 << (PostgreSQLParserParser.MINUS - 786)))) !== 0) || _la === PostgreSQLParserParser.PLUS)) {
					_localctx._op = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4629;
				this.expr(30);
				}
				break;

			case 22:
				{
				this.state = 4630;
				_localctx._op = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.QMARK_HYPHEN || _la === PostgreSQLParserParser.TIL)) {
					_localctx._op = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4631;
				this.expr(29);
				}
				break;

			case 23:
				{
				this.state = 4632;
				_localctx._op = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.ALL || _la === PostgreSQLParserParser.NOT)) {
					_localctx._op = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 4633;
				this.expr(17);
				}
				break;

			case 24:
				{
				this.state = 4634;
				this.func_call();
				}
				break;

			case 25:
				{
				this.state = 4635;
				this.identifier(0);
				}
				break;

			case 26:
				{
				this.state = 4636;
				this.match(PostgreSQLParserParser.CAST);
				this.state = 4637;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 4638;
				this.expr(0);
				this.state = 4639;
				this.match(PostgreSQLParserParser.AS);
				this.state = 4640;
				this.data_type();
				this.state = 4641;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 27:
				{
				this.state = 4643;
				this.correlation_name();
				this.state = 4644;
				this.match(PostgreSQLParserParser.DOT);
				this.state = 4645;
				this.column_name();
				}
				break;

			case 28:
				{
				this.state = 4647;
				this.case_expr();
				}
				break;

			case 29:
				{
				this.state = 4648;
				this.data_type();
				this.state = 4649;
				this.expr(9);
				}
				break;

			case 30:
				{
				this.state = 4651;
				this.aggregate();
				}
				break;

			case 31:
				{
				this.state = 4652;
				this.array_cons_expr();
				}
				break;

			case 32:
				{
				this.state = 4653;
				this.match(PostgreSQLParserParser.EXISTS);
				this.state = 4654;
				this.expr(3);
				}
				break;

			case 33:
				{
				this.state = 4655;
				this.match(PostgreSQLParserParser.DOLLAR_DEC);
				}
				break;

			case 34:
				{
				this.state = 4656;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 4657;
				this.select_stmt();
				this.state = 4658;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 4761;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 4759;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 556, this._ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4662;
						if (!(this.precpred(this._ctx, 27))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 27)");
						}
						this.state = 4663;
						_localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(((((_la - 790)) & ~0x1F) === 0 && ((1 << (_la - 790)) & ((1 << (PostgreSQLParserParser.CARET - 790)) | (1 << (PostgreSQLParserParser.PIPE_PIPE_SLASH - 790)) | (1 << (PostgreSQLParserParser.PIPE_SLASH - 790)))) !== 0))) {
							_localctx._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4664;
						this.expr(28);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4665;
						if (!(this.precpred(this._ctx, 26))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 26)");
						}
						this.state = 4666;
						_localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === PostgreSQLParserParser.STAR || _la === PostgreSQLParserParser.PERCENT || _la === PostgreSQLParserParser.SLASH)) {
							_localctx._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4667;
						this.expr(27);
						}
						break;

					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4668;
						if (!(this.precpred(this._ctx, 25))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 25)");
						}
						this.state = 4669;
						_localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === PostgreSQLParserParser.MINUS || _la === PostgreSQLParserParser.PLUS)) {
							_localctx._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4670;
						this.expr(26);
						}
						break;

					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4671;
						if (!(this.precpred(this._ctx, 24))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 24)");
						}
						this.state = 4672;
						_localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === PostgreSQLParserParser.AND || _la === PostgreSQLParserParser.NOT || _la === PostgreSQLParserParser.OR || ((((_la - 781)) & ~0x1F) === 0 && ((1 << (_la - 781)) & ((1 << (PostgreSQLParserParser.AMP - 781)) | (1 << (PostgreSQLParserParser.AMP_AMP - 781)) | (1 << (PostgreSQLParserParser.AMP_LT - 781)) | (1 << (PostgreSQLParserParser.AT_AT - 781)) | (1 << (PostgreSQLParserParser.AT_GT - 781)) | (1 << (PostgreSQLParserParser.EQUAL_GT - 781)) | (1 << (PostgreSQLParserParser.GT_GT - 781)) | (1 << (PostgreSQLParserParser.HASH - 781)) | (1 << (PostgreSQLParserParser.HASH_EQ - 781)) | (1 << (PostgreSQLParserParser.HASH_GT - 781)) | (1 << (PostgreSQLParserParser.HASH_GT_GT - 781)) | (1 << (PostgreSQLParserParser.HASH_HASH - 781)) | (1 << (PostgreSQLParserParser.HYPHEN_GT - 781)) | (1 << (PostgreSQLParserParser.HYPHEN_GT_GT - 781)) | (1 << (PostgreSQLParserParser.HYPHEN_PIPE_HYPHEN - 781)) | (1 << (PostgreSQLParserParser.LT_AT - 781)) | (1 << (PostgreSQLParserParser.LT_CARET - 781)) | (1 << (PostgreSQLParserParser.LT_HYPHEN_GT - 781)) | (1 << (PostgreSQLParserParser.LT_LT - 781)) | (1 << (PostgreSQLParserParser.LT_LT_EQ - 781)) | (1 << (PostgreSQLParserParser.LT_QMARK_GT - 781)))) !== 0) || ((((_la - 815)) & ~0x1F) === 0 && ((1 << (_la - 815)) & ((1 << (PostgreSQLParserParser.PIPE - 815)) | (1 << (PostgreSQLParserParser.PIPE_PIPE - 815)) | (1 << (PostgreSQLParserParser.QMARK - 815)) | (1 << (PostgreSQLParserParser.QMARK_AMP - 815)) | (1 << (PostgreSQLParserParser.QMARK_HASH - 815)) | (1 << (PostgreSQLParserParser.QMARK_PIPE - 815)) | (1 << (PostgreSQLParserParser.TIL - 815)) | (1 << (PostgreSQLParserParser.TIL_EQ - 815)) | (1 << (PostgreSQLParserParser.TIL_GTE_TIL - 815)) | (1 << (PostgreSQLParserParser.TIL_GT_TIL - 815)) | (1 << (PostgreSQLParserParser.TIL_LTE_TIL - 815)) | (1 << (PostgreSQLParserParser.TIL_LT_TIL - 815)) | (1 << (PostgreSQLParserParser.TIL_STAR - 815)) | (1 << (PostgreSQLParserParser.TIL_TIL - 815)))) !== 0))) {
							_localctx._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4673;
						this.expr(25);
						}
						break;

					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4674;
						if (!(this.precpred(this._ctx, 23))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 23)");
						}
						this.state = 4678;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PostgreSQLParserParser.NOT:
							{
							this.state = 4675;
							this.match(PostgreSQLParserParser.NOT);
							this.state = 4676;
							this.match(PostgreSQLParserParser.LIKE);
							}
							break;
						case PostgreSQLParserParser.LIKE:
							{
							this.state = 4677;
							this.match(PostgreSQLParserParser.LIKE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 4680;
						this.expr(24);
						}
						break;

					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4681;
						if (!(this.precpred(this._ctx, 22))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 22)");
						}
						this.state = 4683;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PostgreSQLParserParser.NOT) {
							{
							this.state = 4682;
							this.match(PostgreSQLParserParser.NOT);
							}
						}

						this.state = 4685;
						this.match(PostgreSQLParserParser.BETWEEN);
						this.state = 4686;
						this.expr(0);
						this.state = 4687;
						this.match(PostgreSQLParserParser.AND);
						this.state = 4688;
						this.expr(23);
						}
						break;

					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4690;
						if (!(this.precpred(this._ctx, 21))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 21)");
						}
						this.state = 4691;
						this.match(PostgreSQLParserParser.IN);
						this.state = 4692;
						this.expr(22);
						}
						break;

					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4693;
						if (!(this.precpred(this._ctx, 20))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 20)");
						}
						this.state = 4694;
						_localctx._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(((((_la - 789)) & ~0x1F) === 0 && ((1 << (_la - 789)) & ((1 << (PostgreSQLParserParser.BANG_EQUAL - 789)) | (1 << (PostgreSQLParserParser.EQUAL - 789)) | (1 << (PostgreSQLParserParser.GT - 789)) | (1 << (PostgreSQLParserParser.GTE - 789)) | (1 << (PostgreSQLParserParser.LT - 789)) | (1 << (PostgreSQLParserParser.LTE - 789)) | (1 << (PostgreSQLParserParser.LT_GT - 789)))) !== 0))) {
							_localctx._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 4695;
						this.expr(21);
						}
						break;

					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4696;
						if (!(this.precpred(this._ctx, 18))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 18)");
						}
						this.state = 4697;
						this.match(PostgreSQLParserParser.IS);
						this.state = 4699;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PostgreSQLParserParser.NOT) {
							{
							this.state = 4698;
							this.match(PostgreSQLParserParser.NOT);
							}
						}

						this.state = 4701;
						this.match(PostgreSQLParserParser.DISTINCT);
						this.state = 4702;
						this.match(PostgreSQLParserParser.FROM);
						this.state = 4703;
						this.expr(19);
						}
						break;

					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4704;
						if (!(this.precpred(this._ctx, 33))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 33)");
						}
						this.state = 4705;
						this.match(PostgreSQLParserParser.OPEN_BRACKET);
						this.state = 4706;
						this.expr(0);
						this.state = 4707;
						this.match(PostgreSQLParserParser.CLOSE_BRACKET);
						}
						break;

					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4709;
						if (!(this.precpred(this._ctx, 28))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 28)");
						}
						this.state = 4710;
						_localctx._op = this.match(PostgreSQLParserParser.BANG);
						}
						break;

					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4711;
						if (!(this.precpred(this._ctx, 19))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 19)");
						}
						this.state = 4712;
						_localctx._op = this.match(PostgreSQLParserParser.IS);
						this.state = 4717;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 550, this._ctx) ) {
						case 1:
							{
							this.state = 4713;
							this.bool_expr(0);
							}
							break;

						case 2:
							{
							this.state = 4714;
							this.match(PostgreSQLParserParser.NULL);
							}
							break;

						case 3:
							{
							this.state = 4715;
							this.match(PostgreSQLParserParser.NOT);
							this.state = 4716;
							this.match(PostgreSQLParserParser.NULL);
							}
							break;
						}
						}
						break;

					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4719;
						if (!(this.precpred(this._ctx, 11))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 11)");
						}
						this.state = 4729;
						this._errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								this.state = 4720;
								this.match(PostgreSQLParserParser.OPEN_BRACKET);
								this.state = 4722;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALL) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ARRAY) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CASE - 33)) | (1 << (PostgreSQLParserParser.CAST - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DATE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_ROLE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TIME - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TIMESTAMP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_USER - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULT - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FALSE - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOT - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULL - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITH - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.DOLLAR - 751)) | (1 << (PostgreSQLParserParser.DOLLAR_DOLLAR - 751)) | (1 << (PostgreSQLParserParser.OPEN_PAREN - 751)) | (1 << (PostgreSQLParserParser.BIT_STRING - 751)) | (1 << (PostgreSQLParserParser.REGEX_STRING - 751)) | (1 << (PostgreSQLParserParser.NUMERIC_LITERAL - 751)) | (1 << (PostgreSQLParserParser.INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.HEX_INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.SINGLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.DOLLAR_DEC - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0) || ((((_la - 786)) & ~0x1F) === 0 && ((1 << (_la - 786)) & ((1 << (PostgreSQLParserParser.AT_SIGN - 786)) | (1 << (PostgreSQLParserParser.BANG_BANG - 786)) | (1 << (PostgreSQLParserParser.MINUS - 786)))) !== 0) || ((((_la - 819)) & ~0x1F) === 0 && ((1 << (_la - 819)) & ((1 << (PostgreSQLParserParser.PLUS - 819)) | (1 << (PostgreSQLParserParser.QMARK_HYPHEN - 819)) | (1 << (PostgreSQLParserParser.TIL - 819)))) !== 0)) {
									{
									this.state = 4721;
									this.expr(0);
									}
								}

								this.state = 4724;
								this.match(PostgreSQLParserParser.COLON);
								this.state = 4726;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALL) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ARRAY) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CASE - 33)) | (1 << (PostgreSQLParserParser.CAST - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DATE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_ROLE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TIME - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TIMESTAMP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_USER - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULT - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FALSE - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOT - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULL - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITH - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.DOLLAR - 751)) | (1 << (PostgreSQLParserParser.DOLLAR_DOLLAR - 751)) | (1 << (PostgreSQLParserParser.OPEN_PAREN - 751)) | (1 << (PostgreSQLParserParser.BIT_STRING - 751)) | (1 << (PostgreSQLParserParser.REGEX_STRING - 751)) | (1 << (PostgreSQLParserParser.NUMERIC_LITERAL - 751)) | (1 << (PostgreSQLParserParser.INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.HEX_INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.SINGLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.DOLLAR_DEC - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0) || ((((_la - 786)) & ~0x1F) === 0 && ((1 << (_la - 786)) & ((1 << (PostgreSQLParserParser.AT_SIGN - 786)) | (1 << (PostgreSQLParserParser.BANG_BANG - 786)) | (1 << (PostgreSQLParserParser.MINUS - 786)))) !== 0) || ((((_la - 819)) & ~0x1F) === 0 && ((1 << (_la - 819)) & ((1 << (PostgreSQLParserParser.PLUS - 819)) | (1 << (PostgreSQLParserParser.QMARK_HYPHEN - 819)) | (1 << (PostgreSQLParserParser.TIL - 819)))) !== 0)) {
									{
									this.state = 4725;
									this.expr(0);
									}
								}

								this.state = 4728;
								this.match(PostgreSQLParserParser.CLOSE_BRACKET);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							this.state = 4731;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 553, this._ctx);
						} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
						}
						break;

					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4733;
						if (!(this.precpred(this._ctx, 10))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
						}
						this.state = 4736;
						this._errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								this.state = 4734;
								this.match(PostgreSQLParserParser.COLON_COLON);
								this.state = 4735;
								this.data_type();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							this.state = 4738;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 554, this._ctx);
						} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
						}
						break;

					case 15:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4740;
						if (!(this.precpred(this._ctx, 8))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
						}
						this.state = 4741;
						this.match(PostgreSQLParserParser.IS);
						this.state = 4742;
						this.match(PostgreSQLParserParser.OF);
						this.state = 4743;
						this.match(PostgreSQLParserParser.OPEN_PAREN);
						this.state = 4744;
						this.data_type();
						this.state = 4745;
						this.match(PostgreSQLParserParser.CLOSE_PAREN);
						}
						break;

					case 16:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4747;
						if (!(this.precpred(this._ctx, 7))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
						}
						this.state = 4748;
						this.match(PostgreSQLParserParser.DOT);
						this.state = 4751;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PostgreSQLParserParser.WHITESPACE:
						case PostgreSQLParserParser.A_:
						case PostgreSQLParserParser.ABORT:
						case PostgreSQLParserParser.ABS:
						case PostgreSQLParserParser.ABSOLUTE:
						case PostgreSQLParserParser.ACCESS:
						case PostgreSQLParserParser.ACTION:
						case PostgreSQLParserParser.ADA:
						case PostgreSQLParserParser.ADD:
						case PostgreSQLParserParser.ADMIN:
						case PostgreSQLParserParser.AFTER:
						case PostgreSQLParserParser.AGGREGATE:
						case PostgreSQLParserParser.ALLOCATE:
						case PostgreSQLParserParser.ALSO:
						case PostgreSQLParserParser.ALTER:
						case PostgreSQLParserParser.ALWAYS:
						case PostgreSQLParserParser.ANY:
						case PostgreSQLParserParser.ARE:
						case PostgreSQLParserParser.ASENSITIVE:
						case PostgreSQLParserParser.ASSERTION:
						case PostgreSQLParserParser.ASSIGNMENT:
						case PostgreSQLParserParser.AT:
						case PostgreSQLParserParser.ATOMIC:
						case PostgreSQLParserParser.ATTRIBUTE:
						case PostgreSQLParserParser.ATTRIBUTES:
						case PostgreSQLParserParser.AVG:
						case PostgreSQLParserParser.BACKWARD:
						case PostgreSQLParserParser.BEFORE:
						case PostgreSQLParserParser.BEGIN:
						case PostgreSQLParserParser.BERNOULLI:
						case PostgreSQLParserParser.BETWEEN:
						case PostgreSQLParserParser.BIGINT:
						case PostgreSQLParserParser.BIT:
						case PostgreSQLParserParser.BIT_LENGTH:
						case PostgreSQLParserParser.BLOB:
						case PostgreSQLParserParser.BOOLEAN:
						case PostgreSQLParserParser.BREADTH:
						case PostgreSQLParserParser.BY:
						case PostgreSQLParserParser.C_:
						case PostgreSQLParserParser.CACHE:
						case PostgreSQLParserParser.CALL:
						case PostgreSQLParserParser.CALLED:
						case PostgreSQLParserParser.CARDINALITY:
						case PostgreSQLParserParser.CASCADE:
						case PostgreSQLParserParser.CASCADED:
						case PostgreSQLParserParser.CATALOG:
						case PostgreSQLParserParser.CATALOG_NAME:
						case PostgreSQLParserParser.CEIL:
						case PostgreSQLParserParser.CEILING:
						case PostgreSQLParserParser.CHAIN:
						case PostgreSQLParserParser.CHAR:
						case PostgreSQLParserParser.CHAR_LENGTH:
						case PostgreSQLParserParser.CHARACTER:
						case PostgreSQLParserParser.CHARACTER_LENGTH:
						case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
						case PostgreSQLParserParser.CHARACTER_SET_NAME:
						case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
						case PostgreSQLParserParser.CHARACTERISTICS:
						case PostgreSQLParserParser.CHARACTERS:
						case PostgreSQLParserParser.CHECKPOINT:
						case PostgreSQLParserParser.CLASS:
						case PostgreSQLParserParser.CLASS_ORIGIN:
						case PostgreSQLParserParser.CLOB:
						case PostgreSQLParserParser.CLOSE:
						case PostgreSQLParserParser.CLUSTER:
						case PostgreSQLParserParser.COALESCE:
						case PostgreSQLParserParser.COBOL:
						case PostgreSQLParserParser.COLLATION_CATALOG:
						case PostgreSQLParserParser.COLLATION_NAME:
						case PostgreSQLParserParser.COLLATION_SCHEMA:
						case PostgreSQLParserParser.COLLECT:
						case PostgreSQLParserParser.COLUMN_NAME:
						case PostgreSQLParserParser.COMMAND_FUNCTION:
						case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
						case PostgreSQLParserParser.COMMENT:
						case PostgreSQLParserParser.COMMIT:
						case PostgreSQLParserParser.COMMITTED:
						case PostgreSQLParserParser.CONDITION:
						case PostgreSQLParserParser.CONDITION_NUMBER:
						case PostgreSQLParserParser.CONNECT:
						case PostgreSQLParserParser.CONNECTION:
						case PostgreSQLParserParser.CONNECTION_NAME:
						case PostgreSQLParserParser.CONSTRAINT_CATALOG:
						case PostgreSQLParserParser.CONSTRAINT_NAME:
						case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
						case PostgreSQLParserParser.CONSTRAINTS:
						case PostgreSQLParserParser.CONSTRUCTOR:
						case PostgreSQLParserParser.CONTAINS:
						case PostgreSQLParserParser.CONTINUE:
						case PostgreSQLParserParser.CONVERSION:
						case PostgreSQLParserParser.CONVERT:
						case PostgreSQLParserParser.COPY:
						case PostgreSQLParserParser.CORR:
						case PostgreSQLParserParser.CORRESPONDING:
						case PostgreSQLParserParser.COUNT:
						case PostgreSQLParserParser.COVAR_POP:
						case PostgreSQLParserParser.COVAR_SAMP:
						case PostgreSQLParserParser.CSV:
						case PostgreSQLParserParser.CUBE:
						case PostgreSQLParserParser.CUME_DIST:
						case PostgreSQLParserParser.CURRENT:
						case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
						case PostgreSQLParserParser.CURRENT_PATH:
						case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
						case PostgreSQLParserParser.CURSOR:
						case PostgreSQLParserParser.CURSOR_NAME:
						case PostgreSQLParserParser.CYCLE:
						case PostgreSQLParserParser.DATA:
						case PostgreSQLParserParser.DATABASE:
						case PostgreSQLParserParser.DATE:
						case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
						case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
						case PostgreSQLParserParser.DAY:
						case PostgreSQLParserParser.DEALLOCATE:
						case PostgreSQLParserParser.DEC:
						case PostgreSQLParserParser.DECIMAL:
						case PostgreSQLParserParser.DECLARE:
						case PostgreSQLParserParser.DEFAULTS:
						case PostgreSQLParserParser.DEFERRED:
						case PostgreSQLParserParser.DEFINED:
						case PostgreSQLParserParser.DEFINER:
						case PostgreSQLParserParser.DEGREE:
						case PostgreSQLParserParser.DELETE:
						case PostgreSQLParserParser.DELIMITER:
						case PostgreSQLParserParser.DELIMITERS:
						case PostgreSQLParserParser.DENSE_RANK:
						case PostgreSQLParserParser.DEPTH:
						case PostgreSQLParserParser.DEREF:
						case PostgreSQLParserParser.DERIVED:
						case PostgreSQLParserParser.DESCRIBE:
						case PostgreSQLParserParser.DESCRIPTOR:
						case PostgreSQLParserParser.DETERMINISTIC:
						case PostgreSQLParserParser.DIAGNOSTICS:
						case PostgreSQLParserParser.DICTIONARY:
						case PostgreSQLParserParser.DISCONNECT:
						case PostgreSQLParserParser.DISPATCH:
						case PostgreSQLParserParser.DOMAIN:
						case PostgreSQLParserParser.DOUBLE:
						case PostgreSQLParserParser.DYNAMIC:
						case PostgreSQLParserParser.DYNAMIC_FUNCTION:
						case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
						case PostgreSQLParserParser.EACH:
						case PostgreSQLParserParser.ELEMENT:
						case PostgreSQLParserParser.ENCODING:
						case PostgreSQLParserParser.ENCRYPTED:
						case PostgreSQLParserParser.END:
						case PostgreSQLParserParser.EQUALS:
						case PostgreSQLParserParser.ESCAPE:
						case PostgreSQLParserParser.EVERY:
						case PostgreSQLParserParser.EXCEPTION:
						case PostgreSQLParserParser.EXCLUDE:
						case PostgreSQLParserParser.EXCLUDING:
						case PostgreSQLParserParser.EXCLUSIVE:
						case PostgreSQLParserParser.EXEC:
						case PostgreSQLParserParser.EXECUTE:
						case PostgreSQLParserParser.EXISTS:
						case PostgreSQLParserParser.EXP:
						case PostgreSQLParserParser.EXPLAIN:
						case PostgreSQLParserParser.EXTENSION:
						case PostgreSQLParserParser.EXTERNAL:
						case PostgreSQLParserParser.EXTRACT:
						case PostgreSQLParserParser.FILTER:
						case PostgreSQLParserParser.FINAL:
						case PostgreSQLParserParser.FIRST:
						case PostgreSQLParserParser.FLOAT:
						case PostgreSQLParserParser.FLOOR:
						case PostgreSQLParserParser.FOLLOWING:
						case PostgreSQLParserParser.FORCE:
						case PostgreSQLParserParser.FORMAT:
						case PostgreSQLParserParser.FORTRAN:
						case PostgreSQLParserParser.FORWARD:
						case PostgreSQLParserParser.FOUND:
						case PostgreSQLParserParser.FREE:
						case PostgreSQLParserParser.FUNCTION:
						case PostgreSQLParserParser.FUSION:
						case PostgreSQLParserParser.G_:
						case PostgreSQLParserParser.GENERAL:
						case PostgreSQLParserParser.GENERATED:
						case PostgreSQLParserParser.GET:
						case PostgreSQLParserParser.GLOBAL:
						case PostgreSQLParserParser.GO:
						case PostgreSQLParserParser.GOTO:
						case PostgreSQLParserParser.GRANTED:
						case PostgreSQLParserParser.GREATEST:
						case PostgreSQLParserParser.GROUPING:
						case PostgreSQLParserParser.HANDLER:
						case PostgreSQLParserParser.HIERARCHY:
						case PostgreSQLParserParser.HOLD:
						case PostgreSQLParserParser.HOST:
						case PostgreSQLParserParser.HOUR:
						case PostgreSQLParserParser.IDENTITY:
						case PostgreSQLParserParser.IGNORE:
						case PostgreSQLParserParser.IMMEDIATE:
						case PostgreSQLParserParser.IMMUTABLE:
						case PostgreSQLParserParser.IMPLEMENTATION:
						case PostgreSQLParserParser.IMPLICIT:
						case PostgreSQLParserParser.INCLUDING:
						case PostgreSQLParserParser.INCREMENT:
						case PostgreSQLParserParser.INDEX:
						case PostgreSQLParserParser.INDICATOR:
						case PostgreSQLParserParser.INHERITS:
						case PostgreSQLParserParser.INOUT:
						case PostgreSQLParserParser.INPUT:
						case PostgreSQLParserParser.INSENSITIVE:
						case PostgreSQLParserParser.INSERT:
						case PostgreSQLParserParser.INSTANCE:
						case PostgreSQLParserParser.INSTANTIABLE:
						case PostgreSQLParserParser.INSTEAD:
						case PostgreSQLParserParser.INT:
						case PostgreSQLParserParser.INTEGER:
						case PostgreSQLParserParser.INTERSECTION:
						case PostgreSQLParserParser.INTERVAL:
						case PostgreSQLParserParser.INVOKER:
						case PostgreSQLParserParser.ISOLATION:
						case PostgreSQLParserParser.K_:
						case PostgreSQLParserParser.KEY:
						case PostgreSQLParserParser.KEY_MEMBER:
						case PostgreSQLParserParser.KEY_TYPE:
						case PostgreSQLParserParser.LANGUAGE:
						case PostgreSQLParserParser.LARGE:
						case PostgreSQLParserParser.LAST:
						case PostgreSQLParserParser.LEAST:
						case PostgreSQLParserParser.LEFT:
						case PostgreSQLParserParser.LENGTH:
						case PostgreSQLParserParser.LEVEL:
						case PostgreSQLParserParser.LISTEN:
						case PostgreSQLParserParser.LN:
						case PostgreSQLParserParser.LOAD:
						case PostgreSQLParserParser.LOCAL:
						case PostgreSQLParserParser.LOCATION:
						case PostgreSQLParserParser.LOCATOR:
						case PostgreSQLParserParser.LOCK:
						case PostgreSQLParserParser.LOCKED:
						case PostgreSQLParserParser.LOWER:
						case PostgreSQLParserParser.M_:
						case PostgreSQLParserParser.MAP:
						case PostgreSQLParserParser.MATCH:
						case PostgreSQLParserParser.MATCHED:
						case PostgreSQLParserParser.MAX:
						case PostgreSQLParserParser.MAXVALUE:
						case PostgreSQLParserParser.MEMBER:
						case PostgreSQLParserParser.MERGE:
						case PostgreSQLParserParser.MESSAGE_LENGTH:
						case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
						case PostgreSQLParserParser.MESSAGE_TEXT:
						case PostgreSQLParserParser.METHOD:
						case PostgreSQLParserParser.MIN:
						case PostgreSQLParserParser.MINUTE:
						case PostgreSQLParserParser.MINVALUE:
						case PostgreSQLParserParser.MOD:
						case PostgreSQLParserParser.MODE:
						case PostgreSQLParserParser.MODIFIES:
						case PostgreSQLParserParser.MODULE:
						case PostgreSQLParserParser.MONTH:
						case PostgreSQLParserParser.MORE_:
						case PostgreSQLParserParser.MOVE:
						case PostgreSQLParserParser.MULTISET:
						case PostgreSQLParserParser.MUMPS:
						case PostgreSQLParserParser.NAME:
						case PostgreSQLParserParser.NAMES:
						case PostgreSQLParserParser.NATIONAL:
						case PostgreSQLParserParser.NCHAR:
						case PostgreSQLParserParser.NCLOB:
						case PostgreSQLParserParser.NESTING:
						case PostgreSQLParserParser.NEW:
						case PostgreSQLParserParser.NEXT:
						case PostgreSQLParserParser.NO:
						case PostgreSQLParserParser.NONE:
						case PostgreSQLParserParser.NORMALIZE:
						case PostgreSQLParserParser.NORMALIZED:
						case PostgreSQLParserParser.NOTHING:
						case PostgreSQLParserParser.NOTIFY:
						case PostgreSQLParserParser.NOWAIT:
						case PostgreSQLParserParser.NULLABLE:
						case PostgreSQLParserParser.NULLIF:
						case PostgreSQLParserParser.NULLS:
						case PostgreSQLParserParser.NUMBER:
						case PostgreSQLParserParser.NUMERIC:
						case PostgreSQLParserParser.OBJECT:
						case PostgreSQLParserParser.OCTET_LENGTH:
						case PostgreSQLParserParser.OCTETS:
						case PostgreSQLParserParser.OF:
						case PostgreSQLParserParser.OFF:
						case PostgreSQLParserParser.OIDS:
						case PostgreSQLParserParser.OLD:
						case PostgreSQLParserParser.OPEN:
						case PostgreSQLParserParser.OPERATOR:
						case PostgreSQLParserParser.OPTION:
						case PostgreSQLParserParser.OPTIONS:
						case PostgreSQLParserParser.ORDERING:
						case PostgreSQLParserParser.ORDINALITY:
						case PostgreSQLParserParser.OTHERS:
						case PostgreSQLParserParser.OUT:
						case PostgreSQLParserParser.OUTPUT:
						case PostgreSQLParserParser.OVER:
						case PostgreSQLParserParser.OVERLAY:
						case PostgreSQLParserParser.OVERRIDING:
						case PostgreSQLParserParser.OWNER:
						case PostgreSQLParserParser.PAD:
						case PostgreSQLParserParser.PARAMETER:
						case PostgreSQLParserParser.PARAMETER_MODE:
						case PostgreSQLParserParser.PARAMETER_NAME:
						case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
						case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
						case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
						case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
						case PostgreSQLParserParser.PARTIAL:
						case PostgreSQLParserParser.PARTITION:
						case PostgreSQLParserParser.PASCAL:
						case PostgreSQLParserParser.PASSWORD:
						case PostgreSQLParserParser.PATH:
						case PostgreSQLParserParser.PERCENT_RANK:
						case PostgreSQLParserParser.PERCENTILE_CONT:
						case PostgreSQLParserParser.PERCENTILE_DISC:
						case PostgreSQLParserParser.PLAIN:
						case PostgreSQLParserParser.PLI:
						case PostgreSQLParserParser.POSITION:
						case PostgreSQLParserParser.POWER:
						case PostgreSQLParserParser.PRECEDING:
						case PostgreSQLParserParser.PRECISION:
						case PostgreSQLParserParser.PREPARE:
						case PostgreSQLParserParser.PRESERVE:
						case PostgreSQLParserParser.PRIOR:
						case PostgreSQLParserParser.PRIVILEGES:
						case PostgreSQLParserParser.PROCEDURAL:
						case PostgreSQLParserParser.PROCEDURE:
						case PostgreSQLParserParser.PUBLIC:
						case PostgreSQLParserParser.QUOTE:
						case PostgreSQLParserParser.RANGE:
						case PostgreSQLParserParser.RANK:
						case PostgreSQLParserParser.READ:
						case PostgreSQLParserParser.READS:
						case PostgreSQLParserParser.REAL:
						case PostgreSQLParserParser.RECHECK:
						case PostgreSQLParserParser.RECURSIVE:
						case PostgreSQLParserParser.REF:
						case PostgreSQLParserParser.REFERENCING:
						case PostgreSQLParserParser.REFRESH:
						case PostgreSQLParserParser.REGR_AVGX:
						case PostgreSQLParserParser.REGR_AVGY:
						case PostgreSQLParserParser.REGR_COUNT:
						case PostgreSQLParserParser.REGR_INTERCEPT:
						case PostgreSQLParserParser.REGR_SLOPE:
						case PostgreSQLParserParser.REGR_SXX:
						case PostgreSQLParserParser.REGR_SXY:
						case PostgreSQLParserParser.REGR_SYY:
						case PostgreSQLParserParser.REINDEX:
						case PostgreSQLParserParser.RELATIVE:
						case PostgreSQLParserParser.RELEASE:
						case PostgreSQLParserParser.RENAME:
						case PostgreSQLParserParser.REPEATABLE:
						case PostgreSQLParserParser.REPLACE:
						case PostgreSQLParserParser.RESET:
						case PostgreSQLParserParser.RESTART:
						case PostgreSQLParserParser.RESTRICT:
						case PostgreSQLParserParser.RESULT:
						case PostgreSQLParserParser.RETURN:
						case PostgreSQLParserParser.RETURNED_CARDINALITY:
						case PostgreSQLParserParser.RETURNED_LENGTH:
						case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
						case PostgreSQLParserParser.RETURNED_SQLSTATE:
						case PostgreSQLParserParser.RETURNS:
						case PostgreSQLParserParser.REVOKE:
						case PostgreSQLParserParser.RIGHT:
						case PostgreSQLParserParser.ROLE:
						case PostgreSQLParserParser.ROLLBACK:
						case PostgreSQLParserParser.ROLLUP:
						case PostgreSQLParserParser.ROUTINE:
						case PostgreSQLParserParser.ROUTINE_CATALOG:
						case PostgreSQLParserParser.ROUTINE_NAME:
						case PostgreSQLParserParser.ROUTINE_SCHEMA:
						case PostgreSQLParserParser.ROW:
						case PostgreSQLParserParser.ROW_COUNT:
						case PostgreSQLParserParser.ROW_NUMBER:
						case PostgreSQLParserParser.ROWS:
						case PostgreSQLParserParser.RULE:
						case PostgreSQLParserParser.SAVEPOINT:
						case PostgreSQLParserParser.SCALE:
						case PostgreSQLParserParser.SCHEMA:
						case PostgreSQLParserParser.SCHEMA_NAME:
						case PostgreSQLParserParser.SCOPE:
						case PostgreSQLParserParser.SCOPE_CATALOG:
						case PostgreSQLParserParser.SCOPE_NAME:
						case PostgreSQLParserParser.SCOPE_SCHEMA:
						case PostgreSQLParserParser.SCROLL:
						case PostgreSQLParserParser.SEARCH:
						case PostgreSQLParserParser.SECOND:
						case PostgreSQLParserParser.SECTION:
						case PostgreSQLParserParser.SECURITY:
						case PostgreSQLParserParser.SELF:
						case PostgreSQLParserParser.SENSITIVE:
						case PostgreSQLParserParser.SEQUENCE:
						case PostgreSQLParserParser.SEQUENCES:
						case PostgreSQLParserParser.SERIALIZABLE:
						case PostgreSQLParserParser.SERVER_NAME:
						case PostgreSQLParserParser.SESSION:
						case PostgreSQLParserParser.SET:
						case PostgreSQLParserParser.SETOF:
						case PostgreSQLParserParser.SETS:
						case PostgreSQLParserParser.SHARE:
						case PostgreSQLParserParser.SHOW:
						case PostgreSQLParserParser.SIMPLE:
						case PostgreSQLParserParser.SIZE:
						case PostgreSQLParserParser.SMALLINT:
						case PostgreSQLParserParser.SOME:
						case PostgreSQLParserParser.SOURCE:
						case PostgreSQLParserParser.SPACE:
						case PostgreSQLParserParser.SPECIFIC:
						case PostgreSQLParserParser.SPECIFIC_NAME:
						case PostgreSQLParserParser.SPECIFICTYPE:
						case PostgreSQLParserParser.SQL:
						case PostgreSQLParserParser.SQLCODE:
						case PostgreSQLParserParser.SQLERROR:
						case PostgreSQLParserParser.SQLEXCEPTION:
						case PostgreSQLParserParser.SQLSTATE:
						case PostgreSQLParserParser.SQLWARNING:
						case PostgreSQLParserParser.SQRT:
						case PostgreSQLParserParser.STABLE:
						case PostgreSQLParserParser.START:
						case PostgreSQLParserParser.STATE:
						case PostgreSQLParserParser.STATEMENT:
						case PostgreSQLParserParser.STATIC:
						case PostgreSQLParserParser.STATISTICS:
						case PostgreSQLParserParser.STDDEV_POP:
						case PostgreSQLParserParser.STDDEV_SAMP:
						case PostgreSQLParserParser.STDIN:
						case PostgreSQLParserParser.STDOUT:
						case PostgreSQLParserParser.STORAGE:
						case PostgreSQLParserParser.STRICT:
						case PostgreSQLParserParser.STRUCTURE:
						case PostgreSQLParserParser.STYLE:
						case PostgreSQLParserParser.SUBCLASS_ORIGIN:
						case PostgreSQLParserParser.SUBMULTISET:
						case PostgreSQLParserParser.SUBSTRING:
						case PostgreSQLParserParser.SUM:
						case PostgreSQLParserParser.SYSID:
						case PostgreSQLParserParser.SYSTEM:
						case PostgreSQLParserParser.SYSTEM_USER:
						case PostgreSQLParserParser.TABLE_NAME:
						case PostgreSQLParserParser.TABLESPACE:
						case PostgreSQLParserParser.TEMP:
						case PostgreSQLParserParser.TEMPLATE:
						case PostgreSQLParserParser.TEMPORARY:
						case PostgreSQLParserParser.TIES:
						case PostgreSQLParserParser.TIME:
						case PostgreSQLParserParser.TIMESTAMP:
						case PostgreSQLParserParser.TIMEZONE_HOUR:
						case PostgreSQLParserParser.TIMEZONE_MINUTE:
						case PostgreSQLParserParser.TOP_LEVEL_COUNT:
						case PostgreSQLParserParser.TRANSACTION:
						case PostgreSQLParserParser.TRANSACTION_ACTIVE:
						case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
						case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
						case PostgreSQLParserParser.TRANSFORM:
						case PostgreSQLParserParser.TRANSFORMS:
						case PostgreSQLParserParser.TRANSLATE:
						case PostgreSQLParserParser.TRANSLATION:
						case PostgreSQLParserParser.TREAT:
						case PostgreSQLParserParser.TRIGGER:
						case PostgreSQLParserParser.TRIGGER_CATALOG:
						case PostgreSQLParserParser.TRIGGER_NAME:
						case PostgreSQLParserParser.TRIGGER_SCHEMA:
						case PostgreSQLParserParser.TRIM:
						case PostgreSQLParserParser.TRUE:
						case PostgreSQLParserParser.TRUNCATE:
						case PostgreSQLParserParser.TRUSTED:
						case PostgreSQLParserParser.TYPE:
						case PostgreSQLParserParser.UESCAPE:
						case PostgreSQLParserParser.UNBOUNDED:
						case PostgreSQLParserParser.UNCOMMITTED:
						case PostgreSQLParserParser.UNDER:
						case PostgreSQLParserParser.UNENCRYPTED:
						case PostgreSQLParserParser.UNKNOWN:
						case PostgreSQLParserParser.UNLISTEN:
						case PostgreSQLParserParser.UNNAMED:
						case PostgreSQLParserParser.UNNEST:
						case PostgreSQLParserParser.UNTIL:
						case PostgreSQLParserParser.UPDATE:
						case PostgreSQLParserParser.UPPER:
						case PostgreSQLParserParser.USAGE:
						case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
						case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
						case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
						case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
						case PostgreSQLParserParser.VACUUM:
						case PostgreSQLParserParser.VALID:
						case PostgreSQLParserParser.VALIDATOR:
						case PostgreSQLParserParser.VALUE:
						case PostgreSQLParserParser.VALUES:
						case PostgreSQLParserParser.VAR_POP:
						case PostgreSQLParserParser.VAR_SAMP:
						case PostgreSQLParserParser.VARCHAR:
						case PostgreSQLParserParser.VARYING:
						case PostgreSQLParserParser.VIEW:
						case PostgreSQLParserParser.VOLATILE:
						case PostgreSQLParserParser.WHENEVER:
						case PostgreSQLParserParser.WIDTH_BUCKET:
						case PostgreSQLParserParser.WITHIN:
						case PostgreSQLParserParser.WITHOUT:
						case PostgreSQLParserParser.WORK:
						case PostgreSQLParserParser.WRITE:
						case PostgreSQLParserParser.YEAR:
						case PostgreSQLParserParser.ZONE:
						case PostgreSQLParserParser.ABSTIME:
						case PostgreSQLParserParser.BIGSERIAL:
						case PostgreSQLParserParser.BIT_VARYING:
						case PostgreSQLParserParser.BOOL:
						case PostgreSQLParserParser.BOX:
						case PostgreSQLParserParser.BYTEA:
						case PostgreSQLParserParser.CHARACTER_VARYING:
						case PostgreSQLParserParser.CIDR:
						case PostgreSQLParserParser.CIRCLE:
						case PostgreSQLParserParser.FLOAT4:
						case PostgreSQLParserParser.FLOAT8:
						case PostgreSQLParserParser.INET:
						case PostgreSQLParserParser.INT2:
						case PostgreSQLParserParser.INT4:
						case PostgreSQLParserParser.INT8:
						case PostgreSQLParserParser.JSON:
						case PostgreSQLParserParser.JSONB:
						case PostgreSQLParserParser.LINE:
						case PostgreSQLParserParser.LSEG:
						case PostgreSQLParserParser.MACADDR:
						case PostgreSQLParserParser.MACADDR8:
						case PostgreSQLParserParser.MONEY:
						case PostgreSQLParserParser.PG_LSN:
						case PostgreSQLParserParser.POINT:
						case PostgreSQLParserParser.POLYGON:
						case PostgreSQLParserParser.RELTIME:
						case PostgreSQLParserParser.SERIAL:
						case PostgreSQLParserParser.SERIAL2:
						case PostgreSQLParserParser.SERIAL4:
						case PostgreSQLParserParser.SERIAL8:
						case PostgreSQLParserParser.SMALLSERIAL:
						case PostgreSQLParserParser.TEXT:
						case PostgreSQLParserParser.TIMESTAMPTZ:
						case PostgreSQLParserParser.TIMETZ:
						case PostgreSQLParserParser.TSQUERY:
						case PostgreSQLParserParser.TSVECTOR:
						case PostgreSQLParserParser.TXID_SNAPSHOT:
						case PostgreSQLParserParser.UUID:
						case PostgreSQLParserParser.VARBIT:
						case PostgreSQLParserParser.XML:
						case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
						case PostgreSQLParserParser.IDENTIFIER:
						case PostgreSQLParserParser.IDENTIFIER_UNICODE:
							{
							this.state = 4749;
							this.identifier(0);
							}
							break;
						case PostgreSQLParserParser.STAR:
							{
							this.state = 4750;
							this.match(PostgreSQLParserParser.STAR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;

					case 17:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_expr);
						this.state = 4753;
						if (!(this.precpred(this._ctx, 4))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
						}
						{
						this.state = 4754;
						this.match(PostgreSQLParserParser.AT);
						this.state = 4755;
						this.match(PostgreSQLParserParser.TIME);
						this.state = 4756;
						this.match(PostgreSQLParserParser.ZONE);
						}
						this.state = 4758;
						this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
						}
						break;
					}
					}
				}
				this.state = 4763;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 557, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public bool_expr(): Bool_exprContext;
	public bool_expr(_p: number): Bool_exprContext;
	// @RuleVersion(0)
	public bool_expr(_p?: number): Bool_exprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: Bool_exprContext = new Bool_exprContext(this._ctx, _parentState);
		let _prevctx: Bool_exprContext = _localctx;
		let _startState: number = 434;
		this.enterRecursionRule(_localctx, 434, PostgreSQLParserParser.RULE_bool_expr, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4769;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.TRUE:
				{
				this.state = 4765;
				this.match(PostgreSQLParserParser.TRUE);
				}
				break;
			case PostgreSQLParserParser.FALSE:
				{
				this.state = 4766;
				this.match(PostgreSQLParserParser.FALSE);
				}
				break;
			case PostgreSQLParserParser.NOT:
				{
				this.state = 4767;
				this.match(PostgreSQLParserParser.NOT);
				this.state = 4768;
				this.bool_expr(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 4779;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 560, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 4777;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 559, this._ctx) ) {
					case 1:
						{
						_localctx = new Bool_exprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_bool_expr);
						this.state = 4771;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 4772;
						this.match(PostgreSQLParserParser.AND);
						this.state = 4773;
						this.bool_expr(3);
						}
						break;

					case 2:
						{
						_localctx = new Bool_exprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_bool_expr);
						this.state = 4774;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 4775;
						this.match(PostgreSQLParserParser.OR);
						this.state = 4776;
						this.bool_expr(2);
						}
						break;
					}
					}
				}
				this.state = 4781;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 560, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_expr(): Case_exprContext {
		let _localctx: Case_exprContext = new Case_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, PostgreSQLParserParser.RULE_case_expr);
		let _la: number;
		try {
			this.state = 4815;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 565, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4782;
				this.match(PostgreSQLParserParser.CASE);
				this.state = 4783;
				this.expr(0);
				this.state = 4789;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4784;
					this.match(PostgreSQLParserParser.WHEN);
					this.state = 4785;
					this.expr(0);
					this.state = 4786;
					this.match(PostgreSQLParserParser.THEN);
					this.state = 4787;
					this.expr(0);
					}
					}
					this.state = 4791;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PostgreSQLParserParser.WHEN);
				this.state = 4795;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ELSE) {
					{
					this.state = 4793;
					this.match(PostgreSQLParserParser.ELSE);
					this.state = 4794;
					this.expr(0);
					}
				}

				this.state = 4797;
				this.match(PostgreSQLParserParser.END);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4799;
				this.match(PostgreSQLParserParser.CASE);
				this.state = 4805;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 4800;
					this.match(PostgreSQLParserParser.WHEN);
					this.state = 4801;
					this.predicate(0);
					this.state = 4802;
					this.match(PostgreSQLParserParser.THEN);
					this.state = 4803;
					this.expr(0);
					}
					}
					this.state = 4807;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PostgreSQLParserParser.WHEN);
				this.state = 4811;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ELSE) {
					{
					this.state = 4809;
					this.match(PostgreSQLParserParser.ELSE);
					this.state = 4810;
					this.expr(0);
					}
				}

				this.state = 4813;
				this.match(PostgreSQLParserParser.END);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_list(): Expr_listContext {
		let _localctx: Expr_listContext = new Expr_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, PostgreSQLParserParser.RULE_expr_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4817;
			this.match(PostgreSQLParserParser.OPEN_PAREN);
			this.state = 4818;
			this.expr(0);
			this.state = 4823;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 4819;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 4820;
				this.expr(0);
				}
				}
				this.state = 4825;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4826;
			this.match(PostgreSQLParserParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_list_list(): Expr_list_listContext {
		let _localctx: Expr_list_listContext = new Expr_list_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, PostgreSQLParserParser.RULE_expr_list_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4829;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 567, this._ctx) ) {
			case 1:
				{
				this.state = 4828;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				}
				break;
			}
			this.state = 4831;
			this.expr_list();
			this.state = 4836;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 568, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4832;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 4833;
					this.expr_list();
					}
					}
				}
				this.state = 4838;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 568, this._ctx);
			}
			this.state = 4840;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 569, this._ctx) ) {
			case 1:
				{
				this.state = 4839;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_sig_arg(): Func_sig_argContext {
		let _localctx: Func_sig_argContext = new Func_sig_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, PostgreSQLParserParser.RULE_func_sig_arg);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4849;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.IN - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARIADIC - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0)) {
				{
				this.state = 4843;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 570, this._ctx) ) {
				case 1:
					{
					this.state = 4842;
					_localctx._argmode = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.INOUT || _la === PostgreSQLParserParser.OUT || _la === PostgreSQLParserParser.VARIADIC)) {
						_localctx._argmode = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 4846;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 571, this._ctx) ) {
				case 1:
					{
					this.state = 4845;
					_localctx._argname = this.identifier(0);
					}
					break;
				}
				this.state = 4848;
				_localctx._argtype = this.data_type();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_sig_arg_list(): Func_sig_arg_listContext {
		let _localctx: Func_sig_arg_listContext = new Func_sig_arg_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, PostgreSQLParserParser.RULE_func_sig_arg_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4851;
			this.func_sig_arg();
			this.state = 4856;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 4852;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 4853;
				this.func_sig_arg();
				}
				}
				this.state = 4858;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_sig(): Func_sigContext {
		let _localctx: Func_sigContext = new Func_sigContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, PostgreSQLParserParser.RULE_func_sig);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4859;
			_localctx._name = this.identifier(0);
			this.state = 4864;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.OPEN_PAREN) {
				{
				this.state = 4860;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 4861;
				this.func_sig_arg_list();
				this.state = 4862;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_sig_list(): Func_sig_listContext {
		let _localctx: Func_sig_listContext = new Func_sig_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, PostgreSQLParserParser.RULE_func_sig_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4866;
			this.func_sig();
			this.state = 4871;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 4867;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 4868;
				this.func_sig();
				}
				}
				this.state = 4873;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_name(): Type_nameContext {
		let _localctx: Type_nameContext = new Type_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, PostgreSQLParserParser.RULE_type_name);
		let _la: number;
		try {
			this.state = 5018;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.ABSTIME:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4874;
				this.match(PostgreSQLParserParser.ABSTIME);
				}
				break;
			case PostgreSQLParserParser.RELTIME:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4875;
				this.match(PostgreSQLParserParser.RELTIME);
				}
				break;
			case PostgreSQLParserParser.BIGINT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4876;
				this.match(PostgreSQLParserParser.BIGINT);
				}
				break;
			case PostgreSQLParserParser.BIGSERIAL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4877;
				this.match(PostgreSQLParserParser.BIGSERIAL);
				}
				break;
			case PostgreSQLParserParser.BIT:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4878;
				this.match(PostgreSQLParserParser.BIT);
				this.state = 4882;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 576, this._ctx) ) {
				case 1:
					{
					this.state = 4879;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4880;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4881;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.BIT_VARYING:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4884;
				this.match(PostgreSQLParserParser.BIT_VARYING);
				this.state = 4888;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 577, this._ctx) ) {
				case 1:
					{
					this.state = 4885;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4886;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4887;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.BOOL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4890;
				this.match(PostgreSQLParserParser.BOOL);
				}
				break;
			case PostgreSQLParserParser.BOOLEAN:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4891;
				this.match(PostgreSQLParserParser.BOOLEAN);
				}
				break;
			case PostgreSQLParserParser.BOX:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4892;
				this.match(PostgreSQLParserParser.BOX);
				}
				break;
			case PostgreSQLParserParser.BYTEA:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4893;
				this.match(PostgreSQLParserParser.BYTEA);
				}
				break;
			case PostgreSQLParserParser.CHAR:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4894;
				this.match(PostgreSQLParserParser.CHAR);
				this.state = 4898;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 578, this._ctx) ) {
				case 1:
					{
					this.state = 4895;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4896;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4897;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.CHARACTER:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4900;
				this.match(PostgreSQLParserParser.CHARACTER);
				this.state = 4904;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 579, this._ctx) ) {
				case 1:
					{
					this.state = 4901;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4902;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4903;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.CHARACTER_VARYING:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4906;
				this.match(PostgreSQLParserParser.CHARACTER_VARYING);
				this.state = 4910;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 580, this._ctx) ) {
				case 1:
					{
					this.state = 4907;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4908;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4909;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.CIDR:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 4912;
				this.match(PostgreSQLParserParser.CIDR);
				}
				break;
			case PostgreSQLParserParser.CIRCLE:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 4913;
				this.match(PostgreSQLParserParser.CIRCLE);
				}
				break;
			case PostgreSQLParserParser.DATE:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 4914;
				this.match(PostgreSQLParserParser.DATE);
				}
				break;
			case PostgreSQLParserParser.DECIMAL:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 4915;
				this.match(PostgreSQLParserParser.DECIMAL);
				this.state = 4921;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 581, this._ctx) ) {
				case 1:
					{
					this.state = 4916;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4917;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4918;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 4919;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4920;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.DOUBLE:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 4923;
				this.match(PostgreSQLParserParser.DOUBLE);
				this.state = 4924;
				this.match(PostgreSQLParserParser.PRECISION);
				}
				break;
			case PostgreSQLParserParser.FLOAT4:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 4925;
				this.match(PostgreSQLParserParser.FLOAT4);
				}
				break;
			case PostgreSQLParserParser.FLOAT8:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 4926;
				this.match(PostgreSQLParserParser.FLOAT8);
				}
				break;
			case PostgreSQLParserParser.INET:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 4927;
				this.match(PostgreSQLParserParser.INET);
				}
				break;
			case PostgreSQLParserParser.INT:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 4928;
				this.match(PostgreSQLParserParser.INT);
				}
				break;
			case PostgreSQLParserParser.INT4:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 4929;
				this.match(PostgreSQLParserParser.INT4);
				}
				break;
			case PostgreSQLParserParser.INT2:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 4930;
				this.match(PostgreSQLParserParser.INT2);
				}
				break;
			case PostgreSQLParserParser.INT8:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 4931;
				this.match(PostgreSQLParserParser.INT8);
				}
				break;
			case PostgreSQLParserParser.INTEGER:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 4932;
				this.match(PostgreSQLParserParser.INTEGER);
				}
				break;
			case PostgreSQLParserParser.INTERVAL:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 4933;
				this.match(PostgreSQLParserParser.INTERVAL);
				this.state = 4935;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 582, this._ctx) ) {
				case 1:
					{
					this.state = 4934;
					this.match(PostgreSQLParserParser.FIELDS);
					}
					break;
				}
				this.state = 4938;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 583, this._ctx) ) {
				case 1:
					{
					this.state = 4937;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.JSON:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 4940;
				this.match(PostgreSQLParserParser.JSON);
				}
				break;
			case PostgreSQLParserParser.JSONB:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 4941;
				this.match(PostgreSQLParserParser.JSONB);
				}
				break;
			case PostgreSQLParserParser.LINE:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 4942;
				this.match(PostgreSQLParserParser.LINE);
				}
				break;
			case PostgreSQLParserParser.LSEG:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 4943;
				this.match(PostgreSQLParserParser.LSEG);
				}
				break;
			case PostgreSQLParserParser.MACADDR:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 4944;
				this.match(PostgreSQLParserParser.MACADDR);
				}
				break;
			case PostgreSQLParserParser.MACADDR8:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 4945;
				this.match(PostgreSQLParserParser.MACADDR8);
				}
				break;
			case PostgreSQLParserParser.MONEY:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 4946;
				this.match(PostgreSQLParserParser.MONEY);
				}
				break;
			case PostgreSQLParserParser.NUMERIC:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 4947;
				this.match(PostgreSQLParserParser.NUMERIC);
				this.state = 4953;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 584, this._ctx) ) {
				case 1:
					{
					this.state = 4948;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4949;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4950;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 4951;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4952;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.PATH:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 4955;
				this.match(PostgreSQLParserParser.PATH);
				}
				break;
			case PostgreSQLParserParser.PG_LSN:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 4956;
				this.match(PostgreSQLParserParser.PG_LSN);
				}
				break;
			case PostgreSQLParserParser.POINT:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 4957;
				this.match(PostgreSQLParserParser.POINT);
				}
				break;
			case PostgreSQLParserParser.POLYGON:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 4958;
				this.match(PostgreSQLParserParser.POLYGON);
				}
				break;
			case PostgreSQLParserParser.REAL:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 4959;
				this.match(PostgreSQLParserParser.REAL);
				}
				break;
			case PostgreSQLParserParser.SERIAL:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 4960;
				this.match(PostgreSQLParserParser.SERIAL);
				}
				break;
			case PostgreSQLParserParser.SERIAL2:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 4961;
				this.match(PostgreSQLParserParser.SERIAL2);
				}
				break;
			case PostgreSQLParserParser.SERIAL4:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 4962;
				this.match(PostgreSQLParserParser.SERIAL4);
				}
				break;
			case PostgreSQLParserParser.SERIAL8:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 4963;
				this.match(PostgreSQLParserParser.SERIAL8);
				}
				break;
			case PostgreSQLParserParser.SMALLINT:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 4964;
				this.match(PostgreSQLParserParser.SMALLINT);
				}
				break;
			case PostgreSQLParserParser.SMALLSERIAL:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 4965;
				this.match(PostgreSQLParserParser.SMALLSERIAL);
				}
				break;
			case PostgreSQLParserParser.TEXT:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 4966;
				this.match(PostgreSQLParserParser.TEXT);
				}
				break;
			case PostgreSQLParserParser.TIME:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 4967;
				this.match(PostgreSQLParserParser.TIME);
				this.state = 4971;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 585, this._ctx) ) {
				case 1:
					{
					this.state = 4968;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4969;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4970;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				this.state = 4976;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 586, this._ctx) ) {
				case 1:
					{
					this.state = 4973;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.WITH || _la === PostgreSQLParserParser.WITHOUT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4974;
					this.match(PostgreSQLParserParser.TIME);
					this.state = 4975;
					this.match(PostgreSQLParserParser.ZONE);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.TIMESTAMP:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 4978;
				this.match(PostgreSQLParserParser.TIMESTAMP);
				this.state = 4982;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 587, this._ctx) ) {
				case 1:
					{
					this.state = 4979;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4980;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4981;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				this.state = 4987;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 588, this._ctx) ) {
				case 1:
					{
					this.state = 4984;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.WITH || _la === PostgreSQLParserParser.WITHOUT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 4985;
					this.match(PostgreSQLParserParser.TIME);
					this.state = 4986;
					this.match(PostgreSQLParserParser.ZONE);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.TIMETZ:
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 4989;
				this.match(PostgreSQLParserParser.TIMETZ);
				this.state = 4993;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 589, this._ctx) ) {
				case 1:
					{
					this.state = 4990;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4991;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4992;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.TIMESTAMPTZ:
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 4995;
				this.match(PostgreSQLParserParser.TIMESTAMPTZ);
				this.state = 4999;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 590, this._ctx) ) {
				case 1:
					{
					this.state = 4996;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 4997;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 4998;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.TSQUERY:
				this.enterOuterAlt(_localctx, 52);
				{
				this.state = 5001;
				this.match(PostgreSQLParserParser.TSQUERY);
				}
				break;
			case PostgreSQLParserParser.TSVECTOR:
				this.enterOuterAlt(_localctx, 53);
				{
				this.state = 5002;
				this.match(PostgreSQLParserParser.TSVECTOR);
				}
				break;
			case PostgreSQLParserParser.TXID_SNAPSHOT:
				this.enterOuterAlt(_localctx, 54);
				{
				this.state = 5003;
				this.match(PostgreSQLParserParser.TXID_SNAPSHOT);
				}
				break;
			case PostgreSQLParserParser.UUID:
				this.enterOuterAlt(_localctx, 55);
				{
				this.state = 5004;
				this.match(PostgreSQLParserParser.UUID);
				}
				break;
			case PostgreSQLParserParser.VARBIT:
				this.enterOuterAlt(_localctx, 56);
				{
				this.state = 5005;
				this.match(PostgreSQLParserParser.VARBIT);
				this.state = 5009;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 591, this._ctx) ) {
				case 1:
					{
					this.state = 5006;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 5007;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 5008;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.VARCHAR:
				this.enterOuterAlt(_localctx, 57);
				{
				this.state = 5011;
				this.match(PostgreSQLParserParser.VARCHAR);
				this.state = 5015;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 592, this._ctx) ) {
				case 1:
					{
					this.state = 5012;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 5013;
					this.match(PostgreSQLParserParser.INTEGER_LITERAL);
					this.state = 5014;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParserParser.XML:
				this.enterOuterAlt(_localctx, 58);
				{
				this.state = 5017;
				this.match(PostgreSQLParserParser.XML);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public timezone(): TimezoneContext {
		let _localctx: TimezoneContext = new TimezoneContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, PostgreSQLParserParser.RULE_timezone);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5020;
			_la = this._input.LA(1);
			if (!(((((_la - 772)) & ~0x1F) === 0 && ((1 << (_la - 772)) & ((1 << (PostgreSQLParserParser.NUMERIC_LITERAL - 772)) | (1 << (PostgreSQLParserParser.INTEGER_LITERAL - 772)) | (1 << (PostgreSQLParserParser.SINGLEQ_STRING_LITERAL - 772)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 772)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public oper(): OperContext {
		let _localctx: OperContext = new OperContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, PostgreSQLParserParser.RULE_oper);
		try {
			this.state = 5026;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 594, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5023;
				this.match(PostgreSQLParserParser.IS);
				this.state = 5024;
				this.match(PostgreSQLParserParser.OF);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5025;
				this.match(PostgreSQLParserParser.ALL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggregate(): AggregateContext {
		let _localctx: AggregateContext = new AggregateContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, PostgreSQLParserParser.RULE_aggregate);
		let _la: number;
		try {
			this.state = 5091;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 603, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5028;
				this.identifier(0);
				this.state = 5029;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5031;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 595, this._ctx) ) {
				case 1:
					{
					this.state = 5030;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.ALL || _la === PostgreSQLParserParser.DISTINCT)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 5033;
				this.expr(0);
				this.state = 5038;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PostgreSQLParserParser.COMMA) {
					{
					{
					this.state = 5034;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 5035;
					this.expr(0);
					}
					}
					this.state = 5040;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5042;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ORDER) {
					{
					this.state = 5041;
					this.order_by_clause();
					}
				}

				this.state = 5044;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 5051;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 598, this._ctx) ) {
				case 1:
					{
					this.state = 5045;
					this.match(PostgreSQLParserParser.FILTER);
					this.state = 5046;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 5047;
					this.match(PostgreSQLParserParser.WHERE);
					this.state = 5048;
					this.where_clause();
					this.state = 5049;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5053;
				this.identifier(0);
				this.state = 5054;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5055;
				this.match(PostgreSQLParserParser.STAR);
				this.state = 5056;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 5063;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 599, this._ctx) ) {
				case 1:
					{
					this.state = 5057;
					this.match(PostgreSQLParserParser.FILTER);
					this.state = 5058;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 5059;
					this.match(PostgreSQLParserParser.WHERE);
					this.state = 5060;
					this.where_clause();
					this.state = 5061;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5065;
				this.identifier(0);
				this.state = 5066;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5075;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALL) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ARRAY) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CASE - 33)) | (1 << (PostgreSQLParserParser.CAST - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DATE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_ROLE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TIME - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TIMESTAMP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_USER - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULT - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FALSE - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOT - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULL - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITH - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.DOLLAR - 751)) | (1 << (PostgreSQLParserParser.DOLLAR_DOLLAR - 751)) | (1 << (PostgreSQLParserParser.OPEN_PAREN - 751)) | (1 << (PostgreSQLParserParser.BIT_STRING - 751)) | (1 << (PostgreSQLParserParser.REGEX_STRING - 751)) | (1 << (PostgreSQLParserParser.NUMERIC_LITERAL - 751)) | (1 << (PostgreSQLParserParser.INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.HEX_INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.SINGLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.DOLLAR_DEC - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0) || ((((_la - 786)) & ~0x1F) === 0 && ((1 << (_la - 786)) & ((1 << (PostgreSQLParserParser.AT_SIGN - 786)) | (1 << (PostgreSQLParserParser.BANG_BANG - 786)) | (1 << (PostgreSQLParserParser.MINUS - 786)))) !== 0) || ((((_la - 819)) & ~0x1F) === 0 && ((1 << (_la - 819)) & ((1 << (PostgreSQLParserParser.PLUS - 819)) | (1 << (PostgreSQLParserParser.QMARK_HYPHEN - 819)) | (1 << (PostgreSQLParserParser.TIL - 819)))) !== 0)) {
					{
					this.state = 5067;
					this.expr(0);
					this.state = 5072;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PostgreSQLParserParser.COMMA) {
						{
						{
						this.state = 5068;
						this.match(PostgreSQLParserParser.COMMA);
						this.state = 5069;
						this.expr(0);
						}
						}
						this.state = 5074;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
				}

				this.state = 5077;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 5078;
				this.match(PostgreSQLParserParser.WITHIN);
				this.state = 5079;
				this.match(PostgreSQLParserParser.GROUP);
				this.state = 5080;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5081;
				this.order_by_clause();
				this.state = 5082;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 5089;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 602, this._ctx) ) {
				case 1:
					{
					this.state = 5083;
					this.match(PostgreSQLParserParser.FILTER);
					this.state = 5084;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 5085;
					this.match(PostgreSQLParserParser.WHERE);
					this.state = 5086;
					this.where_clause();
					this.state = 5087;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public name_(): Name_Context {
		let _localctx: Name_Context = new Name_Context(this._ctx, this.state);
		this.enterRule(_localctx, 458, PostgreSQLParserParser.RULE_name_);
		try {
			this.state = 5095;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.SINGLEQ_STRING_LITERAL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5093;
				this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
				}
				break;
			case PostgreSQLParserParser.WHITESPACE:
			case PostgreSQLParserParser.A_:
			case PostgreSQLParserParser.ABORT:
			case PostgreSQLParserParser.ABS:
			case PostgreSQLParserParser.ABSOLUTE:
			case PostgreSQLParserParser.ACCESS:
			case PostgreSQLParserParser.ACTION:
			case PostgreSQLParserParser.ADA:
			case PostgreSQLParserParser.ADD:
			case PostgreSQLParserParser.ADMIN:
			case PostgreSQLParserParser.AFTER:
			case PostgreSQLParserParser.AGGREGATE:
			case PostgreSQLParserParser.ALLOCATE:
			case PostgreSQLParserParser.ALSO:
			case PostgreSQLParserParser.ALTER:
			case PostgreSQLParserParser.ALWAYS:
			case PostgreSQLParserParser.ANY:
			case PostgreSQLParserParser.ARE:
			case PostgreSQLParserParser.ASENSITIVE:
			case PostgreSQLParserParser.ASSERTION:
			case PostgreSQLParserParser.ASSIGNMENT:
			case PostgreSQLParserParser.AT:
			case PostgreSQLParserParser.ATOMIC:
			case PostgreSQLParserParser.ATTRIBUTE:
			case PostgreSQLParserParser.ATTRIBUTES:
			case PostgreSQLParserParser.AVG:
			case PostgreSQLParserParser.BACKWARD:
			case PostgreSQLParserParser.BEFORE:
			case PostgreSQLParserParser.BEGIN:
			case PostgreSQLParserParser.BERNOULLI:
			case PostgreSQLParserParser.BETWEEN:
			case PostgreSQLParserParser.BIGINT:
			case PostgreSQLParserParser.BIT:
			case PostgreSQLParserParser.BIT_LENGTH:
			case PostgreSQLParserParser.BLOB:
			case PostgreSQLParserParser.BOOLEAN:
			case PostgreSQLParserParser.BREADTH:
			case PostgreSQLParserParser.BY:
			case PostgreSQLParserParser.C_:
			case PostgreSQLParserParser.CACHE:
			case PostgreSQLParserParser.CALL:
			case PostgreSQLParserParser.CALLED:
			case PostgreSQLParserParser.CARDINALITY:
			case PostgreSQLParserParser.CASCADE:
			case PostgreSQLParserParser.CASCADED:
			case PostgreSQLParserParser.CATALOG:
			case PostgreSQLParserParser.CATALOG_NAME:
			case PostgreSQLParserParser.CEIL:
			case PostgreSQLParserParser.CEILING:
			case PostgreSQLParserParser.CHAIN:
			case PostgreSQLParserParser.CHAR:
			case PostgreSQLParserParser.CHAR_LENGTH:
			case PostgreSQLParserParser.CHARACTER:
			case PostgreSQLParserParser.CHARACTER_LENGTH:
			case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
			case PostgreSQLParserParser.CHARACTER_SET_NAME:
			case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
			case PostgreSQLParserParser.CHARACTERISTICS:
			case PostgreSQLParserParser.CHARACTERS:
			case PostgreSQLParserParser.CHECKPOINT:
			case PostgreSQLParserParser.CLASS:
			case PostgreSQLParserParser.CLASS_ORIGIN:
			case PostgreSQLParserParser.CLOB:
			case PostgreSQLParserParser.CLOSE:
			case PostgreSQLParserParser.CLUSTER:
			case PostgreSQLParserParser.COALESCE:
			case PostgreSQLParserParser.COBOL:
			case PostgreSQLParserParser.COLLATION_CATALOG:
			case PostgreSQLParserParser.COLLATION_NAME:
			case PostgreSQLParserParser.COLLATION_SCHEMA:
			case PostgreSQLParserParser.COLLECT:
			case PostgreSQLParserParser.COLUMN_NAME:
			case PostgreSQLParserParser.COMMAND_FUNCTION:
			case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
			case PostgreSQLParserParser.COMMENT:
			case PostgreSQLParserParser.COMMIT:
			case PostgreSQLParserParser.COMMITTED:
			case PostgreSQLParserParser.CONDITION:
			case PostgreSQLParserParser.CONDITION_NUMBER:
			case PostgreSQLParserParser.CONNECT:
			case PostgreSQLParserParser.CONNECTION:
			case PostgreSQLParserParser.CONNECTION_NAME:
			case PostgreSQLParserParser.CONSTRAINT_CATALOG:
			case PostgreSQLParserParser.CONSTRAINT_NAME:
			case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
			case PostgreSQLParserParser.CONSTRAINTS:
			case PostgreSQLParserParser.CONSTRUCTOR:
			case PostgreSQLParserParser.CONTAINS:
			case PostgreSQLParserParser.CONTINUE:
			case PostgreSQLParserParser.CONVERSION:
			case PostgreSQLParserParser.CONVERT:
			case PostgreSQLParserParser.COPY:
			case PostgreSQLParserParser.CORR:
			case PostgreSQLParserParser.CORRESPONDING:
			case PostgreSQLParserParser.COUNT:
			case PostgreSQLParserParser.COVAR_POP:
			case PostgreSQLParserParser.COVAR_SAMP:
			case PostgreSQLParserParser.CSV:
			case PostgreSQLParserParser.CUBE:
			case PostgreSQLParserParser.CUME_DIST:
			case PostgreSQLParserParser.CURRENT:
			case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
			case PostgreSQLParserParser.CURRENT_PATH:
			case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case PostgreSQLParserParser.CURSOR:
			case PostgreSQLParserParser.CURSOR_NAME:
			case PostgreSQLParserParser.CYCLE:
			case PostgreSQLParserParser.DATA:
			case PostgreSQLParserParser.DATABASE:
			case PostgreSQLParserParser.DATE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
			case PostgreSQLParserParser.DAY:
			case PostgreSQLParserParser.DEALLOCATE:
			case PostgreSQLParserParser.DEC:
			case PostgreSQLParserParser.DECIMAL:
			case PostgreSQLParserParser.DECLARE:
			case PostgreSQLParserParser.DEFAULTS:
			case PostgreSQLParserParser.DEFERRED:
			case PostgreSQLParserParser.DEFINED:
			case PostgreSQLParserParser.DEFINER:
			case PostgreSQLParserParser.DEGREE:
			case PostgreSQLParserParser.DELETE:
			case PostgreSQLParserParser.DELIMITER:
			case PostgreSQLParserParser.DELIMITERS:
			case PostgreSQLParserParser.DENSE_RANK:
			case PostgreSQLParserParser.DEPTH:
			case PostgreSQLParserParser.DEREF:
			case PostgreSQLParserParser.DERIVED:
			case PostgreSQLParserParser.DESCRIBE:
			case PostgreSQLParserParser.DESCRIPTOR:
			case PostgreSQLParserParser.DETERMINISTIC:
			case PostgreSQLParserParser.DIAGNOSTICS:
			case PostgreSQLParserParser.DICTIONARY:
			case PostgreSQLParserParser.DISCONNECT:
			case PostgreSQLParserParser.DISPATCH:
			case PostgreSQLParserParser.DOMAIN:
			case PostgreSQLParserParser.DOUBLE:
			case PostgreSQLParserParser.DYNAMIC:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
			case PostgreSQLParserParser.EACH:
			case PostgreSQLParserParser.ELEMENT:
			case PostgreSQLParserParser.ENCODING:
			case PostgreSQLParserParser.ENCRYPTED:
			case PostgreSQLParserParser.END:
			case PostgreSQLParserParser.EQUALS:
			case PostgreSQLParserParser.ESCAPE:
			case PostgreSQLParserParser.EVERY:
			case PostgreSQLParserParser.EXCEPTION:
			case PostgreSQLParserParser.EXCLUDE:
			case PostgreSQLParserParser.EXCLUDING:
			case PostgreSQLParserParser.EXCLUSIVE:
			case PostgreSQLParserParser.EXEC:
			case PostgreSQLParserParser.EXECUTE:
			case PostgreSQLParserParser.EXISTS:
			case PostgreSQLParserParser.EXP:
			case PostgreSQLParserParser.EXPLAIN:
			case PostgreSQLParserParser.EXTENSION:
			case PostgreSQLParserParser.EXTERNAL:
			case PostgreSQLParserParser.EXTRACT:
			case PostgreSQLParserParser.FILTER:
			case PostgreSQLParserParser.FINAL:
			case PostgreSQLParserParser.FIRST:
			case PostgreSQLParserParser.FLOAT:
			case PostgreSQLParserParser.FLOOR:
			case PostgreSQLParserParser.FOLLOWING:
			case PostgreSQLParserParser.FORCE:
			case PostgreSQLParserParser.FORMAT:
			case PostgreSQLParserParser.FORTRAN:
			case PostgreSQLParserParser.FORWARD:
			case PostgreSQLParserParser.FOUND:
			case PostgreSQLParserParser.FREE:
			case PostgreSQLParserParser.FUNCTION:
			case PostgreSQLParserParser.FUSION:
			case PostgreSQLParserParser.G_:
			case PostgreSQLParserParser.GENERAL:
			case PostgreSQLParserParser.GENERATED:
			case PostgreSQLParserParser.GET:
			case PostgreSQLParserParser.GLOBAL:
			case PostgreSQLParserParser.GO:
			case PostgreSQLParserParser.GOTO:
			case PostgreSQLParserParser.GRANTED:
			case PostgreSQLParserParser.GREATEST:
			case PostgreSQLParserParser.GROUPING:
			case PostgreSQLParserParser.HANDLER:
			case PostgreSQLParserParser.HIERARCHY:
			case PostgreSQLParserParser.HOLD:
			case PostgreSQLParserParser.HOST:
			case PostgreSQLParserParser.HOUR:
			case PostgreSQLParserParser.IDENTITY:
			case PostgreSQLParserParser.IGNORE:
			case PostgreSQLParserParser.IMMEDIATE:
			case PostgreSQLParserParser.IMMUTABLE:
			case PostgreSQLParserParser.IMPLEMENTATION:
			case PostgreSQLParserParser.IMPLICIT:
			case PostgreSQLParserParser.INCLUDING:
			case PostgreSQLParserParser.INCREMENT:
			case PostgreSQLParserParser.INDEX:
			case PostgreSQLParserParser.INDICATOR:
			case PostgreSQLParserParser.INHERITS:
			case PostgreSQLParserParser.INOUT:
			case PostgreSQLParserParser.INPUT:
			case PostgreSQLParserParser.INSENSITIVE:
			case PostgreSQLParserParser.INSERT:
			case PostgreSQLParserParser.INSTANCE:
			case PostgreSQLParserParser.INSTANTIABLE:
			case PostgreSQLParserParser.INSTEAD:
			case PostgreSQLParserParser.INT:
			case PostgreSQLParserParser.INTEGER:
			case PostgreSQLParserParser.INTERSECTION:
			case PostgreSQLParserParser.INTERVAL:
			case PostgreSQLParserParser.INVOKER:
			case PostgreSQLParserParser.ISOLATION:
			case PostgreSQLParserParser.K_:
			case PostgreSQLParserParser.KEY:
			case PostgreSQLParserParser.KEY_MEMBER:
			case PostgreSQLParserParser.KEY_TYPE:
			case PostgreSQLParserParser.LANGUAGE:
			case PostgreSQLParserParser.LARGE:
			case PostgreSQLParserParser.LAST:
			case PostgreSQLParserParser.LEAST:
			case PostgreSQLParserParser.LEFT:
			case PostgreSQLParserParser.LENGTH:
			case PostgreSQLParserParser.LEVEL:
			case PostgreSQLParserParser.LISTEN:
			case PostgreSQLParserParser.LN:
			case PostgreSQLParserParser.LOAD:
			case PostgreSQLParserParser.LOCAL:
			case PostgreSQLParserParser.LOCATION:
			case PostgreSQLParserParser.LOCATOR:
			case PostgreSQLParserParser.LOCK:
			case PostgreSQLParserParser.LOCKED:
			case PostgreSQLParserParser.LOWER:
			case PostgreSQLParserParser.M_:
			case PostgreSQLParserParser.MAP:
			case PostgreSQLParserParser.MATCH:
			case PostgreSQLParserParser.MATCHED:
			case PostgreSQLParserParser.MAX:
			case PostgreSQLParserParser.MAXVALUE:
			case PostgreSQLParserParser.MEMBER:
			case PostgreSQLParserParser.MERGE:
			case PostgreSQLParserParser.MESSAGE_LENGTH:
			case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
			case PostgreSQLParserParser.MESSAGE_TEXT:
			case PostgreSQLParserParser.METHOD:
			case PostgreSQLParserParser.MIN:
			case PostgreSQLParserParser.MINUTE:
			case PostgreSQLParserParser.MINVALUE:
			case PostgreSQLParserParser.MOD:
			case PostgreSQLParserParser.MODE:
			case PostgreSQLParserParser.MODIFIES:
			case PostgreSQLParserParser.MODULE:
			case PostgreSQLParserParser.MONTH:
			case PostgreSQLParserParser.MORE_:
			case PostgreSQLParserParser.MOVE:
			case PostgreSQLParserParser.MULTISET:
			case PostgreSQLParserParser.MUMPS:
			case PostgreSQLParserParser.NAME:
			case PostgreSQLParserParser.NAMES:
			case PostgreSQLParserParser.NATIONAL:
			case PostgreSQLParserParser.NCHAR:
			case PostgreSQLParserParser.NCLOB:
			case PostgreSQLParserParser.NESTING:
			case PostgreSQLParserParser.NEW:
			case PostgreSQLParserParser.NEXT:
			case PostgreSQLParserParser.NO:
			case PostgreSQLParserParser.NONE:
			case PostgreSQLParserParser.NORMALIZE:
			case PostgreSQLParserParser.NORMALIZED:
			case PostgreSQLParserParser.NOTHING:
			case PostgreSQLParserParser.NOTIFY:
			case PostgreSQLParserParser.NOWAIT:
			case PostgreSQLParserParser.NULLABLE:
			case PostgreSQLParserParser.NULLIF:
			case PostgreSQLParserParser.NULLS:
			case PostgreSQLParserParser.NUMBER:
			case PostgreSQLParserParser.NUMERIC:
			case PostgreSQLParserParser.OBJECT:
			case PostgreSQLParserParser.OCTET_LENGTH:
			case PostgreSQLParserParser.OCTETS:
			case PostgreSQLParserParser.OF:
			case PostgreSQLParserParser.OFF:
			case PostgreSQLParserParser.OIDS:
			case PostgreSQLParserParser.OLD:
			case PostgreSQLParserParser.OPEN:
			case PostgreSQLParserParser.OPERATOR:
			case PostgreSQLParserParser.OPTION:
			case PostgreSQLParserParser.OPTIONS:
			case PostgreSQLParserParser.ORDERING:
			case PostgreSQLParserParser.ORDINALITY:
			case PostgreSQLParserParser.OTHERS:
			case PostgreSQLParserParser.OUT:
			case PostgreSQLParserParser.OUTPUT:
			case PostgreSQLParserParser.OVER:
			case PostgreSQLParserParser.OVERLAY:
			case PostgreSQLParserParser.OVERRIDING:
			case PostgreSQLParserParser.OWNER:
			case PostgreSQLParserParser.PAD:
			case PostgreSQLParserParser.PARAMETER:
			case PostgreSQLParserParser.PARAMETER_MODE:
			case PostgreSQLParserParser.PARAMETER_NAME:
			case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
			case PostgreSQLParserParser.PARTIAL:
			case PostgreSQLParserParser.PARTITION:
			case PostgreSQLParserParser.PASCAL:
			case PostgreSQLParserParser.PASSWORD:
			case PostgreSQLParserParser.PATH:
			case PostgreSQLParserParser.PERCENT_RANK:
			case PostgreSQLParserParser.PERCENTILE_CONT:
			case PostgreSQLParserParser.PERCENTILE_DISC:
			case PostgreSQLParserParser.PLAIN:
			case PostgreSQLParserParser.PLI:
			case PostgreSQLParserParser.POSITION:
			case PostgreSQLParserParser.POWER:
			case PostgreSQLParserParser.PRECEDING:
			case PostgreSQLParserParser.PRECISION:
			case PostgreSQLParserParser.PREPARE:
			case PostgreSQLParserParser.PRESERVE:
			case PostgreSQLParserParser.PRIOR:
			case PostgreSQLParserParser.PRIVILEGES:
			case PostgreSQLParserParser.PROCEDURAL:
			case PostgreSQLParserParser.PROCEDURE:
			case PostgreSQLParserParser.PUBLIC:
			case PostgreSQLParserParser.QUOTE:
			case PostgreSQLParserParser.RANGE:
			case PostgreSQLParserParser.RANK:
			case PostgreSQLParserParser.READ:
			case PostgreSQLParserParser.READS:
			case PostgreSQLParserParser.REAL:
			case PostgreSQLParserParser.RECHECK:
			case PostgreSQLParserParser.RECURSIVE:
			case PostgreSQLParserParser.REF:
			case PostgreSQLParserParser.REFERENCING:
			case PostgreSQLParserParser.REFRESH:
			case PostgreSQLParserParser.REGR_AVGX:
			case PostgreSQLParserParser.REGR_AVGY:
			case PostgreSQLParserParser.REGR_COUNT:
			case PostgreSQLParserParser.REGR_INTERCEPT:
			case PostgreSQLParserParser.REGR_SLOPE:
			case PostgreSQLParserParser.REGR_SXX:
			case PostgreSQLParserParser.REGR_SXY:
			case PostgreSQLParserParser.REGR_SYY:
			case PostgreSQLParserParser.REINDEX:
			case PostgreSQLParserParser.RELATIVE:
			case PostgreSQLParserParser.RELEASE:
			case PostgreSQLParserParser.RENAME:
			case PostgreSQLParserParser.REPEATABLE:
			case PostgreSQLParserParser.REPLACE:
			case PostgreSQLParserParser.RESET:
			case PostgreSQLParserParser.RESTART:
			case PostgreSQLParserParser.RESTRICT:
			case PostgreSQLParserParser.RESULT:
			case PostgreSQLParserParser.RETURN:
			case PostgreSQLParserParser.RETURNED_CARDINALITY:
			case PostgreSQLParserParser.RETURNED_LENGTH:
			case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
			case PostgreSQLParserParser.RETURNED_SQLSTATE:
			case PostgreSQLParserParser.RETURNS:
			case PostgreSQLParserParser.REVOKE:
			case PostgreSQLParserParser.RIGHT:
			case PostgreSQLParserParser.ROLE:
			case PostgreSQLParserParser.ROLLBACK:
			case PostgreSQLParserParser.ROLLUP:
			case PostgreSQLParserParser.ROUTINE:
			case PostgreSQLParserParser.ROUTINE_CATALOG:
			case PostgreSQLParserParser.ROUTINE_NAME:
			case PostgreSQLParserParser.ROUTINE_SCHEMA:
			case PostgreSQLParserParser.ROW:
			case PostgreSQLParserParser.ROW_COUNT:
			case PostgreSQLParserParser.ROW_NUMBER:
			case PostgreSQLParserParser.ROWS:
			case PostgreSQLParserParser.RULE:
			case PostgreSQLParserParser.SAVEPOINT:
			case PostgreSQLParserParser.SCALE:
			case PostgreSQLParserParser.SCHEMA:
			case PostgreSQLParserParser.SCHEMA_NAME:
			case PostgreSQLParserParser.SCOPE:
			case PostgreSQLParserParser.SCOPE_CATALOG:
			case PostgreSQLParserParser.SCOPE_NAME:
			case PostgreSQLParserParser.SCOPE_SCHEMA:
			case PostgreSQLParserParser.SCROLL:
			case PostgreSQLParserParser.SEARCH:
			case PostgreSQLParserParser.SECOND:
			case PostgreSQLParserParser.SECTION:
			case PostgreSQLParserParser.SECURITY:
			case PostgreSQLParserParser.SELF:
			case PostgreSQLParserParser.SENSITIVE:
			case PostgreSQLParserParser.SEQUENCE:
			case PostgreSQLParserParser.SEQUENCES:
			case PostgreSQLParserParser.SERIALIZABLE:
			case PostgreSQLParserParser.SERVER_NAME:
			case PostgreSQLParserParser.SESSION:
			case PostgreSQLParserParser.SET:
			case PostgreSQLParserParser.SETOF:
			case PostgreSQLParserParser.SETS:
			case PostgreSQLParserParser.SHARE:
			case PostgreSQLParserParser.SHOW:
			case PostgreSQLParserParser.SIMPLE:
			case PostgreSQLParserParser.SIZE:
			case PostgreSQLParserParser.SMALLINT:
			case PostgreSQLParserParser.SOME:
			case PostgreSQLParserParser.SOURCE:
			case PostgreSQLParserParser.SPACE:
			case PostgreSQLParserParser.SPECIFIC:
			case PostgreSQLParserParser.SPECIFIC_NAME:
			case PostgreSQLParserParser.SPECIFICTYPE:
			case PostgreSQLParserParser.SQL:
			case PostgreSQLParserParser.SQLCODE:
			case PostgreSQLParserParser.SQLERROR:
			case PostgreSQLParserParser.SQLEXCEPTION:
			case PostgreSQLParserParser.SQLSTATE:
			case PostgreSQLParserParser.SQLWARNING:
			case PostgreSQLParserParser.SQRT:
			case PostgreSQLParserParser.STABLE:
			case PostgreSQLParserParser.START:
			case PostgreSQLParserParser.STATE:
			case PostgreSQLParserParser.STATEMENT:
			case PostgreSQLParserParser.STATIC:
			case PostgreSQLParserParser.STATISTICS:
			case PostgreSQLParserParser.STDDEV_POP:
			case PostgreSQLParserParser.STDDEV_SAMP:
			case PostgreSQLParserParser.STDIN:
			case PostgreSQLParserParser.STDOUT:
			case PostgreSQLParserParser.STORAGE:
			case PostgreSQLParserParser.STRICT:
			case PostgreSQLParserParser.STRUCTURE:
			case PostgreSQLParserParser.STYLE:
			case PostgreSQLParserParser.SUBCLASS_ORIGIN:
			case PostgreSQLParserParser.SUBMULTISET:
			case PostgreSQLParserParser.SUBSTRING:
			case PostgreSQLParserParser.SUM:
			case PostgreSQLParserParser.SYSID:
			case PostgreSQLParserParser.SYSTEM:
			case PostgreSQLParserParser.SYSTEM_USER:
			case PostgreSQLParserParser.TABLE_NAME:
			case PostgreSQLParserParser.TABLESPACE:
			case PostgreSQLParserParser.TEMP:
			case PostgreSQLParserParser.TEMPLATE:
			case PostgreSQLParserParser.TEMPORARY:
			case PostgreSQLParserParser.TIES:
			case PostgreSQLParserParser.TIME:
			case PostgreSQLParserParser.TIMESTAMP:
			case PostgreSQLParserParser.TIMEZONE_HOUR:
			case PostgreSQLParserParser.TIMEZONE_MINUTE:
			case PostgreSQLParserParser.TOP_LEVEL_COUNT:
			case PostgreSQLParserParser.TRANSACTION:
			case PostgreSQLParserParser.TRANSACTION_ACTIVE:
			case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
			case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
			case PostgreSQLParserParser.TRANSFORM:
			case PostgreSQLParserParser.TRANSFORMS:
			case PostgreSQLParserParser.TRANSLATE:
			case PostgreSQLParserParser.TRANSLATION:
			case PostgreSQLParserParser.TREAT:
			case PostgreSQLParserParser.TRIGGER:
			case PostgreSQLParserParser.TRIGGER_CATALOG:
			case PostgreSQLParserParser.TRIGGER_NAME:
			case PostgreSQLParserParser.TRIGGER_SCHEMA:
			case PostgreSQLParserParser.TRIM:
			case PostgreSQLParserParser.TRUE:
			case PostgreSQLParserParser.TRUNCATE:
			case PostgreSQLParserParser.TRUSTED:
			case PostgreSQLParserParser.TYPE:
			case PostgreSQLParserParser.UESCAPE:
			case PostgreSQLParserParser.UNBOUNDED:
			case PostgreSQLParserParser.UNCOMMITTED:
			case PostgreSQLParserParser.UNDER:
			case PostgreSQLParserParser.UNENCRYPTED:
			case PostgreSQLParserParser.UNKNOWN:
			case PostgreSQLParserParser.UNLISTEN:
			case PostgreSQLParserParser.UNNAMED:
			case PostgreSQLParserParser.UNNEST:
			case PostgreSQLParserParser.UNTIL:
			case PostgreSQLParserParser.UPDATE:
			case PostgreSQLParserParser.UPPER:
			case PostgreSQLParserParser.USAGE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
			case PostgreSQLParserParser.VACUUM:
			case PostgreSQLParserParser.VALID:
			case PostgreSQLParserParser.VALIDATOR:
			case PostgreSQLParserParser.VALUE:
			case PostgreSQLParserParser.VALUES:
			case PostgreSQLParserParser.VAR_POP:
			case PostgreSQLParserParser.VAR_SAMP:
			case PostgreSQLParserParser.VARCHAR:
			case PostgreSQLParserParser.VARYING:
			case PostgreSQLParserParser.VIEW:
			case PostgreSQLParserParser.VOLATILE:
			case PostgreSQLParserParser.WHENEVER:
			case PostgreSQLParserParser.WIDTH_BUCKET:
			case PostgreSQLParserParser.WITHIN:
			case PostgreSQLParserParser.WITHOUT:
			case PostgreSQLParserParser.WORK:
			case PostgreSQLParserParser.WRITE:
			case PostgreSQLParserParser.YEAR:
			case PostgreSQLParserParser.ZONE:
			case PostgreSQLParserParser.ABSTIME:
			case PostgreSQLParserParser.BIGSERIAL:
			case PostgreSQLParserParser.BIT_VARYING:
			case PostgreSQLParserParser.BOOL:
			case PostgreSQLParserParser.BOX:
			case PostgreSQLParserParser.BYTEA:
			case PostgreSQLParserParser.CHARACTER_VARYING:
			case PostgreSQLParserParser.CIDR:
			case PostgreSQLParserParser.CIRCLE:
			case PostgreSQLParserParser.FLOAT4:
			case PostgreSQLParserParser.FLOAT8:
			case PostgreSQLParserParser.INET:
			case PostgreSQLParserParser.INT2:
			case PostgreSQLParserParser.INT4:
			case PostgreSQLParserParser.INT8:
			case PostgreSQLParserParser.JSON:
			case PostgreSQLParserParser.JSONB:
			case PostgreSQLParserParser.LINE:
			case PostgreSQLParserParser.LSEG:
			case PostgreSQLParserParser.MACADDR:
			case PostgreSQLParserParser.MACADDR8:
			case PostgreSQLParserParser.MONEY:
			case PostgreSQLParserParser.PG_LSN:
			case PostgreSQLParserParser.POINT:
			case PostgreSQLParserParser.POLYGON:
			case PostgreSQLParserParser.RELTIME:
			case PostgreSQLParserParser.SERIAL:
			case PostgreSQLParserParser.SERIAL2:
			case PostgreSQLParserParser.SERIAL4:
			case PostgreSQLParserParser.SERIAL8:
			case PostgreSQLParserParser.SMALLSERIAL:
			case PostgreSQLParserParser.TEXT:
			case PostgreSQLParserParser.TIMESTAMPTZ:
			case PostgreSQLParserParser.TIMETZ:
			case PostgreSQLParserParser.TSQUERY:
			case PostgreSQLParserParser.TSVECTOR:
			case PostgreSQLParserParser.TXID_SNAPSHOT:
			case PostgreSQLParserParser.UUID:
			case PostgreSQLParserParser.VARBIT:
			case PostgreSQLParserParser.XML:
			case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
			case PostgreSQLParserParser.IDENTIFIER:
			case PostgreSQLParserParser.IDENTIFIER_UNICODE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5094;
				this.identifier(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public name_list(): Name_listContext {
		let _localctx: Name_listContext = new Name_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, PostgreSQLParserParser.RULE_name_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5097;
			this.name_();
			this.state = 5102;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 5098;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 5099;
				this.name_();
				}
				}
				this.state = 5104;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier_list(): Identifier_listContext {
		let _localctx: Identifier_listContext = new Identifier_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, PostgreSQLParserParser.RULE_identifier_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5105;
			this.identifier(0);
			this.state = 5110;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 606, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5106;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 5107;
					this.identifier(0);
					}
					}
				}
				this.state = 5112;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 606, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public option_expr(): Option_exprContext {
		let _localctx: Option_exprContext = new Option_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, PostgreSQLParserParser.RULE_option_expr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5113;
			_localctx._option_name = this.identifier(0);
			this.state = 5116;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.EQUAL) {
				{
				this.state = 5114;
				this.match(PostgreSQLParserParser.EQUAL);
				this.state = 5115;
				_localctx._value = this.param_value();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public option_list(): Option_listContext {
		let _localctx: Option_listContext = new Option_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, PostgreSQLParserParser.RULE_option_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5118;
			this.option_expr();
			this.state = 5123;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 5119;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 5120;
				this.option_expr();
				}
				}
				this.state = 5125;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_name_(): Table_name_Context {
		let _localctx: Table_name_Context = new Table_name_Context(this._ctx, this.state);
		this.enterRule(_localctx, 468, PostgreSQLParserParser.RULE_table_name_);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5126;
			this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_type(): Data_typeContext {
		let _localctx: Data_typeContext = new Data_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, PostgreSQLParserParser.RULE_data_type);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5130;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 609, this._ctx) ) {
			case 1:
				{
				this.state = 5128;
				this.type_name();
				}
				break;

			case 2:
				{
				this.state = 5129;
				this.identifier(0);
				}
				break;
			}
			this.state = 5139;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 611, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 5132;
					this.match(PostgreSQLParserParser.OPEN_BRACKET);
					this.state = 5134;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParserParser.INTEGER_LITERAL) {
						{
						this.state = 5133;
						this.match(PostgreSQLParserParser.INTEGER_LITERAL);
						}
					}

					this.state = 5136;
					this.match(PostgreSQLParserParser.CLOSE_BRACKET);
					}
					}
				}
				this.state = 5141;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 611, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public data_type_list(): Data_type_listContext {
		let _localctx: Data_type_listContext = new Data_type_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, PostgreSQLParserParser.RULE_data_type_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5142;
			this.data_type();
			this.state = 5147;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 5143;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 5144;
				this.data_type();
				}
				}
				this.state = 5149;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_method(): Index_methodContext {
		let _localctx: Index_methodContext = new Index_methodContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, PostgreSQLParserParser.RULE_index_method);
		let _la: number;
		try {
			this.state = 5152;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.BTREE:
			case PostgreSQLParserParser.HASH_:
			case PostgreSQLParserParser.GIST:
			case PostgreSQLParserParser.SPGIST:
			case PostgreSQLParserParser.GIN:
			case PostgreSQLParserParser.BRIN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5150;
				_localctx._builtin = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 701)) & ~0x1F) === 0 && ((1 << (_la - 701)) & ((1 << (PostgreSQLParserParser.BTREE - 701)) | (1 << (PostgreSQLParserParser.HASH_ - 701)) | (1 << (PostgreSQLParserParser.GIST - 701)) | (1 << (PostgreSQLParserParser.SPGIST - 701)) | (1 << (PostgreSQLParserParser.GIN - 701)) | (1 << (PostgreSQLParserParser.BRIN - 701)))) !== 0))) {
					_localctx._builtin = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PostgreSQLParserParser.WHITESPACE:
			case PostgreSQLParserParser.A_:
			case PostgreSQLParserParser.ABORT:
			case PostgreSQLParserParser.ABS:
			case PostgreSQLParserParser.ABSOLUTE:
			case PostgreSQLParserParser.ACCESS:
			case PostgreSQLParserParser.ACTION:
			case PostgreSQLParserParser.ADA:
			case PostgreSQLParserParser.ADD:
			case PostgreSQLParserParser.ADMIN:
			case PostgreSQLParserParser.AFTER:
			case PostgreSQLParserParser.AGGREGATE:
			case PostgreSQLParserParser.ALLOCATE:
			case PostgreSQLParserParser.ALSO:
			case PostgreSQLParserParser.ALTER:
			case PostgreSQLParserParser.ALWAYS:
			case PostgreSQLParserParser.ANY:
			case PostgreSQLParserParser.ARE:
			case PostgreSQLParserParser.ASENSITIVE:
			case PostgreSQLParserParser.ASSERTION:
			case PostgreSQLParserParser.ASSIGNMENT:
			case PostgreSQLParserParser.AT:
			case PostgreSQLParserParser.ATOMIC:
			case PostgreSQLParserParser.ATTRIBUTE:
			case PostgreSQLParserParser.ATTRIBUTES:
			case PostgreSQLParserParser.AVG:
			case PostgreSQLParserParser.BACKWARD:
			case PostgreSQLParserParser.BEFORE:
			case PostgreSQLParserParser.BEGIN:
			case PostgreSQLParserParser.BERNOULLI:
			case PostgreSQLParserParser.BETWEEN:
			case PostgreSQLParserParser.BIGINT:
			case PostgreSQLParserParser.BIT:
			case PostgreSQLParserParser.BIT_LENGTH:
			case PostgreSQLParserParser.BLOB:
			case PostgreSQLParserParser.BOOLEAN:
			case PostgreSQLParserParser.BREADTH:
			case PostgreSQLParserParser.BY:
			case PostgreSQLParserParser.C_:
			case PostgreSQLParserParser.CACHE:
			case PostgreSQLParserParser.CALL:
			case PostgreSQLParserParser.CALLED:
			case PostgreSQLParserParser.CARDINALITY:
			case PostgreSQLParserParser.CASCADE:
			case PostgreSQLParserParser.CASCADED:
			case PostgreSQLParserParser.CATALOG:
			case PostgreSQLParserParser.CATALOG_NAME:
			case PostgreSQLParserParser.CEIL:
			case PostgreSQLParserParser.CEILING:
			case PostgreSQLParserParser.CHAIN:
			case PostgreSQLParserParser.CHAR:
			case PostgreSQLParserParser.CHAR_LENGTH:
			case PostgreSQLParserParser.CHARACTER:
			case PostgreSQLParserParser.CHARACTER_LENGTH:
			case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
			case PostgreSQLParserParser.CHARACTER_SET_NAME:
			case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
			case PostgreSQLParserParser.CHARACTERISTICS:
			case PostgreSQLParserParser.CHARACTERS:
			case PostgreSQLParserParser.CHECKPOINT:
			case PostgreSQLParserParser.CLASS:
			case PostgreSQLParserParser.CLASS_ORIGIN:
			case PostgreSQLParserParser.CLOB:
			case PostgreSQLParserParser.CLOSE:
			case PostgreSQLParserParser.CLUSTER:
			case PostgreSQLParserParser.COALESCE:
			case PostgreSQLParserParser.COBOL:
			case PostgreSQLParserParser.COLLATION_CATALOG:
			case PostgreSQLParserParser.COLLATION_NAME:
			case PostgreSQLParserParser.COLLATION_SCHEMA:
			case PostgreSQLParserParser.COLLECT:
			case PostgreSQLParserParser.COLUMN_NAME:
			case PostgreSQLParserParser.COMMAND_FUNCTION:
			case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
			case PostgreSQLParserParser.COMMENT:
			case PostgreSQLParserParser.COMMIT:
			case PostgreSQLParserParser.COMMITTED:
			case PostgreSQLParserParser.CONDITION:
			case PostgreSQLParserParser.CONDITION_NUMBER:
			case PostgreSQLParserParser.CONNECT:
			case PostgreSQLParserParser.CONNECTION:
			case PostgreSQLParserParser.CONNECTION_NAME:
			case PostgreSQLParserParser.CONSTRAINT_CATALOG:
			case PostgreSQLParserParser.CONSTRAINT_NAME:
			case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
			case PostgreSQLParserParser.CONSTRAINTS:
			case PostgreSQLParserParser.CONSTRUCTOR:
			case PostgreSQLParserParser.CONTAINS:
			case PostgreSQLParserParser.CONTINUE:
			case PostgreSQLParserParser.CONVERSION:
			case PostgreSQLParserParser.CONVERT:
			case PostgreSQLParserParser.COPY:
			case PostgreSQLParserParser.CORR:
			case PostgreSQLParserParser.CORRESPONDING:
			case PostgreSQLParserParser.COUNT:
			case PostgreSQLParserParser.COVAR_POP:
			case PostgreSQLParserParser.COVAR_SAMP:
			case PostgreSQLParserParser.CSV:
			case PostgreSQLParserParser.CUBE:
			case PostgreSQLParserParser.CUME_DIST:
			case PostgreSQLParserParser.CURRENT:
			case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
			case PostgreSQLParserParser.CURRENT_PATH:
			case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case PostgreSQLParserParser.CURSOR:
			case PostgreSQLParserParser.CURSOR_NAME:
			case PostgreSQLParserParser.CYCLE:
			case PostgreSQLParserParser.DATA:
			case PostgreSQLParserParser.DATABASE:
			case PostgreSQLParserParser.DATE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
			case PostgreSQLParserParser.DAY:
			case PostgreSQLParserParser.DEALLOCATE:
			case PostgreSQLParserParser.DEC:
			case PostgreSQLParserParser.DECIMAL:
			case PostgreSQLParserParser.DECLARE:
			case PostgreSQLParserParser.DEFAULTS:
			case PostgreSQLParserParser.DEFERRED:
			case PostgreSQLParserParser.DEFINED:
			case PostgreSQLParserParser.DEFINER:
			case PostgreSQLParserParser.DEGREE:
			case PostgreSQLParserParser.DELETE:
			case PostgreSQLParserParser.DELIMITER:
			case PostgreSQLParserParser.DELIMITERS:
			case PostgreSQLParserParser.DENSE_RANK:
			case PostgreSQLParserParser.DEPTH:
			case PostgreSQLParserParser.DEREF:
			case PostgreSQLParserParser.DERIVED:
			case PostgreSQLParserParser.DESCRIBE:
			case PostgreSQLParserParser.DESCRIPTOR:
			case PostgreSQLParserParser.DETERMINISTIC:
			case PostgreSQLParserParser.DIAGNOSTICS:
			case PostgreSQLParserParser.DICTIONARY:
			case PostgreSQLParserParser.DISCONNECT:
			case PostgreSQLParserParser.DISPATCH:
			case PostgreSQLParserParser.DOMAIN:
			case PostgreSQLParserParser.DOUBLE:
			case PostgreSQLParserParser.DYNAMIC:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
			case PostgreSQLParserParser.EACH:
			case PostgreSQLParserParser.ELEMENT:
			case PostgreSQLParserParser.ENCODING:
			case PostgreSQLParserParser.ENCRYPTED:
			case PostgreSQLParserParser.END:
			case PostgreSQLParserParser.EQUALS:
			case PostgreSQLParserParser.ESCAPE:
			case PostgreSQLParserParser.EVERY:
			case PostgreSQLParserParser.EXCEPTION:
			case PostgreSQLParserParser.EXCLUDE:
			case PostgreSQLParserParser.EXCLUDING:
			case PostgreSQLParserParser.EXCLUSIVE:
			case PostgreSQLParserParser.EXEC:
			case PostgreSQLParserParser.EXECUTE:
			case PostgreSQLParserParser.EXISTS:
			case PostgreSQLParserParser.EXP:
			case PostgreSQLParserParser.EXPLAIN:
			case PostgreSQLParserParser.EXTENSION:
			case PostgreSQLParserParser.EXTERNAL:
			case PostgreSQLParserParser.EXTRACT:
			case PostgreSQLParserParser.FILTER:
			case PostgreSQLParserParser.FINAL:
			case PostgreSQLParserParser.FIRST:
			case PostgreSQLParserParser.FLOAT:
			case PostgreSQLParserParser.FLOOR:
			case PostgreSQLParserParser.FOLLOWING:
			case PostgreSQLParserParser.FORCE:
			case PostgreSQLParserParser.FORMAT:
			case PostgreSQLParserParser.FORTRAN:
			case PostgreSQLParserParser.FORWARD:
			case PostgreSQLParserParser.FOUND:
			case PostgreSQLParserParser.FREE:
			case PostgreSQLParserParser.FUNCTION:
			case PostgreSQLParserParser.FUSION:
			case PostgreSQLParserParser.G_:
			case PostgreSQLParserParser.GENERAL:
			case PostgreSQLParserParser.GENERATED:
			case PostgreSQLParserParser.GET:
			case PostgreSQLParserParser.GLOBAL:
			case PostgreSQLParserParser.GO:
			case PostgreSQLParserParser.GOTO:
			case PostgreSQLParserParser.GRANTED:
			case PostgreSQLParserParser.GREATEST:
			case PostgreSQLParserParser.GROUPING:
			case PostgreSQLParserParser.HANDLER:
			case PostgreSQLParserParser.HIERARCHY:
			case PostgreSQLParserParser.HOLD:
			case PostgreSQLParserParser.HOST:
			case PostgreSQLParserParser.HOUR:
			case PostgreSQLParserParser.IDENTITY:
			case PostgreSQLParserParser.IGNORE:
			case PostgreSQLParserParser.IMMEDIATE:
			case PostgreSQLParserParser.IMMUTABLE:
			case PostgreSQLParserParser.IMPLEMENTATION:
			case PostgreSQLParserParser.IMPLICIT:
			case PostgreSQLParserParser.INCLUDING:
			case PostgreSQLParserParser.INCREMENT:
			case PostgreSQLParserParser.INDEX:
			case PostgreSQLParserParser.INDICATOR:
			case PostgreSQLParserParser.INHERITS:
			case PostgreSQLParserParser.INOUT:
			case PostgreSQLParserParser.INPUT:
			case PostgreSQLParserParser.INSENSITIVE:
			case PostgreSQLParserParser.INSERT:
			case PostgreSQLParserParser.INSTANCE:
			case PostgreSQLParserParser.INSTANTIABLE:
			case PostgreSQLParserParser.INSTEAD:
			case PostgreSQLParserParser.INT:
			case PostgreSQLParserParser.INTEGER:
			case PostgreSQLParserParser.INTERSECTION:
			case PostgreSQLParserParser.INTERVAL:
			case PostgreSQLParserParser.INVOKER:
			case PostgreSQLParserParser.ISOLATION:
			case PostgreSQLParserParser.K_:
			case PostgreSQLParserParser.KEY:
			case PostgreSQLParserParser.KEY_MEMBER:
			case PostgreSQLParserParser.KEY_TYPE:
			case PostgreSQLParserParser.LANGUAGE:
			case PostgreSQLParserParser.LARGE:
			case PostgreSQLParserParser.LAST:
			case PostgreSQLParserParser.LEAST:
			case PostgreSQLParserParser.LEFT:
			case PostgreSQLParserParser.LENGTH:
			case PostgreSQLParserParser.LEVEL:
			case PostgreSQLParserParser.LISTEN:
			case PostgreSQLParserParser.LN:
			case PostgreSQLParserParser.LOAD:
			case PostgreSQLParserParser.LOCAL:
			case PostgreSQLParserParser.LOCATION:
			case PostgreSQLParserParser.LOCATOR:
			case PostgreSQLParserParser.LOCK:
			case PostgreSQLParserParser.LOCKED:
			case PostgreSQLParserParser.LOWER:
			case PostgreSQLParserParser.M_:
			case PostgreSQLParserParser.MAP:
			case PostgreSQLParserParser.MATCH:
			case PostgreSQLParserParser.MATCHED:
			case PostgreSQLParserParser.MAX:
			case PostgreSQLParserParser.MAXVALUE:
			case PostgreSQLParserParser.MEMBER:
			case PostgreSQLParserParser.MERGE:
			case PostgreSQLParserParser.MESSAGE_LENGTH:
			case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
			case PostgreSQLParserParser.MESSAGE_TEXT:
			case PostgreSQLParserParser.METHOD:
			case PostgreSQLParserParser.MIN:
			case PostgreSQLParserParser.MINUTE:
			case PostgreSQLParserParser.MINVALUE:
			case PostgreSQLParserParser.MOD:
			case PostgreSQLParserParser.MODE:
			case PostgreSQLParserParser.MODIFIES:
			case PostgreSQLParserParser.MODULE:
			case PostgreSQLParserParser.MONTH:
			case PostgreSQLParserParser.MORE_:
			case PostgreSQLParserParser.MOVE:
			case PostgreSQLParserParser.MULTISET:
			case PostgreSQLParserParser.MUMPS:
			case PostgreSQLParserParser.NAME:
			case PostgreSQLParserParser.NAMES:
			case PostgreSQLParserParser.NATIONAL:
			case PostgreSQLParserParser.NCHAR:
			case PostgreSQLParserParser.NCLOB:
			case PostgreSQLParserParser.NESTING:
			case PostgreSQLParserParser.NEW:
			case PostgreSQLParserParser.NEXT:
			case PostgreSQLParserParser.NO:
			case PostgreSQLParserParser.NONE:
			case PostgreSQLParserParser.NORMALIZE:
			case PostgreSQLParserParser.NORMALIZED:
			case PostgreSQLParserParser.NOTHING:
			case PostgreSQLParserParser.NOTIFY:
			case PostgreSQLParserParser.NOWAIT:
			case PostgreSQLParserParser.NULLABLE:
			case PostgreSQLParserParser.NULLIF:
			case PostgreSQLParserParser.NULLS:
			case PostgreSQLParserParser.NUMBER:
			case PostgreSQLParserParser.NUMERIC:
			case PostgreSQLParserParser.OBJECT:
			case PostgreSQLParserParser.OCTET_LENGTH:
			case PostgreSQLParserParser.OCTETS:
			case PostgreSQLParserParser.OF:
			case PostgreSQLParserParser.OFF:
			case PostgreSQLParserParser.OIDS:
			case PostgreSQLParserParser.OLD:
			case PostgreSQLParserParser.OPEN:
			case PostgreSQLParserParser.OPERATOR:
			case PostgreSQLParserParser.OPTION:
			case PostgreSQLParserParser.OPTIONS:
			case PostgreSQLParserParser.ORDERING:
			case PostgreSQLParserParser.ORDINALITY:
			case PostgreSQLParserParser.OTHERS:
			case PostgreSQLParserParser.OUT:
			case PostgreSQLParserParser.OUTPUT:
			case PostgreSQLParserParser.OVER:
			case PostgreSQLParserParser.OVERLAY:
			case PostgreSQLParserParser.OVERRIDING:
			case PostgreSQLParserParser.OWNER:
			case PostgreSQLParserParser.PAD:
			case PostgreSQLParserParser.PARAMETER:
			case PostgreSQLParserParser.PARAMETER_MODE:
			case PostgreSQLParserParser.PARAMETER_NAME:
			case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
			case PostgreSQLParserParser.PARTIAL:
			case PostgreSQLParserParser.PARTITION:
			case PostgreSQLParserParser.PASCAL:
			case PostgreSQLParserParser.PASSWORD:
			case PostgreSQLParserParser.PATH:
			case PostgreSQLParserParser.PERCENT_RANK:
			case PostgreSQLParserParser.PERCENTILE_CONT:
			case PostgreSQLParserParser.PERCENTILE_DISC:
			case PostgreSQLParserParser.PLAIN:
			case PostgreSQLParserParser.PLI:
			case PostgreSQLParserParser.POSITION:
			case PostgreSQLParserParser.POWER:
			case PostgreSQLParserParser.PRECEDING:
			case PostgreSQLParserParser.PRECISION:
			case PostgreSQLParserParser.PREPARE:
			case PostgreSQLParserParser.PRESERVE:
			case PostgreSQLParserParser.PRIOR:
			case PostgreSQLParserParser.PRIVILEGES:
			case PostgreSQLParserParser.PROCEDURAL:
			case PostgreSQLParserParser.PROCEDURE:
			case PostgreSQLParserParser.PUBLIC:
			case PostgreSQLParserParser.QUOTE:
			case PostgreSQLParserParser.RANGE:
			case PostgreSQLParserParser.RANK:
			case PostgreSQLParserParser.READ:
			case PostgreSQLParserParser.READS:
			case PostgreSQLParserParser.REAL:
			case PostgreSQLParserParser.RECHECK:
			case PostgreSQLParserParser.RECURSIVE:
			case PostgreSQLParserParser.REF:
			case PostgreSQLParserParser.REFERENCING:
			case PostgreSQLParserParser.REFRESH:
			case PostgreSQLParserParser.REGR_AVGX:
			case PostgreSQLParserParser.REGR_AVGY:
			case PostgreSQLParserParser.REGR_COUNT:
			case PostgreSQLParserParser.REGR_INTERCEPT:
			case PostgreSQLParserParser.REGR_SLOPE:
			case PostgreSQLParserParser.REGR_SXX:
			case PostgreSQLParserParser.REGR_SXY:
			case PostgreSQLParserParser.REGR_SYY:
			case PostgreSQLParserParser.REINDEX:
			case PostgreSQLParserParser.RELATIVE:
			case PostgreSQLParserParser.RELEASE:
			case PostgreSQLParserParser.RENAME:
			case PostgreSQLParserParser.REPEATABLE:
			case PostgreSQLParserParser.REPLACE:
			case PostgreSQLParserParser.RESET:
			case PostgreSQLParserParser.RESTART:
			case PostgreSQLParserParser.RESTRICT:
			case PostgreSQLParserParser.RESULT:
			case PostgreSQLParserParser.RETURN:
			case PostgreSQLParserParser.RETURNED_CARDINALITY:
			case PostgreSQLParserParser.RETURNED_LENGTH:
			case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
			case PostgreSQLParserParser.RETURNED_SQLSTATE:
			case PostgreSQLParserParser.RETURNS:
			case PostgreSQLParserParser.REVOKE:
			case PostgreSQLParserParser.RIGHT:
			case PostgreSQLParserParser.ROLE:
			case PostgreSQLParserParser.ROLLBACK:
			case PostgreSQLParserParser.ROLLUP:
			case PostgreSQLParserParser.ROUTINE:
			case PostgreSQLParserParser.ROUTINE_CATALOG:
			case PostgreSQLParserParser.ROUTINE_NAME:
			case PostgreSQLParserParser.ROUTINE_SCHEMA:
			case PostgreSQLParserParser.ROW:
			case PostgreSQLParserParser.ROW_COUNT:
			case PostgreSQLParserParser.ROW_NUMBER:
			case PostgreSQLParserParser.ROWS:
			case PostgreSQLParserParser.RULE:
			case PostgreSQLParserParser.SAVEPOINT:
			case PostgreSQLParserParser.SCALE:
			case PostgreSQLParserParser.SCHEMA:
			case PostgreSQLParserParser.SCHEMA_NAME:
			case PostgreSQLParserParser.SCOPE:
			case PostgreSQLParserParser.SCOPE_CATALOG:
			case PostgreSQLParserParser.SCOPE_NAME:
			case PostgreSQLParserParser.SCOPE_SCHEMA:
			case PostgreSQLParserParser.SCROLL:
			case PostgreSQLParserParser.SEARCH:
			case PostgreSQLParserParser.SECOND:
			case PostgreSQLParserParser.SECTION:
			case PostgreSQLParserParser.SECURITY:
			case PostgreSQLParserParser.SELF:
			case PostgreSQLParserParser.SENSITIVE:
			case PostgreSQLParserParser.SEQUENCE:
			case PostgreSQLParserParser.SEQUENCES:
			case PostgreSQLParserParser.SERIALIZABLE:
			case PostgreSQLParserParser.SERVER_NAME:
			case PostgreSQLParserParser.SESSION:
			case PostgreSQLParserParser.SET:
			case PostgreSQLParserParser.SETOF:
			case PostgreSQLParserParser.SETS:
			case PostgreSQLParserParser.SHARE:
			case PostgreSQLParserParser.SHOW:
			case PostgreSQLParserParser.SIMPLE:
			case PostgreSQLParserParser.SIZE:
			case PostgreSQLParserParser.SMALLINT:
			case PostgreSQLParserParser.SOME:
			case PostgreSQLParserParser.SOURCE:
			case PostgreSQLParserParser.SPACE:
			case PostgreSQLParserParser.SPECIFIC:
			case PostgreSQLParserParser.SPECIFIC_NAME:
			case PostgreSQLParserParser.SPECIFICTYPE:
			case PostgreSQLParserParser.SQL:
			case PostgreSQLParserParser.SQLCODE:
			case PostgreSQLParserParser.SQLERROR:
			case PostgreSQLParserParser.SQLEXCEPTION:
			case PostgreSQLParserParser.SQLSTATE:
			case PostgreSQLParserParser.SQLWARNING:
			case PostgreSQLParserParser.SQRT:
			case PostgreSQLParserParser.STABLE:
			case PostgreSQLParserParser.START:
			case PostgreSQLParserParser.STATE:
			case PostgreSQLParserParser.STATEMENT:
			case PostgreSQLParserParser.STATIC:
			case PostgreSQLParserParser.STATISTICS:
			case PostgreSQLParserParser.STDDEV_POP:
			case PostgreSQLParserParser.STDDEV_SAMP:
			case PostgreSQLParserParser.STDIN:
			case PostgreSQLParserParser.STDOUT:
			case PostgreSQLParserParser.STORAGE:
			case PostgreSQLParserParser.STRICT:
			case PostgreSQLParserParser.STRUCTURE:
			case PostgreSQLParserParser.STYLE:
			case PostgreSQLParserParser.SUBCLASS_ORIGIN:
			case PostgreSQLParserParser.SUBMULTISET:
			case PostgreSQLParserParser.SUBSTRING:
			case PostgreSQLParserParser.SUM:
			case PostgreSQLParserParser.SYSID:
			case PostgreSQLParserParser.SYSTEM:
			case PostgreSQLParserParser.SYSTEM_USER:
			case PostgreSQLParserParser.TABLE_NAME:
			case PostgreSQLParserParser.TABLESPACE:
			case PostgreSQLParserParser.TEMP:
			case PostgreSQLParserParser.TEMPLATE:
			case PostgreSQLParserParser.TEMPORARY:
			case PostgreSQLParserParser.TIES:
			case PostgreSQLParserParser.TIME:
			case PostgreSQLParserParser.TIMESTAMP:
			case PostgreSQLParserParser.TIMEZONE_HOUR:
			case PostgreSQLParserParser.TIMEZONE_MINUTE:
			case PostgreSQLParserParser.TOP_LEVEL_COUNT:
			case PostgreSQLParserParser.TRANSACTION:
			case PostgreSQLParserParser.TRANSACTION_ACTIVE:
			case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
			case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
			case PostgreSQLParserParser.TRANSFORM:
			case PostgreSQLParserParser.TRANSFORMS:
			case PostgreSQLParserParser.TRANSLATE:
			case PostgreSQLParserParser.TRANSLATION:
			case PostgreSQLParserParser.TREAT:
			case PostgreSQLParserParser.TRIGGER:
			case PostgreSQLParserParser.TRIGGER_CATALOG:
			case PostgreSQLParserParser.TRIGGER_NAME:
			case PostgreSQLParserParser.TRIGGER_SCHEMA:
			case PostgreSQLParserParser.TRIM:
			case PostgreSQLParserParser.TRUE:
			case PostgreSQLParserParser.TRUNCATE:
			case PostgreSQLParserParser.TRUSTED:
			case PostgreSQLParserParser.TYPE:
			case PostgreSQLParserParser.UESCAPE:
			case PostgreSQLParserParser.UNBOUNDED:
			case PostgreSQLParserParser.UNCOMMITTED:
			case PostgreSQLParserParser.UNDER:
			case PostgreSQLParserParser.UNENCRYPTED:
			case PostgreSQLParserParser.UNKNOWN:
			case PostgreSQLParserParser.UNLISTEN:
			case PostgreSQLParserParser.UNNAMED:
			case PostgreSQLParserParser.UNNEST:
			case PostgreSQLParserParser.UNTIL:
			case PostgreSQLParserParser.UPDATE:
			case PostgreSQLParserParser.UPPER:
			case PostgreSQLParserParser.USAGE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
			case PostgreSQLParserParser.VACUUM:
			case PostgreSQLParserParser.VALID:
			case PostgreSQLParserParser.VALIDATOR:
			case PostgreSQLParserParser.VALUE:
			case PostgreSQLParserParser.VALUES:
			case PostgreSQLParserParser.VAR_POP:
			case PostgreSQLParserParser.VAR_SAMP:
			case PostgreSQLParserParser.VARCHAR:
			case PostgreSQLParserParser.VARYING:
			case PostgreSQLParserParser.VIEW:
			case PostgreSQLParserParser.VOLATILE:
			case PostgreSQLParserParser.WHENEVER:
			case PostgreSQLParserParser.WIDTH_BUCKET:
			case PostgreSQLParserParser.WITHIN:
			case PostgreSQLParserParser.WITHOUT:
			case PostgreSQLParserParser.WORK:
			case PostgreSQLParserParser.WRITE:
			case PostgreSQLParserParser.YEAR:
			case PostgreSQLParserParser.ZONE:
			case PostgreSQLParserParser.ABSTIME:
			case PostgreSQLParserParser.BIGSERIAL:
			case PostgreSQLParserParser.BIT_VARYING:
			case PostgreSQLParserParser.BOOL:
			case PostgreSQLParserParser.BOX:
			case PostgreSQLParserParser.BYTEA:
			case PostgreSQLParserParser.CHARACTER_VARYING:
			case PostgreSQLParserParser.CIDR:
			case PostgreSQLParserParser.CIRCLE:
			case PostgreSQLParserParser.FLOAT4:
			case PostgreSQLParserParser.FLOAT8:
			case PostgreSQLParserParser.INET:
			case PostgreSQLParserParser.INT2:
			case PostgreSQLParserParser.INT4:
			case PostgreSQLParserParser.INT8:
			case PostgreSQLParserParser.JSON:
			case PostgreSQLParserParser.JSONB:
			case PostgreSQLParserParser.LINE:
			case PostgreSQLParserParser.LSEG:
			case PostgreSQLParserParser.MACADDR:
			case PostgreSQLParserParser.MACADDR8:
			case PostgreSQLParserParser.MONEY:
			case PostgreSQLParserParser.PG_LSN:
			case PostgreSQLParserParser.POINT:
			case PostgreSQLParserParser.POLYGON:
			case PostgreSQLParserParser.RELTIME:
			case PostgreSQLParserParser.SERIAL:
			case PostgreSQLParserParser.SERIAL2:
			case PostgreSQLParserParser.SERIAL4:
			case PostgreSQLParserParser.SERIAL8:
			case PostgreSQLParserParser.SMALLSERIAL:
			case PostgreSQLParserParser.TEXT:
			case PostgreSQLParserParser.TIMESTAMPTZ:
			case PostgreSQLParserParser.TIMETZ:
			case PostgreSQLParserParser.TSQUERY:
			case PostgreSQLParserParser.TSVECTOR:
			case PostgreSQLParserParser.TXID_SNAPSHOT:
			case PostgreSQLParserParser.UUID:
			case PostgreSQLParserParser.VARBIT:
			case PostgreSQLParserParser.XML:
			case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
			case PostgreSQLParserParser.IDENTIFIER:
			case PostgreSQLParserParser.IDENTIFIER_UNICODE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5151;
				_localctx._unknown = this.identifier(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_name(): Func_nameContext {
		let _localctx: Func_nameContext = new Func_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, PostgreSQLParserParser.RULE_func_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5154;
			this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_call(): Func_callContext {
		let _localctx: Func_callContext = new Func_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, PostgreSQLParserParser.RULE_func_call);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5192;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 618, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5156;
				this.func_name();
				this.state = 5157;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5158;
				this.match(PostgreSQLParserParser.VARIADIC);
				this.state = 5159;
				this.expr(0);
				this.state = 5160;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5162;
				this.func_name();
				this.state = 5163;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5177;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALL) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ARRAY) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CASE - 33)) | (1 << (PostgreSQLParserParser.CAST - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DATE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_ROLE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TIME - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TIMESTAMP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_USER - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULT - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FALSE - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOT - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULL - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITH - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.DOLLAR - 751)) | (1 << (PostgreSQLParserParser.DOLLAR_DOLLAR - 751)) | (1 << (PostgreSQLParserParser.OPEN_PAREN - 751)) | (1 << (PostgreSQLParserParser.BIT_STRING - 751)) | (1 << (PostgreSQLParserParser.REGEX_STRING - 751)) | (1 << (PostgreSQLParserParser.NUMERIC_LITERAL - 751)) | (1 << (PostgreSQLParserParser.INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.HEX_INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.SINGLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.DOLLAR_DEC - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0) || ((((_la - 786)) & ~0x1F) === 0 && ((1 << (_la - 786)) & ((1 << (PostgreSQLParserParser.AT_SIGN - 786)) | (1 << (PostgreSQLParserParser.BANG_BANG - 786)) | (1 << (PostgreSQLParserParser.MINUS - 786)))) !== 0) || ((((_la - 819)) & ~0x1F) === 0 && ((1 << (_la - 819)) & ((1 << (PostgreSQLParserParser.PLUS - 819)) | (1 << (PostgreSQLParserParser.QMARK_HYPHEN - 819)) | (1 << (PostgreSQLParserParser.TIL - 819)))) !== 0)) {
					{
					this.state = 5164;
					this.expr(0);
					this.state = 5169;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 614, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 5165;
							this.match(PostgreSQLParserParser.COMMA);
							this.state = 5166;
							this.expr(0);
							}
							}
						}
						this.state = 5171;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 614, this._ctx);
					}
					this.state = 5175;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParserParser.COMMA) {
						{
						this.state = 5172;
						this.match(PostgreSQLParserParser.COMMA);
						this.state = 5173;
						this.match(PostgreSQLParserParser.VARIADIC);
						this.state = 5174;
						this.expr(0);
						}
					}

					}
				}

				this.state = 5179;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5181;
				this.func_name();
				this.state = 5182;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5183;
				this.todo_fill_in();
				this.state = 5184;
				this.match(PostgreSQLParserParser.FROM);
				this.state = 5185;
				this.expr(0);
				this.state = 5188;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.FOR) {
					{
					this.state = 5186;
					this.match(PostgreSQLParserParser.FOR);
					this.state = 5187;
					this.expr(0);
					}
				}

				this.state = 5190;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public array_cons_expr(): Array_cons_exprContext {
		let _localctx: Array_cons_exprContext = new Array_cons_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, PostgreSQLParserParser.RULE_array_cons_expr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5194;
			this.match(PostgreSQLParserParser.ARRAY);
			this.state = 5195;
			this.match(PostgreSQLParserParser.OPEN_BRACKET);
			this.state = 5204;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALL) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ARRAY) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CASE - 33)) | (1 << (PostgreSQLParserParser.CAST - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DATE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_ROLE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TIME - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TIMESTAMP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURRENT_USER - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULT - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FALSE - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOT - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULL - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITH - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || ((((_la - 719)) & ~0x1F) === 0 && ((1 << (_la - 719)) & ((1 << (PostgreSQLParserParser.ABSTIME - 719)) | (1 << (PostgreSQLParserParser.BIGSERIAL - 719)) | (1 << (PostgreSQLParserParser.BIT_VARYING - 719)) | (1 << (PostgreSQLParserParser.BOOL - 719)) | (1 << (PostgreSQLParserParser.BOX - 719)) | (1 << (PostgreSQLParserParser.BYTEA - 719)) | (1 << (PostgreSQLParserParser.CHARACTER_VARYING - 719)) | (1 << (PostgreSQLParserParser.CIDR - 719)) | (1 << (PostgreSQLParserParser.CIRCLE - 719)) | (1 << (PostgreSQLParserParser.FLOAT4 - 719)) | (1 << (PostgreSQLParserParser.FLOAT8 - 719)) | (1 << (PostgreSQLParserParser.INET - 719)) | (1 << (PostgreSQLParserParser.INT2 - 719)) | (1 << (PostgreSQLParserParser.INT4 - 719)) | (1 << (PostgreSQLParserParser.INT8 - 719)) | (1 << (PostgreSQLParserParser.JSON - 719)) | (1 << (PostgreSQLParserParser.JSONB - 719)) | (1 << (PostgreSQLParserParser.LINE - 719)) | (1 << (PostgreSQLParserParser.LSEG - 719)) | (1 << (PostgreSQLParserParser.MACADDR - 719)) | (1 << (PostgreSQLParserParser.MACADDR8 - 719)) | (1 << (PostgreSQLParserParser.MONEY - 719)) | (1 << (PostgreSQLParserParser.PG_LSN - 719)) | (1 << (PostgreSQLParserParser.POINT - 719)) | (1 << (PostgreSQLParserParser.POLYGON - 719)) | (1 << (PostgreSQLParserParser.RELTIME - 719)) | (1 << (PostgreSQLParserParser.SERIAL - 719)) | (1 << (PostgreSQLParserParser.SERIAL2 - 719)) | (1 << (PostgreSQLParserParser.SERIAL4 - 719)) | (1 << (PostgreSQLParserParser.SERIAL8 - 719)) | (1 << (PostgreSQLParserParser.SMALLSERIAL - 719)))) !== 0) || ((((_la - 751)) & ~0x1F) === 0 && ((1 << (_la - 751)) & ((1 << (PostgreSQLParserParser.TEXT - 751)) | (1 << (PostgreSQLParserParser.TIMESTAMPTZ - 751)) | (1 << (PostgreSQLParserParser.TIMETZ - 751)) | (1 << (PostgreSQLParserParser.TSQUERY - 751)) | (1 << (PostgreSQLParserParser.TSVECTOR - 751)) | (1 << (PostgreSQLParserParser.TXID_SNAPSHOT - 751)) | (1 << (PostgreSQLParserParser.UUID - 751)) | (1 << (PostgreSQLParserParser.VARBIT - 751)) | (1 << (PostgreSQLParserParser.XML - 751)) | (1 << (PostgreSQLParserParser.DOLLAR - 751)) | (1 << (PostgreSQLParserParser.DOLLAR_DOLLAR - 751)) | (1 << (PostgreSQLParserParser.OPEN_PAREN - 751)) | (1 << (PostgreSQLParserParser.BIT_STRING - 751)) | (1 << (PostgreSQLParserParser.REGEX_STRING - 751)) | (1 << (PostgreSQLParserParser.NUMERIC_LITERAL - 751)) | (1 << (PostgreSQLParserParser.INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.HEX_INTEGER_LITERAL - 751)) | (1 << (PostgreSQLParserParser.SINGLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER - 751)) | (1 << (PostgreSQLParserParser.DOLLAR_DEC - 751)) | (1 << (PostgreSQLParserParser.IDENTIFIER_UNICODE - 751)))) !== 0) || ((((_la - 786)) & ~0x1F) === 0 && ((1 << (_la - 786)) & ((1 << (PostgreSQLParserParser.AT_SIGN - 786)) | (1 << (PostgreSQLParserParser.BANG_BANG - 786)) | (1 << (PostgreSQLParserParser.MINUS - 786)))) !== 0) || ((((_la - 819)) & ~0x1F) === 0 && ((1 << (_la - 819)) & ((1 << (PostgreSQLParserParser.PLUS - 819)) | (1 << (PostgreSQLParserParser.QMARK_HYPHEN - 819)) | (1 << (PostgreSQLParserParser.TIL - 819)))) !== 0)) {
				{
				this.state = 5196;
				this.expr(0);
				this.state = 5201;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PostgreSQLParserParser.COMMA) {
					{
					{
					this.state = 5197;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 5198;
					this.expr(0);
					}
					}
					this.state = 5203;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 5206;
			this.match(PostgreSQLParserParser.CLOSE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public from_item(): From_itemContext;
	public from_item(_p: number): From_itemContext;
	// @RuleVersion(0)
	public from_item(_p?: number): From_itemContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: From_itemContext = new From_itemContext(this._ctx, _parentState);
		let _prevctx: From_itemContext = _localctx;
		let _startState: number = 482;
		this.enterRecursionRule(_localctx, 482, PostgreSQLParserParser.RULE_from_item, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5314;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 639, this._ctx) ) {
			case 1:
				{
				this.state = 5210;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ONLY) {
					{
					this.state = 5209;
					this.match(PostgreSQLParserParser.ONLY);
					}
				}

				this.state = 5212;
				this.table_name_();
				this.state = 5214;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 622, this._ctx) ) {
				case 1:
					{
					this.state = 5213;
					this.match(PostgreSQLParserParser.STAR);
					}
					break;
				}
				this.state = 5217;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 623, this._ctx) ) {
				case 1:
					{
					this.state = 5216;
					this.with_column_alias();
					}
					break;
				}
				this.state = 5238;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 626, this._ctx) ) {
				case 1:
					{
					this.state = 5219;
					this.match(PostgreSQLParserParser.TABLESAMPLE);
					this.state = 5220;
					this.todo_fill_in();
					this.state = 5221;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 5222;
					this.expr(0);
					this.state = 5227;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PostgreSQLParserParser.COMMA) {
						{
						{
						this.state = 5223;
						this.match(PostgreSQLParserParser.COMMA);
						this.state = 5224;
						this.expr(0);
						}
						}
						this.state = 5229;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5230;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					this.state = 5236;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 625, this._ctx) ) {
					case 1:
						{
						this.state = 5231;
						this.match(PostgreSQLParserParser.REPEATABLE);
						this.state = 5232;
						this.match(PostgreSQLParserParser.OPEN_PAREN);
						this.state = 5233;
						this.todo_fill_in();
						this.state = 5234;
						this.match(PostgreSQLParserParser.CLOSE_PAREN);
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 5241;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.LATERAL) {
					{
					this.state = 5240;
					this.match(PostgreSQLParserParser.LATERAL);
					}
				}

				this.state = 5243;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5244;
				this.stmt();
				this.state = 5245;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 5247;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.AS) {
					{
					this.state = 5246;
					this.match(PostgreSQLParserParser.AS);
					}
				}

				this.state = 5249;
				this.alias();
				this.state = 5261;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 630, this._ctx) ) {
				case 1:
					{
					this.state = 5250;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 5251;
					this.column_alias();
					this.state = 5256;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PostgreSQLParserParser.COMMA) {
						{
						{
						this.state = 5252;
						this.match(PostgreSQLParserParser.COMMA);
						this.state = 5253;
						this.column_alias();
						}
						}
						this.state = 5258;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5259;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 5264;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.LATERAL) {
					{
					this.state = 5263;
					this.match(PostgreSQLParserParser.LATERAL);
					}
				}

				this.state = 5266;
				this.func_call();
				this.state = 5269;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 632, this._ctx) ) {
				case 1:
					{
					this.state = 5267;
					this.match(PostgreSQLParserParser.WITH);
					this.state = 5268;
					this.match(PostgreSQLParserParser.ORDINALITY);
					}
					break;
				}
				this.state = 5272;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 633, this._ctx) ) {
				case 1:
					{
					this.state = 5271;
					this.with_column_alias();
					}
					break;
				}
				}
				break;

			case 4:
				{
				this.state = 5275;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.LATERAL) {
					{
					this.state = 5274;
					this.match(PostgreSQLParserParser.LATERAL);
					}
				}

				this.state = 5277;
				this.func_call();
				this.state = 5278;
				this.match(PostgreSQLParserParser.AS);
				this.state = 5279;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5280;
				this.column_definition();
				this.state = 5285;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PostgreSQLParserParser.COMMA) {
					{
					{
					this.state = 5281;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 5282;
					this.column_definition();
					}
					}
					this.state = 5287;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5288;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 5:
				{
				this.state = 5291;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.LATERAL) {
					{
					this.state = 5290;
					this.match(PostgreSQLParserParser.LATERAL);
					}
				}

				this.state = 5293;
				this.match(PostgreSQLParserParser.ROWS);
				this.state = 5294;
				this.match(PostgreSQLParserParser.FROM);
				this.state = 5295;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5296;
				this.func_call();
				this.state = 5297;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 5310;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.AS) {
					{
					this.state = 5298;
					this.match(PostgreSQLParserParser.AS);
					this.state = 5299;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 5300;
					this.column_definition();
					this.state = 5305;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === PostgreSQLParserParser.COMMA) {
						{
						{
						this.state = 5301;
						this.match(PostgreSQLParserParser.COMMA);
						this.state = 5302;
						this.column_definition();
						}
						}
						this.state = 5307;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 5308;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
				}

				this.state = 5312;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5333;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 644, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new From_itemContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_from_item);
					this.state = 5316;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 5318;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParserParser.NATURAL) {
						{
						this.state = 5317;
						this.match(PostgreSQLParserParser.NATURAL);
						}
					}

					this.state = 5320;
					this.join_type();
					this.state = 5322;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 641, this._ctx) ) {
					case 1:
						{
						this.state = 5321;
						this.match(PostgreSQLParserParser.OPEN_PAREN);
						}
						break;
					}
					this.state = 5324;
					this.from_item(0);
					this.state = 5326;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 642, this._ctx) ) {
					case 1:
						{
						this.state = 5325;
						this.join_clause();
						}
						break;
					}
					this.state = 5329;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 643, this._ctx) ) {
					case 1:
						{
						this.state = 5328;
						this.match(PostgreSQLParserParser.CLOSE_PAREN);
						}
						break;
					}
					}
					}
				}
				this.state = 5335;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 644, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_column_alias(): With_column_aliasContext {
		let _localctx: With_column_aliasContext = new With_column_aliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, PostgreSQLParserParser.RULE_with_column_alias);
		let _la: number;
		try {
			let _alt: number;
			this.state = 5358;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 649, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5337;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.AS) {
					{
					this.state = 5336;
					this.match(PostgreSQLParserParser.AS);
					}
				}

				this.state = 5339;
				this.alias();
				this.state = 5348;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 647, this._ctx) ) {
				case 1:
					{
					this.state = 5340;
					this.column_alias();
					this.state = 5345;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 646, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 5341;
							this.match(PostgreSQLParserParser.COMMA);
							this.state = 5342;
							this.column_alias();
							}
							}
						}
						this.state = 5347;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 646, this._ctx);
					}
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5351;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.AS) {
					{
					this.state = 5350;
					this.match(PostgreSQLParserParser.AS);
					}
				}

				this.state = 5353;
				this.alias();
				this.state = 5354;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5355;
				this.name_list();
				this.state = 5356;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public join_type(): Join_typeContext {
		let _localctx: Join_typeContext = new Join_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, PostgreSQLParserParser.RULE_join_type);
		let _la: number;
		try {
			this.state = 5381;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.INNER:
			case PostgreSQLParserParser.JOIN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5361;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.INNER) {
					{
					this.state = 5360;
					this.match(PostgreSQLParserParser.INNER);
					}
				}

				this.state = 5363;
				this.match(PostgreSQLParserParser.JOIN);
				}
				break;
			case PostgreSQLParserParser.LEFT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5364;
				this.match(PostgreSQLParserParser.LEFT);
				this.state = 5366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.OUTER) {
					{
					this.state = 5365;
					this.match(PostgreSQLParserParser.OUTER);
					}
				}

				this.state = 5368;
				this.match(PostgreSQLParserParser.JOIN);
				}
				break;
			case PostgreSQLParserParser.RIGHT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5369;
				this.match(PostgreSQLParserParser.RIGHT);
				this.state = 5371;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.OUTER) {
					{
					this.state = 5370;
					this.match(PostgreSQLParserParser.OUTER);
					}
				}

				this.state = 5373;
				this.match(PostgreSQLParserParser.JOIN);
				}
				break;
			case PostgreSQLParserParser.FULL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5374;
				this.match(PostgreSQLParserParser.FULL);
				this.state = 5376;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.OUTER) {
					{
					this.state = 5375;
					this.match(PostgreSQLParserParser.OUTER);
					}
				}

				this.state = 5378;
				this.match(PostgreSQLParserParser.JOIN);
				}
				break;
			case PostgreSQLParserParser.CROSS:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5379;
				this.match(PostgreSQLParserParser.CROSS);
				this.state = 5380;
				this.match(PostgreSQLParserParser.JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public join_clause(): Join_clauseContext {
		let _localctx: Join_clauseContext = new Join_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, PostgreSQLParserParser.RULE_join_clause);
		let _la: number;
		try {
			this.state = 5397;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.ON:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5383;
				this.match(PostgreSQLParserParser.ON);
				this.state = 5384;
				this.predicate(0);
				}
				break;
			case PostgreSQLParserParser.USING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5385;
				this.match(PostgreSQLParserParser.USING);
				this.state = 5386;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5387;
				this.column_name();
				this.state = 5392;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PostgreSQLParserParser.COMMA) {
					{
					{
					this.state = 5388;
					this.match(PostgreSQLParserParser.COMMA);
					this.state = 5389;
					this.column_name();
					}
					}
					this.state = 5394;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 5395;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public predicate(): PredicateContext;
	public predicate(_p: number): PredicateContext;
	// @RuleVersion(0)
	public predicate(_p?: number): PredicateContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: PredicateContext = new PredicateContext(this._ctx, _parentState);
		let _prevctx: PredicateContext = _localctx;
		let _startState: number = 490;
		this.enterRecursionRule(_localctx, 490, PostgreSQLParserParser.RULE_predicate, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5411;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 657, this._ctx) ) {
			case 1:
				{
				this.state = 5400;
				this.expr(0);
				}
				break;

			case 2:
				{
				this.state = 5401;
				this.expr(0);
				this.state = 5402;
				this.oper();
				this.state = 5403;
				this.expr(0);
				}
				break;

			case 3:
				{
				this.state = 5405;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5406;
				this.predicate(0);
				this.state = 5407;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;

			case 4:
				{
				this.state = 5409;
				this.match(PostgreSQLParserParser.NOT);
				this.state = 5410;
				this.predicate(1);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5421;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 659, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 5419;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 658, this._ctx) ) {
					case 1:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_predicate);
						this.state = 5413;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 5414;
						this.match(PostgreSQLParserParser.AND);
						this.state = 5415;
						this.predicate(4);
						}
						break;

					case 2:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_predicate);
						this.state = 5416;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 5417;
						this.match(PostgreSQLParserParser.OR);
						this.state = 5418;
						this.predicate(3);
						}
						break;
					}
					}
				}
				this.state = 5423;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 659, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggregate_signature(): Aggregate_signatureContext {
		let _localctx: Aggregate_signatureContext = new Aggregate_signatureContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, PostgreSQLParserParser.RULE_aggregate_signature);
		let _la: number;
		try {
			this.state = 5450;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 666, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5424;
				this.match(PostgreSQLParserParser.STAR);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5426;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.VARIADIC) {
					{
					this.state = 5425;
					_localctx._argmode = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.VARIADIC)) {
						_localctx._argmode = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 5429;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 661, this._ctx) ) {
				case 1:
					{
					this.state = 5428;
					_localctx._argname = this.identifier(0);
					}
					break;
				}
				this.state = 5431;
				_localctx._argtype = this.data_type_list();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				{
				this.state = 5433;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.VARIADIC) {
					{
					this.state = 5432;
					_localctx._argmode = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.VARIADIC)) {
						_localctx._argmode = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 5436;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 663, this._ctx) ) {
				case 1:
					{
					this.state = 5435;
					_localctx._argname = this.identifier(0);
					}
					break;
				}
				this.state = 5438;
				_localctx._argtype = this.data_type_list();
				}
				this.state = 5440;
				this.match(PostgreSQLParserParser.ORDER);
				this.state = 5441;
				this.match(PostgreSQLParserParser.BY);
				this.state = 5443;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.VARIADIC) {
					{
					this.state = 5442;
					_localctx._argmode = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParserParser.IN || _la === PostgreSQLParserParser.VARIADIC)) {
						_localctx._argmode = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 5446;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 665, this._ctx) ) {
				case 1:
					{
					this.state = 5445;
					_localctx._argname = this.identifier(0);
					}
					break;
				}
				this.state = 5448;
				_localctx._argtype = this.data_type_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_constraint(): Column_constraintContext {
		let _localctx: Column_constraintContext = new Column_constraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, PostgreSQLParserParser.RULE_column_constraint);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5452;
			this.match(PostgreSQLParserParser.NOT);
			this.state = 5453;
			this.match(PostgreSQLParserParser.NULL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_constraints(): Column_constraintsContext {
		let _localctx: Column_constraintsContext = new Column_constraintsContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, PostgreSQLParserParser.RULE_column_constraints);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5456;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 5455;
				this.column_constraint();
				}
				}
				this.state = 5458;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PostgreSQLParserParser.NOT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_parameters(): Index_parametersContext {
		let _localctx: Index_parametersContext = new Index_parametersContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, PostgreSQLParserParser.RULE_index_parameters);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5465;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.WITH) {
				{
				this.state = 5460;
				this.match(PostgreSQLParserParser.WITH);
				this.state = 5461;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5462;
				this.option_list();
				this.state = 5463;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
			}

			this.state = 5471;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.USING) {
				{
				this.state = 5467;
				this.match(PostgreSQLParserParser.USING);
				this.state = 5468;
				this.match(PostgreSQLParserParser.INDEX);
				this.state = 5469;
				this.match(PostgreSQLParserParser.TABLESPACE);
				this.state = 5470;
				_localctx._tablespace = this.identifier(0);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exclude_element(): Exclude_elementContext {
		let _localctx: Exclude_elementContext = new Exclude_elementContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, PostgreSQLParserParser.RULE_exclude_element);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5478;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.WHITESPACE:
			case PostgreSQLParserParser.A_:
			case PostgreSQLParserParser.ABORT:
			case PostgreSQLParserParser.ABS:
			case PostgreSQLParserParser.ABSOLUTE:
			case PostgreSQLParserParser.ACCESS:
			case PostgreSQLParserParser.ACTION:
			case PostgreSQLParserParser.ADA:
			case PostgreSQLParserParser.ADD:
			case PostgreSQLParserParser.ADMIN:
			case PostgreSQLParserParser.AFTER:
			case PostgreSQLParserParser.AGGREGATE:
			case PostgreSQLParserParser.ALLOCATE:
			case PostgreSQLParserParser.ALSO:
			case PostgreSQLParserParser.ALTER:
			case PostgreSQLParserParser.ALWAYS:
			case PostgreSQLParserParser.ANY:
			case PostgreSQLParserParser.ARE:
			case PostgreSQLParserParser.ASENSITIVE:
			case PostgreSQLParserParser.ASSERTION:
			case PostgreSQLParserParser.ASSIGNMENT:
			case PostgreSQLParserParser.AT:
			case PostgreSQLParserParser.ATOMIC:
			case PostgreSQLParserParser.ATTRIBUTE:
			case PostgreSQLParserParser.ATTRIBUTES:
			case PostgreSQLParserParser.AVG:
			case PostgreSQLParserParser.BACKWARD:
			case PostgreSQLParserParser.BEFORE:
			case PostgreSQLParserParser.BEGIN:
			case PostgreSQLParserParser.BERNOULLI:
			case PostgreSQLParserParser.BETWEEN:
			case PostgreSQLParserParser.BIGINT:
			case PostgreSQLParserParser.BIT:
			case PostgreSQLParserParser.BIT_LENGTH:
			case PostgreSQLParserParser.BLOB:
			case PostgreSQLParserParser.BOOLEAN:
			case PostgreSQLParserParser.BREADTH:
			case PostgreSQLParserParser.BY:
			case PostgreSQLParserParser.C_:
			case PostgreSQLParserParser.CACHE:
			case PostgreSQLParserParser.CALL:
			case PostgreSQLParserParser.CALLED:
			case PostgreSQLParserParser.CARDINALITY:
			case PostgreSQLParserParser.CASCADE:
			case PostgreSQLParserParser.CASCADED:
			case PostgreSQLParserParser.CATALOG:
			case PostgreSQLParserParser.CATALOG_NAME:
			case PostgreSQLParserParser.CEIL:
			case PostgreSQLParserParser.CEILING:
			case PostgreSQLParserParser.CHAIN:
			case PostgreSQLParserParser.CHAR:
			case PostgreSQLParserParser.CHAR_LENGTH:
			case PostgreSQLParserParser.CHARACTER:
			case PostgreSQLParserParser.CHARACTER_LENGTH:
			case PostgreSQLParserParser.CHARACTER_SET_CATALOG:
			case PostgreSQLParserParser.CHARACTER_SET_NAME:
			case PostgreSQLParserParser.CHARACTER_SET_SCHEMA:
			case PostgreSQLParserParser.CHARACTERISTICS:
			case PostgreSQLParserParser.CHARACTERS:
			case PostgreSQLParserParser.CHECKPOINT:
			case PostgreSQLParserParser.CLASS:
			case PostgreSQLParserParser.CLASS_ORIGIN:
			case PostgreSQLParserParser.CLOB:
			case PostgreSQLParserParser.CLOSE:
			case PostgreSQLParserParser.CLUSTER:
			case PostgreSQLParserParser.COALESCE:
			case PostgreSQLParserParser.COBOL:
			case PostgreSQLParserParser.COLLATION_CATALOG:
			case PostgreSQLParserParser.COLLATION_NAME:
			case PostgreSQLParserParser.COLLATION_SCHEMA:
			case PostgreSQLParserParser.COLLECT:
			case PostgreSQLParserParser.COLUMN_NAME:
			case PostgreSQLParserParser.COMMAND_FUNCTION:
			case PostgreSQLParserParser.COMMAND_FUNCTION_CODE:
			case PostgreSQLParserParser.COMMENT:
			case PostgreSQLParserParser.COMMIT:
			case PostgreSQLParserParser.COMMITTED:
			case PostgreSQLParserParser.CONDITION:
			case PostgreSQLParserParser.CONDITION_NUMBER:
			case PostgreSQLParserParser.CONNECT:
			case PostgreSQLParserParser.CONNECTION:
			case PostgreSQLParserParser.CONNECTION_NAME:
			case PostgreSQLParserParser.CONSTRAINT_CATALOG:
			case PostgreSQLParserParser.CONSTRAINT_NAME:
			case PostgreSQLParserParser.CONSTRAINT_SCHEMA:
			case PostgreSQLParserParser.CONSTRAINTS:
			case PostgreSQLParserParser.CONSTRUCTOR:
			case PostgreSQLParserParser.CONTAINS:
			case PostgreSQLParserParser.CONTINUE:
			case PostgreSQLParserParser.CONVERSION:
			case PostgreSQLParserParser.CONVERT:
			case PostgreSQLParserParser.COPY:
			case PostgreSQLParserParser.CORR:
			case PostgreSQLParserParser.CORRESPONDING:
			case PostgreSQLParserParser.COUNT:
			case PostgreSQLParserParser.COVAR_POP:
			case PostgreSQLParserParser.COVAR_SAMP:
			case PostgreSQLParserParser.CSV:
			case PostgreSQLParserParser.CUBE:
			case PostgreSQLParserParser.CUME_DIST:
			case PostgreSQLParserParser.CURRENT:
			case PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP:
			case PostgreSQLParserParser.CURRENT_PATH:
			case PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case PostgreSQLParserParser.CURSOR:
			case PostgreSQLParserParser.CURSOR_NAME:
			case PostgreSQLParserParser.CYCLE:
			case PostgreSQLParserParser.DATA:
			case PostgreSQLParserParser.DATABASE:
			case PostgreSQLParserParser.DATE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_CODE:
			case PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION:
			case PostgreSQLParserParser.DAY:
			case PostgreSQLParserParser.DEALLOCATE:
			case PostgreSQLParserParser.DEC:
			case PostgreSQLParserParser.DECIMAL:
			case PostgreSQLParserParser.DECLARE:
			case PostgreSQLParserParser.DEFAULTS:
			case PostgreSQLParserParser.DEFERRED:
			case PostgreSQLParserParser.DEFINED:
			case PostgreSQLParserParser.DEFINER:
			case PostgreSQLParserParser.DEGREE:
			case PostgreSQLParserParser.DELETE:
			case PostgreSQLParserParser.DELIMITER:
			case PostgreSQLParserParser.DELIMITERS:
			case PostgreSQLParserParser.DENSE_RANK:
			case PostgreSQLParserParser.DEPTH:
			case PostgreSQLParserParser.DEREF:
			case PostgreSQLParserParser.DERIVED:
			case PostgreSQLParserParser.DESCRIBE:
			case PostgreSQLParserParser.DESCRIPTOR:
			case PostgreSQLParserParser.DETERMINISTIC:
			case PostgreSQLParserParser.DIAGNOSTICS:
			case PostgreSQLParserParser.DICTIONARY:
			case PostgreSQLParserParser.DISCONNECT:
			case PostgreSQLParserParser.DISPATCH:
			case PostgreSQLParserParser.DOMAIN:
			case PostgreSQLParserParser.DOUBLE:
			case PostgreSQLParserParser.DYNAMIC:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION:
			case PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE:
			case PostgreSQLParserParser.EACH:
			case PostgreSQLParserParser.ELEMENT:
			case PostgreSQLParserParser.ENCODING:
			case PostgreSQLParserParser.ENCRYPTED:
			case PostgreSQLParserParser.END:
			case PostgreSQLParserParser.EQUALS:
			case PostgreSQLParserParser.ESCAPE:
			case PostgreSQLParserParser.EVERY:
			case PostgreSQLParserParser.EXCEPTION:
			case PostgreSQLParserParser.EXCLUDE:
			case PostgreSQLParserParser.EXCLUDING:
			case PostgreSQLParserParser.EXCLUSIVE:
			case PostgreSQLParserParser.EXEC:
			case PostgreSQLParserParser.EXECUTE:
			case PostgreSQLParserParser.EXISTS:
			case PostgreSQLParserParser.EXP:
			case PostgreSQLParserParser.EXPLAIN:
			case PostgreSQLParserParser.EXTENSION:
			case PostgreSQLParserParser.EXTERNAL:
			case PostgreSQLParserParser.EXTRACT:
			case PostgreSQLParserParser.FILTER:
			case PostgreSQLParserParser.FINAL:
			case PostgreSQLParserParser.FIRST:
			case PostgreSQLParserParser.FLOAT:
			case PostgreSQLParserParser.FLOOR:
			case PostgreSQLParserParser.FOLLOWING:
			case PostgreSQLParserParser.FORCE:
			case PostgreSQLParserParser.FORMAT:
			case PostgreSQLParserParser.FORTRAN:
			case PostgreSQLParserParser.FORWARD:
			case PostgreSQLParserParser.FOUND:
			case PostgreSQLParserParser.FREE:
			case PostgreSQLParserParser.FUNCTION:
			case PostgreSQLParserParser.FUSION:
			case PostgreSQLParserParser.G_:
			case PostgreSQLParserParser.GENERAL:
			case PostgreSQLParserParser.GENERATED:
			case PostgreSQLParserParser.GET:
			case PostgreSQLParserParser.GLOBAL:
			case PostgreSQLParserParser.GO:
			case PostgreSQLParserParser.GOTO:
			case PostgreSQLParserParser.GRANTED:
			case PostgreSQLParserParser.GREATEST:
			case PostgreSQLParserParser.GROUPING:
			case PostgreSQLParserParser.HANDLER:
			case PostgreSQLParserParser.HIERARCHY:
			case PostgreSQLParserParser.HOLD:
			case PostgreSQLParserParser.HOST:
			case PostgreSQLParserParser.HOUR:
			case PostgreSQLParserParser.IDENTITY:
			case PostgreSQLParserParser.IGNORE:
			case PostgreSQLParserParser.IMMEDIATE:
			case PostgreSQLParserParser.IMMUTABLE:
			case PostgreSQLParserParser.IMPLEMENTATION:
			case PostgreSQLParserParser.IMPLICIT:
			case PostgreSQLParserParser.INCLUDING:
			case PostgreSQLParserParser.INCREMENT:
			case PostgreSQLParserParser.INDEX:
			case PostgreSQLParserParser.INDICATOR:
			case PostgreSQLParserParser.INHERITS:
			case PostgreSQLParserParser.INOUT:
			case PostgreSQLParserParser.INPUT:
			case PostgreSQLParserParser.INSENSITIVE:
			case PostgreSQLParserParser.INSERT:
			case PostgreSQLParserParser.INSTANCE:
			case PostgreSQLParserParser.INSTANTIABLE:
			case PostgreSQLParserParser.INSTEAD:
			case PostgreSQLParserParser.INT:
			case PostgreSQLParserParser.INTEGER:
			case PostgreSQLParserParser.INTERSECTION:
			case PostgreSQLParserParser.INTERVAL:
			case PostgreSQLParserParser.INVOKER:
			case PostgreSQLParserParser.ISOLATION:
			case PostgreSQLParserParser.K_:
			case PostgreSQLParserParser.KEY:
			case PostgreSQLParserParser.KEY_MEMBER:
			case PostgreSQLParserParser.KEY_TYPE:
			case PostgreSQLParserParser.LANGUAGE:
			case PostgreSQLParserParser.LARGE:
			case PostgreSQLParserParser.LAST:
			case PostgreSQLParserParser.LEAST:
			case PostgreSQLParserParser.LEFT:
			case PostgreSQLParserParser.LENGTH:
			case PostgreSQLParserParser.LEVEL:
			case PostgreSQLParserParser.LISTEN:
			case PostgreSQLParserParser.LN:
			case PostgreSQLParserParser.LOAD:
			case PostgreSQLParserParser.LOCAL:
			case PostgreSQLParserParser.LOCATION:
			case PostgreSQLParserParser.LOCATOR:
			case PostgreSQLParserParser.LOCK:
			case PostgreSQLParserParser.LOCKED:
			case PostgreSQLParserParser.LOWER:
			case PostgreSQLParserParser.M_:
			case PostgreSQLParserParser.MAP:
			case PostgreSQLParserParser.MATCH:
			case PostgreSQLParserParser.MATCHED:
			case PostgreSQLParserParser.MAX:
			case PostgreSQLParserParser.MAXVALUE:
			case PostgreSQLParserParser.MEMBER:
			case PostgreSQLParserParser.MERGE:
			case PostgreSQLParserParser.MESSAGE_LENGTH:
			case PostgreSQLParserParser.MESSAGE_OCTET_LENGTH:
			case PostgreSQLParserParser.MESSAGE_TEXT:
			case PostgreSQLParserParser.METHOD:
			case PostgreSQLParserParser.MIN:
			case PostgreSQLParserParser.MINUTE:
			case PostgreSQLParserParser.MINVALUE:
			case PostgreSQLParserParser.MOD:
			case PostgreSQLParserParser.MODE:
			case PostgreSQLParserParser.MODIFIES:
			case PostgreSQLParserParser.MODULE:
			case PostgreSQLParserParser.MONTH:
			case PostgreSQLParserParser.MORE_:
			case PostgreSQLParserParser.MOVE:
			case PostgreSQLParserParser.MULTISET:
			case PostgreSQLParserParser.MUMPS:
			case PostgreSQLParserParser.NAME:
			case PostgreSQLParserParser.NAMES:
			case PostgreSQLParserParser.NATIONAL:
			case PostgreSQLParserParser.NCHAR:
			case PostgreSQLParserParser.NCLOB:
			case PostgreSQLParserParser.NESTING:
			case PostgreSQLParserParser.NEW:
			case PostgreSQLParserParser.NEXT:
			case PostgreSQLParserParser.NO:
			case PostgreSQLParserParser.NONE:
			case PostgreSQLParserParser.NORMALIZE:
			case PostgreSQLParserParser.NORMALIZED:
			case PostgreSQLParserParser.NOTHING:
			case PostgreSQLParserParser.NOTIFY:
			case PostgreSQLParserParser.NOWAIT:
			case PostgreSQLParserParser.NULLABLE:
			case PostgreSQLParserParser.NULLIF:
			case PostgreSQLParserParser.NULLS:
			case PostgreSQLParserParser.NUMBER:
			case PostgreSQLParserParser.NUMERIC:
			case PostgreSQLParserParser.OBJECT:
			case PostgreSQLParserParser.OCTET_LENGTH:
			case PostgreSQLParserParser.OCTETS:
			case PostgreSQLParserParser.OF:
			case PostgreSQLParserParser.OFF:
			case PostgreSQLParserParser.OIDS:
			case PostgreSQLParserParser.OLD:
			case PostgreSQLParserParser.OPEN:
			case PostgreSQLParserParser.OPERATOR:
			case PostgreSQLParserParser.OPTION:
			case PostgreSQLParserParser.OPTIONS:
			case PostgreSQLParserParser.ORDERING:
			case PostgreSQLParserParser.ORDINALITY:
			case PostgreSQLParserParser.OTHERS:
			case PostgreSQLParserParser.OUT:
			case PostgreSQLParserParser.OUTPUT:
			case PostgreSQLParserParser.OVER:
			case PostgreSQLParserParser.OVERLAY:
			case PostgreSQLParserParser.OVERRIDING:
			case PostgreSQLParserParser.OWNER:
			case PostgreSQLParserParser.PAD:
			case PostgreSQLParserParser.PARAMETER:
			case PostgreSQLParserParser.PARAMETER_MODE:
			case PostgreSQLParserParser.PARAMETER_NAME:
			case PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME:
			case PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA:
			case PostgreSQLParserParser.PARTIAL:
			case PostgreSQLParserParser.PARTITION:
			case PostgreSQLParserParser.PASCAL:
			case PostgreSQLParserParser.PASSWORD:
			case PostgreSQLParserParser.PATH:
			case PostgreSQLParserParser.PERCENT_RANK:
			case PostgreSQLParserParser.PERCENTILE_CONT:
			case PostgreSQLParserParser.PERCENTILE_DISC:
			case PostgreSQLParserParser.PLAIN:
			case PostgreSQLParserParser.PLI:
			case PostgreSQLParserParser.POSITION:
			case PostgreSQLParserParser.POWER:
			case PostgreSQLParserParser.PRECEDING:
			case PostgreSQLParserParser.PRECISION:
			case PostgreSQLParserParser.PREPARE:
			case PostgreSQLParserParser.PRESERVE:
			case PostgreSQLParserParser.PRIOR:
			case PostgreSQLParserParser.PRIVILEGES:
			case PostgreSQLParserParser.PROCEDURAL:
			case PostgreSQLParserParser.PROCEDURE:
			case PostgreSQLParserParser.PUBLIC:
			case PostgreSQLParserParser.QUOTE:
			case PostgreSQLParserParser.RANGE:
			case PostgreSQLParserParser.RANK:
			case PostgreSQLParserParser.READ:
			case PostgreSQLParserParser.READS:
			case PostgreSQLParserParser.REAL:
			case PostgreSQLParserParser.RECHECK:
			case PostgreSQLParserParser.RECURSIVE:
			case PostgreSQLParserParser.REF:
			case PostgreSQLParserParser.REFERENCING:
			case PostgreSQLParserParser.REFRESH:
			case PostgreSQLParserParser.REGR_AVGX:
			case PostgreSQLParserParser.REGR_AVGY:
			case PostgreSQLParserParser.REGR_COUNT:
			case PostgreSQLParserParser.REGR_INTERCEPT:
			case PostgreSQLParserParser.REGR_SLOPE:
			case PostgreSQLParserParser.REGR_SXX:
			case PostgreSQLParserParser.REGR_SXY:
			case PostgreSQLParserParser.REGR_SYY:
			case PostgreSQLParserParser.REINDEX:
			case PostgreSQLParserParser.RELATIVE:
			case PostgreSQLParserParser.RELEASE:
			case PostgreSQLParserParser.RENAME:
			case PostgreSQLParserParser.REPEATABLE:
			case PostgreSQLParserParser.REPLACE:
			case PostgreSQLParserParser.RESET:
			case PostgreSQLParserParser.RESTART:
			case PostgreSQLParserParser.RESTRICT:
			case PostgreSQLParserParser.RESULT:
			case PostgreSQLParserParser.RETURN:
			case PostgreSQLParserParser.RETURNED_CARDINALITY:
			case PostgreSQLParserParser.RETURNED_LENGTH:
			case PostgreSQLParserParser.RETURNED_OCTET_LENGTH:
			case PostgreSQLParserParser.RETURNED_SQLSTATE:
			case PostgreSQLParserParser.RETURNS:
			case PostgreSQLParserParser.REVOKE:
			case PostgreSQLParserParser.RIGHT:
			case PostgreSQLParserParser.ROLE:
			case PostgreSQLParserParser.ROLLBACK:
			case PostgreSQLParserParser.ROLLUP:
			case PostgreSQLParserParser.ROUTINE:
			case PostgreSQLParserParser.ROUTINE_CATALOG:
			case PostgreSQLParserParser.ROUTINE_NAME:
			case PostgreSQLParserParser.ROUTINE_SCHEMA:
			case PostgreSQLParserParser.ROW:
			case PostgreSQLParserParser.ROW_COUNT:
			case PostgreSQLParserParser.ROW_NUMBER:
			case PostgreSQLParserParser.ROWS:
			case PostgreSQLParserParser.RULE:
			case PostgreSQLParserParser.SAVEPOINT:
			case PostgreSQLParserParser.SCALE:
			case PostgreSQLParserParser.SCHEMA:
			case PostgreSQLParserParser.SCHEMA_NAME:
			case PostgreSQLParserParser.SCOPE:
			case PostgreSQLParserParser.SCOPE_CATALOG:
			case PostgreSQLParserParser.SCOPE_NAME:
			case PostgreSQLParserParser.SCOPE_SCHEMA:
			case PostgreSQLParserParser.SCROLL:
			case PostgreSQLParserParser.SEARCH:
			case PostgreSQLParserParser.SECOND:
			case PostgreSQLParserParser.SECTION:
			case PostgreSQLParserParser.SECURITY:
			case PostgreSQLParserParser.SELF:
			case PostgreSQLParserParser.SENSITIVE:
			case PostgreSQLParserParser.SEQUENCE:
			case PostgreSQLParserParser.SEQUENCES:
			case PostgreSQLParserParser.SERIALIZABLE:
			case PostgreSQLParserParser.SERVER_NAME:
			case PostgreSQLParserParser.SESSION:
			case PostgreSQLParserParser.SET:
			case PostgreSQLParserParser.SETOF:
			case PostgreSQLParserParser.SETS:
			case PostgreSQLParserParser.SHARE:
			case PostgreSQLParserParser.SHOW:
			case PostgreSQLParserParser.SIMPLE:
			case PostgreSQLParserParser.SIZE:
			case PostgreSQLParserParser.SMALLINT:
			case PostgreSQLParserParser.SOME:
			case PostgreSQLParserParser.SOURCE:
			case PostgreSQLParserParser.SPACE:
			case PostgreSQLParserParser.SPECIFIC:
			case PostgreSQLParserParser.SPECIFIC_NAME:
			case PostgreSQLParserParser.SPECIFICTYPE:
			case PostgreSQLParserParser.SQL:
			case PostgreSQLParserParser.SQLCODE:
			case PostgreSQLParserParser.SQLERROR:
			case PostgreSQLParserParser.SQLEXCEPTION:
			case PostgreSQLParserParser.SQLSTATE:
			case PostgreSQLParserParser.SQLWARNING:
			case PostgreSQLParserParser.SQRT:
			case PostgreSQLParserParser.STABLE:
			case PostgreSQLParserParser.START:
			case PostgreSQLParserParser.STATE:
			case PostgreSQLParserParser.STATEMENT:
			case PostgreSQLParserParser.STATIC:
			case PostgreSQLParserParser.STATISTICS:
			case PostgreSQLParserParser.STDDEV_POP:
			case PostgreSQLParserParser.STDDEV_SAMP:
			case PostgreSQLParserParser.STDIN:
			case PostgreSQLParserParser.STDOUT:
			case PostgreSQLParserParser.STORAGE:
			case PostgreSQLParserParser.STRICT:
			case PostgreSQLParserParser.STRUCTURE:
			case PostgreSQLParserParser.STYLE:
			case PostgreSQLParserParser.SUBCLASS_ORIGIN:
			case PostgreSQLParserParser.SUBMULTISET:
			case PostgreSQLParserParser.SUBSTRING:
			case PostgreSQLParserParser.SUM:
			case PostgreSQLParserParser.SYSID:
			case PostgreSQLParserParser.SYSTEM:
			case PostgreSQLParserParser.SYSTEM_USER:
			case PostgreSQLParserParser.TABLE_NAME:
			case PostgreSQLParserParser.TABLESPACE:
			case PostgreSQLParserParser.TEMP:
			case PostgreSQLParserParser.TEMPLATE:
			case PostgreSQLParserParser.TEMPORARY:
			case PostgreSQLParserParser.TIES:
			case PostgreSQLParserParser.TIME:
			case PostgreSQLParserParser.TIMESTAMP:
			case PostgreSQLParserParser.TIMEZONE_HOUR:
			case PostgreSQLParserParser.TIMEZONE_MINUTE:
			case PostgreSQLParserParser.TOP_LEVEL_COUNT:
			case PostgreSQLParserParser.TRANSACTION:
			case PostgreSQLParserParser.TRANSACTION_ACTIVE:
			case PostgreSQLParserParser.TRANSACTIONS_COMMITTED:
			case PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK:
			case PostgreSQLParserParser.TRANSFORM:
			case PostgreSQLParserParser.TRANSFORMS:
			case PostgreSQLParserParser.TRANSLATE:
			case PostgreSQLParserParser.TRANSLATION:
			case PostgreSQLParserParser.TREAT:
			case PostgreSQLParserParser.TRIGGER:
			case PostgreSQLParserParser.TRIGGER_CATALOG:
			case PostgreSQLParserParser.TRIGGER_NAME:
			case PostgreSQLParserParser.TRIGGER_SCHEMA:
			case PostgreSQLParserParser.TRIM:
			case PostgreSQLParserParser.TRUE:
			case PostgreSQLParserParser.TRUNCATE:
			case PostgreSQLParserParser.TRUSTED:
			case PostgreSQLParserParser.TYPE:
			case PostgreSQLParserParser.UESCAPE:
			case PostgreSQLParserParser.UNBOUNDED:
			case PostgreSQLParserParser.UNCOMMITTED:
			case PostgreSQLParserParser.UNDER:
			case PostgreSQLParserParser.UNENCRYPTED:
			case PostgreSQLParserParser.UNKNOWN:
			case PostgreSQLParserParser.UNLISTEN:
			case PostgreSQLParserParser.UNNAMED:
			case PostgreSQLParserParser.UNNEST:
			case PostgreSQLParserParser.UNTIL:
			case PostgreSQLParserParser.UPDATE:
			case PostgreSQLParserParser.UPPER:
			case PostgreSQLParserParser.USAGE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_CODE:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_NAME:
			case PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA:
			case PostgreSQLParserParser.VACUUM:
			case PostgreSQLParserParser.VALID:
			case PostgreSQLParserParser.VALIDATOR:
			case PostgreSQLParserParser.VALUE:
			case PostgreSQLParserParser.VALUES:
			case PostgreSQLParserParser.VAR_POP:
			case PostgreSQLParserParser.VAR_SAMP:
			case PostgreSQLParserParser.VARCHAR:
			case PostgreSQLParserParser.VARYING:
			case PostgreSQLParserParser.VIEW:
			case PostgreSQLParserParser.VOLATILE:
			case PostgreSQLParserParser.WHENEVER:
			case PostgreSQLParserParser.WIDTH_BUCKET:
			case PostgreSQLParserParser.WITHIN:
			case PostgreSQLParserParser.WITHOUT:
			case PostgreSQLParserParser.WORK:
			case PostgreSQLParserParser.WRITE:
			case PostgreSQLParserParser.YEAR:
			case PostgreSQLParserParser.ZONE:
			case PostgreSQLParserParser.ABSTIME:
			case PostgreSQLParserParser.BIGSERIAL:
			case PostgreSQLParserParser.BIT_VARYING:
			case PostgreSQLParserParser.BOOL:
			case PostgreSQLParserParser.BOX:
			case PostgreSQLParserParser.BYTEA:
			case PostgreSQLParserParser.CHARACTER_VARYING:
			case PostgreSQLParserParser.CIDR:
			case PostgreSQLParserParser.CIRCLE:
			case PostgreSQLParserParser.FLOAT4:
			case PostgreSQLParserParser.FLOAT8:
			case PostgreSQLParserParser.INET:
			case PostgreSQLParserParser.INT2:
			case PostgreSQLParserParser.INT4:
			case PostgreSQLParserParser.INT8:
			case PostgreSQLParserParser.JSON:
			case PostgreSQLParserParser.JSONB:
			case PostgreSQLParserParser.LINE:
			case PostgreSQLParserParser.LSEG:
			case PostgreSQLParserParser.MACADDR:
			case PostgreSQLParserParser.MACADDR8:
			case PostgreSQLParserParser.MONEY:
			case PostgreSQLParserParser.PG_LSN:
			case PostgreSQLParserParser.POINT:
			case PostgreSQLParserParser.POLYGON:
			case PostgreSQLParserParser.RELTIME:
			case PostgreSQLParserParser.SERIAL:
			case PostgreSQLParserParser.SERIAL2:
			case PostgreSQLParserParser.SERIAL4:
			case PostgreSQLParserParser.SERIAL8:
			case PostgreSQLParserParser.SMALLSERIAL:
			case PostgreSQLParserParser.TEXT:
			case PostgreSQLParserParser.TIMESTAMPTZ:
			case PostgreSQLParserParser.TIMETZ:
			case PostgreSQLParserParser.TSQUERY:
			case PostgreSQLParserParser.TSVECTOR:
			case PostgreSQLParserParser.TXID_SNAPSHOT:
			case PostgreSQLParserParser.UUID:
			case PostgreSQLParserParser.VARBIT:
			case PostgreSQLParserParser.XML:
			case PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL:
			case PostgreSQLParserParser.IDENTIFIER:
			case PostgreSQLParserParser.IDENTIFIER_UNICODE:
				{
				this.state = 5473;
				_localctx._column_name_ = this.identifier(0);
				}
				break;
			case PostgreSQLParserParser.OPEN_PAREN:
				{
				this.state = 5474;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5475;
				this.expr(0);
				this.state = 5476;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5481;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 671, this._ctx) ) {
			case 1:
				{
				this.state = 5480;
				_localctx._opclass = this.identifier(0);
				}
				break;
			}
			this.state = 5484;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.ASC || _la === PostgreSQLParserParser.DESC) {
				{
				this.state = 5483;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.ASC || _la === PostgreSQLParserParser.DESC)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 5488;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.NULLS) {
				{
				this.state = 5486;
				this.match(PostgreSQLParserParser.NULLS);
				this.state = 5487;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.FIRST || _la === PostgreSQLParserParser.LAST)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_constraint(): Table_constraintContext {
		let _localctx: Table_constraintContext = new Table_constraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, PostgreSQLParserParser.RULE_table_constraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5492;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.CONSTRAINT) {
				{
				this.state = 5490;
				this.match(PostgreSQLParserParser.CONSTRAINT);
				this.state = 5491;
				_localctx._constraint_name = this.name_();
				}
			}

			this.state = 5559;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParserParser.CHECK:
				{
				{
				this.state = 5494;
				this.match(PostgreSQLParserParser.CHECK);
				this.state = 5495;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5496;
				this.expr(0);
				this.state = 5497;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 5500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.NO) {
					{
					this.state = 5498;
					this.match(PostgreSQLParserParser.NO);
					this.state = 5499;
					this.match(PostgreSQLParserParser.INHERIT);
					}
				}

				}
				}
				break;
			case PostgreSQLParserParser.UNIQUE:
				{
				{
				this.state = 5502;
				this.match(PostgreSQLParserParser.UNIQUE);
				this.state = 5503;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5504;
				_localctx._columns = this.identifier_list();
				this.state = 5505;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				}
				}
				break;
			case PostgreSQLParserParser.PRIMARY:
				{
				{
				this.state = 5507;
				this.match(PostgreSQLParserParser.PRIMARY);
				this.state = 5508;
				this.match(PostgreSQLParserParser.KEY);
				this.state = 5509;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5510;
				_localctx._columns = this.identifier_list();
				this.state = 5511;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 5512;
				this.index_parameters();
				}
				}
				break;
			case PostgreSQLParserParser.EOF:
			case PostgreSQLParserParser.DEFERABLE:
			case PostgreSQLParserParser.EXCLUDE:
			case PostgreSQLParserParser.INITIALLY:
			case PostgreSQLParserParser.NOT:
			case PostgreSQLParserParser.COMMA:
			case PostgreSQLParserParser.CLOSE_PAREN:
			case PostgreSQLParserParser.SEMI:
				{
				this.state = 5530;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.EXCLUDE) {
					{
					this.state = 5514;
					this.match(PostgreSQLParserParser.EXCLUDE);
					this.state = 5517;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParserParser.USING) {
						{
						this.state = 5515;
						this.match(PostgreSQLParserParser.USING);
						this.state = 5516;
						this.index_method();
						}
					}

					this.state = 5519;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 5520;
					this.exclude_element();
					this.state = 5521;
					this.match(PostgreSQLParserParser.WITH);
					this.state = 5522;
					_localctx._operators = this.identifier_list();
					this.state = 5523;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					this.state = 5524;
					this.index_parameters();
					{
					this.state = 5525;
					this.match(PostgreSQLParserParser.WHERE);
					this.state = 5526;
					this.match(PostgreSQLParserParser.OPEN_PAREN);
					this.state = 5527;
					this.predicate(0);
					this.state = 5528;
					this.match(PostgreSQLParserParser.CLOSE_PAREN);
					}
					}
				}

				}
				break;
			case PostgreSQLParserParser.FOREIGN:
				{
				{
				this.state = 5532;
				this.match(PostgreSQLParserParser.FOREIGN);
				this.state = 5533;
				this.match(PostgreSQLParserParser.KEY);
				this.state = 5534;
				this.match(PostgreSQLParserParser.OPEN_PAREN);
				this.state = 5535;
				_localctx._columns = this.identifier_list();
				this.state = 5536;
				this.match(PostgreSQLParserParser.CLOSE_PAREN);
				this.state = 5537;
				this.match(PostgreSQLParserParser.REFERENCES);
				this.state = 5538;
				_localctx._reftable = this.identifier(0);
				this.state = 5540;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 678, this._ctx) ) {
				case 1:
					{
					this.state = 5539;
					_localctx._columns = this.identifier_list();
					}
					break;
				}
				this.state = 5547;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 679, this._ctx) ) {
				case 1:
					{
					this.state = 5542;
					this.match(PostgreSQLParserParser.MATCH);
					this.state = 5543;
					this.match(PostgreSQLParserParser.FULL);
					}
					break;

				case 2:
					{
					this.state = 5544;
					this.match(PostgreSQLParserParser.MATCH);
					this.state = 5545;
					this.match(PostgreSQLParserParser.PARTIAL);
					}
					break;

				case 3:
					{
					this.state = 5546;
					this.match(PostgreSQLParserParser.MATCH_SIMPLE);
					}
					break;
				}
				this.state = 5552;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 680, this._ctx) ) {
				case 1:
					{
					this.state = 5549;
					this.match(PostgreSQLParserParser.ON);
					this.state = 5550;
					this.match(PostgreSQLParserParser.DELETE);
					this.state = 5551;
					_localctx._action = this.identifier(0);
					}
					break;
				}
				this.state = 5557;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.ON) {
					{
					this.state = 5554;
					this.match(PostgreSQLParserParser.ON);
					this.state = 5555;
					this.match(PostgreSQLParserParser.UPDATE);
					this.state = 5556;
					_localctx._action = this.identifier(0);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5565;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 684, this._ctx) ) {
			case 1:
				{
				this.state = 5562;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParserParser.NOT) {
					{
					this.state = 5561;
					this.match(PostgreSQLParserParser.NOT);
					}
				}

				this.state = 5564;
				this.match(PostgreSQLParserParser.DEFERABLE);
				}
				break;
			}
			this.state = 5569;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParserParser.INITIALLY) {
				{
				this.state = 5567;
				this.match(PostgreSQLParserParser.INITIALLY);
				this.state = 5568;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParserParser.DEFERRED || _la === PostgreSQLParserParser.IMMEDIATE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public role_name(): Role_nameContext {
		let _localctx: Role_nameContext = new Role_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, PostgreSQLParserParser.RULE_role_name);
		try {
			this.state = 5575;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 686, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5571;
				_localctx._name = this.name_();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5572;
				this.match(PostgreSQLParserParser.CURRENT_USER);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5573;
				this.match(PostgreSQLParserParser.SESSION_USER);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5574;
				this.match(PostgreSQLParserParser.PUBLIC);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public role_name_list(): Role_name_listContext {
		let _localctx: Role_name_listContext = new Role_name_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, PostgreSQLParserParser.RULE_role_name_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5577;
			this.role_name();
			this.state = 5582;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParserParser.COMMA) {
				{
				{
				this.state = 5578;
				this.match(PostgreSQLParserParser.COMMA);
				this.state = 5579;
				this.role_name();
				}
				}
				this.state = 5584;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public param_value(): Param_valueContext {
		let _localctx: Param_valueContext = new Param_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, PostgreSQLParserParser.RULE_param_value);
		try {
			this.state = 5596;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 688, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5585;
				this.match(PostgreSQLParserParser.ON);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5586;
				this.match(PostgreSQLParserParser.OFF);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5587;
				this.match(PostgreSQLParserParser.TRUE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5588;
				this.match(PostgreSQLParserParser.FALSE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5589;
				this.match(PostgreSQLParserParser.YES);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5590;
				this.match(PostgreSQLParserParser.NO);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5591;
				this.match(PostgreSQLParserParser.NONE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5592;
				this.match(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5593;
				this.match(PostgreSQLParserParser.NUMERIC_LITERAL);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5594;
				this.match(PostgreSQLParserParser.INTEGER_LITERAL);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5595;
				this.identifier(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public non_reserved_keyword(): Non_reserved_keywordContext {
		let _localctx: Non_reserved_keywordContext = new Non_reserved_keywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, PostgreSQLParserParser.RULE_non_reserved_keyword);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5598;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParserParser.WHITESPACE) | (1 << PostgreSQLParserParser.A_) | (1 << PostgreSQLParserParser.ABORT) | (1 << PostgreSQLParserParser.ABS) | (1 << PostgreSQLParserParser.ABSOLUTE) | (1 << PostgreSQLParserParser.ACCESS) | (1 << PostgreSQLParserParser.ACTION) | (1 << PostgreSQLParserParser.ADA) | (1 << PostgreSQLParserParser.ADD) | (1 << PostgreSQLParserParser.ADMIN) | (1 << PostgreSQLParserParser.AFTER) | (1 << PostgreSQLParserParser.AGGREGATE) | (1 << PostgreSQLParserParser.ALLOCATE) | (1 << PostgreSQLParserParser.ALSO) | (1 << PostgreSQLParserParser.ALTER) | (1 << PostgreSQLParserParser.ALWAYS) | (1 << PostgreSQLParserParser.ANY) | (1 << PostgreSQLParserParser.ARE) | (1 << PostgreSQLParserParser.ASENSITIVE) | (1 << PostgreSQLParserParser.ASSERTION) | (1 << PostgreSQLParserParser.ASSIGNMENT))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParserParser.AT - 33)) | (1 << (PostgreSQLParserParser.ATOMIC - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTE - 33)) | (1 << (PostgreSQLParserParser.ATTRIBUTES - 33)) | (1 << (PostgreSQLParserParser.AVG - 33)) | (1 << (PostgreSQLParserParser.BACKWARD - 33)) | (1 << (PostgreSQLParserParser.BEFORE - 33)) | (1 << (PostgreSQLParserParser.BEGIN - 33)) | (1 << (PostgreSQLParserParser.BERNOULLI - 33)) | (1 << (PostgreSQLParserParser.BETWEEN - 33)) | (1 << (PostgreSQLParserParser.BIGINT - 33)) | (1 << (PostgreSQLParserParser.BIT - 33)) | (1 << (PostgreSQLParserParser.BIT_LENGTH - 33)) | (1 << (PostgreSQLParserParser.BLOB - 33)) | (1 << (PostgreSQLParserParser.BOOLEAN - 33)) | (1 << (PostgreSQLParserParser.BREADTH - 33)) | (1 << (PostgreSQLParserParser.BY - 33)) | (1 << (PostgreSQLParserParser.C_ - 33)) | (1 << (PostgreSQLParserParser.CACHE - 33)) | (1 << (PostgreSQLParserParser.CALL - 33)) | (1 << (PostgreSQLParserParser.CALLED - 33)) | (1 << (PostgreSQLParserParser.CARDINALITY - 33)) | (1 << (PostgreSQLParserParser.CASCADE - 33)) | (1 << (PostgreSQLParserParser.CASCADED - 33)) | (1 << (PostgreSQLParserParser.CATALOG - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParserParser.CATALOG_NAME - 65)) | (1 << (PostgreSQLParserParser.CEIL - 65)) | (1 << (PostgreSQLParserParser.CEILING - 65)) | (1 << (PostgreSQLParserParser.CHAIN - 65)) | (1 << (PostgreSQLParserParser.CHAR - 65)) | (1 << (PostgreSQLParserParser.CHAR_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_LENGTH - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_CATALOG - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_NAME - 65)) | (1 << (PostgreSQLParserParser.CHARACTER_SET_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.CHARACTERISTICS - 65)) | (1 << (PostgreSQLParserParser.CHARACTERS - 65)) | (1 << (PostgreSQLParserParser.CHECKPOINT - 65)) | (1 << (PostgreSQLParserParser.CLASS - 65)) | (1 << (PostgreSQLParserParser.CLASS_ORIGIN - 65)) | (1 << (PostgreSQLParserParser.CLOB - 65)) | (1 << (PostgreSQLParserParser.CLOSE - 65)) | (1 << (PostgreSQLParserParser.CLUSTER - 65)) | (1 << (PostgreSQLParserParser.COALESCE - 65)) | (1 << (PostgreSQLParserParser.COBOL - 65)) | (1 << (PostgreSQLParserParser.COLLATION_CATALOG - 65)) | (1 << (PostgreSQLParserParser.COLLATION_NAME - 65)) | (1 << (PostgreSQLParserParser.COLLATION_SCHEMA - 65)) | (1 << (PostgreSQLParserParser.COLLECT - 65)) | (1 << (PostgreSQLParserParser.COLUMN_NAME - 65)) | (1 << (PostgreSQLParserParser.COMMAND_FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (PostgreSQLParserParser.COMMAND_FUNCTION_CODE - 97)) | (1 << (PostgreSQLParserParser.COMMENT - 97)) | (1 << (PostgreSQLParserParser.COMMIT - 97)) | (1 << (PostgreSQLParserParser.COMMITTED - 97)) | (1 << (PostgreSQLParserParser.CONDITION - 97)) | (1 << (PostgreSQLParserParser.CONDITION_NUMBER - 97)) | (1 << (PostgreSQLParserParser.CONNECT - 97)) | (1 << (PostgreSQLParserParser.CONNECTION - 97)) | (1 << (PostgreSQLParserParser.CONNECTION_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_CATALOG - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_NAME - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINT_SCHEMA - 97)) | (1 << (PostgreSQLParserParser.CONSTRAINTS - 97)) | (1 << (PostgreSQLParserParser.CONSTRUCTOR - 97)) | (1 << (PostgreSQLParserParser.CONTAINS - 97)) | (1 << (PostgreSQLParserParser.CONTINUE - 97)) | (1 << (PostgreSQLParserParser.CONVERSION - 97)) | (1 << (PostgreSQLParserParser.CONVERT - 97)) | (1 << (PostgreSQLParserParser.COPY - 97)) | (1 << (PostgreSQLParserParser.CORR - 97)) | (1 << (PostgreSQLParserParser.CORRESPONDING - 97)) | (1 << (PostgreSQLParserParser.COUNT - 97)) | (1 << (PostgreSQLParserParser.COVAR_POP - 97)) | (1 << (PostgreSQLParserParser.COVAR_SAMP - 97)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParserParser.CSV - 130)) | (1 << (PostgreSQLParserParser.CUBE - 130)) | (1 << (PostgreSQLParserParser.CUME_DIST - 130)) | (1 << (PostgreSQLParserParser.CURRENT - 130)) | (1 << (PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP - 130)) | (1 << (PostgreSQLParserParser.CURRENT_PATH - 130)) | (1 << (PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE - 130)) | (1 << (PostgreSQLParserParser.CURSOR - 130)) | (1 << (PostgreSQLParserParser.CURSOR_NAME - 130)) | (1 << (PostgreSQLParserParser.CYCLE - 130)) | (1 << (PostgreSQLParserParser.DATA - 130)) | (1 << (PostgreSQLParserParser.DATABASE - 130)) | (1 << (PostgreSQLParserParser.DATE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_CODE - 130)) | (1 << (PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION - 130)) | (1 << (PostgreSQLParserParser.DAY - 130)) | (1 << (PostgreSQLParserParser.DEALLOCATE - 130)) | (1 << (PostgreSQLParserParser.DEC - 130)) | (1 << (PostgreSQLParserParser.DECIMAL - 130)) | (1 << (PostgreSQLParserParser.DECLARE - 130)) | (1 << (PostgreSQLParserParser.DEFAULTS - 130)) | (1 << (PostgreSQLParserParser.DEFERRED - 130)) | (1 << (PostgreSQLParserParser.DEFINED - 130)) | (1 << (PostgreSQLParserParser.DEFINER - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (PostgreSQLParserParser.DEGREE - 162)) | (1 << (PostgreSQLParserParser.DELETE - 162)) | (1 << (PostgreSQLParserParser.DELIMITER - 162)) | (1 << (PostgreSQLParserParser.DELIMITERS - 162)) | (1 << (PostgreSQLParserParser.DENSE_RANK - 162)) | (1 << (PostgreSQLParserParser.DEPTH - 162)) | (1 << (PostgreSQLParserParser.DEREF - 162)) | (1 << (PostgreSQLParserParser.DERIVED - 162)) | (1 << (PostgreSQLParserParser.DESCRIBE - 162)) | (1 << (PostgreSQLParserParser.DESCRIPTOR - 162)) | (1 << (PostgreSQLParserParser.DETERMINISTIC - 162)) | (1 << (PostgreSQLParserParser.DIAGNOSTICS - 162)) | (1 << (PostgreSQLParserParser.DICTIONARY - 162)) | (1 << (PostgreSQLParserParser.DISCONNECT - 162)) | (1 << (PostgreSQLParserParser.DISPATCH - 162)) | (1 << (PostgreSQLParserParser.DOMAIN - 162)) | (1 << (PostgreSQLParserParser.DOUBLE - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION - 162)) | (1 << (PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE - 162)) | (1 << (PostgreSQLParserParser.EACH - 162)) | (1 << (PostgreSQLParserParser.ELEMENT - 162)))) !== 0) || ((((_la - 196)) & ~0x1F) === 0 && ((1 << (_la - 196)) & ((1 << (PostgreSQLParserParser.ENCODING - 196)) | (1 << (PostgreSQLParserParser.ENCRYPTED - 196)) | (1 << (PostgreSQLParserParser.END - 196)) | (1 << (PostgreSQLParserParser.EQUALS - 196)) | (1 << (PostgreSQLParserParser.ESCAPE - 196)) | (1 << (PostgreSQLParserParser.EVERY - 196)) | (1 << (PostgreSQLParserParser.EXCEPTION - 196)) | (1 << (PostgreSQLParserParser.EXCLUDE - 196)) | (1 << (PostgreSQLParserParser.EXCLUDING - 196)) | (1 << (PostgreSQLParserParser.EXCLUSIVE - 196)) | (1 << (PostgreSQLParserParser.EXEC - 196)) | (1 << (PostgreSQLParserParser.EXECUTE - 196)) | (1 << (PostgreSQLParserParser.EXISTS - 196)) | (1 << (PostgreSQLParserParser.EXP - 196)) | (1 << (PostgreSQLParserParser.EXPLAIN - 196)) | (1 << (PostgreSQLParserParser.EXTENSION - 196)) | (1 << (PostgreSQLParserParser.EXTERNAL - 196)) | (1 << (PostgreSQLParserParser.EXTRACT - 196)) | (1 << (PostgreSQLParserParser.FILTER - 196)) | (1 << (PostgreSQLParserParser.FINAL - 196)) | (1 << (PostgreSQLParserParser.FIRST - 196)) | (1 << (PostgreSQLParserParser.FLOAT - 196)) | (1 << (PostgreSQLParserParser.FLOOR - 196)) | (1 << (PostgreSQLParserParser.FOLLOWING - 196)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (PostgreSQLParserParser.FORCE - 228)) | (1 << (PostgreSQLParserParser.FORMAT - 228)) | (1 << (PostgreSQLParserParser.FORTRAN - 228)) | (1 << (PostgreSQLParserParser.FORWARD - 228)) | (1 << (PostgreSQLParserParser.FOUND - 228)) | (1 << (PostgreSQLParserParser.FREE - 228)) | (1 << (PostgreSQLParserParser.FUNCTION - 228)) | (1 << (PostgreSQLParserParser.FUSION - 228)) | (1 << (PostgreSQLParserParser.G_ - 228)) | (1 << (PostgreSQLParserParser.GENERAL - 228)) | (1 << (PostgreSQLParserParser.GENERATED - 228)) | (1 << (PostgreSQLParserParser.GET - 228)) | (1 << (PostgreSQLParserParser.GLOBAL - 228)) | (1 << (PostgreSQLParserParser.GO - 228)) | (1 << (PostgreSQLParserParser.GOTO - 228)) | (1 << (PostgreSQLParserParser.GRANTED - 228)) | (1 << (PostgreSQLParserParser.GREATEST - 228)) | (1 << (PostgreSQLParserParser.GROUPING - 228)) | (1 << (PostgreSQLParserParser.HANDLER - 228)) | (1 << (PostgreSQLParserParser.HIERARCHY - 228)) | (1 << (PostgreSQLParserParser.HOLD - 228)) | (1 << (PostgreSQLParserParser.HOST - 228)) | (1 << (PostgreSQLParserParser.HOUR - 228)) | (1 << (PostgreSQLParserParser.IDENTITY - 228)) | (1 << (PostgreSQLParserParser.IGNORE - 228)))) !== 0) || ((((_la - 261)) & ~0x1F) === 0 && ((1 << (_la - 261)) & ((1 << (PostgreSQLParserParser.IMMEDIATE - 261)) | (1 << (PostgreSQLParserParser.IMMUTABLE - 261)) | (1 << (PostgreSQLParserParser.IMPLEMENTATION - 261)) | (1 << (PostgreSQLParserParser.IMPLICIT - 261)) | (1 << (PostgreSQLParserParser.INCLUDING - 261)) | (1 << (PostgreSQLParserParser.INCREMENT - 261)) | (1 << (PostgreSQLParserParser.INDEX - 261)) | (1 << (PostgreSQLParserParser.INDICATOR - 261)) | (1 << (PostgreSQLParserParser.INHERITS - 261)) | (1 << (PostgreSQLParserParser.INOUT - 261)) | (1 << (PostgreSQLParserParser.INPUT - 261)) | (1 << (PostgreSQLParserParser.INSENSITIVE - 261)) | (1 << (PostgreSQLParserParser.INSERT - 261)) | (1 << (PostgreSQLParserParser.INSTANCE - 261)) | (1 << (PostgreSQLParserParser.INSTANTIABLE - 261)) | (1 << (PostgreSQLParserParser.INSTEAD - 261)) | (1 << (PostgreSQLParserParser.INT - 261)) | (1 << (PostgreSQLParserParser.INTEGER - 261)) | (1 << (PostgreSQLParserParser.INTERSECTION - 261)) | (1 << (PostgreSQLParserParser.INTERVAL - 261)) | (1 << (PostgreSQLParserParser.INVOKER - 261)) | (1 << (PostgreSQLParserParser.ISOLATION - 261)))) !== 0) || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & ((1 << (PostgreSQLParserParser.K_ - 293)) | (1 << (PostgreSQLParserParser.KEY - 293)) | (1 << (PostgreSQLParserParser.KEY_MEMBER - 293)) | (1 << (PostgreSQLParserParser.KEY_TYPE - 293)) | (1 << (PostgreSQLParserParser.LANGUAGE - 293)) | (1 << (PostgreSQLParserParser.LARGE - 293)) | (1 << (PostgreSQLParserParser.LAST - 293)) | (1 << (PostgreSQLParserParser.LEAST - 293)) | (1 << (PostgreSQLParserParser.LEFT - 293)) | (1 << (PostgreSQLParserParser.LENGTH - 293)) | (1 << (PostgreSQLParserParser.LEVEL - 293)) | (1 << (PostgreSQLParserParser.LISTEN - 293)) | (1 << (PostgreSQLParserParser.LN - 293)) | (1 << (PostgreSQLParserParser.LOAD - 293)) | (1 << (PostgreSQLParserParser.LOCAL - 293)) | (1 << (PostgreSQLParserParser.LOCATION - 293)) | (1 << (PostgreSQLParserParser.LOCATOR - 293)) | (1 << (PostgreSQLParserParser.LOCK - 293)) | (1 << (PostgreSQLParserParser.LOCKED - 293)) | (1 << (PostgreSQLParserParser.LOWER - 293)) | (1 << (PostgreSQLParserParser.M_ - 293)) | (1 << (PostgreSQLParserParser.MAP - 293)))) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & ((1 << (PostgreSQLParserParser.MATCH - 326)) | (1 << (PostgreSQLParserParser.MATCHED - 326)) | (1 << (PostgreSQLParserParser.MAX - 326)) | (1 << (PostgreSQLParserParser.MAXVALUE - 326)) | (1 << (PostgreSQLParserParser.MEMBER - 326)) | (1 << (PostgreSQLParserParser.MERGE - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_OCTET_LENGTH - 326)) | (1 << (PostgreSQLParserParser.MESSAGE_TEXT - 326)) | (1 << (PostgreSQLParserParser.METHOD - 326)) | (1 << (PostgreSQLParserParser.MIN - 326)) | (1 << (PostgreSQLParserParser.MINUTE - 326)) | (1 << (PostgreSQLParserParser.MINVALUE - 326)) | (1 << (PostgreSQLParserParser.MOD - 326)) | (1 << (PostgreSQLParserParser.MODE - 326)) | (1 << (PostgreSQLParserParser.MODIFIES - 326)) | (1 << (PostgreSQLParserParser.MODULE - 326)) | (1 << (PostgreSQLParserParser.MONTH - 326)) | (1 << (PostgreSQLParserParser.MORE_ - 326)) | (1 << (PostgreSQLParserParser.MOVE - 326)) | (1 << (PostgreSQLParserParser.MULTISET - 326)) | (1 << (PostgreSQLParserParser.MUMPS - 326)) | (1 << (PostgreSQLParserParser.NAME - 326)) | (1 << (PostgreSQLParserParser.NAMES - 326)) | (1 << (PostgreSQLParserParser.NATIONAL - 326)) | (1 << (PostgreSQLParserParser.NCHAR - 326)) | (1 << (PostgreSQLParserParser.NCLOB - 326)) | (1 << (PostgreSQLParserParser.NESTING - 326)) | (1 << (PostgreSQLParserParser.NEW - 326)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParserParser.NEXT - 358)) | (1 << (PostgreSQLParserParser.NO - 358)) | (1 << (PostgreSQLParserParser.NONE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZE - 358)) | (1 << (PostgreSQLParserParser.NORMALIZED - 358)) | (1 << (PostgreSQLParserParser.NOTHING - 358)) | (1 << (PostgreSQLParserParser.NOTIFY - 358)) | (1 << (PostgreSQLParserParser.NOWAIT - 358)) | (1 << (PostgreSQLParserParser.NULLABLE - 358)) | (1 << (PostgreSQLParserParser.NULLIF - 358)) | (1 << (PostgreSQLParserParser.NULLS - 358)) | (1 << (PostgreSQLParserParser.NUMBER - 358)) | (1 << (PostgreSQLParserParser.NUMERIC - 358)) | (1 << (PostgreSQLParserParser.OBJECT - 358)) | (1 << (PostgreSQLParserParser.OCTET_LENGTH - 358)) | (1 << (PostgreSQLParserParser.OCTETS - 358)) | (1 << (PostgreSQLParserParser.OF - 358)) | (1 << (PostgreSQLParserParser.OFF - 358)) | (1 << (PostgreSQLParserParser.OIDS - 358)) | (1 << (PostgreSQLParserParser.OLD - 358)) | (1 << (PostgreSQLParserParser.OPEN - 358)) | (1 << (PostgreSQLParserParser.OPERATOR - 358)) | (1 << (PostgreSQLParserParser.OPTION - 358)))) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & ((1 << (PostgreSQLParserParser.OPTIONS - 390)) | (1 << (PostgreSQLParserParser.ORDERING - 390)) | (1 << (PostgreSQLParserParser.ORDINALITY - 390)) | (1 << (PostgreSQLParserParser.OTHERS - 390)) | (1 << (PostgreSQLParserParser.OUT - 390)) | (1 << (PostgreSQLParserParser.OUTPUT - 390)) | (1 << (PostgreSQLParserParser.OVER - 390)) | (1 << (PostgreSQLParserParser.OVERLAY - 390)) | (1 << (PostgreSQLParserParser.OVERRIDING - 390)) | (1 << (PostgreSQLParserParser.OWNER - 390)) | (1 << (PostgreSQLParserParser.PAD - 390)) | (1 << (PostgreSQLParserParser.PARAMETER - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_MODE - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME - 390)) | (1 << (PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA - 390)) | (1 << (PostgreSQLParserParser.PARTIAL - 390)) | (1 << (PostgreSQLParserParser.PARTITION - 390)) | (1 << (PostgreSQLParserParser.PASCAL - 390)) | (1 << (PostgreSQLParserParser.PASSWORD - 390)) | (1 << (PostgreSQLParserParser.PATH - 390)) | (1 << (PostgreSQLParserParser.PERCENT_RANK - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_CONT - 390)) | (1 << (PostgreSQLParserParser.PERCENTILE_DISC - 390)))) !== 0) || ((((_la - 423)) & ~0x1F) === 0 && ((1 << (_la - 423)) & ((1 << (PostgreSQLParserParser.PLAIN - 423)) | (1 << (PostgreSQLParserParser.PLI - 423)) | (1 << (PostgreSQLParserParser.POSITION - 423)) | (1 << (PostgreSQLParserParser.POWER - 423)) | (1 << (PostgreSQLParserParser.PRECEDING - 423)) | (1 << (PostgreSQLParserParser.PRECISION - 423)) | (1 << (PostgreSQLParserParser.PREPARE - 423)) | (1 << (PostgreSQLParserParser.PRESERVE - 423)) | (1 << (PostgreSQLParserParser.PRIOR - 423)) | (1 << (PostgreSQLParserParser.PRIVILEGES - 423)) | (1 << (PostgreSQLParserParser.PROCEDURAL - 423)) | (1 << (PostgreSQLParserParser.PROCEDURE - 423)) | (1 << (PostgreSQLParserParser.PUBLIC - 423)) | (1 << (PostgreSQLParserParser.QUOTE - 423)) | (1 << (PostgreSQLParserParser.RANGE - 423)) | (1 << (PostgreSQLParserParser.RANK - 423)) | (1 << (PostgreSQLParserParser.READ - 423)) | (1 << (PostgreSQLParserParser.READS - 423)) | (1 << (PostgreSQLParserParser.REAL - 423)) | (1 << (PostgreSQLParserParser.RECHECK - 423)) | (1 << (PostgreSQLParserParser.RECURSIVE - 423)) | (1 << (PostgreSQLParserParser.REF - 423)) | (1 << (PostgreSQLParserParser.REFERENCING - 423)))) !== 0) || ((((_la - 455)) & ~0x1F) === 0 && ((1 << (_la - 455)) & ((1 << (PostgreSQLParserParser.REFRESH - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGX - 455)) | (1 << (PostgreSQLParserParser.REGR_AVGY - 455)) | (1 << (PostgreSQLParserParser.REGR_COUNT - 455)) | (1 << (PostgreSQLParserParser.REGR_INTERCEPT - 455)) | (1 << (PostgreSQLParserParser.REGR_SLOPE - 455)) | (1 << (PostgreSQLParserParser.REGR_SXX - 455)) | (1 << (PostgreSQLParserParser.REGR_SXY - 455)) | (1 << (PostgreSQLParserParser.REGR_SYY - 455)) | (1 << (PostgreSQLParserParser.REINDEX - 455)) | (1 << (PostgreSQLParserParser.RELATIVE - 455)) | (1 << (PostgreSQLParserParser.RELEASE - 455)) | (1 << (PostgreSQLParserParser.RENAME - 455)) | (1 << (PostgreSQLParserParser.REPEATABLE - 455)) | (1 << (PostgreSQLParserParser.REPLACE - 455)) | (1 << (PostgreSQLParserParser.RESET - 455)) | (1 << (PostgreSQLParserParser.RESTART - 455)) | (1 << (PostgreSQLParserParser.RESTRICT - 455)) | (1 << (PostgreSQLParserParser.RESULT - 455)) | (1 << (PostgreSQLParserParser.RETURN - 455)) | (1 << (PostgreSQLParserParser.RETURNED_CARDINALITY - 455)) | (1 << (PostgreSQLParserParser.RETURNED_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_OCTET_LENGTH - 455)) | (1 << (PostgreSQLParserParser.RETURNED_SQLSTATE - 455)) | (1 << (PostgreSQLParserParser.RETURNS - 455)) | (1 << (PostgreSQLParserParser.REVOKE - 455)) | (1 << (PostgreSQLParserParser.RIGHT - 455)) | (1 << (PostgreSQLParserParser.ROLE - 455)) | (1 << (PostgreSQLParserParser.ROLLBACK - 455)))) !== 0) || ((((_la - 487)) & ~0x1F) === 0 && ((1 << (_la - 487)) & ((1 << (PostgreSQLParserParser.ROLLUP - 487)) | (1 << (PostgreSQLParserParser.ROUTINE - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_NAME - 487)) | (1 << (PostgreSQLParserParser.ROUTINE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.ROW - 487)) | (1 << (PostgreSQLParserParser.ROW_COUNT - 487)) | (1 << (PostgreSQLParserParser.ROW_NUMBER - 487)) | (1 << (PostgreSQLParserParser.ROWS - 487)) | (1 << (PostgreSQLParserParser.RULE - 487)) | (1 << (PostgreSQLParserParser.SAVEPOINT - 487)) | (1 << (PostgreSQLParserParser.SCALE - 487)) | (1 << (PostgreSQLParserParser.SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCHEMA_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE - 487)) | (1 << (PostgreSQLParserParser.SCOPE_CATALOG - 487)) | (1 << (PostgreSQLParserParser.SCOPE_NAME - 487)) | (1 << (PostgreSQLParserParser.SCOPE_SCHEMA - 487)) | (1 << (PostgreSQLParserParser.SCROLL - 487)) | (1 << (PostgreSQLParserParser.SEARCH - 487)) | (1 << (PostgreSQLParserParser.SECOND - 487)) | (1 << (PostgreSQLParserParser.SECTION - 487)) | (1 << (PostgreSQLParserParser.SECURITY - 487)) | (1 << (PostgreSQLParserParser.SELF - 487)) | (1 << (PostgreSQLParserParser.SENSITIVE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCE - 487)) | (1 << (PostgreSQLParserParser.SEQUENCES - 487)) | (1 << (PostgreSQLParserParser.SERIALIZABLE - 487)) | (1 << (PostgreSQLParserParser.SERVER_NAME - 487)) | (1 << (PostgreSQLParserParser.SESSION - 487)))) !== 0) || ((((_la - 519)) & ~0x1F) === 0 && ((1 << (_la - 519)) & ((1 << (PostgreSQLParserParser.SET - 519)) | (1 << (PostgreSQLParserParser.SETOF - 519)) | (1 << (PostgreSQLParserParser.SETS - 519)) | (1 << (PostgreSQLParserParser.SHARE - 519)) | (1 << (PostgreSQLParserParser.SHOW - 519)) | (1 << (PostgreSQLParserParser.SIMPLE - 519)) | (1 << (PostgreSQLParserParser.SIZE - 519)) | (1 << (PostgreSQLParserParser.SMALLINT - 519)) | (1 << (PostgreSQLParserParser.SOME - 519)) | (1 << (PostgreSQLParserParser.SOURCE - 519)) | (1 << (PostgreSQLParserParser.SPACE - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC - 519)) | (1 << (PostgreSQLParserParser.SPECIFIC_NAME - 519)) | (1 << (PostgreSQLParserParser.SPECIFICTYPE - 519)) | (1 << (PostgreSQLParserParser.SQL - 519)) | (1 << (PostgreSQLParserParser.SQLCODE - 519)) | (1 << (PostgreSQLParserParser.SQLERROR - 519)) | (1 << (PostgreSQLParserParser.SQLEXCEPTION - 519)) | (1 << (PostgreSQLParserParser.SQLSTATE - 519)) | (1 << (PostgreSQLParserParser.SQLWARNING - 519)) | (1 << (PostgreSQLParserParser.SQRT - 519)) | (1 << (PostgreSQLParserParser.STABLE - 519)) | (1 << (PostgreSQLParserParser.START - 519)) | (1 << (PostgreSQLParserParser.STATE - 519)) | (1 << (PostgreSQLParserParser.STATEMENT - 519)) | (1 << (PostgreSQLParserParser.STATIC - 519)) | (1 << (PostgreSQLParserParser.STATISTICS - 519)) | (1 << (PostgreSQLParserParser.STDDEV_POP - 519)) | (1 << (PostgreSQLParserParser.STDDEV_SAMP - 519)))) !== 0) || ((((_la - 551)) & ~0x1F) === 0 && ((1 << (_la - 551)) & ((1 << (PostgreSQLParserParser.STDIN - 551)) | (1 << (PostgreSQLParserParser.STDOUT - 551)) | (1 << (PostgreSQLParserParser.STORAGE - 551)) | (1 << (PostgreSQLParserParser.STRICT - 551)) | (1 << (PostgreSQLParserParser.STRUCTURE - 551)) | (1 << (PostgreSQLParserParser.STYLE - 551)) | (1 << (PostgreSQLParserParser.SUBCLASS_ORIGIN - 551)) | (1 << (PostgreSQLParserParser.SUBMULTISET - 551)) | (1 << (PostgreSQLParserParser.SUBSTRING - 551)) | (1 << (PostgreSQLParserParser.SUM - 551)) | (1 << (PostgreSQLParserParser.SYSID - 551)) | (1 << (PostgreSQLParserParser.SYSTEM - 551)) | (1 << (PostgreSQLParserParser.SYSTEM_USER - 551)) | (1 << (PostgreSQLParserParser.TABLE_NAME - 551)) | (1 << (PostgreSQLParserParser.TABLESPACE - 551)) | (1 << (PostgreSQLParserParser.TEMP - 551)) | (1 << (PostgreSQLParserParser.TEMPLATE - 551)) | (1 << (PostgreSQLParserParser.TEMPORARY - 551)) | (1 << (PostgreSQLParserParser.TIES - 551)) | (1 << (PostgreSQLParserParser.TIME - 551)) | (1 << (PostgreSQLParserParser.TIMESTAMP - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_HOUR - 551)) | (1 << (PostgreSQLParserParser.TIMEZONE_MINUTE - 551)))) !== 0) || ((((_la - 585)) & ~0x1F) === 0 && ((1 << (_la - 585)) & ((1 << (PostgreSQLParserParser.TOP_LEVEL_COUNT - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION - 585)) | (1 << (PostgreSQLParserParser.TRANSACTION_ACTIVE - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_COMMITTED - 585)) | (1 << (PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK - 585)) | (1 << (PostgreSQLParserParser.TRANSFORM - 585)) | (1 << (PostgreSQLParserParser.TRANSFORMS - 585)) | (1 << (PostgreSQLParserParser.TRANSLATE - 585)) | (1 << (PostgreSQLParserParser.TRANSLATION - 585)) | (1 << (PostgreSQLParserParser.TREAT - 585)) | (1 << (PostgreSQLParserParser.TRIGGER - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_CATALOG - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_NAME - 585)) | (1 << (PostgreSQLParserParser.TRIGGER_SCHEMA - 585)) | (1 << (PostgreSQLParserParser.TRIM - 585)) | (1 << (PostgreSQLParserParser.TRUE - 585)) | (1 << (PostgreSQLParserParser.TRUNCATE - 585)) | (1 << (PostgreSQLParserParser.TRUSTED - 585)) | (1 << (PostgreSQLParserParser.TYPE - 585)) | (1 << (PostgreSQLParserParser.UESCAPE - 585)) | (1 << (PostgreSQLParserParser.UNBOUNDED - 585)) | (1 << (PostgreSQLParserParser.UNCOMMITTED - 585)) | (1 << (PostgreSQLParserParser.UNDER - 585)) | (1 << (PostgreSQLParserParser.UNENCRYPTED - 585)) | (1 << (PostgreSQLParserParser.UNKNOWN - 585)) | (1 << (PostgreSQLParserParser.UNLISTEN - 585)) | (1 << (PostgreSQLParserParser.UNNAMED - 585)) | (1 << (PostgreSQLParserParser.UNNEST - 585)) | (1 << (PostgreSQLParserParser.UNTIL - 585)))) !== 0) || ((((_la - 617)) & ~0x1F) === 0 && ((1 << (_la - 617)) & ((1 << (PostgreSQLParserParser.UPDATE - 617)) | (1 << (PostgreSQLParserParser.UPPER - 617)) | (1 << (PostgreSQLParserParser.USAGE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_CODE - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_NAME - 617)) | (1 << (PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA - 617)) | (1 << (PostgreSQLParserParser.VACUUM - 617)) | (1 << (PostgreSQLParserParser.VALID - 617)) | (1 << (PostgreSQLParserParser.VALIDATOR - 617)) | (1 << (PostgreSQLParserParser.VALUE - 617)) | (1 << (PostgreSQLParserParser.VALUES - 617)) | (1 << (PostgreSQLParserParser.VAR_POP - 617)) | (1 << (PostgreSQLParserParser.VAR_SAMP - 617)) | (1 << (PostgreSQLParserParser.VARCHAR - 617)) | (1 << (PostgreSQLParserParser.VARYING - 617)) | (1 << (PostgreSQLParserParser.VIEW - 617)) | (1 << (PostgreSQLParserParser.VOLATILE - 617)) | (1 << (PostgreSQLParserParser.WHENEVER - 617)) | (1 << (PostgreSQLParserParser.WIDTH_BUCKET - 617)) | (1 << (PostgreSQLParserParser.WITHIN - 617)) | (1 << (PostgreSQLParserParser.WITHOUT - 617)))) !== 0) || ((((_la - 649)) & ~0x1F) === 0 && ((1 << (_la - 649)) & ((1 << (PostgreSQLParserParser.WORK - 649)) | (1 << (PostgreSQLParserParser.WRITE - 649)) | (1 << (PostgreSQLParserParser.YEAR - 649)) | (1 << (PostgreSQLParserParser.ZONE - 649)))) !== 0) || _la === PostgreSQLParserParser.TEXT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public identifier(): IdentifierContext;
	public identifier(_p: number): IdentifierContext;
	// @RuleVersion(0)
	public identifier(_p?: number): IdentifierContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, _parentState);
		let _prevctx: IdentifierContext = _localctx;
		let _startState: number = 512;
		this.enterRecursionRule(_localctx, 512, PostgreSQLParserParser.RULE_identifier, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5606;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 689, this._ctx) ) {
			case 1:
				{
				this.state = 5601;
				this.non_reserved_keyword();
				}
				break;

			case 2:
				{
				this.state = 5602;
				this.match(PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL);
				}
				break;

			case 3:
				{
				this.state = 5603;
				this.match(PostgreSQLParserParser.IDENTIFIER);
				}
				break;

			case 4:
				{
				this.state = 5604;
				this.type_name();
				}
				break;

			case 5:
				{
				this.state = 5605;
				this.match(PostgreSQLParserParser.IDENTIFIER_UNICODE);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 5613;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 690, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new IdentifierContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParserParser.RULE_identifier);
					this.state = 5608;
					if (!(this.precpred(this._ctx, 3))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
					}
					this.state = 5609;
					this.match(PostgreSQLParserParser.DOT);
					this.state = 5610;
					this.identifier(4);
					}
					}
				}
				this.state = 5615;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 690, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public todo_fill_in(): Todo_fill_inContext {
		let _localctx: Todo_fill_inContext = new Todo_fill_inContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, PostgreSQLParserParser.RULE_todo_fill_in);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5616;
			this.matchWildcard();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public todo_implement(): Todo_implementContext {
		let _localctx: Todo_implementContext = new Todo_implementContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, PostgreSQLParserParser.RULE_todo_implement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5618;
			this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public correlation_name(): Correlation_nameContext {
		let _localctx: Correlation_nameContext = new Correlation_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, PostgreSQLParserParser.RULE_correlation_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5620;
			this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_name(): Column_nameContext {
		let _localctx: Column_nameContext = new Column_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, PostgreSQLParserParser.RULE_column_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5622;
			this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alias(): AliasContext {
		let _localctx: AliasContext = new AliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, PostgreSQLParserParser.RULE_alias);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5624;
			this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_alias(): Column_aliasContext {
		let _localctx: Column_aliasContext = new Column_aliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, PostgreSQLParserParser.RULE_column_alias);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5626;
			this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public column_definition(): Column_definitionContext {
		let _localctx: Column_definitionContext = new Column_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, PostgreSQLParserParser.RULE_column_definition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5628;
			this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_name(): Window_nameContext {
		let _localctx: Window_nameContext = new Window_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, PostgreSQLParserParser.RULE_window_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5630;
			this.identifier(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 216:
			return this.expr_sempred(_localctx as ExprContext, predIndex);

		case 217:
			return this.bool_expr_sempred(_localctx as Bool_exprContext, predIndex);

		case 241:
			return this.from_item_sempred(_localctx as From_itemContext, predIndex);

		case 245:
			return this.predicate_sempred(_localctx as PredicateContext, predIndex);

		case 256:
			return this.identifier_sempred(_localctx as IdentifierContext, predIndex);
		}
		return true;
	}
	private expr_sempred(_localctx: ExprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 27);

		case 1:
			return this.precpred(this._ctx, 26);

		case 2:
			return this.precpred(this._ctx, 25);

		case 3:
			return this.precpred(this._ctx, 24);

		case 4:
			return this.precpred(this._ctx, 23);

		case 5:
			return this.precpred(this._ctx, 22);

		case 6:
			return this.precpred(this._ctx, 21);

		case 7:
			return this.precpred(this._ctx, 20);

		case 8:
			return this.precpred(this._ctx, 18);

		case 9:
			return this.precpred(this._ctx, 33);

		case 10:
			return this.precpred(this._ctx, 28);

		case 11:
			return this.precpred(this._ctx, 19);

		case 12:
			return this.precpred(this._ctx, 11);

		case 13:
			return this.precpred(this._ctx, 10);

		case 14:
			return this.precpred(this._ctx, 8);

		case 15:
			return this.precpred(this._ctx, 7);

		case 16:
			return this.precpred(this._ctx, 4);
		}
		return true;
	}
	private bool_expr_sempred(_localctx: Bool_exprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 17:
			return this.precpred(this._ctx, 2);

		case 18:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private from_item_sempred(_localctx: From_itemContext, predIndex: number): boolean {
		switch (predIndex) {
		case 19:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private predicate_sempred(_localctx: PredicateContext, predIndex: number): boolean {
		switch (predIndex) {
		case 20:
			return this.precpred(this._ctx, 3);

		case 21:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private identifier_sempred(_localctx: IdentifierContext, predIndex: number): boolean {
		switch (predIndex) {
		case 22:
			return this.precpred(this._ctx, 3);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 11;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0345\u1603\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x03" +
		"\x02\x03\x02\x03\x02\x06\x02\u0218\n\x02\r\x02\x0E\x02\u0219\x03\x02\x03" +
		"\x02\x05\x02\u021E\n\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x05\x03\u0256\n\x03\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x05\x05\u0282\n\x05\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06" +
		"\u02A2\n\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x05\x07\u02BF\n\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\b\x05\b\u02D6\n\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x03\v\x05\v\u02E4\n\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x05\v\u02F4" +
		"\n\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x05\v\u02FD\n\v\x03\v\x03" +
		"\v\x05\v\u0301\n\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x05\v\u0328\n\v\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\u0336\n\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\u0341\n\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\u034B\n\f\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x05\r\u0353\n\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x05\r\u035C\n\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x05\x0F\u0362" +
		"\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u0368\n\x0F\x03\x0F\x05" +
		"\x0F\u036B\n\x0F\x03\x0F\x03\x0F\x05\x0F\u036F\n\x0F\x03\x0F\x03\x0F\x05" +
		"\x0F\u0373\n\x0F\x03\x0F\x03\x0F\x05\x0F\u0377\n\x0F\x03\x0F\x03\x0F\x05" +
		"\x0F\u037B\n\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u0380\n\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x0F\x05\x0F\u0386\n\x0F\x03\x0F\x03\x0F\x05\x0F\u038A" +
		"\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F" +
		"\u0393\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u039B" +
		"\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F" +
		"\u03A4\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05" +
		"\x0F\u03AD\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x05\x0F\u03B7\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x0F\x05\x0F\u03C1\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u03CA\n\x0F\x03\x0F\x03\x0F\x03\x0F\x05" +
		"\x0F\u03CF\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u03D5\n\x0F\x03" +
		"\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u03DE\n\x0F" +
		"\x03\x0F\x03\x0F\x05\x0F\u03E2\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x05\x0F\u03E9\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F" +
		"\u03F0\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u040A" +
		"\n\x0F\x05\x0F\u040C\n\x0F\x03\x10\x03\x10\x03\x10\x07\x10\u0411\n\x10" +
		"\f\x10\x0E\x10\u0414\v\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05" +
		"\x11\u041B\n\x11\x03\x11\x05\x11\u041E\n\x11\x03\x11\x03\x11\x05\x11\u0422" +
		"\n\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11" +
		"\u042B\n\x11\x03\x11\x05\x11\u042E\n\x11\x03\x11\x03\x11\x05\x11\u0432" +
		"\n\x11\x03\x11\x03\x11\x05\x11\u0436\n\x11\x03\x11\x03\x11\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\u0441\n\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x05\x11\u044D\n\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\u0454" +
		"\n\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13\u046D\n\x13\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0473\n\x14\x03\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u047E\n\x14\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u0491" +
		"\n\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x05\x14\u049D\n\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x05\x14\u04AD\n\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\u04B3" +
		"\n\x14\x05\x14\u04B5\n\x14\x03\x15\x03\x15\x05\x15\u04B9\n\x15\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\u04C3" +
		"\n\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15" +
		"\u04CC\n\x15\x05\x15\u04CE\n\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16" +
		"\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\u04D9\n\x16\x03\x17\x03\x17\x03" +
		"\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03" +
		"\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03" +
		"\x19\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19\u04F4\n\x19\x03\x19\x03\x19" +
		"\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19" +
		"\u0500\n\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03" +
		"\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03" +
		"\x1B\x03\x1B\x05\x1B\u0514\n\x1B\x03\x1B\x03\x1B\x05\x1B\u0518\n\x1B\x03" +
		"\x1B\x03\x1B\x03\x1B\x05\x1B\u051D\n\x1B\x05\x1B\u051F\n\x1B\x03\x1C\x03" +
		"\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u0527\n\x1C\x03\x1C\x03\x1C" +
		"\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u0531\n\x1C\x03" +
		"\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u053B" +
		"\n\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C" +
		"\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C" +
		"\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u0555" +
		"\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D" +
		"\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D" +
		"\x03\x1D\x05\x1D\u0569\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05" +
		"\x1D\u0570\n\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u0576\n\x1E\x03" +
		"\x1E\x06\x1E\u0579\n\x1E\r\x1E\x0E\x1E\u057A\x03\x1E\x03\x1E\x03\x1E\x03" +
		"\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u0588" +
		"\n\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u058D\n\x1E\x03\x1E\x03\x1E\x03" +
		"\x1E\x03\x1E\x03\x1E\x05\x1E\u0594\n\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E" +
		"\x05\x1E\u059A\n\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u059F\n\x1E\x03\x1E" +
		"\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E" +
		"\u05AA\n\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u05AF\n\x1E\x03\x1E\x03\x1E" +
		"\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u05B7\n\x1E\x03\x1E\x03\x1E\x03" +
		"\x1E\x05\x1E\u05BC\n\x1E\x03\x1E\x03\x1E\x05\x1E\u05C0\n\x1E\x03\x1F\x03" +
		"\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03 \x03" +
		" \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x05" +
		" \u05DA\n \x05 \u05DC\n \x03!\x03!\x03!\x03!\x05!\u05E2\n!\x03!\x03!\x03" +
		"\"\x05\"\u05E7\n\"\x03\"\x03\"\x05\"\u05EB\n\"\x03\"\x03\"\x05\"\u05EF" +
		"\n\"\x03\"\x03\"\x05\"\u05F3\n\"\x07\"\u05F5\n\"\f\"\x0E\"\u05F8\v\"\x03" +
		"#\x03#\x03#\x03#\x03#\x03#\x03#\x05#\u0601\n#\x03#\x03#\x03#\x03#\x03" +
		"#\x05#\u0608\n#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03" +
		"#\x03#\x03#\x03#\x05#\u0618\n#\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03" +
		"$\x05$\u0622\n$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03" +
		"$\x03$\x03$\x03$\x05$\u0632\n$\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03" +
		"%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x05%\u0645\n%\x03%\x03" +
		"%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x05%\u0651\n%\x03%\x03%\x03" +
		"%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03" +
		"%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03" +
		"%\x03%\x05%\u0673\n%\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03" +
		"&\x03&\x03&\x03&\x03&\x05&\u0683\n&\x03\'\x03\'\x03(\x03(\x03(\x03(\x03" +
		"(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x05(\u0696\n(\x03" +
		"(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03" +
		"(\x03(\x05(\u06A8\n(\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03" +
		")\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03" +
		")\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03" +
		")\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03" +
		")\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x05)\u06E5\n)\x03)\x03)\x03)\x03" +
		")\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03" +
		")\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x05)\u0705" +
		"\n)\x03*\x03*\x03+\x03+\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03" +
		",\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u071D\n,\x03-\x03-\x03" +
		"-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03" +
		"-\x03-\x03-\x05-\u0732\n-\x03.\x03.\x03/\x03/\x030\x030\x030\x030\x03" +
		"0\x030\x030\x030\x030\x030\x030\x030\x031\x031\x032\x032\x052\u0748\n" +
		"2\x032\x032\x032\x032\x032\x052\u074F\n2\x033\x033\x034\x034\x035\x03" +
		"5\x036\x036\x037\x037\x038\x038\x039\x039\x039\x039\x039\x039\x039\x03" +
		"9\x039\x039\x039\x039\x039\x039\x039\x039\x039\x039\x039\x039\x039\x03" +
		"9\x039\x039\x039\x039\x039\x039\x039\x039\x039\x039\x039\x039\x039\x03" +
		"9\x039\x039\x039\x059\u0784\n9\x03:\x03:\x03:\x03:\x03:\x03:\x03:\x03" +
		":\x03:\x03;\x03;\x03;\x03;\x03;\x05;\u0794\n;\x03;\x05;\u0797\n;\x03;" +
		"\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x05" +
		";\u07A7\n;\x03;\x03;\x03;\x03;\x05;\u07AD\n;\x03;\x03;\x05;\u07B1\n;\x03" +
		";\x03;\x03;\x03;\x05;\u07B7\n;\x03;\x03;\x03;\x03;\x05;\u07BD\n;\x03;" +
		"\x03;\x03;\x03;\x05;\u07C3\n;\x03;\x03;\x03;\x03;\x05;\u07C9\n;\x03;\x03" +
		";\x03;\x03;\x05;\u07CF\n;\x03;\x03;\x03;\x03;\x05;\u07D5\n;\x03;\x03;" +
		"\x03;\x03;\x05;\u07DB\n;\x03;\x03;\x03;\x03;\x05;\u07E1\n;\x03;\x03;\x03" +
		";\x03;\x05;\u07E7\n;\x03;\x03;\x05;\u07EB\n;\x03;\x03;\x03;\x03;\x05;" +
		"\u07F1\n;\x03;\x03;\x03;\x03;\x05;\u07F7\n;\x03;\x03;\x03;\x03;\x05;\u07FD" +
		"\n;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x05;\u0806\n;\x03;\x05;\u0809\n" +
		";\x03;\x05;\u080C\n;\x03;\x03;\x03;\x05;\u0811\n;\x03;\x05;\u0814\n;\x03" +
		";\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x05" +
		";\u0824\n;\x03;\x03;\x03;\x03;\x05;\u082A\n;\x03;\x03;\x05;\u082E\n;\x03" +
		";\x03;\x03;\x03;\x05;\u0834\n;\x03;\x03;\x03;\x03;\x05;\u083A\n;\x03;" +
		"\x03;\x05;\u083E\n;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;" +
		"\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x05;\u0855\n;" +
		"\x03;\x03;\x03;\x03;\x05;\u085B\n;\x03;\x03;\x05;\u085F\n;\x03;\x03;\x03" +
		";\x03;\x05;\u0865\n;\x03;\x03;\x03;\x03;\x05;\u086B\n;\x03;\x03;\x03;" +
		"\x03;\x05;\u0871\n;\x03;\x03;\x03;\x03;\x05;\u0877\n;\x03;\x03;\x03;\x03" +
		";\x05;\u087D\n;\x03;\x03;\x03;\x03;\x05;\u0883\n;\x03;\x03;\x03;\x03;" +
		"\x05;\u0889\n;\x03;\x03;\x03;\x03;\x05;\u088F\n;\x03;\x03;\x03;\x03;\x05" +
		";\u0895\n;\x03;\x03;\x05;\u0899\n;\x03;\x03;\x03;\x03;\x05;\u089F\n;\x03" +
		";\x03;\x03;\x03;\x05;\u08A5\n;\x03;\x03;\x05;\u08A9\n;\x03<\x03<\x03<" +
		"\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x05<\u08B9\n<" +
		"\x03<\x03<\x03<\x03<\x05<\u08BF\n<\x03<\x03<\x03<\x03<\x05<\u08C5\n<\x03" +
		"=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03" +
		"=\x03=\x03=\x03=\x05=\u08D9\n=\x03>\x03>\x03>\x07>\u08DE\n>\f>\x0E>\u08E1" +
		"\v>\x03?\x03?\x03?\x03?\x03?\x05?\u08E8\n?\x03?\x03?\x03?\x03?\x03?\x03" +
		"?\x03?\x03?\x03?\x03?\x05?\u08F4\n?\x03?\x03?\x03?\x03?\x05?\u08FA\n?" +
		"\x03@\x03@\x05@\u08FE\n@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@\x03@" +
		"\x03A\x03A\x03A\x03A\x05A\u090D\nA\x03A\x03A\x03A\x05A\u0912\nA\x03A\x03" +
		"A\x03A\x05A\u0917\nA\x03A\x03A\x03A\x05A\u091C\nA\x03A\x03A\x03A\x05A" +
		"\u0921\nA\x03A\x03A\x03A\x05A\u0926\nA\x03A\x03A\x03A\x05A\u092B\nA\x03" +
		"A\x03A\x03A\x05A\u0930\nA\x03A\x03A\x03A\x03A\x05A\u0936\nA\x03A\x03A" +
		"\x03A\x05A\u093B\nA\x03B\x03B\x05B\u093F\nB\x03B\x03B\x03B\x03B\x03B\x03" +
		"B\x03B\x03B\x05B\u0949\nB\x03C\x03C\x03C\x03C\x05C\u094F\nC\x03C\x03C" +
		"\x03C\x03C\x03C\x03C\x07C\u0957\nC\fC\x0EC\u095A\vC\x03D\x03D\x03D\x03" +
		"D\x03D\x03D";
	private static readonly _serializedATNSegment1: string =
		"\x07D\u0962\nD\fD\x0ED\u0965\vD\x03D\x03D\x03D\x07D\u096A\nD\fD\x0ED\u096D" +
		"\vD\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x05E\u0977\nE\x03E\x03E\x03" +
		"E\x03E\x03E\x03E\x03F\x03F\x03F\x03F\x07F\u0983\nF\fF\x0EF\u0986\vF\x03" +
		"G\x03G\x03G\x03G\x03G\x03G\x03G\x03G\x03G\x07G\u0991\nG\fG\x0EG\u0994" +
		"\vG\x03G\x03G\x03G\x03G\x05G\u099A\nG\x03G\x03G\x03G\x03G\x03G\x05G\u09A1" +
		"\nG\x03H\x03H\x03H\x03H\x03H\x03H\x05H\u09A9\nH\x03H\x03H\x03H\x03H\x03" +
		"H\x03H\x03H\x03H\x03H\x05H\u09B4\nH\x03H\x03H\x05H\u09B8\nH\x03H\x03H" +
		"\x03H\x05H\u09BD\nH\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x05H\u09C6\nH\x03" +
		"I\x03I\x03I\x05I\u09CB\nI\x03I\x03I\x03I\x03J\x03J\x03J\x03J\x05J\u09D4" +
		"\nJ\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x05" +
		"J\u09E3\nJ\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03" +
		"J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x06J\u09F8\nJ\rJ\x0EJ\u09F9\x05J" +
		"\u09FC\nJ\x03K\x03K\x05K\u0A00\nK\x03K\x03K\x05K\u0A04\nK\x03K\x03K\x03" +
		"K\x05K\u0A09\nK\x03K\x05K\u0A0C\nK\x03K\x03K\x03K\x03K\x05K\u0A12\nK\x03" +
		"K\x03K\x05K\u0A16\nK\x03K\x03K\x05K\u0A1A\nK\x03L\x03L\x03L\x05L\u0A1F" +
		"\nL\x03L\x05L\u0A22\nL\x03L\x03L\x03L\x03L\x03L\x05L\u0A29\nL\x03L\x05" +
		"L\u0A2C\nL\x03L\x05L\u0A2F\nL\x03L\x03L\x03L\x03L\x03L\x03L\x05L\u0A37" +
		"\nL\x03L\x03L\x05L\u0A3B\nL\x05L\u0A3D\nL\x03M\x03M\x03M\x03M\x03M\x03" +
		"M\x05M\u0A45\nM\x03M\x03M\x03M\x03M\x03M\x05M\u0A4C\nM\x03M\x05M\u0A4F" +
		"\nM\x03M\x03M\x05M\u0A53\nM\x03M\x03M\x03M\x03M\x05M\u0A59\nM\x03M\x05" +
		"M\u0A5C\nM\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x05" +
		"N\u0A69\nN\x03N\x03N\x03N\x03N\x05N\u0A6F\nN\x03N\x03N\x03N\x03N\x05N" +
		"\u0A75\nN\x03N\x03N\x03N\x03N\x05N\u0A7B\nN\x03N\x03N\x03N\x03N\x05N\u0A81" +
		"\nN\x03N\x03N\x03N\x03N\x05N\u0A87\nN\x03N\x03N\x05N\u0A8B\nN\x03N\x03" +
		"N\x05N\u0A8F\nN\x03N\x03N\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03" +
		"O\x05O\u0A9C\nO\x03O\x03O\x03O\x03O\x03O\x03O\x05O\u0AA4\nO\x03O\x03O" +
		"\x05O\u0AA8\nO\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x05O\u0AB1\nO\x03P\x03" +
		"P\x03P\x03P\x03P\x05P\u0AB8\nP\x03P\x03P\x03P\x03P\x03P\x03P\x03P\x05" +
		"P\u0AC1\nP\x03P\x03P\x03P\x03P\x07P\u0AC7\nP\fP\x0EP\u0ACA\vP\x03Q\x03" +
		"Q\x03Q\x03Q\x03Q\x03Q\x03Q\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x05R\u0ADA" +
		"\nR\x03R\x03R\x05R\u0ADE\nR\x03R\x03R\x03R\x03R\x03R\x05R\u0AE5\nR\x03" +
		"R\x03R\x03R\x03R\x03R\x03R\x05R\u0AED\nR\x03S\x03S\x03S\x03S\x05S\u0AF3" +
		"\nS\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03" +
		"S\x03S\x03S\x03S\x03S\x05S\u0B07\nS\x03S\x03S\x03S\x03S\x03S\x03S\x03" +
		"S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x06S\u0B1C" +
		"\nS\rS\x0ES\u0B1D\x05S\u0B20\nS\x03T\x03T\x03U\x03U\x03U\x05U\u0B27\n" +
		"U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x05U\u0B32\nU\x03U\x03" +
		"U\x05U\u0B36\nU\x03U\x03U\x05U\u0B3A\nU\x03V\x03V\x03V\x03V\x03V\x05V" +
		"\u0B41\nV\x03V\x05V\u0B44\nV\x03V\x03V\x03V\x03V\x03V\x05V\u0B4B\nV\x03" +
		"V\x03V\x03V\x03V\x03V\x03V\x03V\x03V\x05V\u0B55\nV\x03V\x03V\x03V\x03" +
		"V\x03V\x03V\x03V\x05V\u0B5E\nV\x03W\x03W\x05W\u0B62\nW\x03W\x03W\x03W" +
		"\x03W\x05W\u0B68\nW\x03W\x03W\x03W\x05W\u0B6D\nW\x03W\x05W\u0B70\nW\x03" +
		"W\x03W\x03W\x03W\x05W\u0B76\nW\x03W\x03W\x03W\x03W\x05W\u0B7C\nW\x03W" +
		"\x03W\x05W\u0B80\nW\x03W\x05W\u0B83\nW\x03W\x03W\x05W\u0B87\nW\x03W\x05" +
		"W\u0B8A\nW\x03W\x05W\u0B8D\nW\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x05W" +
		"\u0B96\nW\x05W\u0B98\nW\x03X\x03X\x03Y\x03Y\x03Z\x03Z\x03[\x03[\x03\\" +
		"\x03\\\x03]\x03]\x03^\x03^\x03_\x03_\x03`\x03`\x03a\x03a\x03b\x03b\x03" +
		"c\x03c\x03d\x03d\x03e\x03e\x03f\x03f\x03g\x03g\x03g\x05g\u0BBB\ng\x03" +
		"g\x05g\u0BBE\ng\x03g\x05g\u0BC1\ng\x03g\x03g\x03g\x03g\x03g\x03g\x05g" +
		"\u0BC9\ng\x03g\x03g\x03g\x03g\x03g\x05g\u0BD0\ng\x03g\x03g\x03g\x05g\u0BD5" +
		"\ng\x03g\x03g\x05g\u0BD9\ng\x03g\x03g\x05g\u0BDD\ng\x03h\x03h\x03i\x03" +
		"i\x03j\x05j\u0BE4\nj\x03j\x03j\x03j\x05j\u0BE9\nj\x03j\x03j\x05j\u0BED" +
		"\nj\x03j\x05j\u0BF0\nj\x03j\x05j\u0BF3\nj\x03j\x03j\x05j\u0BF7\nj\x03" +
		"j\x03j\x03j\x03j\x03j\x05j\u0BFE\nj\x03j\x05j\u0C01\nj\x03k\x03k\x03k" +
		"\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03" +
		"l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03" +
		"l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x05" +
		"l\u0C2F\nl\x03m\x03m\x03m\x03m\x03m\x05m\u0C36\nm\x03m\x03m\x05m\u0C3A" +
		"\nm\x03n\x03n\x03n\x03n\x05n\u0C40\nn\x03n\x03n\x03n\x03n\x03n\x03o\x03" +
		"o\x03o\x03o\x05o\u0C4B\no\x03o\x03o\x03o\x03o\x03o\x03o\x05o\u0C53\no" +
		"\x03p\x03p\x03p\x03p\x05p\u0C59\np\x03p\x03p\x05p\u0C5D\np\x03q\x03q\x03" +
		"q\x03q\x05q\u0C63\nq\x03q\x03q\x05q\u0C67\nq\x03r\x03r\x03r\x03r\x05r" +
		"\u0C6D\nr\x03r\x03r\x03s\x03s\x03s\x03s\x05s\u0C75\ns\x03s\x03s\x05s\u0C79" +
		"\ns\x03t\x03t\x03t\x03t\x03t\x05t\u0C80\nt\x03t\x03t\x05t\u0C84\nt\x03" +
		"u\x03u\x03u\x03u\x05u\u0C8A\nu\x03u\x03u\x05u\u0C8E\nu\x03v\x03v\x03v" +
		"\x03v\x03v\x03v\x05v\u0C96\nv\x03v\x03v\x05v\u0C9A\nv\x03w\x03w\x03w\x03" +
		"w\x03w\x05w\u0CA1\nw\x03w\x03w\x05w\u0CA5\nw\x03x\x03x\x03x\x03x\x05x" +
		"\u0CAB\nx\x03x\x03x\x05x\u0CAF\nx\x03y\x03y\x03y\x03y\x05y\u0CB5\ny\x03" +
		"y\x03y\x03z\x03z\x03z\x05z\u0CBC\nz\x03z\x03z\x05z\u0CC0\nz\x03z\x03z" +
		"\x05z\u0CC4\nz\x03{\x03{\x05{\u0CC8\n{\x03{\x03{\x03{\x05{\u0CCD\n{\x03" +
		"{\x03{\x05{\u0CD1\n{\x03|\x03|\x03|\x03|\x03|\x05|\u0CD8\n|\x03|\x03|" +
		"\x05|\u0CDC\n|\x03}\x03}\x03~\x03~\x03~\x03~\x03~\x05~\u0CE5\n~\x03~\x03" +
		"~\x03~\x03~\x05~\u0CEB\n~\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x05" +
		"\x7F\u0CF2\n\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x05\x7F\u0CF8\n\x7F\x03" +
		"\x80\x03\x80\x03\x80\x03\x80\x03\x80\x05\x80\u0CFF\n\x80\x03\x81\x03\x81" +
		"\x03\x81\x03\x81\x05\x81\u0D05\n\x81\x03\x81\x03\x81\x03\x81\x03\x81\x05" +
		"\x81\u0D0B\n\x81\x03\x82\x03\x82\x03\x82\x03\x82\x05\x82\u0D11\n\x82\x03" +
		"\x82\x03\x82\x05\x82\u0D15\n\x82\x03\x83\x03\x83\x03\x83\x03\x83\x05\x83" +
		"\u0D1B\n\x83\x03\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x84\x05\x84\u0D23" +
		"\n\x84\x03\x84\x03\x84\x03\x84\x03\x84\x05\x84\u0D29\n\x84\x03\x85\x03" +
		"\x85\x03\x85\x03\x85\x05\x85\u0D2F\n\x85\x03\x85\x03\x85\x05\x85\u0D33" +
		"\n\x85\x03\x86\x03\x86\x03\x86\x03\x86\x05\x86\u0D39\n\x86\x03\x86\x03" +
		"\x86\x05\x86\u0D3D\n\x86\x03\x87\x03\x87\x03\x87\x03\x87\x05\x87\u0D43" +
		"\n\x87\x03\x87\x03\x87\x05\x87\u0D47\n\x87\x03\x88\x03\x88\x03\x88\x03" +
		"\x88\x05\x88\u0D4D\n\x88\x03\x88\x03\x88\x03\x89\x03\x89\x03\x89\x03\x89" +
		"\x05\x89\u0D55\n\x89\x03\x89\x03\x89\x05\x89\u0D59\n\x89\x03\x8A\x03\x8A" +
		"\x03\x8A\x03\x8A\x05\x8A\u0D5F\n\x8A\x03\x8A\x03\x8A\x05\x8A\u0D63\n\x8A" +
		"\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x05\x8B\u0D69\n\x8B\x03\x8B\x03\x8B\x03" +
		"\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x05\x8C\u0D73\n\x8C\x03\x8C" +
		"\x03\x8C\x05\x8C\u0D77\n\x8C\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03" +
		"\x8D\x05\x8D\u0D7F\n\x8D\x03\x8D\x03\x8D\x05\x8D\u0D83\n\x8D\x03\x8E\x03" +
		"\x8E\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x05\x8E\u0D8B\n\x8E\x03\x8E\x03\x8E" +
		"\x05\x8E\u0D8F\n\x8E\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x8F\x05" +
		"\x8F\u0D97\n\x8F\x03\x8F\x03\x8F\x05\x8F\u0D9B\n\x8F\x03\x90\x03\x90\x03" +
		"\x90\x03\x90\x05\x90\u0DA1\n\x90\x03\x90\x03\x90\x03\x90\x03\x90\x03\x90" +
		"\x03\x90\x03\x91\x03\x91\x03\x91\x03\x91\x05\x91\u0DAD\n\x91\x03\x91\x03" +
		"\x91\x03\x91\x03\x91\x05\x91\u0DB3\n\x91\x03\x92\x03\x92\x03\x92\x03\x92" +
		"\x05\x92\u0DB9\n\x92\x03\x92\x03\x92\x05\x92\u0DBD\n\x92\x03\x93\x03\x93" +
		"\x03\x93\x03\x93\x05\x93\u0DC3\n\x93\x03\x93\x03\x93\x03\x94\x03\x94\x03" +
		"\x94\x03\x94\x03\x94\x05\x94\u0DCC\n\x94\x03\x94\x03\x94\x03\x94\x03\x94" +
		"\x03\x94\x03\x94\x05\x94\u0DD4\n\x94\x03\x94\x03\x94\x03\x94\x03\x95\x03" +
		"\x95\x03\x95\x03\x95\x05\x95\u0DDD\n\x95\x03\x95\x03\x95\x05\x95\u0DE1" +
		"\n\x95\x03\x96\x03\x96\x03\x96\x05\x96\u0DE6\n\x96\x03\x97\x03\x97\x05" +
		"\x97\u0DEA\n\x97\x03\x97\x05\x97\u0DED\n\x97\x03\x97\x03\x97\x03\x97\x03" +
		"\x97\x03\x97\x07\x97\u0DF4\n\x97\f\x97\x0E\x97\u0DF7\v\x97\x03\x97\x03" +
		"\x97\x05\x97\u0DFB\n\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97" +
		"\x03\x97\x03\x97\x03\x97\x05\x97\u0E06\n\x97\x03\x98\x03\x98\x03\x99\x03" +
		"\x99\x03\x9A\x03\x9A\x03\x9B\x05\x9B\u0E0F\n\x9B\x03\x9B\x03\x9B\x03\x9B" +
		"\x03\x9B\x03\x9B\x05\x9B\u0E16\n\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x05" +
		"\x9B\u0E1C\n\x9B\x03\x9B\x03\x9B\x05\x9B\u0E20\n\x9B\x03\x9B\x05\x9B\u0E23" +
		"\n\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x05\x9B\u0E29\n\x9B\x03\x9B\x03" +
		"\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x05\x9B\u0E31\n\x9B\x03\x9B\x03\x9B" +
		"\x03\x9B\x05\x9B\u0E36\n\x9B\x03\x9B\x05\x9B\u0E39\n\x9B\x03\x9B\x03\x9B" +
		"\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x05\x9B\u0E42\n\x9B\x05\x9B\u0E44" +
		"\n\x9B\x05\x9B\u0E46\n\x9B\x03\x9B\x05\x9B\u0E49\n\x9B\x03\x9C\x03\x9C" +
		"\x03\x9C\x03\x9D\x03\x9D\x03\x9E\x03\x9E\x05\x9E\u0E52\n\x9E\x03\x9E\x05" +
		"\x9E\u0E55\n\x9E\x03\x9E\x03\x9E\x05\x9E\u0E59\n\x9E\x03\x9E\x03\x9E\x03" +
		"\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03" +
		"\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x05\x9E\u0E6C\n\x9E\x03\x9E" +
		"\x05\x9E\u0E6F\n\x9E\x03\x9E\x05\x9E\u0E72\n\x9E\x03\x9F\x03\x9F\x03\x9F" +
		"\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F\x03\x9F" +
		"\x03\x9F\x05\x9F\u0E81\n\x9F\x03\x9F\x03\x9F\x05\x9F\u0E85\n\x9F\x05\x9F" +
		"\u0E87\n\x9F\x03\x9F\x05\x9F\u0E8A\n\x9F\x05\x9F\u0E8C\n\x9F\x03\x9F\x03" +
		"\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x05\xA0\u0E94\n\xA0\x03\xA1\x03\xA1" +
		"\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x05\xA1\u0E9C\n\xA1\x03\xA1\x03\xA1\x03" +
		"\xA1\x03\xA1\x03\xA1\x03\xA1\x05\xA1\u0EA4\n\xA1\x03\xA2\x03\xA2\x03\xA2" +
		"\x03\xA2\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x05\xA3\u0EB0" +
		"\n\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x05\xA3\u0EB6\n\xA3\x07\xA3\u0EB8" +
		"\n\xA3\f\xA3\x0E\xA3\u0EBB\v\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x05\xA3" +
		"\u0EC1\n\xA3\x03\xA4\x03\xA4\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x05\xA5\u0EC9" +
		"\n\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA6\x03\xA6\x05\xA6\u0ED0\n\xA6\x03" +
		"\xA6\x03\xA6\x03\xA7\x03\xA7\x03\xA7\x05\xA7\u0ED7\n\xA7\x03\xA8\x03\xA8" +
		"\x03\xA9\x03\xA9\x05\xA9\u0EDD\n\xA9\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x03" +
		"\xAB\x03\xAB\x05\xAB\u0EE5\n\xAB\x03\xAB\x03\xAB\x05\xAB\u0EE9\n\xAB\x03" +
		"\xAB\x03\xAB\x03\xAC\x03\xAC\x03\xAC\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x05" +
		"\xAD\u0EF4\n\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD" +
		"\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD" +
		"\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD" +
		"\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD" +
		"\x03\xAD\x05\xAD\u0F19\n\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03" +
		"\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03" +
		"\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u0F2D\n\xAD\x03\xAD\x03\xAD\x03\xAD" +
		"\x03\xAE\x05\xAE\u0F33\n\xAE\x03\xAE\x03\xAE\x03\xAE\x05\xAE\u0F38\n\xAE" +
		"\x03\xAE\x03\xAE\x05\xAE\u0F3C\n\xAE\x03\xAE\x03\xAE\x05\xAE\u0F40\n\xAE" +
		"\x03\xAE\x06\xAE\u0F43\n\xAE\r\xAE\x0E\xAE\u0F44\x03\xAE\x03\xAE\x06\xAE" +
		"\u0F49\n\xAE\r\xAE\x0E\xAE\u0F4A\x03\xAE\x03\xAE\x05\xAE\u0F4F\n\xAE\x03" +
		"\xAE\x05\xAE\u0F52\n\xAE\x03\xAE\x05\xAE\u0F55\n\xAE\x03\xAE\x05\xAE\u0F58" +
		"\n\xAE\x03\xAE\x05\xAE\u0F5B\n\xAE\x03\xAE\x05\xAE\u0F5E\n\xAE\x03\xAE" +
		"\x05\xAE\u0F61\n\xAE\x03\xAE\x05\xAE\u0F64\n\xAE\x03\xAE\x05\xAE\u0F67" +
		"\n\xAE\x03\xAE\x05\xAE\u0F6A\n\xAE\x03\xAE\x05\xAE\u0F6D\n\xAE\x03\xAF" +
		"\x05\xAF\u0F70\n\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x05\xAF\u0F76\n\xAF" +
		"\x03\xAF\x05\xAF\u0F79\n\xAF\x03\xAF\x03\xAF\x05\xAF\u0F7D\n\xAF\x03\xAF" +
		"\x03\xAF\x05\xAF\u0F81\n\xAF\x03\xAF\x03\xAF\x05\xAF\u0F85\n\xAF\x03\xAF" +
		"\x06\xAF\u0F88\n\xAF\r\xAF\x0E\xAF\u0F89\x03\xAF\x03\xAF\x06\xAF\u0F8E" +
		"\n\xAF\r\xAF\x0E\xAF\u0F8F\x03\xAF\x03\xAF\x05\xAF\u0F94\n\xAF\x03\xAF" +
		"\x05\xAF\u0F97\n\xAF\x03\xAF\x05\xAF\u0F9A\n\xAF\x03\xAF\x05\xAF\u0F9D" +
		"\n\xAF\x03\xAF\x05\xAF\u0FA0\n\xAF\x03\xAF\x05\xAF\u0FA3\n\xAF\x03\xAF" +
		"\x05\xAF\u0FA6\n\xAF\x03\xAF\x05\xAF\u0FA9\n\xAF\x03\xAF\x05\xAF\u0FAC" +
		"\n\xAF\x03\xAF\x05\xAF\u0FAF\n\xAF\x03\xAF\x05\xAF\u0FB2\n\xAF\x03\xB0" +
		"\x03\xB0\x05\xB0\u0FB6\n\xB0\x03\xB0\x03\xB0\x03\xB0\x07\xB0\u0FBB\n\xB0" +
		"\f\xB0\x0E\xB0\u0FBE\v\xB0\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x05" +
		"\xB1\u0FC5\n\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1" +
		"\x05\xB1\u0FCE\n\xB1\x03\xB1\x03\xB1\x03\xB2\x03\xB2\x05\xB2\u0FD4\n\xB2" +
		"\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x05\xB2\u0FDA\n\xB2\x03\xB2\x03\xB2\x05" +
		"\xB2\u0FDE\n\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x03\xB2\x05\xB2\u0FE5" +
		"\n\xB2\x05\xB2\u0FE7\n\xB2\x03\xB3\x03\xB3\x03\xB3\x03\xB3\x05\xB3\u0FED" +
		"\n\xB3\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x05\xB4\u0FF3\n\xB4\x03\xB4\x03" +
		"\xB4\x03\xB4\x05\xB4\u0FF8\n\xB4\x03\xB4\x03\xB4\x05\xB4\u0FFC\n\xB4\x03" +
		"\xB5\x03\xB5\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03" +
		"\xB6\x03\xB6\x05\xB6\u1009\n\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x03\xB6" +
		"\x05\xB6\u1010\n\xB6\x03\xB6\x05\xB6\u1013\n\xB6\x03\xB7\x03\xB7\x03\xB7" +
		"\x07\xB7\u1018\n\xB7\f\xB7\x0E\xB7\u101B\v\xB7\x03\xB8\x03\xB8\x03\xB8" +
		"\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x03\xB8" +
		"\x03\xB8\x05\xB8\u102A\n\xB8\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x05" +
		"\xB9\u1031\n\xB9\x03\xBA\x03\xBA\x05\xBA\u1035\n\xBA\x03\xBA\x05\xBA\u1038" +
		"\n\xBA\x03\xBA\x03\xBA\x05\xBA\u103C\n\xBA\x03\xBA\x03\xBA\x05\xBA\u1040" +
		"\n\xBA\x03\xBA\x05\xBA\u1043\n\xBA\x03\xBA\x03\xBA\x05\xBA\u1047\n\xBA" +
		"\x03\xBA\x05\xBA\u104A\n\xBA\x03\xBB\x03\xBB\x03\xBB\x05\xBB\u104F\n\xBB" +
		"\x03\xBC\x05\xBC\u1052\n\xBC\x03\xBC\x03\xBC\x05\xBC\u1056\n\xBC\x03\xBC" +
		"\x03\xBC\x05\xBC\u105A\n\xBC\x03\xBC\x05\xBC\u105D\n\xBC\x03\xBC\x05\xBC" +
		"\u1060\n\xBC\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u1065\n\xBC\x03\xBC\x03\xBC" +
		"\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u106C\n\xBC\x03\xBC\x05\xBC\u106F\n\xBC" +
		"\x03\xBD\x03\xBD\x03\xBE\x03\xBE\x03\xBE\x07\xBE\u1076\n\xBE\f\xBE\x0E" +
		"\xBE\u1079\v\xBE\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u1080" +
		"\n\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u1087\n\xBF\x03" +
		"\xBF\x03\xBF\x05\xBF\u108B\n\xBF\x03\xBF\x05\xBF\u108E\n\xBF\x03\xBF\x05" +
		"\xBF\u1091\n\xBF\x03\xBF\x05\xBF\u1094\n\xBF\x03\xBF\x03\xBF\x05\xBF\u1098" +
		"\n\xBF\x03\xBF\x05\xBF\u109B\n\xBF\x03\xBF\x05\xBF\u109E\n\xBF\x03\xBF" +
		"\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x03\xBF\x05\xBF\u10A6\n\xBF\x05\xBF\u10A8" +
		"\n\xBF\x05\xBF\u10AA\n\xBF\x03\xC0\x05\xC0\u10AD\n\xC0\x03\xC0\x03\xC0" +
		"\x03\xC0\x06\xC0\u10B2\n\xC0\r\xC0\x0E\xC0\u10B3\x03\xC0\x03\xC0\x06\xC0" +
		"\u10B8\n\xC0\r\xC0\x0E\xC0\u10B9\x03\xC0\x03\xC0\x05\xC0\u10BE\n\xC0\x03" +
		"\xC0\x05\xC0\u10C1\n\xC0\x03\xC0\x05\xC0\u10C4\n\xC0\x03\xC0\x05\xC0\u10C7" +
		"\n\xC0\x03\xC0\x05\xC0\u10CA\n\xC0\x03\xC0\x05\xC0\u10CD\n\xC0\x03\xC1" +
		"\x03\xC1\x03\xC1\x03\xC1\x05\xC1\u10D3\n\xC1\x05\xC1\u10D5\n\xC1\x03\xC1" +
		"\x03\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x07\xC2\u10DD\n\xC2\f\xC2\x0E" +
		"\xC2\u10E0\v\xC2\x03\xC3\x03\xC3\x03\xC3\x03\xC4\x03\xC4\x03\xC4\x03\xC4" +
		"\x03\xC4\x07\xC4\u10EA\n\xC4\f\xC4\x0E\xC4\u10ED\v\xC4\x03\xC5\x03\xC5" +
		"\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u10F7\n\xC5\x03" +
		"\xC5\x03\xC5\x03\xC5\x05\xC5\u10FC\n\xC5\x07\xC5\u10FE\n\xC5\f\xC5\x0E" +
		"\xC5\u1101\v\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u1108" +
		"\n\xC5\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x07\xC6\u110E\n\xC6\f\xC6\x0E\xC6" +
		"\u1111\v\xC6\x03\xC6\x03\xC6\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x07\xC7\u1119" +
		"\n\xC7\f\xC7\x0E\xC7\u111C\v\xC7\x03\xC8\x03\xC8\x05\xC8\u1120\n\xC8\x03" +
		"\xC8\x05\xC8\u1123\n\xC8\x03\xC8\x05\xC8\u1126\n\xC8\x03\xC8\x03\xC8\x03" +
		"\xC8\x05\xC8\u112B\n\xC8\x03\xC8\x05\xC8\u112E\n\xC8\x03\xC8\x05\xC8\u1131" +
		"\n\xC8\x07\xC8\u1133\n\xC8\f\xC8\x0E\xC8\u1136\v\xC8\x03\xC9\x03\xC9\x05" +
		"\xC9\u113A\n\xC9\x03\xC9\x03\xC9\x05\xC9\u113E\n\xC9\x03\xCA\x03\xCA\x03" +
		"\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x03\xCA\x05\xCA\u114A" +
		"\n\xCA\x03\xCB\x03\xCB\x03\xCC\x03\xCC\x03\xCD\x03\xCD\x03\xCD\x03\xCD" +
		"\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x05\xCD\u1158\n\xCD\x03\xCE\x03\xCE\x03" +
		"\xCE\x03\xCE\x03\xCE\x03\xCE\x07\xCE\u1160\n\xCE\f\xCE\x0E\xCE\u1163\v" +
		"\xCE\x03\xCE\x05\xCE\u1166\n\xCE\x03\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xCF" +
		"\x03\xCF\x03\xCF\x03\xD0\x03\xD0\x05\xD0\u1171\n\xD0\x03\xD0\x07\xD0\u1174" +
		"\n\xD0\f\xD0\x0E\xD0\u1177\v\xD0\x03\xD0\x03\xD0\x05\xD0\u117B\n\xD0\x03" +
		"\xD0\x07\xD0\u117E\n\xD0\f\xD0\x0E\xD0\u1181\v\xD0\x03\xD0\x05\xD0\u1184" +
		"\n\xD0\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x03\xD1\x07\xD1\u118B\n\xD1\f\xD1" +
		"\x0E\xD1\u118E\v\xD1\x03\xD2\x03\xD2\x05\xD2\u1192\n\xD2\x03\xD2\x03\xD2" +
		"\x03\xD2\x03\xD2\x05\xD2\u1198\n\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03" +
		"\xD2\x03\xD2\x07\xD2\u11A0\n\xD2\f\xD2\x0E\xD2\u11A3\v\xD2\x05\xD2\u11A5" +
		"\n\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u11AB\n\xD3\x03\xD4\x03" +
		"\xD4\x03\xD4\x05\xD4\u11B0\n\xD4\x03\xD5\x03\xD5\x03\xD5\x05\xD5\u11B5" +
		"\n\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6" +
		"\x03\xD6\x03\xD6\x03\xD6\x05\xD6\u11C2\n\xD6\x03\xD6\x03\xD6\x03\xD6\x03" +
		"\xD6\x07\xD6\u11C8\n\xD6\f\xD6\x0E\xD6\u11CB\v\xD6\x05\xD6\u11CD\n\xD6" +
		"\x03\xD6\x03\xD6\x03\xD6\x07\xD6\u11D2\n\xD6\f\xD6\x0E\xD6\u11D5\v\xD6" +
		"\x03\xD7\x03\xD7\x03\xD7\x07\xD7\u11DA\n\xD7\f\xD7\x0E\xD7\u11DD\v\xD7" +
		"\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x03\xD8\x05\xD8\u11E6" +
		"\n\xD8\x05\xD8\u11E8\n\xD8\x03\xD9\x03\xD9\x03\xD9\x03\xDA\x03\xDA\x03" +
		"\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03" +
		"\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x06\xDA\u11FD\n\xDA\r\xDA\x0E\xDA" +
		"\u11FE\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x06\xDA\u1205\n\xDA\r\xDA\x0E\xDA" +
		"\u1206\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA" +
		"\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA" +
		"\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA" +
		"\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA" +
		"\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA" +
		"\x03\xDA\x03\xDA\x05\xDA\u1237\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03" +
		"\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03" +
		"\xDA\x03\xDA\x03\xDA\x05\xDA\u1249\n\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA" +
		"\u124E\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03" +
		"\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u125E\n\xDA" +
		"\x03";
	private static readonly _serializedATNSegment2: string =
		"\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03" +
		"\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u1270\n\xDA" +
		"\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u1275\n\xDA\x03\xDA\x03\xDA\x05\xDA\u1279" +
		"\n\xDA\x03\xDA\x06\xDA\u127C\n\xDA\r\xDA\x0E\xDA\u127D\x03\xDA\x03\xDA" +
		"\x03\xDA\x06\xDA\u1283\n\xDA\r\xDA\x0E\xDA\u1284\x03\xDA\x03\xDA\x03\xDA" +
		"\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x05\xDA" +
		"\u1292\n\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x03\xDA\x07\xDA\u129A" +
		"\n\xDA\f\xDA\x0E\xDA\u129D\v\xDA\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB" +
		"\x05\xDB\u12A4\n\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x07" +
		"\xDB\u12AC\n\xDB\f\xDB\x0E\xDB\u12AF\v\xDB\x03\xDC\x03\xDC\x03\xDC\x03" +
		"\xDC\x03\xDC\x03\xDC\x03\xDC\x06\xDC\u12B8\n\xDC\r\xDC\x0E\xDC\u12B9\x03" +
		"\xDC\x03\xDC\x05\xDC\u12BE\n\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC" +
		"\x03\xDC\x03\xDC\x03\xDC\x06\xDC\u12C8\n\xDC\r\xDC\x0E\xDC\u12C9\x03\xDC" +
		"\x03\xDC\x05\xDC\u12CE\n\xDC\x03\xDC\x03\xDC\x05\xDC\u12D2\n\xDC\x03\xDD" +
		"\x03\xDD\x03\xDD\x03\xDD\x07\xDD\u12D8\n\xDD\f\xDD\x0E\xDD\u12DB\v\xDD" +
		"\x03\xDD\x03\xDD\x03\xDE\x05\xDE\u12E0\n\xDE\x03\xDE\x03\xDE\x03\xDE\x07" +
		"\xDE\u12E5\n\xDE\f\xDE\x0E\xDE\u12E8\v\xDE\x03\xDE\x05\xDE\u12EB\n\xDE" +
		"\x03\xDF\x05\xDF\u12EE\n\xDF\x03\xDF\x05\xDF\u12F1\n\xDF\x03\xDF\x05\xDF" +
		"\u12F4\n\xDF\x03\xE0\x03\xE0\x03\xE0\x07\xE0\u12F9\n\xE0\f\xE0\x0E\xE0" +
		"\u12FC\v\xE0\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x05\xE1\u1303\n\xE1" +
		"\x03\xE2\x03\xE2\x03\xE2\x07\xE2\u1308\n\xE2\f\xE2\x0E\xE2\u130B\v\xE2" +
		"\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3" +
		"\u1315\n\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u131B\n\xE3\x03\xE3" +
		"\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u1325" +
		"\n\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u132B\n\xE3\x03\xE3\x03" +
		"\xE3\x03\xE3\x03\xE3\x05\xE3\u1331\n\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3" +
		"\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u133C\n\xE3\x03\xE3\x03" +
		"\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03" +
		"\xE3\x03\xE3\x05\xE3\u134A\n\xE3\x03\xE3\x05\xE3\u134D\n\xE3\x03\xE3\x03" +
		"\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03" +
		"\xE3\x03\xE3\x03\xE3\x05\xE3\u135C\n\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3" +
		"\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3" +
		"\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u136E\n\xE3\x03\xE3\x03\xE3\x03\xE3\x05" +
		"\xE3\u1373\n\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u1379\n\xE3\x03" +
		"\xE3\x03\xE3\x03\xE3\x05\xE3\u137E\n\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3" +
		"\x05\xE3\u1384\n\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u138A\n\xE3" +
		"\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3" +
		"\u1394\n\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u139A\n\xE3\x03\xE3" +
		"\x05\xE3\u139D\n\xE3\x03\xE4\x03\xE4\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x05" +
		"\xE5\u13A5\n\xE5\x03\xE6\x03\xE6\x03\xE6\x05\xE6\u13AA\n\xE6\x03\xE6\x03" +
		"\xE6\x03\xE6\x07\xE6\u13AF\n\xE6\f\xE6\x0E\xE6\u13B2\v\xE6\x03\xE6\x05" +
		"\xE6\u13B5\n\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6" +
		"\x05\xE6\u13BE\n\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03" +
		"\xE6\x03\xE6\x03\xE6\x03\xE6\x05\xE6\u13CA\n\xE6\x03\xE6\x03\xE6\x03\xE6" +
		"\x03\xE6\x03\xE6\x07\xE6\u13D1\n\xE6\f\xE6\x0E\xE6\u13D4\v\xE6\x05\xE6" +
		"\u13D6\n\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x03" +
		"\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x05\xE6\u13E4\n\xE6\x05\xE6\u13E6" +
		"\n\xE6\x03\xE7\x03\xE7\x05\xE7\u13EA\n\xE7\x03\xE8\x03\xE8\x03\xE8\x07" +
		"\xE8\u13EF\n\xE8\f\xE8\x0E\xE8\u13F2\v\xE8\x03\xE9\x03\xE9\x03\xE9\x07" +
		"\xE9\u13F7\n\xE9\f\xE9\x0E\xE9\u13FA\v\xE9\x03\xEA\x03\xEA\x03\xEA\x05" +
		"\xEA\u13FF\n\xEA\x03\xEB\x03\xEB\x03\xEB\x07\xEB\u1404\n\xEB\f\xEB\x0E" +
		"\xEB\u1407\v\xEB\x03\xEC\x03\xEC\x03\xED\x03\xED\x05\xED\u140D\n\xED\x03" +
		"\xED\x03\xED\x05\xED\u1411\n\xED\x03\xED\x07\xED\u1414\n\xED\f\xED\x0E" +
		"\xED\u1417\v\xED\x03\xEE\x03\xEE\x03\xEE\x07\xEE\u141C\n\xEE\f\xEE\x0E" +
		"\xEE\u141F\v\xEE\x03\xEF\x03\xEF\x05\xEF\u1423\n\xEF\x03\xF0\x03\xF0\x03" +
		"\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03" +
		"\xF1\x03\xF1\x07\xF1\u1432\n\xF1\f\xF1\x0E\xF1\u1435\v\xF1\x03\xF1\x03" +
		"\xF1\x03\xF1\x05\xF1\u143A\n\xF1\x05\xF1\u143C\n\xF1\x03\xF1\x03\xF1\x03" +
		"\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x03\xF1\x05\xF1\u1447\n\xF1" +
		"\x03\xF1\x03\xF1\x05\xF1\u144B\n\xF1\x03\xF2\x03\xF2\x03\xF2\x03\xF2\x03" +
		"\xF2\x07\xF2\u1452\n\xF2\f\xF2\x0E\xF2\u1455\v\xF2\x05\xF2\u1457\n\xF2" +
		"\x03\xF2\x03\xF2\x03\xF3\x03\xF3\x05\xF3\u145D\n\xF3\x03\xF3\x03\xF3\x05" +
		"\xF3\u1461\n\xF3\x03\xF3\x05\xF3\u1464\n\xF3\x03\xF3\x03\xF3\x03\xF3\x03" +
		"\xF3\x03\xF3\x03\xF3\x07\xF3\u146C\n\xF3\f\xF3\x0E\xF3\u146F\v\xF3\x03" +
		"\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x05\xF3\u1477\n\xF3\x05\xF3" +
		"\u1479\n\xF3\x03\xF3\x05\xF3\u147C\n\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3" +
		"\x05\xF3\u1482\n\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x07\xF3\u1489" +
		"\n\xF3\f\xF3\x0E\xF3\u148C\v\xF3\x03\xF3\x03\xF3\x05\xF3\u1490\n\xF3\x03" +
		"\xF3\x05\xF3\u1493\n\xF3\x03\xF3\x03\xF3\x03\xF3\x05\xF3\u1498\n\xF3\x03" +
		"\xF3\x05\xF3\u149B\n\xF3\x03\xF3\x05\xF3\u149E\n\xF3\x03\xF3\x03\xF3\x03" +
		"\xF3\x03\xF3\x03\xF3\x03\xF3\x07\xF3\u14A6\n\xF3\f\xF3\x0E\xF3\u14A9\v" +
		"\xF3\x03\xF3\x03\xF3\x03\xF3\x05\xF3\u14AE\n\xF3\x03\xF3\x03\xF3\x03\xF3" +
		"\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x03\xF3\x07\xF3\u14BA" +
		"\n\xF3\f\xF3\x0E\xF3\u14BD\v\xF3\x03\xF3\x03\xF3\x05\xF3\u14C1\n\xF3\x03" +
		"\xF3\x03\xF3\x05\xF3\u14C5\n\xF3\x03\xF3\x03\xF3\x05\xF3\u14C9\n\xF3\x03" +
		"\xF3\x03\xF3\x05\xF3\u14CD\n\xF3\x03\xF3\x03\xF3\x05\xF3\u14D1\n\xF3\x03" +
		"\xF3\x05\xF3\u14D4\n\xF3\x07\xF3\u14D6\n\xF3\f\xF3\x0E\xF3\u14D9\v\xF3" +
		"\x03\xF4\x05\xF4\u14DC\n\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x07\xF4\u14E2" +
		"\n\xF4\f\xF4\x0E\xF4\u14E5\v\xF4\x05\xF4\u14E7\n\xF4\x03\xF4\x05\xF4\u14EA" +
		"\n\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x05\xF4\u14F1\n\xF4\x03" +
		"\xF5\x05\xF5\u14F4\n\xF5\x03\xF5\x03\xF5\x03\xF5\x05\xF5\u14F9\n\xF5\x03" +
		"\xF5\x03\xF5\x03\xF5\x05\xF5\u14FE\n\xF5\x03\xF5\x03\xF5\x03\xF5\x05\xF5" +
		"\u1503\n\xF5\x03\xF5\x03\xF5\x03\xF5\x05\xF5\u1508\n\xF5\x03\xF6\x03\xF6" +
		"\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x07\xF6\u1511\n\xF6\f\xF6\x0E" +
		"\xF6\u1514\v\xF6\x03\xF6\x03\xF6\x05\xF6\u1518\n\xF6\x03\xF7\x03\xF7\x03" +
		"\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03" +
		"\xF7\x05\xF7\u1526\n\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7\x03\xF7" +
		"\x07\xF7\u152E\n\xF7\f\xF7\x0E\xF7\u1531\v\xF7\x03\xF8\x03\xF8\x05\xF8" +
		"\u1535\n\xF8\x03\xF8\x05\xF8\u1538\n\xF8\x03\xF8\x03\xF8\x05\xF8\u153C" +
		"\n\xF8\x03\xF8\x05\xF8\u153F\n\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03" +
		"\xF8\x05\xF8\u1546\n\xF8\x03\xF8\x05\xF8\u1549\n\xF8\x03\xF8\x03\xF8\x05" +
		"\xF8\u154D\n\xF8\x03\xF9\x03\xF9\x03\xF9\x03\xFA\x06\xFA\u1553\n\xFA\r" +
		"\xFA\x0E\xFA\u1554\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x05\xFB\u155C" +
		"\n\xFB\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x05\xFB\u1562\n\xFB\x03\xFC\x03" +
		"\xFC\x03\xFC\x03\xFC\x03\xFC\x05\xFC\u1569\n\xFC\x03\xFC\x05\xFC\u156C" +
		"\n\xFC\x03\xFC\x05\xFC\u156F\n\xFC\x03\xFC\x03\xFC\x05\xFC\u1573\n\xFC" +
		"\x03\xFD\x03\xFD\x05\xFD\u1577\n\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03" +
		"\xFD\x03\xFD\x05\xFD\u157F\n\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD" +
		"\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD" +
		"\x03\xFD\x05\xFD\u1590\n\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03" +
		"\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x05\xFD\u159D\n\xFD\x03\xFD" +
		"\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x05\xFD\u15A7" +
		"\n\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x05\xFD\u15AE\n\xFD\x03" +
		"\xFD\x03\xFD\x03\xFD\x05\xFD\u15B3\n\xFD\x03\xFD\x03\xFD\x03\xFD\x05\xFD" +
		"\u15B8\n\xFD\x05\xFD\u15BA\n\xFD\x03\xFD\x05\xFD\u15BD\n\xFD\x03\xFD\x05" +
		"\xFD\u15C0\n\xFD\x03\xFD\x03\xFD\x05\xFD\u15C4\n\xFD\x03\xFE\x03\xFE\x03" +
		"\xFE\x03\xFE\x05\xFE\u15CA\n\xFE\x03\xFF\x03\xFF\x03\xFF\x07\xFF\u15CF" +
		"\n\xFF\f\xFF\x0E\xFF\u15D2\v\xFF\x03\u0100\x03\u0100\x03\u0100\x03\u0100" +
		"\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100" +
		"\x05\u0100\u15DF\n\u0100\x03\u0101\x03\u0101\x03\u0102\x03\u0102\x03\u0102" +
		"\x03\u0102\x03\u0102\x03\u0102\x05\u0102\u15E9\n\u0102\x03\u0102\x03\u0102" +
		"\x03\u0102\x07\u0102\u15EE\n\u0102\f\u0102\x0E\u0102\u15F1\v\u0102\x03" +
		"\u0103\x03\u0103\x03\u0104\x03\u0104\x03\u0105\x03\u0105\x03\u0106\x03" +
		"\u0106\x03\u0107\x03\u0107\x03\u0108\x03\u0108\x03\u0109\x03\u0109\x03" +
		"\u010A\x03\u010A\x03\u010A\x02\x02\x07\u01B2\u01B4\u01E4\u01EC\u0202\u010B" +
		"\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14" +
		"\x02\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02" +
		"*\x02,\x02.\x020\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02" +
		"F\x02H\x02J\x02L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02" +
		"b\x02d\x02f\x02h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02" +
		"~\x02\x80\x02\x82\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02" +
		"\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02" +
		"\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02" +
		"\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02" +
		"\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02" +
		"\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02" +
		"\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02" +
		"\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A" +
		"\x02\u010C\x02\u010E\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118" +
		"\x02\u011A\x02\u011C\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126" +
		"\x02\u0128\x02\u012A\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134" +
		"\x02\u0136\x02\u0138\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142" +
		"\x02\u0144\x02\u0146\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150" +
		"\x02\u0152\x02\u0154\x02\u0156\x02\u0158\x02\u015A\x02\u015C\x02\u015E" +
		"\x02\u0160\x02\u0162\x02\u0164\x02\u0166\x02\u0168\x02\u016A\x02\u016C" +
		"\x02\u016E\x02\u0170\x02\u0172\x02\u0174\x02\u0176\x02\u0178\x02\u017A" +
		"\x02\u017C\x02\u017E\x02\u0180\x02\u0182\x02\u0184\x02\u0186\x02\u0188" +
		"\x02\u018A\x02\u018C\x02\u018E\x02\u0190\x02\u0192\x02\u0194\x02\u0196" +
		"\x02\u0198\x02\u019A\x02\u019C\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4" +
		"\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2" +
		"\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0" +
		"\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8\x02\u01CA\x02\u01CC\x02\u01CE" +
		"\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6\x02\u01D8\x02\u01DA\x02\u01DC" +
		"\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4\x02\u01E6\x02\u01E8\x02\u01EA" +
		"\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2\x02\u01F4\x02\u01F6\x02\u01F8" +
		"\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200\x02\u0202\x02\u0204\x02\u0206" +
		"\x02\u0208\x02\u020A\x02\u020C\x02\u020E\x02\u0210\x02\u0212\x02\x024" +
		"\x04\x02\xBE\xBE\u0209\u0209\x04\x02>>\u01DC\u01DC\x04\x02\x16\x16\u01D9" +
		"\u01D9\x06\x02\xD8\xD8\xDA\xDA\u0145\u0145\u01A9\u01A9\x05\x02\r\r\xBE" +
		"\xBE\u0209\u0209\x04\x02\u0249\u0249\u0319\u0319\x04\x02\u010B\u010B\u027E" +
		"\u027E\x03\x02\u02B0\u02B2\x04\x02\xC7\xC7\u0263\u0263\x04\x02\u0174\u0174" +
		"\u030A\u030A\x07\x02\x12\x12\xA5\xA5\u0118\u0118\u0200\u0200\u026B\u026B" +
		"\x06\x02\xA5\xA5\u0118\u0118\u0200\u0200\u026B\u026B\x04\x02\x14\x14\u011B" +
		"\u011B\x04\x02\u023D\u023D\u023F\u023F\x04\x02??\u013C\u013C\x07\x02\x12" +
		"\x12\u01AA\u01AA\u0204\u0204\u023D\u023D\u023F\u023F\x04\x02\u0237\u0237" +
		"\u026E\u026E\x04\x02\x12\x12\u0307\u0307\x04\x02\xEE\xEE\u010B\u010B\x07" +
		"\x02\x94\x94\u010E\u010E\u01F5\u01F5\u0237\u0237\u0239\u0239\x04\x02\u024D" +
		"\u024D\u028B\u028B\x05\x02\u023D\u023D\u023F\u023F\u0345\u0345\x04\x02" +
		"\u013C\u013C\u0207\u0207\x04\x02\xA1\xA1\u0107\u0107\x04\x02vv\u01DB\u01DB" +
		"\x07\x02\x18\x18\xB6\xB6\xED\xED\xEF\xEF\u0280\u0280\x04\x02\x85\x85\u01E9" +
		"\u01E9\x07\x02\x18\x1877||\u0248\u0248\u0280\u0280\x06\x02\u028D\u028D" +
		"\u02E0\u02E0\u02F1\u02F1\u02F9\u02F9\x04\x02\u01BE\u01BE\u01F1\u01F1\x05" +
		"\x02\xCD\xCD\u011E\u011E\u0264\u0264\x04\x02\x12\x12\xBA\xBA\x04\x02\xE1" +
		"\xE1\u012F\u012F\x04\x02\u01EE\u01EE\u01F1\u01F1\x04\x02\xE1\xE1\u0168" +
		"\u0168\x03\x02\u02FD\u02FD\x06\x02\u0314\u0314\u0316\u0316\u032F\u032F" +
		"\u0335\u0335\x04\x02\u0339\u0339\u033C\u033C\x04\x02\x12\x12\u016F\u016F" +
		"\x04\x02\u0318\u0318\u0333\u0334\x05\x02\u02FF\u02FF\u0330\u0330\u033B" +
		"\u033B\x04\x02\u032F\u032F\u0335\u0335\x0E\x02\x19\x19\u016F\u016F\u0189" +
		"\u0189\u030F\u0313\u031A\u031A\u031D\u0325\u0328\u0329\u032B\u032E\u0331" +
		"\u0332\u0336\u0338\u033A\u033A\u033C\u0343\x07\x02\u0317\u0317\u0319\u0319" +
		"\u031B\u031C\u0326\u0327\u032A\u032A\x06\x02\u010B\u010B\u0115\u0115\u018E" +
		"\u018E\u027E\u027E\x04\x02\u0288\u0288\u028A\u028A\x04\x02\u0306\u0307" +
		"\u030A\u030B\x03\x02\u02BF\u02C4\x04\x02\x1E\x1E\xAD\xADo\x02\x03\x03" +
		"\x06\x10\x13\x16\x1A\x1B\x1F!#&(.0134668?BORY\\_afhilnp{}\x7F\x84\x87" +
		"\x89\x8A\x8E\x8E\x90\x9C\x9E\x9E\xA1\xA8\xAA\xAC\xAE\xAF\xB2\xB4\xB8\xB9" +
		"\xBC\xBD\xBF\xC3\xC6\xC8\xCA\xCC\xCE\xD3\xD5\xD7\xD9\xDB\xDF\xE4\xE6\xE6" +
		"\xE8\xEC\xF0\xF8\xFA\xFB\xFD\xFE\u0100\u0105\u0107\u010A\u010C\u010F\u0111" +
		"\u0111\u0115\u011D\u011F\u0120\u0122\u0122\u0124\u0124\u0127\u012A\u012D" +
		"\u012F\u0132\u0134\u0136\u0136\u0139\u013C\u013F\u0144\u0146\u0146\u0148" +
		"\u0148\u014A\u0158\u015A\u0162\u0164\u0169\u016C\u016E\u0170\u0171\u0173" +
		"\u0173\u0175\u017E\u0180\u0181\u0184\u0184\u0186\u0188\u018B\u018E\u0190" +
		"\u0191\u0193\u019D\u01A0\u01A7\u01A9\u01A9\u01AB\u01AC\u01AE\u01B0\u01B3" +
		"\u01B3\u01B5\u01B5\u01B7\u01BB\u01BD\u01C2\u01C4\u01C6\u01C8\u01CD\u01CF" +
		"\u01D8\u01DA\u01E2\u01E4\u01FF\u0201\u0207\u0209\u020D\u020F\u0210\u0212" +
		"\u0212\u0214\u022F\u0231\u0231\u0233\u0234\u0236\u0238\u023A\u023A\u023C" +
		"\u023F\u0243\u0247\u024B\u024B\u024D\u0263\u0266\u026D\u026F\u0272\u0274" +
		"\u0275\u0277\u027C\u027F\u027F\u0281\u0282\u0284\u0284\u0286\u0286\u0289" +
		"\u028C\u028E\u028E\u0290\u0290\u02F1\u02F1\x02\u19B8\x02\u0214\x03\x02" +
		"\x02\x02\x04\u0255\x03\x02\x02\x02\x06\u0257\x03\x02\x02\x02\b\u0281\x03" +
		"\x02\x02\x02\n\u02A1\x03\x02\x02\x02\f\u02BE\x03\x02\x02\x02\x0E\u02D5" +
		"\x03\x02\x02\x02\x10\u02D7\x03\x02\x02\x02\x12\u02D9\x03\x02\x02\x02\x14" +
		"\u0327\x03\x02\x02\x02\x16\u034A\x03\x02\x02\x02\x18\u035B\x03\x02\x02" +
		"\x02\x1A\u035D\x03\x02\x02\x02\x1C\u040B\x03\x02\x02\x02\x1E\u040D\x03" +
		"\x02\x02\x02 \u0453\x03\x02\x02\x02\"\u0455\x03\x02\x02\x02$\u046C\x03" +
		"\x02\x02\x02&\u04B4\x03\x02\x02\x02(\u04CD\x03\x02\x02\x02*\u04CF\x03" +
		"\x02\x02\x02,\u04DA\x03\x02\x02\x02.\u04DC\x03\x02\x02\x020\u04FF\x03" +
		"\x02\x02\x022\u0501\x03\x02\x02\x024\u051E\x03\x02\x02\x026\u0554\x03" +
		"\x02\x02\x028\u056F\x03\x02\x02\x02:\u05BF\x03\x02\x02\x02<\u05C1\x03" +
		"\x02\x02\x02>\u05DB\x03\x02\x02\x02@\u05DD\x03\x02\x02\x02B\u05E6\x03" +
		"\x02\x02\x02D\u0617\x03\x02\x02\x02F\u0631\x03\x02\x02\x02H\u0672\x03" +
		"\x02\x02\x02J\u0682\x03\x02\x02\x02L\u0684\x03\x02\x02\x02N\u06A7\x03" +
		"\x02\x02\x02P\u0704\x03\x02\x02\x02R\u0706\x03\x02\x02\x02T\u0708\x03" +
		"\x02\x02\x02V\u071C\x03\x02\x02\x02X\u0731\x03\x02\x02\x02Z\u0733\x03" +
		"\x02\x02\x02\\\u0735\x03\x02\x02\x02^\u0737\x03\x02\x02\x02`\u0743\x03" +
		"\x02\x02\x02b\u0745\x03\x02\x02\x02d\u0750\x03\x02\x02\x02f\u0752\x03" +
		"\x02\x02\x02h\u0754\x03\x02\x02\x02j\u0756\x03\x02\x02\x02l\u0758\x03" +
		"\x02\x02\x02n\u075A\x03\x02\x02\x02p\u0783\x03\x02\x02\x02r\u0785\x03" +
		"\x02\x02\x02t\u08A8\x03\x02\x02\x02v\u08AA\x03\x02\x02\x02x\u08D8\x03" +
		"\x02\x02\x02z\u08DA\x03\x02\x02\x02|\u08F9\x03\x02\x02\x02~\u08FB\x03" +
		"\x02\x02\x02\x80\u0908\x03\x02\x02\x02\x82\u093E\x03\x02\x02\x02\x84\u094A" +
		"\x03\x02\x02\x02\x86\u095B\x03\x02\x02\x02\x88\u096E\x03\x02\x02\x02\x8A" +
		"\u097E\x03\x02\x02\x02\x8C\u0987\x03\x02\x02\x02\x8E\u09A2\x03\x02\x02" +
		"\x02\x90\u09C7\x03\x02\x02\x02\x92\u09CF\x03\x02\x02\x02\x94\u09FD\x03" +
		"\x02\x02\x02\x96\u0A3C\x03\x02\x02\x02\x98\u0A3E\x03\x02\x02\x02\x9A\u0A5D" +
		"\x03\x02\x02\x02\x9C\u0AB0\x03\x02\x02\x02\x9E\u0AB2\x03\x02\x02\x02\xA0" +
		"\u0ACB\x03\x02\x02\x02\xA2\u0AD2\x03\x02\x02\x02\xA4\u0AEE\x03\x02\x02" +
		"\x02\xA6\u0B21\x03\x02\x02\x02\xA8\u0B23\x03\x02\x02\x02\xAA\u0B5D\x03" +
		"\x02\x02\x02\xAC\u0B5F\x03\x02\x02\x02\xAE\u0B99\x03\x02\x02\x02\xB0\u0B9B" +
		"\x03\x02\x02\x02\xB2\u0B9D\x03\x02\x02\x02\xB4\u0B9F\x03\x02\x02\x02\xB6" +
		"\u0BA1\x03\x02\x02\x02\xB8\u0BA3\x03\x02\x02\x02\xBA\u0BA5\x03\x02\x02" +
		"\x02\xBC\u0BA7\x03\x02\x02\x02\xBE\u0BA9\x03\x02\x02\x02\xC0\u0BAB\x03" +
		"\x02\x02\x02\xC2\u0BAD\x03\x02\x02\x02\xC4\u0BAF\x03\x02\x02\x02\xC6\u0BB1" +
		"\x03\x02\x02\x02\xC8\u0BB3\x03\x02\x02\x02\xCA\u0BB5\x03\x02\x02\x02\xCC" +
		"\u0BB7\x03\x02\x02\x02\xCE\u0BDE\x03\x02\x02\x02\xD0\u0BE0\x03\x02\x02" +
		"\x02\xD2\u0BE3\x03\x02\x02\x02\xD4\u0C02\x03\x02\x02\x02\xD6\u0C2E\x03" +
		"\x02\x02\x02\xD8\u0C30\x03\x02\x02\x02\xDA\u0C3B\x03\x02\x02\x02\xDC\u0C46" +
		"\x03\x02\x02\x02\xDE\u0C54\x03\x02\x02\x02\xE0\u0C5E\x03\x02\x02\x02\xE2" +
		"\u0C68\x03\x02\x02\x02\xE4\u0C70\x03\x02\x02\x02\xE6\u0C7A\x03\x02\x02" +
		"\x02\xE8\u0C85\x03\x02\x02\x02\xEA\u0C8F\x03\x02\x02\x02\xEC\u0C9B\x03" +
		"\x02\x02\x02\xEE\u0CA6\x03\x02\x02\x02\xF0\u0CB0\x03\x02\x02\x02\xF2\u0CB8" +
		"\x03\x02\x02\x02\xF4\u0CC5\x03\x02\x02\x02\xF6\u0CD2\x03\x02\x02\x02\xF8" +
		"\u0CDD\x03\x02\x02\x02\xFA\u0CDF\x03\x02\x02\x02\xFC\u0CEC\x03\x02\x02" +
		"\x02\xFE\u0CF9\x03\x02\x02\x02\u0100\u0D00\x03\x02\x02\x02\u0102\u0D0C" +
		"\x03\x02\x02\x02\u0104\u0D16\x03\x02\x02\x02\u0106\u0D1E\x03\x02\x02\x02" +
		"\u0108\u0D2A\x03\x02\x02\x02\u010A\u0D34\x03\x02\x02\x02\u010C\u0D3E\x03" +
		"\x02\x02\x02\u010E\u0D48\x03\x02\x02\x02\u0110\u0D50\x03\x02\x02\x02\u0112" +
		"\u0D5A\x03\x02\x02\x02\u0114\u0D64\x03\x02\x02\x02\u0116\u0D6C\x03\x02" +
		"\x02\x02\u0118\u0D78\x03\x02\x02\x02\u011A\u0D84\x03\x02\x02\x02\u011C" +
		"\u0D90\x03\x02\x02\x02\u011E\u0D9C\x03\x02\x02\x02\u0120\u0DA8\x03\x02" +
		"\x02\x02\u0122\u0DB4\x03\x02\x02\x02\u0124\u0DBE\x03\x02\x02\x02\u0126" +
		"\u0DC6\x03\x02\x02\x02\u0128\u0DD8\x03\x02\x02\x02\u012A\u0DE2\x03\x02" +
		"\x02\x02\u012C\u0DFA\x03\x02\x02\x02\u012E\u0E07\x03\x02\x02\x02\u0130" +
		"\u0E09\x03\x02\x02\x02\u0132\u0E0B\x03\x02\x02\x02\u0134\u0E0E\x03\x02" +
		"\x02\x02\u0136\u0E4A\x03\x02\x02\x02\u0138\u0E4D\x03\x02\x02\x02\u013A" +
		"\u0E4F\x03\x02\x02\x02\u013C\u0E73\x03\x02\x02\x02\u013E\u0E8F\x03\x02" +
		"\x02\x02\u0140\u0E95\x03\x02\x02\x02\u0142\u0EA5\x03\x02\x02\x02\u0144" +
		"\u0EA9\x03\x02\x02\x02\u0146\u0EC2\x03\x02\x02\x02\u0148\u0EC4\x03\x02" +
		"\x02\x02\u014A\u0ECD\x03\x02\x02\x02\u014C\u0ED3\x03\x02\x02\x02\u014E" +
		"\u0ED8\x03\x02\x02\x02\u0150\u0EDA\x03\x02\x02\x02\u0152\u0EDE\x03\x02" +
		"\x02\x02\u0154\u0EE2\x03\x02\x02\x02\u0156\u0EEC\x03\x02\x02\x02\u0158" +
		"\u0EEF\x03\x02\x02\x02\u015A\u0F32\x03\x02\x02\x02\u015C\u0F6F\x03\x02" +
		"\x02\x02\u015E\u0FB3\x03\x02\x02\x02\u0160\u0FBF\x03\x02\x02\x02\u0162" +
		"\u0FE6\x03\x02\x02\x02\u0164\u0FE8\x03\x02\x02\x02\u0166\u0FFB\x03\x02" +
		"\x02\x02\u0168\u0FFD\x03\x02\x02\x02\u016A\u1012\x03\x02\x02\x02\u016C" +
		"\u1014\x03\x02\x02\x02\u016E\u1029\x03\x02\x02\x02\u0170\u102B\x03\x02" +
		"\x02\x02\u0172\u1032\x03\x02\x02\x02\u0174\u104B\x03\x02\x02\x02\u0176" +
		"\u1051\x03\x02\x02\x02\u0178\u1070\x03\x02\x02\x02\u017A\u1072\x03\x02" +
		"\x02\x02\u017C\u10A9\x03\x02\x02\x02\u017E\u10AC\x03\x02\x02\x02\u0180" +
		"\u10D4\x03\x02\x02\x02\u0182\u10D8\x03\x02\x02\x02\u0184\u10E1\x03\x02" +
		"\x02\x02\u0186\u10E4\x03\x02\x02\x02\u0188\u1107\x03\x02\x02\x02\u018A" +
		"\u1109\x03\x02\x02\x02\u018C\u1114\x03\x02\x02\x02\u018E\u1125\x03\x02" +
		"\x02\x02\u0190\u113D\x03\x02\x02\x02\u0192\u1149\x03\x02\x02\x02\u0194" +
		"\u114B\x03\x02\x02\x02\u0196\u114D\x03\x02\x02\x02\u0198\u1157\x03\x02" +
		"\x02\x02\u019A\u1165\x03\x02\x02\x02\u019C\u1167\x03\x02\x02\x02\u019E" +
		"\u116E\x03\x02\x02\x02\u01A0\u1185\x03\x02\x02\x02\u01A2\u1191\x03\x02" +
		"\x02\x02\u01A4\u11A6\x03\x02\x02\x02\u01A6\u11AC\x03\x02\x02\x02\u01A8" +
		"\u11B1\x03\x02\x02\x02\u01AA\u11B9\x03\x02\x02\x02\u01AC\u11D6\x03\x02" +
		"\x02\x02\u01AE\u11E7\x03\x02\x02\x02\u01B0\u11E9\x03\x02\x02\x02\u01B2" +
		"\u1236\x03\x02\x02\x02\u01B4\u12A3\x03\x02\x02\x02\u01B6\u12D1\x03\x02" +
		"\x02\x02\u01B8\u12D3\x03\x02\x02\x02\u01BA\u12DF\x03\x02\x02\x02\u01BC" +
		"\u12F3\x03\x02\x02\x02\u01BE\u12F5\x03\x02\x02\x02\u01C0\u12FD\x03\x02" +
		"\x02\x02\u01C2\u1304\x03\x02\x02\x02\u01C4\u139C\x03\x02\x02\x02\u01C6" +
		"\u139E\x03\x02\x02\x02\u01C8\u13A4\x03\x02\x02\x02\u01CA\u13E5\x03\x02" +
		"\x02\x02\u01CC\u13E9\x03\x02\x02\x02\u01CE\u13EB\x03\x02\x02\x02\u01D0" +
		"\u13F3\x03\x02\x02\x02\u01D2\u13FB\x03\x02\x02\x02\u01D4\u1400\x03\x02" +
		"\x02\x02\u01D6\u1408\x03\x02\x02\x02\u01D8\u140C\x03\x02\x02\x02\u01DA" +
		"\u1418\x03\x02\x02\x02\u01DC\u1422\x03\x02\x02\x02\u01DE\u1424\x03\x02" +
		"\x02\x02\u01E0\u144A\x03\x02\x02\x02\u01E2\u144C\x03\x02\x02\x02\u01E4" +
		"\u14C4\x03\x02\x02\x02\u01E6\u14F0\x03\x02\x02\x02\u01E8\u1507\x03\x02" +
		"\x02\x02\u01EA\u1517\x03\x02\x02\x02\u01EC\u1525\x03\x02\x02\x02\u01EE" +
		"\u154C\x03\x02\x02\x02\u01F0\u154E\x03\x02\x02\x02\u01F2\u1552\x03\x02" +
		"\x02\x02\u01F4\u155B\x03\x02\x02\x02\u01F6\u1568\x03\x02\x02\x02\u01F8" +
		"\u1576\x03\x02\x02\x02\u01FA\u15C9\x03\x02\x02\x02\u01FC\u15CB\x03\x02" +
		"\x02\x02\u01FE\u15DE\x03\x02\x02\x02\u0200\u15E0\x03\x02\x02\x02\u0202" +
		"\u15E8\x03\x02\x02\x02\u0204\u15F2\x03\x02\x02\x02\u0206\u15F4\x03\x02" +
		"\x02\x02\u0208\u15F6\x03\x02\x02\x02\u020A\u15F8\x03\x02\x02\x02\u020C" +
		"\u15FA\x03\x02\x02\x02\u020E\u15FC\x03\x02\x02\x02\u0210\u15FE\x03\x02" +
		"\x02\x02\u0212\u1600\x03\x02\x02\x02\u0214\u021D\x05\x04\x03\x02\u0215" +
		"\u0216\x07\u0344\x02\x02\u0216\u0218\x05\x04\x03\x02\u0217\u0215\x03\x02" +
		"\x02\x02\u0218\u0219\x03\x02\x02\x02\u0219\u0217\x03\x02\x02\x02\u0219" +
		"\u021A\x03\x02\x02\x02\u021A\u021B\x03\x02\x02\x02\u021B\u021C\x07\u0344" +
		"\x02\x02\u021C\u021E\x03\x02\x02\x02\u021D\u0217\x03\x02\x02\x02\u021D" +
		"\u021E\x03\x02\x02\x02\u021E\u021F\x03\x02\x02\x02\u021F\u0220\x07\x02" +
		"\x02\x03\u0220\x03\x03\x02\x02\x02\u0221\u0256\x05\x06\x04\x02\u0222\u0256" +
		"\x05\b\x05\x02\u0223\u0256\x05b2\x02\u0224\u0256\x05p9\x02\u0225\u0256" +
		"\x05d3\x02\u0226\u0256\x05f4\x02\u0227\u0256\x05h5\x02\u0228\u0256\x05" +
		"j6\x02\u0229\u0256\x05l7\x02\u022A\u0256\x05n8\x02\u022B\u0256\x05\xCE" +
		"h\x02\u022C\u0256\x05\xD0i\x02\u022D\u0256\x05\xD2j\x02\u022E\u0256\x05" +
		"\xD4k\x02\u022F\u0256\x05\xD6l\x02\u0230\u0256\x05\u012A\x96\x02\u0231" +
		"\u0256\x05\u012C\x97\x02\u0232\u0256\x05\u012E\x98\x02\u0233\u0256\x05" +
		"\u0130\x99\x02\u0234\u0256\x05\u0132\x9A\x02\u0235\u0256\x05\u0134\x9B" +
		"\x02\u0236\u0256\x05\u0136\x9C\x02\u0237\u0256\x05\u0138\x9D\x02\u0238" +
		"\u0256\x05\u013A\x9E\x02\u0239\u0256\x05\u013C\x9F\x02\u023A\u0256\x05" +
		"\u013E";
	private static readonly _serializedATNSegment3: string =
		"\xA0\x02\u023B\u0256\x05\u0140\xA1\x02\u023C\u0256\x05\u0142\xA2\x02\u023D" +
		"\u0256\x05\u0144\xA3\x02\u023E\u0256\x05\u0146\xA4\x02\u023F\u0256\x05" +
		"\u0148\xA5\x02\u0240\u0256\x05\u014A\xA6\x02\u0241\u0256\x05\u014C\xA7" +
		"\x02\u0242\u0256\x05\u014E\xA8\x02\u0243\u0256\x05\u0150\xA9\x02\u0244" +
		"\u0256\x05\u0152\xAA\x02\u0245\u0256\x05\u0154\xAB\x02\u0246\u0256\x05" +
		"\u0156\xAC\x02\u0247\u0256\x05\u0158\xAD\x02\u0248\u0256\x05\u015A\xAE" +
		"\x02\u0249\u0256\x05\u015C\xAF\x02\u024A\u0256\x05\u0162\xB2\x02\u024B" +
		"\u0256\x05\u0164\xB3\x02\u024C\u0256\x05\u0166\xB4\x02\u024D\u0256\x05" +
		"\u0168\xB5\x02\u024E\u0256\x05\u016E\xB8\x02\u024F\u0256\x05\u0170\xB9" +
		"\x02\u0250\u0256\x05\u0172\xBA\x02\u0251\u0256\x05\u0174\xBB\x02\u0252" +
		"\u0256\x05\u0176\xBC\x02\u0253\u0256\x05\u017C\xBF\x02\u0254\u0256\x05" +
		"\u017E\xC0\x02\u0255\u0221\x03\x02\x02\x02\u0255\u0222\x03\x02\x02\x02" +
		"\u0255\u0223\x03\x02\x02\x02\u0255\u0224\x03\x02\x02\x02\u0255\u0225\x03" +
		"\x02\x02\x02\u0255\u0226\x03\x02\x02\x02\u0255\u0227\x03\x02\x02\x02\u0255" +
		"\u0228\x03\x02\x02\x02\u0255\u0229\x03\x02\x02\x02\u0255\u022A\x03\x02" +
		"\x02\x02\u0255\u022B\x03\x02\x02\x02\u0255\u022C\x03\x02\x02\x02\u0255" +
		"\u022D\x03\x02\x02\x02\u0255\u022E\x03\x02\x02\x02\u0255\u022F\x03\x02" +
		"\x02\x02\u0255\u0230\x03\x02\x02\x02\u0255\u0231\x03\x02\x02\x02\u0255" +
		"\u0232\x03\x02\x02\x02\u0255\u0233\x03\x02\x02\x02\u0255\u0234\x03\x02" +
		"\x02\x02\u0255\u0235\x03\x02\x02\x02\u0255\u0236\x03\x02\x02\x02\u0255" +
		"\u0237\x03\x02\x02\x02\u0255\u0238\x03\x02\x02\x02\u0255\u0239\x03\x02" +
		"\x02\x02\u0255\u023A\x03\x02\x02\x02\u0255\u023B\x03\x02\x02\x02\u0255" +
		"\u023C\x03\x02\x02\x02\u0255\u023D\x03\x02\x02\x02\u0255\u023E\x03\x02" +
		"\x02\x02\u0255\u023F\x03\x02\x02\x02\u0255\u0240\x03\x02\x02\x02\u0255" +
		"\u0241\x03\x02\x02\x02\u0255\u0242\x03\x02\x02\x02\u0255\u0243\x03\x02" +
		"\x02\x02\u0255\u0244\x03\x02\x02\x02\u0255\u0245\x03\x02\x02\x02\u0255" +
		"\u0246\x03\x02\x02\x02\u0255\u0247\x03\x02\x02\x02\u0255\u0248\x03\x02" +
		"\x02\x02\u0255\u0249\x03\x02\x02\x02\u0255\u024A\x03\x02\x02\x02\u0255" +
		"\u024B\x03\x02\x02\x02\u0255\u024C\x03\x02\x02\x02\u0255\u024D\x03\x02" +
		"\x02\x02\u0255\u024E\x03\x02\x02\x02\u0255\u024F\x03\x02\x02\x02\u0255" +
		"\u0250\x03\x02\x02\x02\u0255\u0251\x03\x02\x02\x02\u0255\u0252\x03\x02" +
		"\x02\x02\u0255\u0253\x03\x02\x02\x02\u0255\u0254\x03\x02\x02\x02\u0256" +
		"\x05\x03\x02\x02\x02\u0257\u0258\x05\u0202\u0102\x02\u0258\x07\x03\x02" +
		"\x02\x02\u0259\u0282\x05\n\x06\x02\u025A\u0282\x05\f\x07\x02\u025B\u0282" +
		"\x05\x0E\b\x02\u025C\u0282\x05\x10\t\x02\u025D\u0282\x05\x12\n\x02\u025E" +
		"\u0282\x05\x14\v\x02\u025F\u0282\x05\x16\f\x02\u0260\u0282\x05\x18\r\x02" +
		"\u0261\u0282\x05\x1A\x0E\x02\u0262\u0282\x05 \x11\x02\u0263\u0282\x05" +
		"\"\x12\x02\u0264\u0282\x05$\x13\x02\u0265\u0282\x05&\x14\x02\u0266\u0282" +
		"\x05(\x15\x02\u0267\u0282\x05*\x16\x02\u0268\u0282\x05,\x17\x02\u0269" +
		"\u0282\x05.\x18\x02\u026A\u0282\x050\x19\x02\u026B\u0282\x052\x1A\x02" +
		"\u026C\u0282\x054\x1B\x02\u026D\u0282\x056\x1C\x02\u026E\u0282\x05:\x1E" +
		"\x02\u026F\u0282\x05<\x1F\x02\u0270\u0282\x05> \x02\u0271\u0282\x05@!" +
		"\x02\u0272\u0282\x05D#\x02\u0273\u0282\x05F$\x02\u0274\u0282\x05H%\x02" +
		"\u0275\u0282\x05J&\x02\u0276\u0282\x05L\'\x02\u0277\u0282\x05N(\x02\u0278" +
		"\u0282\x05P)\x02\u0279\u0282\x05R*\x02\u027A\u0282\x05T+\x02\u027B\u0282" +
		"\x05V,\x02\u027C\u0282\x05X-\x02\u027D\u0282\x05Z.\x02\u027E\u0282\x05" +
		"\\/\x02\u027F\u0282\x05^0\x02\u0280\u0282\x05`1\x02\u0281\u0259\x03\x02" +
		"\x02\x02\u0281\u025A\x03\x02\x02\x02\u0281\u025B\x03\x02\x02\x02\u0281" +
		"\u025C\x03\x02\x02\x02\u0281\u025D\x03\x02\x02\x02\u0281\u025E\x03\x02" +
		"\x02\x02\u0281\u025F\x03\x02\x02\x02\u0281\u0260\x03\x02\x02\x02\u0281" +
		"\u0261\x03\x02\x02\x02\u0281\u0262\x03\x02\x02\x02\u0281\u0263\x03\x02" +
		"\x02\x02\u0281\u0264\x03\x02\x02\x02\u0281\u0265\x03\x02\x02\x02\u0281" +
		"\u0266\x03\x02\x02\x02\u0281\u0267\x03\x02\x02\x02\u0281\u0268\x03\x02" +
		"\x02\x02\u0281\u0269\x03\x02\x02\x02\u0281\u026A\x03\x02\x02\x02\u0281" +
		"\u026B\x03\x02\x02\x02\u0281\u026C\x03\x02\x02\x02\u0281\u026D\x03\x02" +
		"\x02\x02\u0281\u026E\x03\x02\x02\x02\u0281\u026F\x03\x02\x02\x02\u0281" +
		"\u0270\x03\x02\x02\x02\u0281\u0271\x03\x02\x02\x02\u0281\u0272\x03\x02" +
		"\x02\x02\u0281\u0273\x03\x02\x02\x02\u0281\u0274\x03\x02\x02\x02\u0281" +
		"\u0275\x03\x02\x02\x02\u0281\u0276\x03\x02\x02\x02\u0281\u0277\x03\x02" +
		"\x02\x02\u0281\u0278\x03\x02\x02\x02\u0281\u0279\x03\x02\x02\x02\u0281" +
		"\u027A\x03\x02\x02\x02\u0281\u027B\x03\x02\x02\x02\u0281\u027C\x03\x02" +
		"\x02\x02\u0281\u027D\x03\x02\x02\x02\u0281\u027E\x03\x02\x02\x02\u0281" +
		"\u027F\x03\x02\x02\x02\u0281\u0280\x03\x02\x02\x02\u0282\t\x03\x02\x02" +
		"\x02\u0283\u0284\x07\x15\x02\x02\u0284\u0285\x07\x10\x02\x02\u0285\u0286" +
		"\x05\u0202\u0102\x02\u0286\u0287\x07\u0300\x02\x02\u0287\u0288\x05\u01EE" +
		"\xF8\x02\u0288\u0289\x07\u0301\x02\x02\u0289\u028A\x07\u01D6\x02\x02\u028A" +
		"\u028B\x07\u0249\x02\x02\u028B\u028C\x05\u0202\u0102\x02\u028C\u02A2\x03" +
		"\x02\x02\x02\u028D\u028E\x07\x15\x02\x02\u028E\u028F\x07\x10\x02\x02\u028F" +
		"\u0290\x05\u0202\u0102\x02\u0290\u0291\x07\u0300\x02\x02\u0291\u0292\x05" +
		"\u01EE\xF8\x02\u0292\u0293\x07\u0301\x02\x02\u0293\u0294\x07\u0195\x02" +
		"\x02\u0294\u0295\x07\u0249\x02\x02\u0295\u0296\x05\u01FA\xFE\x02\u0296" +
		"\u02A2\x03\x02\x02\x02\u0297\u0298\x07\x15\x02\x02\u0298\u0299\x07\x10" +
		"\x02\x02\u0299\u029A\x05\u0202\u0102\x02\u029A\u029B\x07\u0300\x02\x02" +
		"\u029B\u029C\x05\u01EE\xF8\x02\u029C\u029D\x07\u0301\x02\x02\u029D\u029E" +
		"\x07\u0209\x02\x02\u029E\u029F\x07\u01F5\x02\x02\u029F\u02A0\x05\u0202" +
		"\u0102\x02\u02A0\u02A2\x03\x02\x02\x02\u02A1\u0283\x03\x02\x02\x02\u02A1" +
		"\u028D\x03\x02\x02\x02\u02A1\u0297\x03\x02\x02\x02\u02A2\v\x03\x02\x02" +
		"\x02\u02A3\u02A4\x07\x15\x02\x02\u02A4\u02A5\x07[\x02\x02\u02A5\u02A6" +
		"\x05\u01CC\xE7\x02\u02A6\u02A7\x07\u01C9\x02\x02\u02A7\u02A8\x07\u02B9" +
		"\x02\x02\u02A8\u02BF\x03\x02\x02\x02\u02A9\u02AA\x07\x15\x02\x02\u02AA" +
		"\u02AB\x07[\x02\x02\u02AB\u02AC\x05\u01CC\xE7\x02\u02AC\u02AD\x07\u01D6" +
		"\x02\x02\u02AD\u02AE\x07\u0249\x02\x02\u02AE\u02AF\x05\u0202\u0102\x02" +
		"\u02AF\u02BF\x03\x02\x02\x02\u02B0\u02B1\x07\x15\x02\x02\u02B1\u02B2\x07" +
		"[\x02\x02\u02B2\u02B3\x05\u01CC\xE7\x02\u02B3\u02B4\x07\u0195\x02\x02" +
		"\u02B4\u02B5\x07\u0249\x02\x02\u02B5\u02B6\x05\u01FA\xFE\x02\u02B6\u02BF" +
		"\x03\x02\x02\x02\u02B7\u02B8\x07\x15\x02\x02\u02B8\u02B9\x07[\x02\x02" +
		"\u02B9\u02BA\x05\u01CC\xE7\x02\u02BA\u02BB\x07\u0209\x02\x02\u02BB\u02BC" +
		"\x07\u01F5\x02\x02\u02BC\u02BD\x05\u0202\u0102\x02\u02BD\u02BF\x03\x02" +
		"\x02\x02\u02BE\u02A3\x03\x02\x02\x02\u02BE\u02A9\x03\x02\x02\x02\u02BE" +
		"\u02B0\x03\x02\x02\x02\u02BE\u02B7\x03\x02\x02\x02\u02BF\r\x03\x02\x02" +
		"\x02\u02C0\u02C1\x07\x15\x02\x02\u02C1\u02C2\x07w\x02\x02\u02C2\u02C3" +
		"\x05\u0202\u0102\x02\u02C3\u02C4\x07\u01D6\x02\x02\u02C4\u02C5\x07\u0249" +
		"\x02\x02\u02C5\u02C6\x05\u0202\u0102\x02\u02C6\u02D6\x03\x02\x02\x02\u02C7" +
		"\u02C8\x07\x15\x02\x02\u02C8\u02C9\x07w\x02\x02\u02C9\u02CA\x05\u0202" +
		"\u0102\x02\u02CA\u02CB\x07\u0195\x02\x02\u02CB\u02CC\x07\u0249\x02\x02" +
		"\u02CC\u02CD\x05\u01FA\xFE\x02\u02CD\u02D6\x03\x02\x02\x02\u02CE\u02CF" +
		"\x07\x15\x02\x02\u02CF\u02D0\x07w\x02\x02\u02D0\u02D1\x05\u0202\u0102" +
		"\x02\u02D1\u02D2\x07\u0209\x02\x02\u02D2\u02D3\x07\u01F5\x02\x02\u02D3" +
		"\u02D4\x05\u0202\u0102\x02\u02D4\u02D6\x03\x02\x02\x02\u02D5\u02C0\x03" +
		"\x02\x02\x02\u02D5\u02C7\x03\x02\x02\x02\u02D5\u02CE\x03\x02\x02\x02\u02D6" +
		"\x0F\x03\x02\x02\x02\u02D7\u02D8\x05\u0206\u0104\x02\u02D8\x11\x03\x02" +
		"\x02\x02\u02D9\u02DA\x05\u0206\u0104\x02\u02DA\x13\x03\x02\x02\x02\u02DB" +
		"\u02DC\x07\x15\x02\x02\u02DC\u02DD\x07\xBC\x02\x02\u02DD\u02E3\x05\u0202" +
		"\u0102\x02\u02DE\u02DF\x07\u0209\x02\x02\u02DF\u02E0\x07\x9D\x02\x02\u02E0" +
		"\u02E4\x05\u01B2\xDA\x02\u02E1\u02E2\x07\xBE\x02\x02\u02E2\u02E4\x07\x9D" +
		"\x02\x02\u02E3\u02DE\x03\x02\x02\x02\u02E3\u02E1\x03\x02\x02\x02\u02E4" +
		"\u0328\x03\x02\x02\x02\u02E5\u02E6\x07\x15\x02\x02\u02E6\u02E7\x07\xBC" +
		"\x02\x02\u02E7\u02E8\x05\u0202\u0102\x02\u02E8\u02E9\t\x02\x02\x02\u02E9" +
		"\u02EA\x07\u016F\x02\x02\u02EA\u02EB\x07\u0174\x02\x02\u02EB\u0328\x03" +
		"\x02\x02\x02\u02EC\u02ED\x07\x15\x02\x02\u02ED\u02EE\x07\xBC\x02\x02\u02EE" +
		"\u02EF\x05\u0202\u0102\x02\u02EF\u02F0\x07\r\x02\x02\u02F0\u02F3\x05\x82" +
		"B\x02\u02F1\u02F2\x07\u016F\x02\x02\u02F2\u02F4\x07\u0275\x02\x02\u02F3" +
		"\u02F1\x03\x02\x02\x02\u02F3\u02F4\x03\x02\x02\x02\u02F4\u0328\x03\x02" +
		"\x02\x02\u02F5\u02F6\x07\x15\x02\x02\u02F6\u02F7\x07\xBC\x02\x02\u02F7" +
		"\u02F8\x05\u0202\u0102\x02\u02F8\u02F9\x07\xBE\x02\x02\u02F9\u02FC\x07" +
		"o\x02\x02\u02FA\u02FB\x07\u02B4\x02\x02\u02FB\u02FD\x07\xD5\x02\x02\u02FC" +
		"\u02FA\x03\x02\x02\x02\u02FC\u02FD\x03\x02\x02\x02\u02FD\u02FE\x03\x02" +
		"\x02\x02\u02FE\u0300\x05\u0202\u0102\x02\u02FF\u0301\t\x03\x02\x02\u0300" +
		"\u02FF\x03\x02\x02\x02\u0300\u0301\x03\x02\x02\x02\u0301\u0328\x03\x02" +
		"\x02\x02\u0302\u0303\x07\x15\x02\x02\u0303\u0304\x07\xBC\x02\x02\u0304" +
		"\u0305\x05\u0202\u0102\x02\u0305\u0306\x07\u01D6\x02\x02\u0306\u0307\x07" +
		"o\x02\x02\u0307\u0308\x05\u0202\u0102\x02\u0308\u0309\x07\u0249\x02\x02" +
		"\u0309\u030A\x05\u0202\u0102\x02\u030A\u0328\x03\x02\x02\x02\u030B\u030C" +
		"\x07\x15\x02\x02\u030C\u030D\x07\xBC\x02\x02\u030D\u030E\x05\u0202\u0102" +
		"\x02\u030E\u030F\x07\u0276\x02\x02\u030F\u0310\x07o\x02\x02\u0310\u0311" +
		"\x05\u0202\u0102\x02\u0311\u0328\x03\x02\x02\x02\u0312\u0313\x07\x15\x02" +
		"\x02\u0313\u0314\x07\xBC\x02\x02\u0314\u0315\x05\u0202\u0102\x02\u0315" +
		"\u0316\x07\u0195\x02\x02\u0316\u0317\x07\u0249\x02\x02\u0317\u0318\x05" +
		"\u01FA\xFE\x02\u0318\u0328\x03\x02\x02\x02\u0319\u031A\x07\x15\x02\x02" +
		"\u031A\u031B\x07\xBC\x02\x02\u031B\u031C\x05\u0202\u0102\x02\u031C\u031D" +
		"\x07\u01D6\x02\x02\u031D\u031E\x07\u0249\x02\x02\u031E\u031F\x05\u0202" +
		"\u0102\x02\u031F\u0328\x03\x02\x02\x02\u0320\u0321\x07\x15\x02\x02\u0321" +
		"\u0322\x07\xBC\x02\x02\u0322\u0323\x05\u0202\u0102\x02\u0323\u0324\x07" +
		"\u0209\x02\x02\u0324\u0325\x07\u01F5\x02\x02\u0325\u0326\x05\u0202\u0102" +
		"\x02\u0326\u0328\x03\x02\x02\x02\u0327\u02DB\x03\x02\x02\x02\u0327\u02E5" +
		"\x03\x02\x02\x02\u0327\u02EC\x03\x02\x02\x02\u0327\u02F5\x03\x02\x02\x02" +
		"\u0327\u0302\x03\x02\x02\x02\u0327\u030B\x03\x02\x02\x02\u0327\u0312\x03" +
		"\x02\x02\x02\u0327\u0319\x03\x02\x02\x02\u0327\u0320\x03\x02\x02\x02\u0328" +
		"\x15\x03\x02\x02\x02\u0329\u032A\x07\x15\x02\x02\u032A\u032B\x07\u02BC" +
		"\x02\x02\u032B\u032C\x07\u0256\x02\x02\u032C\u032D\x05\u0202\u0102\x02" +
		"\u032D\u032E\x07\xB5\x02\x02\u032E\u034B\x03\x02\x02\x02\u032F\u0330\x07" +
		"\x15\x02\x02\u0330\u0331\x07\u02BC\x02\x02\u0331\u0332\x07\u0256\x02\x02" +
		"\u0332\u0333\x05\u0202\u0102\x02\u0333\u0335\x07\xC5\x02\x02\u0334\u0336" +
		"\t\x04\x02\x02\u0335\u0334\x03\x02\x02\x02\u0335\u0336\x03\x02\x02\x02" +
		"\u0336\u034B\x03\x02\x02\x02\u0337\u0338\x07\x15\x02\x02\u0338\u0339\x07" +
		"\u02BC\x02\x02\u0339\u033A\x07\u0256\x02\x02\u033A\u033B\x05\u0202\u0102" +
		"\x02\u033B\u033C\x07\u0195\x02\x02\u033C\u0340\x07\u0249\x02\x02\u033D" +
		"\u0341\x05\u0202\u0102\x02\u033E\u0341\x07\x8F\x02\x02\u033F\u0341\x07" +
		"\u0208\x02\x02\u0340\u033D\x03\x02\x02\x02\u0340\u033E\x03\x02\x02\x02" +
		"\u0340\u033F\x03\x02\x02\x02\u0341\u034B\x03\x02\x02\x02\u0342\u0343\x07" +
		"\x15\x02\x02\u0343\u0344\x07\u02BC\x02\x02\u0344\u0345\x07\u0256\x02\x02" +
		"\u0345\u0346\x05\u0202\u0102\x02\u0346\u0347\x07\u01D6\x02\x02\u0347\u0348" +
		"\x07\u0249\x02\x02\u0348\u0349\x05\u0202\u0102\x02\u0349\u034B\x03\x02" +
		"\x02\x02\u034A\u0329\x03\x02\x02\x02\u034A\u032F\x03\x02\x02\x02\u034A" +
		"\u0337\x03\x02\x02\x02\u034A\u0342\x03\x02\x02\x02\u034B\x17\x03\x02\x02" +
		"\x02\u034C\u034D\x07\x15\x02\x02\u034D\u034E\x07\xD9\x02\x02\u034E\u034F" +
		"\x05\u0202\u0102\x02\u034F\u0352\x07\u026B\x02\x02\u0350\u0351\x07\u0249" +
		"\x02\x02\u0351\u0353\x05\u0202\u0102\x02\u0352\u0350\x03\x02\x02\x02\u0352" +
		"\u0353\x03\x02\x02\x02\u0353\u035C\x03\x02\x02\x02\u0354\u0355\x07\x15" +
		"\x02\x02\u0355\u0356\x07\xD9\x02\x02\u0356\u0357\x05\u0202\u0102\x02\u0357" +
		"\u0358\x07\u0209\x02\x02\u0358\u0359\x07\u01F5\x02\x02\u0359\u035A\x05" +
		"\u0202\u0102\x02\u035A\u035C\x03\x02\x02\x02\u035B\u034C\x03\x02\x02\x02" +
		"\u035B\u0354\x03\x02\x02\x02\u035C\x19\x03\x02\x02\x02\u035D\u035E\x05" +
		"\u0206\u0104\x02\u035E\x1B\x03\x02\x02\x02\u035F\u0361\x07\r\x02\x02\u0360" +
		"\u0362\x07`\x02\x02\u0361\u0360\x03\x02\x02\x02\u0361\u0362\x03\x02\x02" +
		"\x02\u0362\u0363\x03\x02\x02\x02\u0363\u0364\x05\u020A\u0106\x02\u0364" +
		"\u0367\x05\u01D8\xED\x02\u0365\u0366\x07Z\x02\x02\u0366\u0368\x05\u0202" +
		"\u0102\x02\u0367\u0365\x03\x02\x02\x02\u0367\u0368\x03\x02\x02\x02\u0368" +
		"\u036A\x03\x02\x02\x02\u0369\u036B\x05\u01F2\xFA\x02\u036A\u0369\x03\x02" +
		"\x02\x02\u036A\u036B\x03\x02\x02\x02\u036B\u040C\x03\x02\x02\x02\u036C" +
		"\u036E\x07\xBE\x02\x02\u036D\u036F\x07`\x02\x02\u036E\u036D\x03\x02\x02" +
		"\x02\u036E\u036F\x03\x02\x02\x02\u036F\u0372\x03\x02\x02\x02\u0370\u0371" +
		"\x07\u02B4\x02\x02\u0371\u0373\x07\xD5\x02\x02\u0372\u0370\x03\x02\x02" +
		"\x02\u0372\u0373\x03\x02\x02\x02\u0373\u0374\x03\x02\x02\x02\u0374\u0376" +
		"\x05\u020A\u0106\x02\u0375\u0377\t\x03\x02\x02\u0376\u0375\x03\x02\x02" +
		"\x02\u0376\u0377\x03\x02\x02\x02\u0377\u040C\x03\x02\x02\x02\u0378\u037A" +
		"\x07\x15\x02\x02\u0379\u037B\x07`\x02\x02\u037A\u0379\x03\x02\x02\x02" +
		"\u037A\u037B\x03\x02\x02\x02\u037B\u037C\x03\x02\x02\x02\u037C\u037F\x05" +
		"\u020A\u0106\x02\u037D\u037E\x07\u0209\x02\x02\u037E\u0380\x07\x93\x02" +
		"\x02\u037F\u037D\x03\x02\x02\x02\u037F\u0380\x03\x02\x02\x02\u0380\u0381" +
		"\x03\x02\x02\x02\u0381\u0382\x07\u025E\x02\x02\u0382\u0385\x05\u01D8\xED" +
		"\x02\u0383\u0384\x07Z\x02\x02\u0384\u0386\x05\u0202\u0102\x02\u0385\u0383" +
		"\x03\x02\x02\x02\u0385\u0386\x03\x02\x02\x02\u0386\u040C\x03\x02\x02\x02" +
		"\u0387\u0389\x07\x15\x02\x02\u0388\u038A\x07`\x02\x02\u0389\u0388\x03" +
		"\x02\x02\x02\u0389\u038A\x03\x02\x02\x02\u038A\u038B\x03\x02\x02\x02\u038B" +
		"\u038C\x05\u020A\u0106\x02\u038C\u038D\x07\u0209\x02\x02\u038D\u038E\x07" +
		"\x9D\x02\x02\u038E\u038F\x05\u01B2\xDA\x02\u038F\u040C\x03\x02\x02\x02" +
		"\u0390\u0392\x07\x15\x02\x02\u0391\u0393\x07`\x02\x02\u0392\u0391\x03" +
		"\x02\x02\x02\u0392\u0393\x03\x02\x02\x02\u0393\u0394\x03\x02\x02\x02\u0394" +
		"\u0395\x05\u020A\u0106\x02\u0395\u0396\x07\xBE\x02\x02\u0396\u0397\x07" +
		"\x9D\x02\x02\u0397\u040C\x03\x02\x02\x02\u0398\u039A\x07\x15\x02\x02\u0399" +
		"\u039B\x07`\x02\x02\u039A\u0399\x03\x02\x02\x02\u039A\u039B\x03\x02\x02" +
		"\x02\u039B\u039C\x03\x02\x02\x02\u039C\u039D\x05\u020A\u0106\x02\u039D" +
		"\u039E\t\x02\x02\x02\u039E\u039F\x07\u016F\x02\x02\u039F\u03A0\x07\u0174" +
		"\x02\x02\u03A0\u040C\x03\x02\x02\x02\u03A1\u03A3\x07\x15\x02\x02\u03A2" +
		"\u03A4\x07`\x02\x02\u03A3\u03A2\x03\x02\x02\x02\u03A3\u03A4\x03\x02\x02" +
		"\x02\u03A4\u03A5\x03\x02\x02\x02\u03A5\u03A6\x05\u020A\u0106\x02\u03A6" +
		"\u03A7\x07\u0209\x02\x02\u03A7\u03A8\x07\u0226\x02\x02\u03A8\u03A9\x07" +
		"\u011D\x02\x02\u03A9\u040C\x03\x02\x02\x02\u03AA\u03AC\x07\x15\x02\x02" +
		"\u03AB\u03AD\x07`\x02\x02\u03AC\u03AB\x03\x02\x02\x02\u03AC\u03AD\x03" +
		"\x02\x02\x02\u03AD\u03AE\x03\x02\x02\x02\u03AE\u03AF\x05\u020A\u0106\x02" +
		"\u03AF\u03B0\x07\u0209\x02\x02\u03B0\u03B1\x07\u0300\x02\x02\u03B1\u03B2" +
		"\x05\u01D4\xEB\x02\u03B2\u03B3\x07\u0301\x02\x02\u03B3\u040C\x03\x02\x02" +
		"\x02\u03B4\u03B6\x07\x15\x02\x02\u03B5\u03B7\x07`\x02\x02\u03B6\u03B5" +
		"\x03\x02\x02\x02\u03B6\u03B7\x03\x02\x02\x02\u03B7\u03B8\x03\x02\x02\x02" +
		"\u03B8\u03B9\x05\u020A\u0106\x02\u03B9\u03BA\x07\u01DA\x02\x02\u03BA\u03BB" +
		"\x07\u0300\x02\x02\u03BB\u03BC\x05\u01D0\xE9\x02\u03BC\u03BD\x07\u0301" +
		"\x02\x02\u03BD\u040C\x03\x02\x02\x02\u03BE\u03C0\x07\x15\x02\x02\u03BF" +
		"\u03C1\x07`\x02\x02\u03C0\u03BF\x03\x02\x02\x02\u03C0\u03C1\x03\x02\x02" +
		"\x02\u03C1\u03C2\x03\x02\x02\x02\u03C2\u03C3\x05\u020A\u0106\x02\u03C3" +
		"\u03C4\x07\u0209\x02\x02\u03C4\u03C5\x07\u022B\x02\x02\u03C5\u03C6\t\x05" +
		"\x02\x02\u03C6\u040C\x03\x02\x02\x02\u03C7\u03C9\x07\x15\x02\x02\u03C8" +
		"\u03CA\x07`\x02\x02\u03C9\u03C8\x03\x02\x02\x02\u03C9\u03CA\x03\x02\x02" +
		"\x02\u03CA\u03CB\x03\x02\x02\x02\u03CB\u03CC\x05\u020A\u0106\x02\u03CC" +
		"\u03CE\x07\u0188\x02\x02\u03CD\u03CF\t\x06\x02\x02\u03CE\u03CD\x03\x02" +
		"\x02\x02\u03CE\u03CF\x03\x02\x02\x02\u03CF\u040C\x03\x02\x02\x02\u03D0" +
		"\u03D1\x07\r\x02\x02\u03D1\u03D4\x05\u01F8\xFD\x02\u03D2\u03D3\x07\u016F" +
		"\x02\x02\u03D3\u03D5\x07\u0275\x02\x02\u03D4\u03D2\x03\x02\x02\x02\u03D4" +
		"\u03D5\x03\x02\x02\x02\u03D5\u040C\x03\x02\x02\x02\u03D6\u03D7\x07\u0276" +
		"\x02\x02\u03D7\u03D8\x07o\x02\x02\u03D8\u040C\x05\u0204\u0103\x02\u03D9" +
		"\u03DA\x07\xBE\x02\x02\u03DA\u03DD\x07o\x02\x02\u03DB\u03DC\x07\u02B4" +
		"\x02\x02\u03DC\u03DE\x07\xD5\x02\x02\u03DD\u03DB\x03\x02\x02\x02\u03DD" +
		"\u03DE\x03\x02\x02\x02\u03DE\u03DF\x03\x02\x02\x02\u03DF\u03E1\x05\u0204" +
		"\u0103\x02\u03E0\u03E2\t\x03\x02\x02\u03E1\u03E0\x03\x02\x02\x02\u03E1" +
		"\u03E2\x03\x02\x02\x02\u03E2\u040C\x03\x02\x02\x02\u03E3\u03E4\x07\xB5" +
		"\x02\x02\u03E4\u03E8\x07\u0256\x02\x02\u03E5\u03E9\x05\u0204\u0103\x02" +
		"\u03E6\u03E9\x07\x12\x02\x02\u03E7\u03E9\x07\u026E\x02\x02\u03E8\u03E5" +
		"\x03\x02\x02\x02\u03E8\u03E6\x03\x02\x02\x02\u03E8\u03E7\x03\x02\x02\x02" +
		"\u03E8\u03E9\x03\x02\x02\x02\u03E9\u040C\x03\x02\x02\x02\u03EA\u03EB\x07" +
		"\xC5\x02\x02\u03EB\u03EF\x07\u0256\x02\x02\u03EC\u03F0\x05\u0204\u0103" +
		"\x02\u03ED\u03F0\x07\x12\x02\x02\u03EE\u03F0\x07\u026E\x02\x02\u03EF\u03EC" +
		"\x03\x02\x02\x02\u03EF\u03ED\x03\x02\x02\x02\u03EF\u03EE\x03\x02\x02\x02" +
		"\u03EF\u03F0\x03\x02\x02\x02\u03F0\u040C\x03\x02\x02\x02\u03F1\u03F2\x07" +
		"\xC5\x02\x02\u03F2\u03F3\x07\u01D9\x02\x02\u03F3\u03F4\x07\u0256\x02\x02" +
		"\u03F4\u040C\x05\u0204\u0103\x02\u03F5\u03F6\x07\xC5\x02\x02\u03F6\u03F7" +
		"\x07\x16\x02\x02\u03F7\u03F8\x07\u0256\x02\x02\u03F8\u040C\x05\u0204\u0103" +
		"\x02\u03F9\u03FA\x07\u0209\x02\x02\u03FA\u03FB\x07\u0288\x02\x02\u03FB" +
		"\u040C\x07\u0180\x02\x02\u03FC\u03FD\x07\u0209\x02\x02\u03FD\u03FE\x07" +
		"\u028A\x02\x02\u03FE\u040C\x07\u0180\x02\x02\u03FF\u0400\x07\u0295\x02" +
		"\x02\u0400\u040C\x05\u0202\u0102\x02\u0401\u0402\x07\u0169\x02\x02\u0402" +
		"\u0403\x07\u0295\x02\x02\u0403\u040C\x05\u0202\u0102\x02\u0404\u0405\x07" +
		"\u0195\x02\x02\u0405\u0406\x07\u0249\x02\x02\u0406\u040C\x05\u01FA\xFE" +
		"\x02\u0407\u0409\x07\u0188\x02\x02\u0408\u040A\t\x06\x02\x02\u0409\u0408" +
		"\x03\x02\x02\x02\u0409\u040A\x03\x02\x02\x02\u040A\u040C\x03\x02\x02\x02" +
		"\u040B\u035F\x03\x02\x02\x02\u040B\u036C\x03\x02\x02\x02\u040B\u0378\x03" +
		"\x02\x02\x02\u040B\u0387\x03\x02\x02\x02\u040B\u0390\x03\x02\x02\x02\u040B" +
		"\u0398\x03\x02\x02\x02\u040B\u03A1\x03\x02\x02\x02\u040B\u03AA\x03\x02" +
		"\x02\x02\u040B\u03B4\x03\x02\x02\x02\u040B\u03BE\x03\x02\x02\x02\u040B" +
		"\u03C7\x03\x02\x02\x02\u040B\u03D0\x03\x02\x02\x02\u040B\u03D6\x03\x02" +
		"\x02\x02\u040B\u03D9\x03\x02\x02\x02\u040B\u03E3\x03\x02\x02\x02\u040B" +
		"\u03EA\x03\x02\x02\x02\u040B\u03F1\x03\x02\x02\x02\u040B\u03F5\x03\x02" +
		"\x02\x02\u040B\u03F9\x03\x02\x02\x02\u040B\u03FC\x03\x02\x02\x02\u040B" +
		"\u03FF\x03\x02\x02\x02\u040B\u0401\x03\x02\x02\x02\u040B\u0404\x03\x02" +
		"\x02\x02\u040B\u0407\x03\x02\x02\x02\u040C\x1D\x03\x02\x02\x02\u040D\u0412" +
		"\x05\x1C\x0F\x02\u040E\u040F\x07\u02FA\x02\x02\u040F\u0411\x05\x1C\x0F" +
		"\x02\u0410\u040E\x03\x02\x02\x02\u0411\u0414\x03\x02\x02\x02\u0412\u0410" +
		"\x03\x02\x02\x02\u0412\u0413\x03\x02\x02\x02\u0413\x1F\x03\x02\x02\x02" +
		"\u0414\u0412\x03\x02\x02\x02\u0415\u0416\x07\x15\x02\x02\u0416\u0417\x07" +
		"\xE7\x02\x02\u0417\u041A\x07\u0239\x02\x02\u0418\u0419\x07\u02B4\x02\x02" +
		"\u0419\u041B\x07\xD5\x02\x02\u041A\u0418\x03\x02\x02\x02\u041A\u041B\x03" +
		"\x02\x02\x02\u041B\u041D\x03\x02\x02\x02\u041C\u041E\x07\u0183\x02\x02" +
		"\u041D\u041C\x03\x02\x02\x02\u041D\u041E\x03\x02\x02\x02\u041E\u041F\x03" +
		"\x02\x02\x02\u041F\u0421\x05\u0202\u0102\x02\u0420\u0422\x07\u02FF\x02" +
		"\x02\u0421\u0420\x03\x02\x02\x02\u0421\u0422\x03\x02\x02\x02\u0422\u0423" +
		"\x03\x02\x02\x02\u0423\u0424\x05\x1E\x10\x02\u0424\u0454\x03\x02\x02\x02" +
		"\u0425\u0426\x07\x15\x02\x02\u0426\u0427\x07\xE7\x02\x02\u0427\u042A\x07" +
		"\u0239\x02\x02\u0428\u0429\x07\u02B4\x02\x02\u0429\u042B\x07\xD5\x02\x02" +
		"\u042A\u0428\x03\x02\x02\x02\u042A\u042B\x03\x02\x02\x02\u042B\u042D\x03" +
		"\x02\x02\x02\u042C\u042E\x07\u0183\x02\x02\u042D\u042C\x03\x02\x02\x02" +
		"\u042D\u042E\x03\x02\x02\x02\u042E\u042F\x03\x02\x02\x02\u042F\u0431\x05" +
		"\u0202\u0102\x02\u0430\u0432\x07\u02FF\x02\x02\u0431\u0430\x03\x02\x02" +
		"\x02\u0431\u0432\x03\x02\x02\x02\u0432\u0433\x03\x02\x02\x02\u0433\u0435" +
		"\x07\u01D6\x02\x02\u0434\u0436\x07`\x02\x02\u0435\u0434\x03\x02\x02\x02" +
		"\u0435\u0436\x03\x02\x02\x02\u0436\u0437\x03\x02\x02\x02\u0437\u0438\x05" +
		"\u020A\u0106\x02\u0438\u0439\x07\u0249\x02\x02\u0439\u043A\x05\u0202\u0102" +
		"\x02\u043A\u0454\x03\x02\x02\x02\u043B\u043C\x07\x15\x02\x02\u043C\u043D" +
		"\x07\xE7\x02\x02\u043D\u0440\x07\u0239\x02\x02\u043E\u043F\x07\u02B4\x02" +
		"\x02\u043F\u0441\x07\xD5\x02\x02\u0440\u043E\x03\x02\x02\x02\u0440\u0441" +
		"\x03\x02\x02\x02\u0441\u0442\x03\x02\x02\x02\u0442\u0443\x05\u0202\u0102" +
		"\x02\u0443\u0444\x07\u01D6\x02\x02\u0444\u0445\x07\u0249\x02\x02\u0445" +
		"\u0446\x05\u0202\u0102\x02\u0446\u0454\x03\x02\x02\x02\u0447\u0448\x07" +
		"\x15\x02\x02\u0448\u0449\x07\xE7\x02\x02\u0449\u044C\x07\u0239\x02\x02" +
		"\u044A\u044B\x07\u02B4\x02\x02\u044B\u044D\x07\xD5\x02\x02\u044C\u044A" +
		"\x03\x02\x02\x02\u044C\u044D\x03\x02\x02\x02\u044D\u044E\x03\x02\x02\x02" +
		"\u044E\u044F\x05\u0202\u0102\x02\u044F\u0450\x07\u0209\x02\x02\u0450\u0451" +
		"\x07\u01F5\x02\x02\u0451\u0452\x05\u0202\u0102\x02\u0452\u0454\x03\x02" +
		"\x02\x02\u0453\u0415\x03\x02\x02\x02\u0453\u0425\x03\x02\x02\x02\u0453" +
		"\u043B\x03\x02\x02\x02\u0453\u0447\x03\x02\x02\x02\u0454!\x03\x02\x02" +
		"\x02\u0455\u0456\x05\u0206\u0104\x02\u0456#\x03\x02\x02\x02\u0457\u0458" +
		"\x07\x15\x02\x02\u0458\u0459\x07\xFC\x02\x02\u0459\u045A\x05\u01FA\xFE" +
		"\x02\u045A\u045B\x07\r\x02\x02\u045B\u045C\x07\u026E\x02\x02\u045C\u045D" +
		"\x05\u01D0\xE9\x02\u045D\u046D\x03\x02\x02\x02\u045E\u045F\x07\x15\x02" +
		"\x02\u045F\u0460\x07\xFC\x02\x02\u0460\u0461\x05\u01FA\xFE\x02\u0461\u0462" +
		"\x07\xBE\x02\x02\u0462\u0463\x07\u026E\x02\x02\u0463\u0464\x05\u01D0\xE9" +
		"\x02\u0464\u046D\x03\x02\x02\x02\u0465\u0466\x07\x15\x02\x02\u0466\u0467" +
		"\x07\xFC\x02\x02\u0467\u0468\x05\u0202\u0102\x02\u0468\u0469\x07\u01D6" +
		"\x02\x02\u0469\u046A\x07\u0249\x02\x02\u046A\u046B\x05\u0202\u0102\x02" +
		"\u046B\u046D\x03\x02\x02\x02\u046C\u0457\x03\x02\x02\x02\u046C\u045E\x03" +
		"\x02\x02\x02\u046C\u0465\x03\x02\x02\x02\u046D%\x03\x02\x02\x02\u046E" +
		"\u046F\x07\x15\x02\x02\u046F\u0472\x07\u010E\x02\x02\u0470\u0471\x07\u02B4" +
		"\x02\x02\u0471\u0473\x07\xD5\x02\x02\u0472\u0470\x03\x02\x02\x02\u0472" +
		"\u0473\x03\x02\x02\x02\u0473\u0474\x03\x02\x02\x02\u0474\u0475\x05\u0202" +
		"\u0102\x02\u0475\u0476\x07\u01D6\x02\x02\u0476\u0477\x07\u0249\x02\x02" +
		"\u0477\u0478\x05\u0202\u0102\x02\u0478\u04B5\x03\x02\x02\x02\u0479\u047A" +
		"\x07\x15\x02\x02\u047A\u047D\x07\u010E\x02\x02\u047B\u047C\x07\u02B4\x02" +
		"\x02\u047C\u047E\x07\xD5\x02\x02\u047D\u047B\x03\x02\x02\x02\u047D\u047E" +
		"\x03\x02\x02\x02\u047E\u047F\x03\x02\x02\x02\u047F\u0480\x05\u0202\u0102" +
		"\x02\u0480\u0481\x07\u0209\x02\x02\u0481\u0482\x07\u023C\x02\x02\u0482" +
		"\u0483\x05\u0202\u0102\x02\u0483\u04B5\x03\x02\x02\x02\u0484\u0485\x07" +
		"\x15\x02\x02\u0485\u0486\x07\u010E\x02\x02\u0486\u0487\x05\u0202\u0102" +
		"\x02\u0487\u0488\x07\xA9\x02\x02\u0488\u0489\x07\u0182\x02\x02\u0489\u048A" +
		"\x07\xD9\x02\x02\u048A\u048B\x05\u0202\u0102\x02\u048B\u04B5\x03\x02\x02" +
		"\x02\u048C\u048D\x07\x15\x02\x02\u048D\u0490\x07\u010E\x02\x02\u048E\u048F" +
		"\x07\u02B4\x02\x02\u048F\u0491\x07\xD5\x02\x02\u0490\u048E\x03\x02\x02" +
		"\x02\u0490\u0491\x03\x02\x02\x02\u0491\u0492\x03\x02\x02\x02\u0492\u0493" +
		"\x05\u0202\u0102\x02\u0493\u0494\x07\u0209\x02\x02\u0494\u0495\x07\u0300" +
		"\x02\x02\u0495\u0496\x05\u01D4\xEB\x02\u0496\u0497\x07\u0301\x02\x02\u0497" +
		"\u04B5\x03\x02\x02\x02\u0498\u0499\x07\x15\x02\x02\u0499\u049C\x07\u010E" +
		"\x02\x02\u049A\u049B\x07\u02B4\x02\x02\u049B\u049D\x07\xD5\x02\x02\u049C" +
		"\u049A\x03\x02\x02\x02\u049C\u049D\x03\x02\x02\x02\u049D\u049E\x03\x02" +
		"\x02\x02\u049E\u049F\x07\u01DA\x02\x02\u049F\u04A0\x07\u0300\x02\x02\u04A0" +
		"\u04A1\x05\u01D0\xE9\x02\u04A1\u04A2\x07\u0301\x02\x02\u04A2\u04B5\x03" +
		"\x02\x02\x02\u04A3\u04A4\x07\x15\x02\x02\u04A4\u04A5\x07\u010E\x02\x02" +
		"\u04A5\u04A6\x07\x12\x02\x02\u04A6\u04A7\x07\u010B\x02\x02\u04A7\u04A8" +
		"\x07\u023C\x02\x02\u04A8\u04AC\x05\u0202\u0102\x02\u04A9\u04AA\x07\u02D0" +
		"\x02\x02\u04AA\u04AB\x078\x02\x02\u04AB\u04AD\x05\u01D0\xE9\x02\u04AC" +
		"\u04A9\x03\x02\x02\x02\u04AC\u04AD\x03\x02\x02\x02\u04AD\u04AE\x03\x02" +
		"\x02\x02\u04AE\u04AF\x07\u0209\x02\x02\u04AF\u04B0\x07\u023C\x02\x02\u04B0" +
		"\u04B2\x05\u0202\u0102\x02\u04B1\u04B3\x07\u0173\x02\x02\u04B2\u04B1\x03" +
		"\x02\x02\x02\u04B2\u04B3\x03\x02\x02\x02\u04B3\u04B5\x03\x02\x02\x02\u04B4" +
		"\u046E\x03\x02\x02\x02\u04B4\u0479\x03\x02\x02\x02\u04B4\u0484\x03\x02" +
		"\x02\x02\u04B4\u048C\x03\x02\x02\x02\u04B4\u0498\x03\x02\x02\x02\u04B4" +
		"\u04A3\x03\x02\x02\x02\u04B5\'\x03\x02\x02\x02\u04B6\u04B8\x07\x15\x02" +
		"\x02\u04B7\u04B9\x07\u01B9\x02\x02\u04B8\u04B7\x03\x02\x02\x02\u04B8\u04B9" +
		"\x03\x02\x02\x02";
	private static readonly _serializedATNSegment4: string =
		"\u04B9\u04BA\x03\x02\x02\x02\u04BA\u04BB\x07\u012D\x02\x02\u04BB\u04BC" +
		"\x05\u0202\u0102\x02\u04BC\u04BD\x07\u01D6\x02\x02\u04BD\u04BE\x07\u0249" +
		"\x02\x02\u04BE\u04BF\x05\u0202\u0102\x02\u04BF\u04CE\x03\x02\x02\x02\u04C0" +
		"\u04C2\x07\x15\x02\x02\u04C1\u04C3\x07\u01B9\x02\x02\u04C2\u04C1\x03\x02" +
		"\x02\x02\u04C2\u04C3\x03\x02\x02\x02\u04C3\u04C4\x03\x02\x02\x02\u04C4" +
		"\u04C5\x07\u012D\x02\x02\u04C5\u04C6\x05\u0202\u0102\x02\u04C6\u04C7\x07" +
		"\u0195\x02\x02\u04C7\u04CB\x07\u0249\x02\x02\u04C8\u04CC\x05\u0202\u0102" +
		"\x02\u04C9\u04CC\x07\x8F\x02\x02\u04CA\u04CC\x07\u0208\x02\x02\u04CB\u04C8" +
		"\x03\x02\x02\x02\u04CB\u04C9\x03\x02\x02\x02\u04CB\u04CA\x03\x02\x02\x02" +
		"\u04CC\u04CE\x03\x02\x02\x02\u04CD\u04B6\x03\x02\x02\x02\u04CD\u04C0\x03" +
		"\x02\x02\x02\u04CE)\x03\x02\x02\x02\u04CF\u04D0\x07\x15\x02\x02\u04D0" +
		"\u04D1\x07\u012E\x02\x02\u04D1\u04D2\x07\u017A\x02\x02\u04D2\u04D3\x07" +
		"\u0307\x02\x02\u04D3\u04D4\x07\u0195\x02\x02\u04D4\u04D8\x07\u0249\x02" +
		"\x02\u04D5\u04D9\x05\u0202\u0102\x02\u04D6\u04D9\x07\x8F\x02\x02\u04D7" +
		"\u04D9\x07\u0208\x02\x02\u04D8\u04D5\x03\x02\x02\x02\u04D8\u04D6\x03\x02" +
		"\x02\x02\u04D8\u04D7\x03\x02\x02\x02\u04D9+\x03\x02\x02\x02\u04DA\u04DB" +
		"\x05\u0206\u0104\x02\u04DB-\x03\x02\x02\x02\u04DC\u04DD\x05\u0206\u0104" +
		"\x02\u04DD/\x03\x02\x02\x02\u04DE\u04DF\x07\x15\x02\x02\u04DF\u04E0\x07" +
		"\u0186\x02\x02\u04E0\u04E1\x07S\x02\x02\u04E1\u04E2\x05\u0202\u0102\x02" +
		"\u04E2\u04E3\x07\u0273\x02\x02\u04E3\u04E4\x05\u01DC\xEF\x02\u04E4\u04E5" +
		"\x07\u01D6\x02\x02\u04E5\u04E6\x07\u0249\x02\x02\u04E6\u04E7\x05\u0202" +
		"\u0102\x02\u04E7\u0500\x03\x02\x02\x02\u04E8\u04E9\x07\x15\x02\x02\u04E9" +
		"\u04EA\x07\u0186\x02\x02\u04EA\u04EB\x07S\x02\x02\u04EB\u04EC\x05\u0202" +
		"\u0102\x02\u04EC\u04ED\x07\u0273\x02\x02\u04ED\u04EE\x05\u01DC\xEF\x02" +
		"\u04EE\u04EF\x07\u0195\x02\x02\u04EF\u04F3\x07\u0249\x02\x02\u04F0\u04F4" +
		"\x05\u0202\u0102\x02\u04F1\u04F4\x07\x8F\x02\x02\u04F2\u04F4\x07\u0208" +
		"\x02\x02\u04F3\u04F0\x03\x02\x02\x02\u04F3\u04F1\x03\x02\x02\x02\u04F3" +
		"\u04F2\x03\x02\x02\x02\u04F4\u0500\x03\x02\x02\x02\u04F5\u04F6\x07\x15" +
		"\x02\x02\u04F6\u04F7\x07\u0186\x02\x02\u04F7\u04F8\x07S\x02\x02\u04F8" +
		"\u04F9\x05\u0202\u0102\x02\u04F9\u04FA\x07\u0273\x02\x02\u04FA\u04FB\x05" +
		"\u01DC\xEF\x02\u04FB\u04FC\x07\u0209\x02\x02\u04FC\u04FD\x07\u01F5\x02" +
		"\x02\u04FD\u04FE\x05\u0202\u0102\x02\u04FE\u0500\x03\x02\x02\x02\u04FF" +
		"\u04DE\x03\x02\x02\x02\u04FF\u04E8\x03\x02\x02\x02\u04FF\u04F5\x03\x02" +
		"\x02\x02\u05001\x03\x02\x02\x02\u0501\u0502\x05\u0206\u0104\x02\u0502" +
		"3\x03\x02\x02\x02\u0503\u0504\x07\x15\x02\x02\u0504\u0505\x07\u02CF\x02" +
		"\x02\u0505\u0506\x05\u0202\u0102\x02\u0506\u0507\x07\u0182\x02\x02\u0507" +
		"\u0508\x05\u0202\u0102\x02\u0508\u0509\x07\u01D6\x02\x02\u0509\u050A\x07" +
		"\u0249\x02\x02\u050A\u050B\x05\u0202\u0102\x02\u050B\u051F\x03\x02\x02" +
		"\x02\u050C\u050D\x07\x15\x02\x02\u050D\u050E\x07\u02CF\x02\x02\u050E\u050F" +
		"\x05\u0202\u0102\x02\u050F\u0510\x07\u0182\x02\x02\u0510\u0513\x05\u0202" +
		"\u0102\x02\u0511\u0512\x07\u0249\x02\x02\u0512\u0514\x05\u01FC\xFF\x02" +
		"\u0513\u0511\x03\x02\x02\x02\u0513\u0514\x03\x02\x02\x02\u0514\u0517\x03" +
		"\x02\x02\x02\u0515\u0516\x07\u0273\x02\x02\u0516\u0518\x05\u01EC\xF7\x02" +
		"\u0517\u0515\x03\x02\x02\x02\u0517\u0518\x03\x02\x02\x02\u0518\u051C\x03" +
		"\x02\x02\x02\u0519\u051A\x07\u0288\x02\x02\u051A\u051B\x07P\x02\x02\u051B" +
		"\u051D\x05\u01EC\xF7\x02\u051C\u0519\x03\x02\x02\x02\u051C\u051D\x03\x02" +
		"\x02\x02\u051D\u051F\x03\x02\x02\x02\u051E\u0503\x03\x02\x02\x02\u051E" +
		"\u050C\x03\x02\x02\x02\u051F5\x03\x02\x02\x02\u0520\u0521\x07\x15\x02" +
		"\x02\u0521\u0522\x07\u01BC\x02\x02\u0522\u0523\x05\u0202\u0102\x02\u0523" +
		"\u0524\x07\r\x02\x02\u0524\u0526\x07\u0239\x02\x02\u0525\u0527\x07\u0183" +
		"\x02\x02\u0526\u0525\x03\x02\x02\x02\u0526\u0527\x03\x02\x02\x02\u0527" +
		"\u0528\x03\x02\x02\x02\u0528\u0529\x05\u01D0\xE9\x02\u0529\u0555\x03\x02" +
		"\x02\x02\u052A\u052B\x07\x15\x02\x02\u052B\u052C\x07\u01BC\x02\x02\u052C" +
		"\u052D\x05\u0202\u0102\x02\u052D\u052E\x07\u0209\x02\x02\u052E\u0530\x07" +
		"\u0239\x02\x02\u052F\u0531\x07\u0183\x02\x02\u0530\u052F\x03\x02\x02\x02" +
		"\u0530\u0531\x03\x02\x02\x02\u0531\u0532\x03\x02\x02\x02\u0532\u0533\x05" +
		"\u01D0\xE9\x02\u0533\u0555\x03\x02\x02\x02\u0534\u0535\x07\x15\x02\x02" +
		"\u0535\u0536\x07\u01BC\x02\x02\u0536\u0537\x05\u0202\u0102\x02\u0537\u0538" +
		"\x07\xBE\x02\x02\u0538\u053A\x07\u0239\x02\x02\u0539\u053B\x07\u0183\x02" +
		"\x02\u053A\u0539\x03\x02\x02\x02\u053A\u053B\x03\x02\x02\x02\u053B\u053C" +
		"\x03\x02\x02\x02\u053C\u053D\x05\u01D0\xE9\x02\u053D\u0555\x03\x02\x02" +
		"\x02\u053E\u053F\x07\x15\x02\x02\u053F\u0540\x07\u01BC\x02\x02\u0540\u0541" +
		"\x05\u0202\u0102\x02\u0541\u0542\x07\u0209\x02\x02\u0542\u0543\x07\u0300" +
		"\x02\x02\u0543\u0544\x05\u01D4\xEB\x02\u0544\u0545\x07\u0301\x02\x02\u0545" +
		"\u0555\x03\x02\x02\x02\u0546\u0547\x07\x15\x02\x02\u0547\u0548\x07\u01BC" +
		"\x02\x02\u0548\u0549\x05\u0202\u0102\x02\u0549\u054A\x07\u0195\x02\x02" +
		"\u054A\u054B\x07\u0249\x02\x02\u054B\u054C\x05\u01FA\xFE\x02\u054C\u0555" +
		"\x03\x02\x02\x02\u054D\u054E\x07\x15\x02\x02\u054E\u054F\x07\u01BC\x02" +
		"\x02\u054F\u0550\x05\u0202\u0102\x02\u0550\u0551\x07\u01D6\x02\x02\u0551" +
		"\u0552\x07\u0249\x02\x02\u0552\u0553\x05\u01CC\xE7\x02\u0553\u0555\x03" +
		"\x02\x02\x02\u0554\u0520\x03\x02\x02\x02\u0554\u052A\x03\x02\x02\x02\u0554" +
		"\u0534\x03\x02\x02\x02\u0554\u053E\x03\x02\x02\x02\u0554\u0546\x03\x02" +
		"\x02\x02\u0554\u054D\x03\x02\x02\x02\u05557\x03\x02\x02\x02\u0556\u0570" +
		"\x07\u0291\x02\x02\u0557\u0570\x07\u0292\x02\x02\u0558\u0570\x07\x81\x02" +
		"\x02\u0559\u0570\x07\u016A\x02\x02\u055A\u0570\x07\u0293\x02\x02\u055B" +
		"\u0570\x07\u0294\x02\x02\u055C\u0570\x07\u0295\x02\x02\u055D\u0570\x07" +
		"\u0296\x02\x02\u055E\u0570\x07\u0297\x02\x02\u055F\u0570\x07\u0298\x02" +
		"\x02\u0560\u0570\x07\u0299\x02\x02\u0561\u0570\x07\u029A\x02\x02\u0562" +
		"\u0570\x07\u029B\x02\x02\u0563\u0570\x07\u029C\x02\x02\u0564\u0565\x07" +
		"m\x02\x02\u0565\u0566\x07\u0138\x02\x02\u0566\u0570\x07\u011D\x02\x02" +
		"\u0567\u0569\x07\xC7\x02\x02\u0568\u0567\x03\x02\x02\x02\u0568\u0569\x03" +
		"\x02\x02\x02\u0569\u056A\x03\x02\x02\x02\u056A\u056B\x07\u01A3\x02\x02" +
		"\u056B\u0570\x07\u030A\x02\x02\u056C\u056D\x07\u0275\x02\x02\u056D\u056E" +
		"\x07\u026A\x02\x02\u056E\u0570\x07\u030A\x02\x02\u056F\u0556\x03\x02\x02" +
		"\x02\u056F\u0557\x03\x02\x02\x02\u056F\u0558\x03\x02\x02\x02\u056F\u0559" +
		"\x03\x02\x02\x02\u056F\u055A\x03\x02\x02\x02\u056F\u055B\x03\x02\x02\x02" +
		"\u056F\u055C\x03\x02\x02\x02\u056F\u055D\x03\x02\x02\x02\u056F\u055E\x03" +
		"\x02\x02\x02\u056F\u055F\x03\x02\x02\x02\u056F\u0560\x03\x02\x02\x02\u056F" +
		"\u0561\x03\x02\x02\x02\u056F\u0562\x03\x02\x02\x02\u056F\u0563\x03\x02" +
		"\x02\x02\u056F\u0564\x03\x02\x02\x02\u056F\u0568\x03\x02\x02\x02\u056F" +
		"\u056C\x03\x02\x02\x02\u05709\x03\x02\x02\x02\u0571\u0572\x07\x15\x02" +
		"\x02\u0572\u0573\x07\u01E7\x02\x02\u0573\u0575\x05\u01FA\xFE\x02\u0574" +
		"\u0576\x07\u0288\x02\x02\u0575\u0574\x03\x02\x02\x02\u0575\u0576\x03\x02" +
		"\x02\x02\u0576\u0578\x03\x02\x02\x02\u0577\u0579\x058\x1D\x02\u0578\u0577" +
		"\x03\x02\x02\x02\u0579\u057A\x03\x02\x02\x02\u057A\u0578\x03\x02\x02\x02" +
		"\u057A\u057B\x03\x02\x02\x02\u057B\u05C0\x03\x02\x02\x02\u057C\u057D\x07" +
		"\x15\x02\x02\u057D\u057E\x07\u01E7\x02\x02\u057E\u057F\x05\u01CC\xE7\x02" +
		"\u057F\u0580\x07\u01D6\x02\x02\u0580\u0581\x07\u0249\x02\x02\u0581\u0582" +
		"\x05\u01CC\xE7\x02\u0582\u05C0\x03\x02\x02\x02\u0583\u0584\x07\x15\x02" +
		"\x02\u0584\u0587\x07\u01E7\x02\x02\u0585\u0588\x05\u01FA\xFE\x02\u0586" +
		"\u0588\x07\x12\x02\x02\u0587\u0585\x03\x02\x02\x02\u0587\u0586\x03\x02" +
		"\x02\x02\u0588\u058C\x03\x02\x02\x02\u0589\u058A\x07\u010B\x02\x02\u058A" +
		"\u058B\x07\x94\x02\x02\u058B\u058D\x05\u01CC\xE7\x02\u058C\u0589\x03\x02" +
		"\x02\x02\u058C\u058D\x03\x02\x02\x02\u058D\u058E\x03\x02\x02\x02\u058E" +
		"\u058F\x07\u0209\x02\x02\u058F\u0590\x05\u0202\u0102\x02\u0590\u0593\t" +
		"\x07\x02\x02\u0591\u0594\x05\u01FE\u0100\x02\u0592\u0594\x07\x9D\x02\x02" +
		"\u0593\u0591\x03\x02\x02\x02\u0593\u0592\x03\x02\x02\x02\u0594\u05C0\x03" +
		"\x02\x02\x02\u0595\u0596\x07\x15\x02\x02\u0596\u0599\x07\u01E7\x02\x02" +
		"\u0597\u059A\x05\u01FA\xFE\x02\u0598\u059A\x07\x12\x02\x02\u0599\u0597" +
		"\x03\x02\x02\x02\u0599\u0598\x03\x02\x02\x02\u059A\u059E\x03\x02\x02\x02" +
		"\u059B\u059C\x07\u010B\x02\x02\u059C\u059D\x07\x94\x02\x02\u059D\u059F" +
		"\x05\u01CC\xE7\x02\u059E\u059B\x03\x02\x02\x02\u059E\u059F\x03\x02\x02" +
		"\x02\u059F\u05A0\x03\x02\x02\x02\u05A0\u05A1\x07\u0209\x02\x02\u05A1\u05A2" +
		"\x05\u0202\u0102\x02\u05A2\u05A3\x07\xEE\x02\x02\u05A3\u05A4\x07\x87\x02" +
		"\x02\u05A4\u05C0\x03\x02\x02\x02\u05A5\u05A6\x07\x15\x02\x02\u05A6\u05A9" +
		"\x07\u01E7\x02\x02\u05A7\u05AA\x05\u01FA\xFE\x02\u05A8\u05AA\x07\x12\x02" +
		"\x02\u05A9\u05A7\x03\x02\x02\x02\u05A9\u05A8\x03\x02\x02\x02\u05AA\u05AE" +
		"\x03\x02\x02\x02\u05AB\u05AC\x07\u010B\x02\x02\u05AC\u05AD\x07\x94\x02" +
		"\x02\u05AD\u05AF\x05\u01CC\xE7\x02\u05AE\u05AB\x03\x02\x02\x02\u05AE\u05AF" +
		"\x03\x02\x02\x02\u05AF\u05B0\x03\x02\x02\x02\u05B0\u05B1\x07\u01DA\x02" +
		"\x02\u05B1\u05C0\x05\u0202\u0102\x02\u05B2\u05B3\x07\x15\x02\x02\u05B3" +
		"\u05B6\x07\u01E7\x02\x02\u05B4\u05B7\x05\u01FA\xFE\x02\u05B5\u05B7\x07" +
		"\x12\x02\x02\u05B6\u05B4\x03\x02\x02\x02\u05B6\u05B5\x03\x02\x02\x02\u05B7" +
		"\u05BB\x03\x02\x02\x02\u05B8\u05B9\x07\u010B\x02\x02\u05B9\u05BA\x07\x94" +
		"\x02\x02\u05BA\u05BC\x05\u01CC\xE7\x02\u05BB\u05B8\x03\x02\x02\x02\u05BB" +
		"\u05BC\x03\x02\x02\x02\u05BC\u05BD\x03\x02\x02\x02\u05BD\u05BE\x07\u01DA" +
		"\x02\x02\u05BE\u05C0\x07\x12\x02\x02\u05BF\u0571\x03\x02\x02\x02\u05BF" +
		"\u057C\x03\x02\x02\x02\u05BF\u0583\x03\x02\x02\x02\u05BF\u0595\x03\x02" +
		"\x02\x02\u05BF\u05A5\x03\x02\x02\x02\u05BF\u05B2\x03\x02\x02\x02\u05C0" +
		";\x03\x02\x02\x02\u05C1\u05C2\x07\x15\x02\x02\u05C2\u05C3\x07\u01F2\x02" +
		"\x02\u05C3\u05C4\x05\u01CC\xE7\x02\u05C4\u05C5\x07\u0182\x02\x02\u05C5" +
		"\u05C6\x05\u0202\u0102\x02\u05C6\u05C7\x07\u01D6\x02\x02\u05C7\u05C8\x07" +
		"\u0249\x02\x02\u05C8\u05C9\x05\u01CC\xE7\x02\u05C9=\x03\x02\x02\x02\u05CA" +
		"\u05CB\x07\x15\x02\x02\u05CB\u05CC\x07\u01F5\x02\x02\u05CC\u05CD\x05\u0202" +
		"\u0102\x02\u05CD\u05CE\x07\u01D6\x02\x02\u05CE\u05CF\x07\u0249\x02\x02" +
		"\u05CF\u05D0\x05\u0202\u0102\x02\u05D0\u05DC\x03\x02\x02\x02\u05D1\u05D2" +
		"\x07\x15\x02\x02\u05D2\u05D3\x07\u01F5\x02\x02\u05D3\u05D4\x05\u0202\u0102" +
		"\x02\u05D4\u05D5\x07\u0195\x02\x02\u05D5\u05D9\x07\u0249\x02\x02\u05D6" +
		"\u05DA\x05\u0202\u0102\x02\u05D7\u05DA\x07\x8F\x02\x02\u05D8\u05DA\x07" +
		"\u0208\x02\x02\u05D9\u05D6\x03\x02\x02\x02\u05D9\u05D7\x03\x02\x02\x02" +
		"\u05D9\u05D8\x03\x02\x02\x02\u05DA\u05DC\x03\x02\x02\x02\u05DB\u05CA\x03" +
		"\x02\x02\x02\u05DB\u05D1\x03\x02\x02\x02\u05DC?\x03\x02\x02\x02\u05DD" +
		"\u05DE\x07\x15\x02\x02\u05DE\u05E1\x07\u0203\x02\x02\u05DF\u05E0\x07\u02B4" +
		"\x02\x02\u05E0\u05E2\x07\xD5\x02\x02\u05E1\u05DF\x03\x02\x02\x02\u05E1" +
		"\u05E2\x03\x02\x02\x02\u05E2\u05E3\x03\x02\x02\x02\u05E3\u05E4\x05\u01CC" +
		"\xE7\x02\u05E4A\x03\x02\x02\x02\u05E5\u05E7\t\x06\x02\x02\u05E6\u05E5" +
		"\x03\x02\x02\x02\u05E6\u05E7\x03\x02\x02\x02\u05E7\u05E8\x03\x02\x02\x02" +
		"\u05E8\u05EA\x05\u0202\u0102\x02\u05E9\u05EB\x05\u01FE\u0100\x02\u05EA" +
		"\u05E9\x03\x02\x02\x02\u05EA\u05EB\x03\x02\x02\x02\u05EB\u05F6\x03\x02" +
		"\x02\x02\u05EC\u05EE\x07\u02FA\x02\x02\u05ED\u05EF\t\x06\x02\x02\u05EE" +
		"\u05ED\x03\x02\x02\x02\u05EE\u05EF\x03\x02\x02\x02\u05EF\u05F0\x03\x02" +
		"\x02\x02\u05F0\u05F2\x05\u0202\u0102\x02\u05F1\u05F3\x05\u01FE\u0100\x02" +
		"\u05F2\u05F1\x03\x02\x02\x02\u05F2\u05F3\x03\x02\x02\x02\u05F3\u05F5\x03" +
		"\x02\x02\x02\u05F4\u05EC\x03\x02\x02\x02\u05F5\u05F8\x03\x02\x02\x02\u05F6" +
		"\u05F4\x03\x02\x02\x02\u05F6\u05F7\x03\x02\x02\x02\u05F7C\x03\x02\x02" +
		"\x02\u05F8\u05F6\x03\x02\x02\x02\u05F9\u05FA\x07\x15\x02\x02\u05FA\u05FB" +
		"\x07\u02BE\x02\x02\u05FB\u0607\x05\u0202\u0102\x02\u05FC\u05FD\x07\u02B9" +
		"\x02\x02\u05FD\u0608\x07\u030A\x02\x02\u05FE\u05FF\x07\u02B9\x02\x02\u05FF" +
		"\u0601\x07\u030A\x02\x02\u0600\u05FE\x03\x02\x02\x02\u0600\u0601\x03\x02" +
		"\x02\x02\u0601\u0602\x03\x02\x02\x02\u0602\u0603\x07\u0188\x02\x02\u0603" +
		"\u0604\x07\u0300\x02\x02\u0604\u0605\x05B\"\x02\u0605\u0606\x07\u0301" +
		"\x02\x02\u0606\u0608\x03\x02\x02\x02\u0607\u05FC\x03\x02\x02\x02\u0607" +
		"\u0600\x03\x02\x02\x02\u0608\u0618\x03\x02\x02\x02\u0609\u060A\x07\x15" +
		"\x02\x02\u060A\u060B\x07\u02BE\x02\x02\u060B\u060C\x05\u0202\u0102\x02" +
		"\u060C\u060D\x07\u0195\x02\x02\u060D\u060E\x07\u0249\x02\x02\u060E\u060F" +
		"\x05\u01FA\xFE\x02\u060F\u0618\x03\x02\x02\x02\u0610\u0611\x07\x15\x02" +
		"\x02\u0611\u0612\x07\u02BE\x02\x02\u0612\u0613\x05\u0202\u0102\x02\u0613" +
		"\u0614\x07\u01D6\x02\x02\u0614\u0615\x07\u0249\x02\x02\u0615\u0616\x05" +
		"\u01CC\xE7\x02\u0616\u0618\x03\x02\x02\x02\u0617\u05F9\x03\x02\x02\x02" +
		"\u0617\u0609\x03\x02\x02\x02\u0617\u0610\x03\x02\x02\x02\u0618E\x03\x02" +
		"\x02\x02\u0619\u061A\x07\x15\x02\x02\u061A\u061B\x07\u0226\x02\x02\u061B" +
		"\u061C\x05\u0202\u0102\x02\u061C\u061D\x07\u0195\x02\x02\u061D\u0621\x07" +
		"\u0249\x02\x02\u061E\u0622\x05\u0202\u0102\x02\u061F\u0622\x07\x8F\x02" +
		"\x02\u0620\u0622\x07\u0208\x02\x02\u0621\u061E\x03\x02\x02\x02\u0621\u061F" +
		"\x03\x02\x02\x02\u0621\u0620\x03\x02\x02\x02\u0622\u0632\x03\x02\x02\x02" +
		"\u0623\u0624\x07\x15\x02\x02\u0624\u0625\x07\u0226\x02\x02\u0625\u0626" +
		"\x05\u0202\u0102\x02\u0626\u0627\x07\u01D6\x02\x02\u0627\u0628\x07\u0249" +
		"\x02\x02\u0628\u0629\x05\u0202\u0102\x02\u0629\u0632\x03\x02\x02\x02\u062A" +
		"\u062B\x07\x15\x02\x02\u062B\u062C\x07\u0226\x02\x02\u062C\u062D\x05\u0202" +
		"\u0102\x02\u062D\u062E\x07\u0209\x02\x02\u062E\u062F\x07\u01F5\x02\x02" +
		"\u062F\u0630\x05\u0202\u0102\x02\u0630\u0632\x03\x02\x02\x02\u0631\u0619" +
		"\x03\x02\x02\x02\u0631\u0623\x03\x02\x02\x02\u0631\u062A\x03\x02\x02\x02" +
		"\u0632G\x03\x02\x02\x02\u0633\u0634\x07\x15\x02\x02\u0634\u0635\x07\u0232" +
		"\x02\x02\u0635\u0636\x05\u0202\u0102\x02\u0636\u0637\x07m\x02\x02\u0637" +
		"\u0638\x05\u01FE\u0100\x02\u0638\u0673\x03\x02\x02\x02\u0639\u063A\x07" +
		"\x15\x02\x02\u063A\u063B\x07\u0232\x02\x02\u063B\u063C\x05\u0202\u0102" +
		"\x02\u063C\u063D\x07\u0209\x02\x02\u063D\u063E\x07\u01BC\x02\x02\u063E" +
		"\u0644\x05\u01CE\xE8\x02\u063F\u0640\x07\u0288\x02\x02\u0640\u0641\x07" +
		"\u0300\x02\x02\u0641\u0642\x05\u01D4\xEB\x02\u0642\u0643\x07\u0301\x02" +
		"\x02\u0643\u0645\x03\x02\x02\x02\u0644\u063F\x03\x02\x02\x02\u0644\u0645" +
		"\x03\x02\x02\x02\u0645\u0673\x03\x02\x02\x02\u0646\u0647\x07\x15\x02\x02" +
		"\u0647\u0648\x07\u0232\x02\x02\u0648\u0649\x05\u0202\u0102\x02\u0649\u064A" +
		"\x07\u01C9\x02\x02\u064A\u0650\x07\u01BC\x02\x02\u064B\u064C\x07\u0288" +
		"\x02\x02\u064C\u064D\x07\u0300\x02\x02\u064D\u064E\x05\u01D4\xEB\x02\u064E" +
		"\u064F\x07\u0301\x02\x02\u064F\u0651\x03\x02\x02\x02\u0650\u064B\x03\x02" +
		"\x02\x02\u0650\u0651\x03\x02\x02\x02\u0651\u0673\x03\x02\x02\x02\u0652" +
		"\u0653\x07\x15\x02\x02\u0653\u0654\x07\u0232\x02\x02\u0654\u0655\x05\u0202" +
		"\u0102\x02\u0655\u0656\x07\xC5\x02\x02\u0656\u0673\x03\x02\x02\x02\u0657" +
		"\u0658\x07\x15\x02\x02\u0658\u0659\x07\u0232\x02\x02\u0659\u065A\x05\u0202" +
		"\u0102\x02\u065A\u065B\x07\xB5\x02\x02\u065B\u0673\x03\x02\x02\x02\u065C" +
		"\u065D\x07\x15\x02\x02\u065D\u065E\x07\u0232\x02\x02\u065E\u065F\x05\u0202" +
		"\u0102\x02\u065F\u0660\x07\u0209\x02\x02\u0660\u0661\x07\u0300\x02\x02" +
		"\u0661\u0662\x05\u01D4\xEB\x02\u0662\u0663\x07\u0301\x02\x02\u0663\u0673" +
		"\x03\x02\x02\x02\u0664\u0665\x07\x15\x02\x02\u0665\u0666\x07\u0232\x02" +
		"\x02\u0666\u0667\x05\u0202\u0102\x02\u0667\u0668\x07\u0195\x02\x02\u0668" +
		"\u0669\x07\u0249\x02\x02\u0669\u066A\x05\u01FA\xFE\x02\u066A\u0673\x03" +
		"\x02\x02\x02\u066B\u066C\x07\x15\x02\x02\u066C\u066D\x07\u0232\x02\x02" +
		"\u066D\u066E\x05\u0202\u0102\x02\u066E\u066F\x07\u01D6\x02\x02\u066F\u0670" +
		"\x07\u0249\x02\x02\u0670\u0671\x05\u0202\u0102\x02\u0671\u0673\x03\x02" +
		"\x02\x02\u0672\u0633\x03\x02\x02\x02\u0672\u0639\x03\x02\x02\x02\u0672" +
		"\u0646\x03\x02\x02\x02\u0672\u0652\x03\x02\x02\x02\u0672\u0657\x03\x02" +
		"\x02\x02\u0672\u065C\x03\x02\x02\x02\u0672\u0664\x03\x02\x02\x02\u0672" +
		"\u066B\x03\x02\x02\x02\u0673I\x03\x02\x02\x02\u0674\u0675\x07\x15\x02" +
		"\x02\u0675\u0676\x07\u0237\x02\x02\u0676\u0677\x07\u0209\x02\x02\u0677" +
		"\u0678\x07\u030C\x02\x02\u0678\u0679\t\x07\x02\x02\u0679\u0683\x05\u01FE" +
		"\u0100\x02\u067A\u067B\x07\x15\x02\x02\u067B\u067C\x07\u0237\x02\x02\u067C" +
		"\u067D\x07\u01DA\x02\x02\u067D\u0683\x07\u030C\x02\x02\u067E\u067F\x07" +
		"\x15\x02\x02\u067F\u0680\x07\u0237\x02\x02\u0680\u0681\x07\u01DA\x02\x02" +
		"\u0681\u0683\x07\x12\x02\x02\u0682\u0674\x03\x02\x02\x02\u0682\u067A\x03" +
		"\x02\x02\x02\u0682\u067E\x03\x02\x02\x02\u0683K\x03\x02\x02\x02\u0684" +
		"\u0685\x05\u0206\u0104\x02\u0685M\x03\x02\x02\x02\u0686\u0687\x07\x15" +
		"\x02\x02\u0687\u0688\x07\u023C\x02\x02\u0688\u0689\x05\u0202\u0102\x02" +
		"\u0689\u068A\x07\u01D6\x02\x02\u068A\u068B\x07\u0249\x02\x02\u068B\u068C" +
		"\x05\u0202\u0102\x02\u068C\u06A8\x03\x02\x02\x02\u068D\u068E\x07\x15\x02" +
		"\x02\u068E\u068F\x07\u023C\x02\x02\u068F\u0690\x05\u0202\u0102\x02\u0690" +
		"\u0691\x07\u0195\x02\x02\u0691\u0695\x07\u0249\x02\x02\u0692\u0696\x05" +
		"\u0202\u0102\x02\u0693\u0696\x07\x8F\x02\x02\u0694\u0696\x07\u0208\x02" +
		"\x02\u0695\u0692\x03\x02\x02\x02\u0695\u0693\x03\x02\x02\x02\u0695\u0694" +
		"\x03\x02\x02\x02\u0696\u06A8\x03\x02\x02\x02\u0697\u0698\x07\x15\x02\x02" +
		"\u0698\u0699\x07\u023C\x02\x02\u0699\u069A\x05\u0202\u0102\x02\u069A\u069B" +
		"\x07\u0209\x02\x02\u069B\u069C\x07\u0300\x02\x02\u069C\u069D\x05\u01D4" +
		"\xEB\x02\u069D\u069E\x07\u0301\x02\x02\u069E\u06A8\x03\x02\x02\x02\u069F" +
		"\u06A0\x07\x15\x02\x02\u06A0\u06A1\x07\u023C\x02\x02\u06A1\u06A2\x05\u0202" +
		"\u0102\x02\u06A2\u06A3\x07\u01DA\x02\x02\u06A3\u06A4\x07\u0300\x02\x02" +
		"\u06A4\u06A5\x05\u01D0\xE9\x02\u06A5\u06A6\x07\u0301\x02\x02\u06A6\u06A8" +
		"\x03\x02\x02\x02\u06A7\u0686\x03\x02\x02\x02\u06A7\u068D\x03\x02\x02\x02" +
		"\u06A7\u0697\x03\x02\x02\x02\u06A7\u069F\x03\x02\x02\x02\u06A8O\x03\x02" +
		"\x02\x02\u06A9\u06AA\x07\x15\x02\x02\u06AA\u06AB\x07\u02F1\x02\x02\u06AB" +
		"\u06AC\x07\u01FC\x02\x02\u06AC\u06AD\x07j\x02\x02\u06AD\u06AE\x05\u0202" +
		"\u0102\x02\u06AE\u06AF\x07\r\x02\x02\u06AF\u06B0\x07\u0147\x02\x02\u06B0" +
		"\u06B1\x07\xE5\x02\x02\u06B1\u06B2\x05\u01D0\xE9\x02\u06B2\u06B3\x07\u0288" +
		"\x02\x02\u06B3\u06B4\x05\u01D0\xE9\x02\u06B4\u0705\x03\x02\x02\x02\u06B5" +
		"\u06B6\x07\x15\x02\x02\u06B6\u06B7\x07\u02F1\x02\x02\u06B7\u06B8\x07\u01FC" +
		"\x02\x02\u06B8\u06B9\x07j\x02\x02\u06B9\u06BA\x05\u0202\u0102\x02\u06BA" +
		"\u06BB\x07\x15\x02\x02\u06BB\u06BC\x07\u0147\x02\x02\u06BC\u06BD\x07\xE5" +
		"\x02\x02\u06BD\u06BE\x05\u01D0\xE9\x02\u06BE\u06BF\x07\u0288\x02\x02\u06BF" +
		"\u06C0\x05\u01D0\xE9\x02\u06C0\u0705\x03\x02\x02\x02\u06C1\u06C2\x07\x15" +
		"\x02\x02\u06C2\u06C3\x07\u02F1\x02\x02\u06C3\u06C4\x07\u01FC\x02\x02\u06C4" +
		"\u06C5\x07j\x02\x02\u06C5\u06C6\x05\u0202\u0102\x02\u06C6\u06C7\x07\x15" +
		"\x02\x02\u06C7\u06C8\x07\u0147\x02\x02\u06C8\u06C9\x07\u01D8\x02\x02\u06C9" +
		"\u06CA\x05\u0202\u0102\x02\u06CA\u06CB\x07\u0288\x02\x02\u06CB\u06CC\x05" +
		"\u0202\u0102\x02\u06CC\u0705\x03\x02\x02\x02\u06CD\u06CE\x07\x15\x02\x02" +
		"\u06CE\u06CF\x07\u02F1\x02\x02\u06CF\u06D0\x07\u01FC\x02\x02\u06D0\u06D1" +
		"\x07j\x02\x02\u06D1\u06D2\x05\u0202\u0102\x02\u06D2\u06D3\x07\x15\x02" +
		"\x02\u06D3\u06D4\x07\u0147\x02\x02\u06D4\u06D5\x07\xE5\x02\x02\u06D5\u06D6" +
		"\x05\u01D0\xE9\x02\u06D6\u06D7\x07\u01D8\x02\x02\u06D7\u06D8\x05\u0202" +
		"\u0102\x02\u06D8\u06D9\x07\u0288\x02\x02\u06D9\u06DA\x05\u0202\u0102\x02" +
		"\u06DA\u0705\x03\x02\x02\x02\u06DB\u06DC\x07\x15\x02\x02\u06DC\u06DD\x07" +
		"\u02F1\x02\x02\u06DD\u06DE\x07\u01FC\x02\x02\u06DE\u06DF\x07j\x02\x02" +
		"\u06DF\u06E0\x05\u0202\u0102\x02\u06E0\u06E1\x07\xBE\x02\x02\u06E1\u06E4" +
		"\x07\u0147\x02\x02\u06E2\u06E3\x07\u02B4\x02\x02\u06E3\u06E5\x07\xD5\x02" +
		"\x02\u06E4\u06E2\x03\x02\x02\x02\u06E4\u06E5\x03\x02\x02\x02\u06E5\u06E6" +
		"\x03\x02\x02\x02\u06E6\u06E7\x07\xE5\x02\x02\u06E7\u06E8\x05\u01D0\xE9" +
		"\x02\u06E8\u0705\x03\x02\x02\x02\u06E9\u06EA\x07\x15\x02\x02\u06EA\u06EB" +
		"\x07\u02F1\x02\x02\u06EB\u06EC\x07\u01FC\x02\x02\u06EC\u06ED\x07j\x02" +
		"\x02\u06ED\u06EE\x05\u0202\u0102\x02\u06EE\u06EF\x07\u01D6\x02\x02\u06EF" +
		"\u06F0\x07\u0249\x02\x02\u06F0\u06F1\x05\u0202\u0102\x02\u06F1\u0705\x03" +
		"\x02\x02\x02\u06F2\u06F3\x07\x15\x02\x02\u06F3\u06F4\x07\u02F1\x02\x02" +
		"\u06F4\u06F5\x07\u01FC\x02\x02\u06F5\u06F6\x07j\x02\x02\u06F6\u06F7\x05" +
		"\u0202\u0102\x02\u06F7\u06F8\x07\u0195\x02\x02\u06F8\u06F9\x07\u0249\x02" +
		"\x02\u06F9\u06FA\x05\u01FA\xFE\x02\u06FA\u0705\x03\x02\x02\x02\u06FB\u06FC" +
		"\x07\x15\x02\x02\u06FC\u06FD\x07\u02F1\x02\x02\u06FD\u06FE\x07\u01FC\x02" +
		"\x02\u06FE\u06FF\x07j\x02\x02\u06FF\u0700\x05\u0202\u0102\x02\u0700\u0701" +
		"\x07\u0209\x02\x02\u0701\u0702\x07\u01F5\x02\x02\u0702\u0703\x05\u0202" +
		"\u0102\x02\u0703\u0705\x03\x02\x02\x02\u0704\u06A9\x03\x02\x02\x02\u0704" +
		"\u06B5\x03\x02\x02\x02\u0704\u06C1\x03\x02\x02\x02\u0704\u06CD\x03\x02" +
		"\x02\x02\u0704\u06DB\x03\x02\x02\x02\u0704\u06E9\x03\x02\x02\x02\u0704" +
		"\u06F2\x03\x02\x02\x02\u0704\u06FB\x03\x02\x02\x02\u0705Q\x03\x02\x02" +
		"\x02\u0706\u0707\x05\u0206\u0104\x02\u0707S\x03\x02\x02\x02\u0708\u0709" +
		"\x05\u0206\u0104\x02\u0709U\x03\x02\x02\x02\u070A\u070B\x07\x15\x02\x02" +
		"\u070B\u070C\x07\u02F1\x02\x02\u070C\u070D\x07\u01FC\x02\x02\u070D\u070E" +
		"\x07\u023E\x02\x02\u070E\u070F\x05\u0202\u0102\x02\u070F\u0710\x07\u01D6" +
		"\x02\x02\u0710\u0711\x07\u0249\x02\x02\u0711\u0712\x05\u0202\u0102\x02" +
		"\u0712\u071D\x03\x02\x02\x02\u0713\u0714\x07\x15\x02\x02\u0714\u0715\x07" +
		"\u02F1\x02\x02\u0715\u0716\x07\u01FC\x02\x02\u0716\u0717\x07\u023E\x02" +
		"\x02\u0717\u0718\x05\u0202\u0102\x02\u0718\u0719\x07\u0209\x02\x02\u0719" +
		"\u071A\x07\u01F5\x02\x02\u071A\u071B\x05\u0202\u0102\x02\u071B\u071D\x03" +
		"\x02\x02\x02\u071C\u070A\x03\x02\x02\x02\u071C\u0713\x03\x02\x02\x02\u071D" +
		"W\x03\x02\x02\x02\u071E\u071F\x07\x15\x02\x02\u071F\u0720\x07\u0256\x02" +
		"\x02\u0720\u0721\x05\u0202\u0102\x02\u0721\u0722\x07\u0182\x02\x02\u0722" +
		"\u0723\x05\u0202\u0102\x02\u0723\u0724\x07\u01D6\x02\x02\u0724\u0725\x07" +
		"\u0249\x02\x02\u0725\u0726\x05\u0202\u0102\x02\u0726\u0732\x03\x02\x02" +
		"\x02\u0727\u0728\x07\x15\x02\x02\u0728\u0729\x07\u0256\x02\x02\u0729\u072A" +
		"\x05\u0202\u0102\x02\u072A\u072B\x07\u0182\x02\x02\u072B\u072C\x05\u0202" +
		"\u0102\x02\u072C\u072D\x07\xA9\x02\x02\u072D\u072E\x07\u0182\x02\x02\u072E" +
		"\u072F\x07\xD9\x02\x02\u072F\u0730\x05\u0202\u0102\x02\u0730\u0732\x03" +
		"\x02\x02\x02\u0731\u071E\x03\x02\x02\x02\u0731\u0727\x03\x02\x02\x02\u0732" +
		"Y\x03\x02\x02\x02\u0733\u0734\x05\u0206\u0104\x02\u0734[\x03\x02\x02\x02" +
		"\u0735\u0736\x05\u0206\u0104\x02\u0736]\x03\x02\x02\x02\u0737\u0738\x07" +
		"\x15\x02\x02\u0738\u0739\x07\u026E\x02\x02\u0739\u073A\x07\u0147\x02\x02" +
		"\u073A\u073B\x07\xE5\x02\x02\u073B\u073C\x05\u01FA\xFE\x02\u073C\u073D" +
		"\x07\u02BE\x02\x02\u073D\u073E\x05\u0202\u0102\x02\u073E\u073F\x07\u0188" +
		"\x02\x02\u073F\u0740\x07\u0300\x02\x02\u0740\u0741\x05B\"\x02\u0741\u0742" +
		"\x07\u0301\x02\x02\u0742_\x03\x02\x02\x02\u0743\u0744\x05\u0206\u0104" +
		"\x02\u0744a\x03\x02\x02\x02\u0745\u0747\x07\x18\x02\x02\u0746\u0748\x07" +
		"\u0280\x02\x02\u0747\u0746\x03\x02\x02\x02\u0747\u0748\x03\x02\x02\x02" +
		"\u0748\u0749\x03\x02\x02\x02\u0749\u074E\x05\u01D6\xEC\x02\u074A\u074B" +
		"\x07\u0300\x02\x02\u074B\u074C\x05\u01CE\xE8\x02\u074C\u074D\x07\u0301" +
		"\x02\x02\u074D\u074F\x03\x02\x02\x02\u074E\u074A\x03\x02\x02\x02\u074E" +
		"\u074F\x03\x02\x02\x02\u074Fc\x03\x02\x02\x02\u0750\u0751\x05\u0206\u0104" +
		"\x02\u0751e\x03\x02\x02\x02\u0752\u0753\x05\u0206\u0104\x02\u0753g\x03" +
		"\x02\x02\x02\u0754\u0755\x05\u0206\u0104\x02\u0755i\x03\x02\x02\x02\u0756" +
		"\u0757\x05\u0206\u0104\x02\u0757k\x03\x02\x02\x02\u0758\u0759\x05\u0206" +
		"\u0104\x02\u0759m\x03\x02\x02\x02\u075A\u075B\x05\u0206\u0104\x02\u075B" +
		"o\x03\x02\x02\x02\u075C\u0784\x05r:\x02\u075D\u0784\x05t;\x02\u075E\u0784" +
		"\x05v<\x02\u075F\u0784\x05|?\x02\u0760\u0784\x05~@\x02\u0761\u0784\x05" +
		"\x80A\x02\u0762\u0784\x05\x84C\x02\u0763\u0784\x05\x88E\x02\u0764\u0784" +
		"\x05\x8CG\x02\u0765\u0784\x05\x8EH\x02\u0766\u0784\x05\x90I\x02\u0767" +
		"\u0784\x05\x92J\x02\u0768\u0784\x05\x94K\x02\u0769\u0784\x05\x96L\x02" +
		"\u076A\u0784\x05\x98M\x02\u076B\u0784\x05\x9AN\x02\u076C\u0784\x05\x9E" +
		"P\x02\u076D\u0784\x05\xA0Q\x02\u076E\u0784\x05\xA2R\x02\u076F\u0784\x05" +
		"\xA4S\x02\u0770\u0784\x05\xA8U\x02\u0771\u0784\x05\xAAV\x02\u0772\u0784" +
		"\x05\xACW\x02\u0773\u0784\x05\xAEX\x02\u0774\u0784\x05\xB0Y\x02\u0775" +
		"\u0784\x05\xB2Z\x02\u0776\u0784\x05\xB4[\x02\u0777\u0784\x05\xB6\\\x02" +
		"\u0778\u0784\x05\xB8]\x02\u0779\u0784\x05\xBA^\x02\u077A\u0784\x05\xBC" +
		"_\x02\u077B\u0784\x05\xBE`\x02\u077C\u0784\x05\xC0a\x02\u077D\u0784\x05" +
		"\xC2b\x02\u077E\u0784\x05\xC4c\x02\u077F\u0784\x05\xC6d\x02\u0780\u0784" +
		"\x05\xC8e\x02\u0781\u0784\x05\xCAf\x02\u0782\u0784\x05\xCCg\x02\u0783" +
		"\u075C\x03\x02\x02\x02\u0783\u075D\x03\x02\x02\x02\u0783\u075E\x03\x02" +
		"\x02\x02\u0783\u075F\x03\x02\x02\x02\u0783\u0760\x03\x02\x02\x02\u0783" +
		"\u0761\x03\x02\x02\x02\u0783\u0762\x03\x02\x02\x02\u0783\u0763\x03\x02" +
		"\x02\x02\u0783\u0764\x03\x02\x02\x02\u0783\u0765\x03\x02\x02\x02\u0783" +
		"\u0766\x03\x02\x02\x02\u0783\u0767\x03\x02\x02\x02\u0783\u0768\x03\x02" +
		"\x02\x02\u0783\u0769\x03\x02\x02\x02\u0783\u076A\x03\x02\x02\x02\u0783" +
		"\u076B\x03\x02\x02\x02\u0783\u076C\x03\x02\x02\x02\u0783\u076D\x03\x02" +
		"\x02\x02\u0783\u076E\x03\x02\x02\x02\u0783\u076F";
	private static readonly _serializedATNSegment5: string =
		"\x03\x02\x02\x02\u0783\u0770\x03\x02\x02\x02\u0783\u0771\x03\x02\x02\x02" +
		"\u0783\u0772\x03\x02\x02\x02\u0783\u0773\x03\x02\x02\x02\u0783\u0774\x03" +
		"\x02\x02\x02\u0783\u0775\x03\x02\x02\x02\u0783\u0776\x03\x02\x02\x02\u0783" +
		"\u0777\x03\x02\x02\x02\u0783\u0778\x03\x02\x02\x02\u0783\u0779\x03\x02" +
		"\x02\x02\u0783\u077A\x03\x02\x02\x02\u0783\u077B\x03\x02\x02\x02\u0783" +
		"\u077C\x03\x02\x02\x02\u0783\u077D\x03\x02\x02\x02\u0783\u077E\x03\x02" +
		"\x02\x02\u0783\u077F\x03\x02\x02\x02\u0783\u0780\x03\x02\x02\x02\u0783" +
		"\u0781\x03\x02\x02\x02\u0783\u0782\x03\x02\x02\x02\u0784q\x03\x02\x02" +
		"\x02\u0785\u0786\x07\x80\x02\x02\u0786\u0787\x07\n\x02\x02\u0787\u0788" +
		"\x07\u0152\x02\x02\u0788\u0789\x05\u01CC\xE7\x02\u0789\u078A\x07\u025E" +
		"\x02\x02\u078A\u078B\x07\u010E\x02\x02\u078B\u078C\x07\xFE\x02\x02\u078C" +
		"\u078D\x05\u01CC\xE7\x02\u078Ds\x03\x02\x02\x02\u078E\u078F\x07\x80\x02" +
		"\x02\u078F\u0790\x07\x10\x02\x02\u0790\u0791\x05\u01CC\xE7\x02\u0791\u0793" +
		"\x07\u0300\x02\x02\u0792\u0794\t\b\x02\x02\u0793\u0792\x03\x02\x02\x02" +
		"\u0793\u0794\x03\x02\x02\x02\u0794\u0796\x03\x02\x02\x02\u0795\u0797\x05" +
		"\u01CC\xE7\x02\u0796\u0795\x03\x02\x02\x02\u0796\u0797\x03\x02\x02\x02" +
		"\u0797\u0798\x03\x02\x02\x02\u0798\u0799\x05\u01DA\xEE\x02\u0799\u079A" +
		"\x07\u0301\x02\x02\u079A\u079B\x07\u0300\x02\x02\u079B\u079C\x07\u029D" +
		"\x02\x02\u079C\u079D\x07\u0319\x02\x02\u079D\u079E\x05\u0202\u0102\x02" +
		"\u079E\u079F\x07\u02FA\x02\x02\u079F\u07A0\x07\u029E\x02\x02\u07A0\u07A1" +
		"\x07\u0319\x02\x02\u07A1\u07A6\x05\u0202\u0102\x02\u07A2\u07A3\x07\u02FA" +
		"\x02\x02\u07A3\u07A4\x07\u029F\x02\x02\u07A4\u07A5\x07\u0319\x02\x02\u07A5" +
		"\u07A7\x07\u0307\x02\x02\u07A6\u07A2\x03\x02\x02\x02\u07A6\u07A7\x03\x02" +
		"\x02\x02\u07A7\u07AC\x03\x02\x02\x02\u07A8\u07A9\x07\u02FA\x02\x02\u07A9" +
		"\u07AA\x07\u02A0\x02\x02\u07AA\u07AB\x07\u0319\x02\x02\u07AB\u07AD\x05" +
		"\u0202\u0102\x02\u07AC\u07A8\x03\x02\x02\x02\u07AC\u07AD\x03\x02\x02\x02" +
		"\u07AD\u07B0\x03\x02\x02\x02\u07AE\u07AF\x07\u02FA\x02\x02\u07AF\u07B1" +
		"\x07\u02A1\x02\x02\u07B0\u07AE\x03\x02\x02\x02\u07B0\u07B1\x03\x02\x02" +
		"\x02\u07B1\u07B6\x03\x02\x02\x02\u07B2\u07B3\x07\u02FA\x02\x02\u07B3\u07B4" +
		"\x07\u02A2\x02\x02\u07B4\u07B5\x07\u0319\x02\x02\u07B5\u07B7\x05\u0202" +
		"\u0102\x02\u07B6\u07B2\x03\x02\x02\x02\u07B6\u07B7\x03\x02\x02\x02\u07B7" +
		"\u07BC\x03\x02\x02\x02\u07B8\u07B9\x07\u02FA\x02\x02\u07B9\u07BA\x07\u02A3" +
		"\x02\x02\u07BA\u07BB\x07\u0319\x02\x02\u07BB\u07BD\x05\u0202\u0102\x02" +
		"\u07BC\u07B8\x03\x02\x02\x02\u07BC\u07BD\x03\x02\x02\x02\u07BD\u07C2\x03" +
		"\x02\x02\x02\u07BE\u07BF\x07\u02FA\x02\x02\u07BF\u07C0\x07\u02A4\x02\x02" +
		"\u07C0\u07C1\x07\u0319\x02\x02\u07C1\u07C3\x05\u0202\u0102\x02\u07C2\u07BE" +
		"\x03\x02\x02\x02\u07C2\u07C3\x03\x02\x02\x02\u07C3\u07C8\x03\x02\x02\x02" +
		"\u07C4\u07C5\x07\u02FA\x02\x02\u07C5\u07C6\x07\u02A5\x02\x02\u07C6\u07C7" +
		"\x07\u0319\x02\x02\u07C7\u07C9\x05\u01B2\xDA\x02\u07C8\u07C4\x03\x02\x02" +
		"\x02\u07C8\u07C9\x03\x02\x02\x02\u07C9\u07CE\x03\x02\x02\x02\u07CA\u07CB" +
		"\x07\u02FA\x02\x02\u07CB\u07CC\x07\u02A6\x02\x02\u07CC\u07CD\x07\u0319" +
		"\x02\x02\u07CD\u07CF\x05\u0202\u0102\x02\u07CE\u07CA\x03\x02\x02\x02\u07CE" +
		"\u07CF\x03\x02\x02\x02\u07CF\u07D4\x03\x02\x02\x02\u07D0\u07D1\x07\u02FA" +
		"\x02\x02\u07D1\u07D2\x07\u02A7\x02\x02\u07D2\u07D3\x07\u0319\x02\x02\u07D3" +
		"\u07D5\x05\u0202\u0102\x02\u07D4\u07D0\x03\x02\x02\x02\u07D4\u07D5\x03" +
		"\x02\x02\x02\u07D5\u07DA\x03\x02\x02\x02\u07D6\u07D7\x07\u02FA\x02\x02" +
		"\u07D7\u07D8\x07\u02A8\x02\x02\u07D8\u07D9\x07\u0319\x02\x02\u07D9\u07DB" +
		"\x05\u0202\u0102\x02\u07DA\u07D6\x03\x02\x02\x02\u07DA\u07DB\x03\x02\x02" +
		"\x02\u07DB\u07E0\x03\x02\x02\x02\u07DC\u07DD\x07\u02FA\x02\x02\u07DD\u07DE" +
		"\x07\u02A9\x02\x02\u07DE\u07DF\x07\u0319\x02\x02\u07DF\u07E1\x07\u0307" +
		"\x02\x02\u07E0\u07DC\x03\x02\x02\x02\u07E0\u07E1\x03\x02\x02\x02\u07E1" +
		"\u07E6\x03\x02\x02\x02\u07E2\u07E3\x07\u02FA\x02\x02\u07E3\u07E4\x07\u02AA" +
		"\x02\x02\u07E4\u07E5\x07\u0319\x02\x02\u07E5\u07E7\x05\u0202\u0102\x02" +
		"\u07E6\u07E2\x03\x02\x02\x02\u07E6\u07E7\x03\x02\x02\x02\u07E7\u07EA\x03" +
		"\x02\x02\x02\u07E8\u07E9\x07\u02FA\x02\x02\u07E9\u07EB\x07\u02AB\x02\x02" +
		"\u07EA\u07E8\x03\x02\x02\x02\u07EA\u07EB\x03\x02\x02\x02\u07EB\u07F0\x03" +
		"\x02\x02\x02\u07EC\u07ED\x07\u02FA\x02\x02\u07ED\u07EE\x07\u02AC\x02\x02" +
		"\u07EE\u07EF\x07\u0319\x02\x02\u07EF\u07F1\x05\u0202\u0102\x02\u07F0\u07EC" +
		"\x03\x02\x02\x02\u07F0\u07F1\x03\x02\x02\x02\u07F1\u07F6\x03\x02\x02\x02" +
		"\u07F2\u07F3\x07\u02FA\x02\x02\u07F3\u07F4\x07\u02AD\x02\x02\u07F4\u07F5" +
		"\x07\u0319\x02\x02\u07F5\u07F7\x05\u0202\u0102\x02\u07F6\u07F2\x03\x02" +
		"\x02\x02\u07F6\u07F7\x03\x02\x02\x02\u07F7\u07FC\x03\x02\x02\x02\u07F8" +
		"\u07F9\x07\u02FA\x02\x02\u07F9\u07FA\x07\u02AE\x02\x02\u07FA\u07FB\x07" +
		"\u0319\x02\x02\u07FB\u07FD\t\t\x02\x02\u07FC\u07F8\x03\x02\x02\x02\u07FC" +
		"\u07FD\x03\x02\x02\x02\u07FD\u07FE\x03\x02\x02\x02\u07FE\u07FF\x07\u0301" +
		"\x02\x02\u07FF\u08A9\x03\x02\x02\x02\u0800\u0801\x07\x80\x02\x02\u0801" +
		"\u0802\x07\x10\x02\x02\u0802\u0803\x05\u01CC\xE7\x02\u0803\u080B\x07\u0300" +
		"\x02\x02\u0804\u0806\t\b\x02\x02\u0805\u0804\x03\x02\x02\x02\u0805\u0806" +
		"\x03\x02\x02\x02\u0806\u0808\x03\x02\x02\x02\u0807\u0809\x05\u01CC\xE7" +
		"\x02\u0808\u0807\x03\x02\x02\x02\u0808\u0809\x03\x02\x02\x02\u0809\u080A" +
		"\x03\x02\x02\x02\u080A\u080C\x05\u01DA\xEE\x02\u080B\u0805\x03\x02\x02" +
		"\x02\u080B\u080C\x03\x02\x02\x02\u080C\u080D\x03\x02\x02\x02\u080D\u080E" +
		"\x07\u018A\x02\x02\u080E\u0810\x078\x02\x02\u080F\u0811\t\b\x02\x02\u0810" +
		"\u080F\x03\x02\x02\x02\u0810\u0811\x03\x02\x02\x02\u0811\u0813\x03\x02" +
		"\x02\x02\u0812\u0814\x05\u01CC\xE7\x02\u0813\u0812\x03\x02\x02\x02\u0813" +
		"\u0814\x03\x02\x02\x02\u0814\u0815\x03\x02\x02\x02\u0815\u0816\x05\u01DA" +
		"\xEE\x02\u0816\u0817\x07\u0301\x02\x02\u0817\u0818\x07\u0300\x02\x02\u0818" +
		"\u0819\x07\u029D\x02\x02\u0819\u081A\x07\u0319\x02\x02\u081A\u081B\x05" +
		"\u0202\u0102\x02\u081B\u081C\x07\u02FA\x02\x02\u081C\u081D\x07\u029E\x02" +
		"\x02\u081D\u081E\x07\u0319\x02\x02\u081E\u0823\x05\u0202\u0102\x02\u081F" +
		"\u0820\x07\u02FA\x02\x02\u0820\u0821\x07\u029F\x02\x02\u0821\u0822\x07" +
		"\u0319\x02\x02\u0822\u0824\x07\u0307\x02\x02\u0823\u081F\x03\x02\x02\x02" +
		"\u0823\u0824\x03\x02\x02\x02\u0824\u0829\x03\x02\x02\x02\u0825\u0826\x07" +
		"\u02FA\x02\x02\u0826\u0827\x07\u02A0\x02\x02\u0827\u0828\x07\u0319\x02" +
		"\x02\u0828\u082A\x05\u0202\u0102\x02\u0829\u0825\x03\x02\x02\x02\u0829" +
		"\u082A\x03\x02\x02\x02\u082A\u082D\x03\x02\x02\x02\u082B\u082C\x07\u02FA" +
		"\x02\x02\u082C\u082E\x07\u02A1\x02\x02\u082D\u082B\x03\x02\x02\x02\u082D" +
		"\u082E\x03\x02\x02\x02\u082E\u0833\x03\x02\x02\x02\u082F\u0830\x07\u02FA" +
		"\x02\x02\u0830\u0831\x07\u02A5\x02\x02\u0831\u0832\x07\u0319\x02\x02\u0832" +
		"\u0834\x05\u01B2\xDA\x02\u0833\u082F\x03\x02\x02\x02\u0833\u0834\x03\x02" +
		"\x02\x02\u0834\u0839\x03\x02\x02\x02\u0835\u0836\x07\u02FA\x02\x02\u0836" +
		"\u0837\x07\u02AE\x02\x02\u0837\u0838\x07\u0319\x02\x02\u0838\u083A\t\t" +
		"\x02\x02\u0839\u0835\x03\x02\x02\x02\u0839\u083A\x03\x02\x02\x02\u083A" +
		"\u083D\x03\x02\x02\x02\u083B\u083C\x07\u02FA\x02\x02\u083C\u083E\x07\u02AF" +
		"\x02\x02\u083D\u083B\x03\x02\x02\x02\u083D\u083E\x03\x02\x02\x02\u083E" +
		"\u083F\x03\x02\x02\x02\u083F\u0840\x07\u0301\x02\x02\u0840\u08A9\x03\x02" +
		"\x02\x02\u0841\u0842\x07\x80\x02\x02\u0842\u0843\x07\x10\x02\x02\u0843" +
		"\u0844\x05\u01CC\xE7\x02\u0844\u0845\x07\u0300\x02\x02\u0845\u0846\x07" +
		"\u02B3\x02\x02\u0846\u0847\x07\u0319\x02\x02\u0847\u0848\x05\u01D8\xED" +
		"\x02\u0848\u0849\x07\u02FA\x02\x02\u0849\u084A\x07\u029D\x02\x02\u084A" +
		"\u084B\x07\u0319\x02\x02\u084B\u084C\x05\u0202\u0102\x02\u084C\u084D\x07" +
		"\u02FA\x02\x02\u084D\u084E\x07\u029E\x02\x02\u084E\u084F\x07\u0319\x02" +
		"\x02\u084F\u0854\x05\u0202\u0102\x02\u0850\u0851\x07\u02FA\x02\x02\u0851" +
		"\u0852\x07\u029F\x02\x02\u0852\u0853\x07\u0319\x02\x02\u0853\u0855\x07" +
		"\u0307\x02\x02\u0854\u0850\x03\x02\x02\x02\u0854\u0855\x03\x02\x02\x02" +
		"\u0855\u085A\x03\x02\x02\x02\u0856\u0857\x07\u02FA\x02\x02\u0857\u0858" +
		"\x07\u02A0\x02\x02\u0858\u0859\x07\u0319\x02\x02\u0859\u085B\x05\u0202" +
		"\u0102\x02\u085A\u0856\x03\x02\x02\x02\u085A\u085B\x03\x02\x02\x02\u085B" +
		"\u085E\x03\x02\x02\x02\u085C\u085D\x07\u02FA\x02\x02\u085D\u085F\x07\u02A1" +
		"\x02\x02\u085E\u085C\x03\x02\x02\x02\u085E\u085F\x03\x02\x02\x02\u085F" +
		"\u0864\x03\x02\x02\x02\u0860\u0861\x07\u02FA\x02\x02\u0861\u0862\x07\u02A2" +
		"\x02\x02\u0862\u0863\x07\u0319\x02\x02\u0863\u0865\x05\u0202\u0102\x02" +
		"\u0864\u0860\x03\x02\x02\x02\u0864\u0865\x03\x02\x02\x02\u0865\u086A\x03" +
		"\x02\x02\x02\u0866\u0867\x07\u02FA\x02\x02\u0867\u0868\x07\u02A3\x02\x02" +
		"\u0868\u0869\x07\u0319\x02\x02\u0869\u086B\x05\u0202\u0102\x02\u086A\u0866" +
		"\x03\x02\x02\x02\u086A\u086B\x03\x02\x02\x02\u086B\u0870\x03\x02\x02\x02" +
		"\u086C\u086D\x07\u02FA\x02\x02\u086D\u086E\x07\u02A4\x02\x02\u086E\u086F" +
		"\x07\u0319\x02\x02\u086F\u0871\x05\u0202\u0102\x02\u0870\u086C\x03\x02" +
		"\x02\x02\u0870\u0871\x03\x02\x02\x02\u0871\u0876\x03\x02\x02\x02\u0872" +
		"\u0873\x07\u02FA\x02\x02\u0873\u0874\x07\u02A5\x02\x02\u0874\u0875\x07" +
		"\u0319\x02\x02\u0875\u0877\x05\u01B2\xDA\x02\u0876\u0872\x03\x02\x02\x02" +
		"\u0876\u0877\x03\x02\x02\x02\u0877\u087C\x03\x02\x02\x02\u0878\u0879\x07" +
		"\u02FA\x02\x02\u0879\u087A\x07\u02A6\x02\x02\u087A\u087B\x07\u0319\x02" +
		"\x02\u087B\u087D\x05\u0202\u0102\x02\u087C\u0878\x03\x02\x02\x02\u087C" +
		"\u087D\x03\x02\x02\x02\u087D\u0882\x03\x02\x02\x02\u087E\u087F\x07\u02FA" +
		"\x02\x02\u087F\u0880\x07\u02A7\x02\x02\u0880\u0881\x07\u0319\x02\x02\u0881" +
		"\u0883\x05\u0202\u0102\x02\u0882\u087E\x03\x02\x02\x02\u0882\u0883\x03" +
		"\x02\x02\x02\u0883\u0888\x03\x02\x02\x02\u0884\u0885\x07\u02FA\x02\x02" +
		"\u0885\u0886\x07\u02A8\x02\x02\u0886\u0887\x07\u0319\x02\x02\u0887\u0889" +
		"\x05\u0202\u0102\x02\u0888\u0884\x03\x02\x02\x02\u0888\u0889\x03\x02\x02" +
		"\x02\u0889\u088E\x03\x02\x02\x02\u088A\u088B\x07\u02FA\x02\x02\u088B\u088C" +
		"\x07\u02A9\x02\x02\u088C\u088D\x07\u0319\x02\x02\u088D\u088F\x07\u0307" +
		"\x02\x02\u088E\u088A\x03\x02\x02\x02\u088E\u088F\x03\x02\x02\x02\u088F" +
		"\u0894\x03\x02\x02\x02\u0890\u0891\x07\u02FA\x02\x02\u0891\u0892\x07\u02AA" +
		"\x02\x02\u0892\u0893\x07\u0319\x02\x02\u0893\u0895\x05\u0202\u0102\x02" +
		"\u0894\u0890\x03\x02\x02\x02\u0894\u0895\x03\x02\x02\x02\u0895\u0898\x03" +
		"\x02\x02\x02\u0896\u0897\x07\u02FA\x02\x02\u0897\u0899\x07\u02AB\x02\x02" +
		"\u0898\u0896\x03\x02\x02\x02\u0898\u0899\x03\x02\x02\x02\u0899\u089E\x03" +
		"\x02\x02\x02\u089A\u089B\x07\u02FA\x02\x02\u089B\u089C\x07\u02AC\x02\x02" +
		"\u089C\u089D\x07\u0319\x02\x02\u089D\u089F\x05\u0202\u0102\x02\u089E\u089A" +
		"\x03\x02\x02\x02\u089E\u089F\x03\x02\x02\x02\u089F\u08A4\x03\x02\x02\x02" +
		"\u08A0\u08A1\x07\u02FA\x02\x02\u08A1\u08A2\x07\u02AD\x02\x02\u08A2\u08A3" +
		"\x07\u0319\x02\x02\u08A3\u08A5\x05\u0202\u0102\x02\u08A4\u08A0\x03\x02" +
		"\x02\x02\u08A4\u08A5\x03\x02\x02\x02\u08A5\u08A6\x03\x02\x02\x02\u08A6" +
		"\u08A7\x07\u0301\x02\x02\u08A7\u08A9\x03\x02\x02\x02\u08A8\u078E\x03\x02" +
		"\x02\x02\u08A8\u0800\x03\x02\x02\x02\u08A8\u0841\x03\x02\x02\x02\u08A9" +
		"u\x03\x02\x02\x02\u08AA\u08AB\x07\x80\x02\x02\u08AB\u08AC\x07A\x02\x02" +
		"\u08AC\u08AD\x07\u0300\x02\x02\u08AD\u08AE\x05\u01D8\xED\x02\u08AE\u08AF" +
		"\x07\x1D\x02\x02\u08AF\u08B0\x05\u01D8\xED\x02\u08B0\u08BE\x07\u0301\x02" +
		"\x02\u08B1\u08B2\x07\u0288\x02\x02\u08B2\u08B3\x07\xF0\x02\x02\u08B3\u08B8" +
		"\x05\u0202\u0102\x02\u08B4\u08B5\x07\u0300\x02\x02\u08B5\u08B6\x05\u01DA" +
		"\xEE\x02\u08B6\u08B7\x07\u0301\x02\x02\u08B7\u08B9\x03\x02\x02\x02\u08B8" +
		"\u08B4\x03\x02\x02\x02\u08B8\u08B9\x03\x02\x02\x02\u08B9\u08BF\x03\x02" +
		"\x02\x02\u08BA\u08BB\x07\u028A\x02\x02\u08BB\u08BF\x07\xF0\x02\x02\u08BC" +
		"\u08BD\x07\u0288\x02\x02\u08BD\u08BF\x07\u0115\x02\x02\u08BE\u08B1\x03" +
		"\x02\x02\x02\u08BE\u08BA\x03\x02\x02\x02\u08BE\u08BC\x03\x02\x02\x02\u08BF" +
		"\u08C4\x03\x02\x02\x02\u08C0\u08C1\x07\x1D\x02\x02\u08C1\u08C5\x07!\x02" +
		"\x02\u08C2\u08C3\x07\x1D\x02\x02\u08C3\u08C5\x07\u010A\x02\x02\u08C4\u08C0" +
		"\x03\x02\x02\x02\u08C4\u08C2\x03\x02\x02\x02\u08C4\u08C5\x03\x02\x02\x02" +
		"\u08C5w\x03\x02\x02\x02\u08C6\u08C7\x07\u02B5\x02\x02\u08C7\u08C8\x07" +
		"\u0319\x02\x02\u08C8\u08D9\x05\u01B2\xDA\x02\u08C9\u08CA\x07\u02B6\x02" +
		"\x02\u08CA\u08CB\x07\u0319\x02\x02\u08CB\u08D9\x05\u01B2\xDA\x02\u08CC" +
		"\u08CD\x07\u02B7\x02\x02\u08CD\u08CE\x07\u0319\x02\x02\u08CE\u08D9\x05" +
		"\u01B2\xDA\x02\u08CF\u08D0\x07\u02B8\x02\x02\u08D0\u08D1\x07\u0319\x02" +
		"\x02\u08D1\u08D9\x05\u01B2\xDA\x02\u08D2\u08D3\x07\u02B9\x02\x02\u08D3" +
		"\u08D4\x07\u0319\x02\x02\u08D4\u08D9\x05\u01B2\xDA\x02\u08D5\u08D6\x07" +
		"\u030B\x02\x02\u08D6\u08D7\x07\u0319\x02\x02\u08D7\u08D9\x05\u01B2\xDA" +
		"\x02\u08D8\u08C6\x03\x02\x02\x02\u08D8\u08C9\x03\x02\x02\x02\u08D8\u08CC" +
		"\x03\x02\x02\x02\u08D8\u08CF\x03\x02\x02\x02\u08D8\u08D2\x03\x02\x02\x02" +
		"\u08D8\u08D5\x03\x02\x02\x02\u08D9y\x03\x02\x02\x02\u08DA\u08DF\x05x=" +
		"\x02\u08DB\u08DC\x07\u02FA\x02\x02\u08DC\u08DE\x05x=\x02\u08DD\u08DB\x03" +
		"\x02\x02\x02\u08DE\u08E1\x03\x02\x02\x02\u08DF\u08DD\x03\x02\x02\x02\u08DF" +
		"\u08E0\x03\x02\x02\x02\u08E0{\x03\x02\x02\x02\u08E1\u08DF\x03\x02\x02" +
		"\x02\u08E2\u08E3\x07\x80\x02\x02\u08E3\u08E7\x07[\x02\x02\u08E4\u08E5" +
		"\x07\u02B4\x02\x02\u08E5\u08E6\x07\u016F\x02\x02\u08E6\u08E8\x07\xD5\x02" +
		"\x02\u08E7\u08E4\x03\x02\x02\x02\u08E7\u08E8\x03\x02\x02\x02\u08E8\u08E9" +
		"\x03\x02\x02\x02\u08E9\u08EA\x05\u01CC\xE7\x02\u08EA\u08EB\x07\u0300\x02" +
		"\x02\u08EB\u08EC\x05z>\x02\u08EC\u08ED\x07\u0301\x02\x02\u08ED\u08FA\x03" +
		"\x02\x02\x02\u08EE\u08EF\x07\x80\x02\x02\u08EF\u08F3\x07[\x02\x02\u08F0" +
		"\u08F1\x07\u02B4\x02\x02\u08F1\u08F2\x07\u016F\x02\x02\u08F2\u08F4\x07" +
		"\xD5\x02\x02\u08F3\u08F0\x03\x02\x02\x02\u08F3\u08F4\x03\x02\x02\x02\u08F4" +
		"\u08F5\x03\x02\x02\x02\u08F5\u08F6\x05\u01CC\xE7\x02\u08F6\u08F7\x07\xEE" +
		"\x02\x02\u08F7\u08F8\x05\u01CC\xE7\x02\u08F8\u08FA\x03\x02\x02\x02\u08F9" +
		"\u08E2\x03\x02\x02\x02\u08F9\u08EE\x03\x02\x02\x02\u08FA}\x03\x02\x02" +
		"\x02\u08FB\u08FD\x07\x80\x02\x02\u08FC\u08FE\x07\x9D\x02\x02\u08FD\u08FC" +
		"\x03\x02\x02\x02\u08FD\u08FE\x03\x02\x02\x02\u08FE\u08FF\x03\x02\x02\x02" +
		"\u08FF\u0900\x07w\x02\x02\u0900\u0901\x05\u0202\u0102\x02\u0901\u0902" +
		"\x07\xE5\x02\x02\u0902\u0903\x07\u030A\x02\x02\u0903\u0904\x07\u0249\x02" +
		"\x02\u0904\u0905\x07\u030A\x02\x02\u0905\u0906\x07\xEE\x02\x02\u0906\u0907" +
		"\x05\u01CC\xE7\x02\u0907\x7F\x03\x02\x02\x02\u0908\u0909\x07\x80\x02\x02" +
		"\u0909\u090A\x07\x94\x02\x02\u090A\u090C\x05\u01CC\xE7\x02\u090B\u090D" +
		"\x07\u0288\x02\x02\u090C\u090B\x03\x02\x02\x02\u090C\u090D\x03\x02\x02" +
		"\x02\u090D\u0911\x03\x02\x02\x02\u090E\u090F\x07\u0195\x02\x02\u090F\u0910" +
		"\x07\u0319\x02\x02\u0910\u0912\x05\u01CC\xE7\x02\u0911\u090E\x03\x02\x02" +
		"\x02\u0911\u0912\x03\x02\x02\x02\u0912\u0916\x03\x02\x02\x02\u0913\u0914" +
		"\x07\u023E\x02\x02\u0914\u0915\x07\u0319\x02\x02\u0915\u0917\x05\u01CC" +
		"\xE7\x02\u0916\u0913\x03\x02\x02\x02\u0916\u0917\x03\x02\x02\x02\u0917" +
		"\u091B\x03\x02\x02\x02\u0918\u0919\x07\xC6\x02\x02\u0919\u091A\x07\u0319" +
		"\x02\x02\u091A\u091C\x05\u01CC\xE7\x02\u091B\u0918\x03\x02\x02\x02\u091B" +
		"\u091C\x03\x02\x02\x02\u091C\u0920\x03\x02\x02\x02\u091D\u091E\x07\u02B6" +
		"\x02\x02\u091E\u091F\x07\u0319\x02\x02\u091F\u0921\x05\u01CC\xE7\x02\u0920" +
		"\u091D\x03\x02\x02\x02\u0920\u0921\x03\x02\x02\x02\u0921\u0925\x03\x02" +
		"\x02\x02\u0922\u0923\x07\u02B7\x02\x02\u0923\u0924\x07\u0319\x02\x02\u0924" +
		"\u0926\x05\u01CC\xE7\x02\u0925\u0922\x03\x02\x02\x02\u0925\u0926\x03\x02" +
		"\x02\x02\u0926\u092A\x03\x02\x02\x02\u0927\u0928\x07\u023C\x02\x02\u0928" +
		"\u0929\x07\u0319\x02\x02\u0929\u092B\x05\u01CC\xE7\x02\u092A\u0927\x03" +
		"\x02\x02\x02\u092A\u092B\x03\x02\x02\x02\u092B\u092F\x03\x02\x02\x02\u092C" +
		"\u092D\x07\u02BA\x02\x02\u092D\u092E\x07\u0319\x02\x02\u092E\u0930\x05" +
		"\u01CC\xE7\x02\u092F\u092C\x03\x02\x02\x02\u092F\u0930\x03\x02\x02\x02" +
		"\u0930\u0935\x03\x02\x02\x02\u0931\u0932\x07m\x02\x02\u0932\u0933\x07" +
		"\u0138\x02\x02\u0933\u0934\x07\u0319\x02\x02\u0934\u0936\x07\u0307\x02" +
		"\x02\u0935\u0931\x03\x02\x02\x02\u0935\u0936\x03\x02\x02\x02\u0936\u093A" +
		"\x03\x02\x02\x02\u0937\u0938\x07\u02BB\x02\x02\u0938\u0939\x07\u0319\x02" +
		"\x02\u0939\u093B\x07\u0307\x02\x02\u093A\u0937\x03\x02\x02\x02\u093A\u093B" +
		"\x03\x02\x02\x02\u093B\x81\x03\x02\x02\x02\u093C\u093D\x07o\x02\x02\u093D" +
		"\u093F\x05\u01CC\xE7\x02\u093E\u093C\x03\x02\x02\x02\u093E\u093F\x03\x02" +
		"\x02\x02\u093F\u0948\x03\x02\x02\x02\u0940\u0941\x07\u016F\x02\x02\u0941" +
		"\u0949\x07\u0174\x02\x02\u0942\u0949\x07\u0174\x02\x02\u0943\u0944\x07" +
		"P\x02\x02\u0944\u0945\x07\u0300\x02\x02\u0945\u0946\x05\u01B2\xDA\x02" +
		"\u0946\u0947\x07\u0301\x02\x02\u0947\u0949\x03\x02\x02\x02\u0948\u0940" +
		"\x03\x02\x02\x02\u0948\u0942\x03\x02\x02\x02\u0948\u0943\x03\x02\x02\x02" +
		"\u0949\x83\x03\x02\x02\x02\u094A\u094B\x07\x80\x02\x02\u094B\u094C\x07" +
		"\xBC\x02\x02\u094C\u094E\x05\u01CC\xE7\x02\u094D\u094F\x07\x1D\x02\x02" +
		"\u094E\u094D\x03\x02\x02\x02\u094E\u094F\x03\x02\x02\x02\u094F\u0950\x03" +
		"\x02\x02\x02\u0950\u0958\x05\u01D8\xED\x02\u0951\u0952\x07Z\x02\x02\u0952" +
		"\u0957\x05\u01CC\xE7\x02\u0953\u0954\x07\x9D\x02\x02\u0954\u0957\x05\u01B2" +
		"\xDA\x02\u0955\u0957\x05\x82B\x02\u0956\u0951\x03\x02\x02\x02\u0956\u0953" +
		"\x03\x02\x02\x02\u0956\u0955\x03\x02\x02\x02\u0957\u095A\x03\x02\x02\x02" +
		"\u0958\u0956\x03\x02\x02\x02\u0958\u0959\x03\x02\x02\x02\u0959\x85\x03" +
		"\x02\x02\x02\u095A\u0958\x03\x02\x02\x02\u095B\u095C\x05\u0202\u0102\x02" +
		"\u095C\u095D\x07\u010B\x02\x02\u095D\u095E\x07\u0300\x02\x02\u095E\u0963" +
		"\x07\u030A\x02\x02\u095F\u0960\x07\u02FA\x02\x02\u0960\u0962\x07\u030A" +
		"\x02\x02\u0961\u095F\x03\x02\x02\x02\u0962\u0965\x03\x02\x02\x02\u0963" +
		"\u0961\x03\x02\x02\x02\u0963\u0964\x03\x02\x02\x02\u0964\u0966\x03\x02" +
		"\x02\x02\u0965\u0963\x03\x02\x02\x02\u0966\u096B\x07\u0301\x02\x02\u0967" +
		"\u0968\x07\x19\x02\x02\u0968\u096A\x05\x86D\x02\u0969\u0967\x03\x02\x02" +
		"\x02\u096A\u096D\x03\x02\x02\x02\u096B\u0969\x03\x02\x02\x02\u096B\u096C" +
		"\x03\x02\x02\x02\u096C\x87\x03\x02\x02\x02\u096D\u096B\x03\x02\x02\x02" +
		"\u096E\u096F\x07\x80\x02\x02\u096F\u0970\x07\u02BC\x02\x02\u0970\u0971" +
		"\x07\u0256\x02\x02\u0971\u0972\x05\u0202\u0102\x02\u0972\u0973\x07\u0182" +
		"\x02\x02\u0973\u0976\x05\u0202\u0102\x02\u0974\u0975\x07\u0283\x02\x02" +
		"\u0975\u0977\x05\x86D\x02\u0976\u0974\x03\x02\x02\x02\u0976\u0977\x03" +
		"\x02\x02\x02\u0977\u0978\x03\x02\x02\x02\u0978\u0979\x07\xD3\x02\x02\u0979" +
		"\u097A\x07\u01BA\x02\x02\u097A\u097B\x05\u0202\u0102\x02\u097B\u097C\x07" +
		"\u0300\x02\x02\u097C\u097D\x07\u0301\x02\x02\u097D\x89\x03\x02\x02\x02" +
		"\u097E\u097F\x05\u01CC\xE7\x02\u097F\u0984\x07\u030A\x02\x02\u0980\u0981" +
		"\x07\u02FA\x02\x02\u0981\u0983\x05\x8AF\x02\u0982\u0980\x03\x02\x02\x02" +
		"\u0983\u0986\x03\x02\x02\x02\u0984\u0982\x03\x02\x02\x02\u0984\u0985\x03" +
		"\x02\x02\x02\u0985\x8B\x03\x02\x02\x02\u0986\u0984\x03\x02\x02\x02\u0987" +
		"\u0988\x07\x80\x02\x02\u0988\u0989\x07\xE7\x02\x02\u0989\u098A\x07\x93" +
		"\x02\x02\u098A\u098B\x07\u02BD\x02\x02\u098B\u0992\x05\u0202\u0102\x02" +
		"\u098C\u098D\x07\xFE\x02\x02\u098D\u0991\x05\u0202\u0102\x02\u098E\u098F" +
		"\x07\u0169\x02\x02\u098F\u0991\x07\xFE\x02\x02\u0990\u098C\x03\x02\x02" +
		"\x02\u0990\u098E\x03\x02\x02\x02\u0991\u0994\x03\x02\x02\x02\u0992\u0990" +
		"\x03\x02\x02\x02\u0992\u0993\x03\x02\x02\x02\u0993\u0999\x03\x02\x02\x02" +
		"\u0994\u0992\x03\x02\x02\x02\u0995\u0996\x07\u0277\x02\x02\u0996\u099A" +
		"\x05\u0202\u0102\x02\u0997\u0998\x07\u0169\x02\x02\u0998\u099A\x07\u0277" +
		"\x02\x02\u0999\u0995\x03\x02\x02\x02\u0999\u0997\x03\x02\x02\x02\u0999" +
		"\u099A\x03\x02\x02\x02\u099A\u09A0\x03\x02\x02\x02\u099B\u099C\x07\u0188" +
		"\x02\x02\u099C\u099D\x07\u0300\x02\x02\u099D\u099E\x05\x8AF\x02\u099E" +
		"\u099F\x07\u0301\x02\x02\u099F\u09A1\x03\x02\x02\x02\u09A0\u099B\x03\x02" +
		"\x02\x02\u09A0\u09A1\x03\x02\x02\x02\u09A1\x8D\x03\x02\x02\x02\u09A2\u09A3" +
		"\x07\x80\x02\x02\u09A3\u09A4\x07\xE7\x02\x02\u09A4\u09A8\x07\u0239\x02" +
		"\x02\u09A5\u09A6\x07\u02B4\x02\x02\u09A6\u09A7\x07\u016F\x02\x02\u09A7" +
		"\u09A9\x07\xD5\x02\x02\u09A8\u09A5\x03\x02\x02\x02\u09A8\u09A9\x03\x02" +
		"\x02\x02\u09A9\u09AA\x03\x02\x02\x02\u09AA\u09AB\x05\u0202\u0102\x02\u09AB" +
		"\u09AC\x07\u0300\x02\x02\u09AC\u09AD\x05\u0202\u0102\x02\u09AD\u09B3\x05" +
		"\u0202\u0102\x02\u09AE\u09AF\x07\u0188\x02\x02\u09AF\u09B0\x07\u0300\x02" +
		"\x02\u09B0\u09B1\x05\x8AF\x02\u09B1\u09B2\x07\u0301\x02\x02\u09B2\u09B4" +
		"\x03\x02\x02\x02\u09B3\u09AE\x03\x02\x02\x02\u09B3\u09B4\x03\x02\x02\x02" +
		"\u09B4\u09B7\x03\x02\x02\x02\u09B5\u09B6\x07Z\x02\x02\u09B6\u09B8\x05" +
		"x=\x02\u09B7\u09B5\x03\x02\x02\x02\u09B7\u09B8\x03\x02\x02\x02\u09B8\u09B9" +
		"\x03\x02\x02\x02\u09B9\u09BC\x07\u0301\x02\x02\u09BA\u09BB\x07\u0111\x02" +
		"\x02\u09BB\u09BD\x05\u01CE\xE8\x02\u09BC\u09BA\x03\x02\x02\x02\u09BC\u09BD" +
		"\x03\x02\x02\x02\u09BD\u09BE\x03\x02\x02\x02\u09BE\u09BF\x07\u02BE\x02" +
		"\x02\u09BF\u09C5\x05\u01CC\xE7\x02\u09C0\u09C1\x07\u0188\x02\x02\u09C1" +
		"\u09C2\x07\u0300\x02\x02\u09C2\u09C3\x05\x8AF\x02\u09C3\u09C4\x07\u0301" +
		"\x02\x02\u09C4\u09C6\x03\x02\x02\x02\u09C5\u09C0\x03\x02\x02\x02\u09C5" +
		"\u09C6\x03\x02\x02\x02\u09C6\x8F\x03\x02\x02\x02\u09C7\u09CA\x07\x80\x02" +
		"\x02\u09C8\u09C9\x07\u0189\x02\x02\u09C9\u09CB\x07\u01D8\x02\x02\u09CA" +
		"\u09C8\x03\x02\x02\x02\u09CA\u09CB\x03\x02\x02\x02\u09CB\u09CC\x03\x02" +
		"\x02\x02\u09CC\u09CD\x07\xF0\x02\x02\u09CD\u09CE\x05\u01CC\xE7\x02\u09CE" +
		"\x91\x03\x02\x02\x02\u09CF\u09D0\x07\x80\x02\x02\u09D0\u09D1\x07\xFC\x02" +
		"\x02\u09D1\u09FB\x05\u0202\u0102\x02\u09D2\u09D4\x07\u0288\x02\x02\u09D3" +
		"\u09D2\x03\x02\x02\x02\u09D3\u09D4\x03\x02\x02\x02\u09D4\u09F7\x03\x02" +
		"\x02\x02\u09D5\u09F8\x07\u0291\x02\x02\u09D6\u09F8\x07\u0292\x02\x02\u09D7" +
		"\u09F8\x07\x81\x02\x02\u09D8\u09F8\x07\u016A\x02\x02\u09D9\u09F8\x07\u0293" +
		"\x02\x02\u09DA\u09F8\x07\u0294\x02\x02\u09DB\u09F8\x07\x82\x02\x02\u09DC" +
		"\u09F8\x07\u016B\x02\x02\u09DD\u09F8\x07\u0295\x02\x02\u09DE\u09F8\x07" +
		"\u0296\x02\x02\u09DF\u09F8\x07\u0297\x02\x02\u09E0\u09F8\x07\u0298\x02" +
		"\x02\u09E1\u09E3\t\n\x02\x02\u09E2\u09E1\x03\x02\x02\x02\u09E2\u09E3\x03" +
		"\x02\x02\x02\u09E3\u09E4\x03\x02\x02\x02\u09E4\u09E5\x07\u01A3\x02\x02" +
		"\u09E5\u09F8\t\v\x02\x02\u09E6\u09E7\x07\u0275\x02\x02\u09E7\u09E8\x07" +
		"\u026A\x02\x02\u09E8\u09F8\x07\u030A\x02\x02\u09E9\u09EA\x07\u010B\x02" +
		"\x02\u09EA\u09EB\x07\u01E7\x02\x02\u09EB\u09F8\x05\u01CE\xE8\x02\u09EC" +
		"\u09ED\x07\u010B\x02\x02\u09ED\u09EE\x07\xFC\x02\x02\u09EE\u09F8\x05\u01CE" +
		"\xE8\x02\u09EF\u09F0\x07\u01E7\x02\x02\u09F0\u09F8\x05\u01CE\xE8\x02\u09F1" +
		"\u09F2\x07\x0E\x02\x02\u09F2\u09F8\x05\u01CE\xE8\x02\u09F3\u09F4\x07\u026E" +
		"\x02\x02\u09F4\u09F8\x05\u01CE\xE8\x02\u09F5\u09F6\x07\u0236\x02\x02\u09F6" +
		"\u09F8\x07\u0307\x02\x02\u09F7\u09D5\x03\x02\x02\x02\u09F7\u09D6\x03\x02" +
		"\x02\x02\u09F7\u09D7\x03\x02\x02\x02\u09F7\u09D8\x03\x02\x02\x02\u09F7" +
		"\u09D9\x03\x02\x02\x02\u09F7\u09DA\x03\x02\x02\x02\u09F7\u09DB\x03\x02" +
		"\x02\x02\u09F7\u09DC\x03\x02\x02\x02\u09F7\u09DD\x03\x02\x02\x02\u09F7" +
		"\u09DE\x03\x02\x02\x02\u09F7\u09DF\x03\x02\x02\x02\u09F7\u09E0\x03\x02" +
		"\x02\x02\u09F7\u09E2\x03\x02\x02\x02\u09F7\u09E6\x03\x02\x02\x02\u09F7" +
		"\u09E9\x03\x02\x02\x02\u09F7\u09EC\x03\x02\x02\x02\u09F7\u09EF\x03\x02" +
		"\x02\x02\u09F7\u09F1\x03\x02\x02\x02\u09F7\u09F3\x03\x02\x02\x02\u09F7" +
		"\u09F5\x03\x02\x02\x02\u09F8\u09F9\x03\x02\x02\x02\u09F9\u09F7\x03\x02" +
		"\x02\x02\u09F9\u09FA\x03\x02\x02\x02\u09FA\u09FC\x03\x02\x02\x02\u09FB" +
		"\u09D3\x03\x02\x02\x02\u09FB\u09FC\x03\x02\x02\x02\u09FC\x93\x03\x02\x02" +
		"\x02\u09FD\u09FF\x07\x80\x02\x02\u09FE\u0A00\x07\u0265\x02\x02\u09FF\u09FE" +
		"\x03\x02\x02\x02\u09FF\u0A00\x03\x02\x02\x02\u0A00\u0A01\x03\x02\x02\x02" +
		"\u0A01\u0A03\x07\u010E\x02\x02\u0A02\u0A04\x07\u02C5\x02\x02\u0A03\u0A02" +
		"\x03\x02\x02\x02\u0A03\u0A04\x03\x02\x02\x02\u0A04\u0A0B\x03\x02\x02\x02" +
		"\u0A05\u0A06\x07\u02B4\x02\x02\u0A06\u0A07\x07\u016F\x02\x02\u0A07\u0A09" +
		"\x07\xD5\x02\x02\u0A08\u0A05\x03\x02\x02\x02\u0A08\u0A09\x03\x02\x02\x02" +
		"\u0A09\u0A0A\x03\x02\x02\x02\u0A0A\u0A0C\x05\u0202\u0102\x02\u0A0B\u0A08" +
		"\x03\x02\x02\x02\u0A0B\u0A0C\x03\x02\x02\x02\u0A0C\u0A0D\x03\x02\x02\x02" +
		"\u0A0D\u0A0E\x07\u0182\x02\x02\u0A0E\u0A11\x05\u0202\u0102\x02\u0A0F\u0A10" +
		"\x07\u0273\x02\x02\u0A10\u0A12\x05\u01DC\xEF\x02\u0A11\u0A0F\x03\x02\x02" +
		"\x02\u0A11\u0A12\x03\x02\x02\x02\u0A12\u0A15\x03\x02\x02\x02\u0A13\u0A14" +
		"\x07\u023C\x02\x02\u0A14\u0A16\x05\u0202\u0102\x02\u0A15\u0A13\x03\x02" +
		"\x02\x02\u0A15\u0A16\x03\x02\x02\x02\u0A16\u0A19\x03\x02\x02\x02\u0A17" +
		"\u0A18\x07\u0285\x02\x02\u0A18\u0A1A\x05\u01EC\xF7\x02\u0A19\u0A17\x03" +
		"\x02\x02\x02\u0A19\u0A1A\x03\x02\x02\x02\u0A1A\x95\x03\x02\x02\x02\u0A1B" +
		"\u0A1E\x07\x80\x02\x02\u0A1C\u0A1D\x07\u0189\x02\x02\u0A1D\u0A1F\x07\u01D8" +
		"\x02\x02\u0A1E\u0A1C\x03\x02\x02\x02\u0A1E\u0A1F\x03\x02\x02\x02\u0A1F" +
		"\u0A21\x03\x02\x02\x02\u0A20\u0A22\x07\u01B9\x02\x02\u0A21\u0A20\x03\x02" +
		"\x02\x02\u0A21\u0A22\x03\x02\x02\x02\u0A22\u0A23\x03\x02\x02\x02\u0A23" +
		"\u0A24\x07\u012D\x02\x02\u0A24\u0A3D\x05\u0202\u0102\x02\u0A25\u0A28\x07" +
		"\x80\x02\x02\u0A26\u0A27\x07\u0189\x02\x02\u0A27\u0A29\x07\u01D8\x02\x02" +
		"\u0A28\u0A26\x03\x02\x02\x02\u0A28\u0A29\x03\x02\x02\x02\u0A29\u0A2B\x03" +
		"\x02\x02\x02\u0A2A\u0A2C\x07\u025D\x02\x02\u0A2B\u0A2A\x03\x02\x02\x02" +
		"\u0A2B\u0A2C\x03\x02\x02\x02\u0A2C\u0A2E\x03\x02\x02\x02\u0A2D\u0A2F\x07" +
		"\u01B9\x02\x02\u0A2E\u0A2D\x03\x02\x02\x02\u0A2E\u0A2F\x03\x02\x02\x02" +
		"\u0A2F\u0A30\x03\x02\x02\x02\u0A30\u0A31\x07\u012D\x02\x02\u0A31\u0A32" +
		"\x05\u0202";
	private static readonly _serializedATNSegment6: string =
		"\u0102\x02\u0A32\u0A33\x07\xFE\x02\x02\u0A33\u0A36\x05\u0202\u0102\x02" +
		"\u0A34\u0A35\x07\u02C6\x02\x02\u0A35\u0A37\x05\u0202\u0102\x02\u0A36\u0A34" +
		"\x03\x02\x02\x02\u0A36\u0A37\x03\x02\x02\x02\u0A37\u0A3A\x03\x02\x02\x02" +
		"\u0A38\u0A39\x07\u0277\x02\x02\u0A39\u0A3B\x05\u0202\u0102\x02\u0A3A\u0A38" +
		"\x03\x02\x02\x02\u0A3A\u0A3B\x03\x02\x02\x02\u0A3B\u0A3D\x03\x02\x02\x02" +
		"\u0A3C\u0A1B\x03\x02\x02\x02\u0A3C\u0A25\x03\x02\x02\x02\u0A3D\x97\x03" +
		"\x02\x02\x02\u0A3E\u0A3F\x07\x80\x02\x02\u0A3F\u0A40\x07\u02C7\x02\x02" +
		"\u0A40\u0A44\x07\u0281\x02\x02\u0A41\u0A42\x07\u02B4\x02\x02\u0A42\u0A43" +
		"\x07\u016F\x02\x02\u0A43\u0A45\x07\xD5\x02\x02\u0A44\u0A41\x03\x02\x02" +
		"\x02\u0A44\u0A45\x03\x02\x02\x02\u0A45\u0A46\x03\x02\x02\x02\u0A46\u0A4B" +
		"\x05\u0202\u0102\x02\u0A47\u0A48\x07\u0300\x02\x02\u0A48\u0A49\x05\u01D0" +
		"\xE9\x02\u0A49\u0A4A\x07\u0301\x02\x02\u0A4A\u0A4C\x03\x02\x02\x02\u0A4B" +
		"\u0A47\x03\x02\x02\x02\u0A4B\u0A4C\x03\x02\x02\x02\u0A4C\u0A4E\x03\x02" +
		"\x02\x02\u0A4D\u0A4F\x07\u0288\x02\x02\u0A4E\u0A4D\x03\x02\x02\x02\u0A4E" +
		"\u0A4F\x03\x02\x02\x02\u0A4F\u0A52\x03\x02\x02\x02\u0A50\u0A51\x07\u023C" +
		"\x02\x02\u0A51\u0A53\x05\u0202\u0102\x02\u0A52\u0A50\x03\x02\x02\x02\u0A52" +
		"\u0A53\x03\x02\x02\x02\u0A53\u0A54\x03\x02\x02\x02\u0A54\u0A55\x07\x1D" +
		"\x02\x02\u0A55\u0A5B\x05\u015A\xAE\x02\u0A56\u0A58\x07\u0288\x02\x02\u0A57" +
		"\u0A59\x07\u0169\x02\x02\u0A58\u0A57\x03\x02\x02\x02\u0A58\u0A59\x03\x02" +
		"\x02\x02\u0A59\u0A5A\x03\x02\x02\x02\u0A5A\u0A5C\x07\x93\x02\x02\u0A5B" +
		"\u0A56\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02\x02\x02\u0A5C\x99\x03\x02\x02" +
		"\x02\u0A5D\u0A5E\x07\x80\x02\x02\u0A5E\u0A5F\x07\u0186\x02\x02\u0A5F\u0A60" +
		"\x05\u0202\u0102\x02\u0A60\u0A61\x07\u0300\x02\x02\u0A61\u0A62\x07\u01BA" +
		"\x02\x02\u0A62\u0A63\x07\u0319\x02\x02\u0A63\u0A68\x05\u0202\u0102\x02" +
		"\u0A64\u0A65\x07\u02FA\x02\x02\u0A65\u0A66\x07\u02C8\x02\x02\u0A66\u0A67" +
		"\x07\u0319\x02\x02\u0A67\u0A69\x05\u01CC\xE7\x02\u0A68\u0A64\x03\x02\x02" +
		"\x02\u0A68\u0A69\x03\x02\x02\x02\u0A69\u0A6E\x03\x02\x02\x02\u0A6A\u0A6B" +
		"\x07\u02FA\x02\x02\u0A6B\u0A6C\x07\u02C9\x02\x02\u0A6C\u0A6D\x07\u0319" +
		"\x02\x02\u0A6D\u0A6F\x05\u01CC\xE7\x02\u0A6E\u0A6A\x03\x02\x02\x02\u0A6E" +
		"\u0A6F\x03\x02\x02\x02\u0A6F\u0A74\x03\x02\x02\x02\u0A70\u0A71\x07\u02FA" +
		"\x02\x02\u0A71\u0A72\x07\u02CA\x02\x02\u0A72\u0A73\x07\u0319\x02\x02\u0A73" +
		"\u0A75\x05\u01CC\xE7\x02\u0A74\u0A70\x03\x02\x02\x02\u0A74\u0A75\x03\x02" +
		"\x02\x02\u0A75\u0A7A\x03\x02\x02\x02\u0A76\u0A77\x07\u02FA\x02\x02\u0A77" +
		"\u0A78\x07\u02CB\x02\x02\u0A78\u0A79\x07\u0319\x02\x02\u0A79\u0A7B\x05" +
		"\u01CC\xE7\x02\u0A7A\u0A76\x03\x02\x02\x02\u0A7A\u0A7B\x03\x02\x02\x02" +
		"\u0A7B\u0A80\x03\x02\x02\x02\u0A7C\u0A7D\x07\u02FA\x02\x02\u0A7D\u0A7E" +
		"\x07\u01DC\x02\x02\u0A7E\u0A7F\x07\u0319\x02\x02\u0A7F\u0A81\x05\u01CC" +
		"\xE7\x02\u0A80\u0A7C\x03\x02\x02\x02\u0A80\u0A81\x03\x02\x02\x02\u0A81" +
		"\u0A86\x03\x02\x02\x02\u0A82\u0A83\x07\u02FA\x02\x02\u0A83\u0A84\x07\u0126" +
		"\x02\x02\u0A84\u0A85\x07\u0319\x02\x02\u0A85\u0A87\x05\u01CC\xE7\x02\u0A86" +
		"\u0A82\x03\x02\x02\x02\u0A86\u0A87\x03\x02\x02\x02\u0A87\u0A8A\x03\x02" +
		"\x02\x02\u0A88\u0A89\x07\u02FA\x02\x02\u0A89\u0A8B\x07\u02CC\x02\x02\u0A8A" +
		"\u0A88\x03\x02\x02\x02\u0A8A\u0A8B\x03\x02\x02\x02\u0A8B\u0A8E\x03\x02" +
		"\x02\x02\u0A8C\u0A8D\x07\u02FA\x02\x02\u0A8D\u0A8F\x07\u02CD\x02\x02\u0A8E" +
		"\u0A8C\x03\x02\x02\x02\u0A8E\u0A8F\x03\x02\x02\x02\u0A8F\u0A90\x03\x02" +
		"\x02\x02\u0A90\u0A91\x07\u0301\x02\x02\u0A91\x9B\x03\x02\x02\x02\u0A92" +
		"\u0A93\x07\u0186\x02\x02\u0A93\u0A94\x07\u0307\x02\x02\u0A94\u0A9B\x05" +
		"\u0202\u0102\x02\u0A95\u0A96\x07\u0300\x02\x02\u0A96\u0A97\x05\u0202\u0102" +
		"\x02\u0A97\u0A98\x07\u02FA\x02\x02\u0A98\u0A99\x05\u0202\u0102\x02\u0A99" +
		"\u0A9A\x07\u0301\x02\x02\u0A9A\u0A9C\x03\x02\x02\x02\u0A9B\u0A95\x03\x02" +
		"\x02\x02\u0A9B\u0A9C\x03\x02\x02\x02\u0A9C\u0AB1\x03\x02\x02\x02\u0A9D" +
		"\u0A9E\x07\xF0\x02\x02\u0A9E\u0AA7\x07\u0307\x02\x02\u0A9F\u0AA0\x07\u0300" +
		"\x02\x02\u0AA0\u0AA3\x05\u0202\u0102\x02\u0AA1\u0AA2\x07\u02FA\x02\x02" +
		"\u0AA2\u0AA4\x05\u0202\u0102\x02\u0AA3\u0AA1\x03\x02\x02\x02\u0AA3\u0AA4" +
		"\x03\x02\x02\x02\u0AA4\u0AA5\x03\x02\x02\x02\u0AA5\u0AA6\x07\u0301\x02" +
		"\x02\u0AA6\u0AA8\x03\x02\x02\x02\u0AA7\u0A9F\x03\x02\x02\x02\u0AA7\u0AA8" +
		"\x03\x02\x02\x02\u0AA8\u0AA9\x03\x02\x02\x02\u0AA9\u0AAA\x05\u0202\u0102" +
		"\x02\u0AAA\u0AAB\x07\u0300\x02\x02\u0AAB\u0AAC\x05\u01DA\xEE\x02\u0AAC" +
		"\u0AAD\x07\u0301\x02\x02\u0AAD\u0AB1\x03\x02\x02\x02\u0AAE\u0AAF\x07\u022B" +
		"\x02\x02\u0AAF\u0AB1\x05\u0202\u0102\x02\u0AB0\u0A92\x03\x02\x02\x02\u0AB0" +
		"\u0A9D\x03\x02\x02\x02\u0AB0\u0AAE\x03\x02\x02\x02\u0AB1\x9D\x03\x02\x02" +
		"\x02\u0AB2\u0AB3\x07\x80\x02\x02\u0AB3\u0AB4\x07\u0186\x02\x02\u0AB4\u0AB5" +
		"\x07S\x02\x02\u0AB5\u0AB7\x05\u0202\u0102\x02\u0AB6\u0AB8\x07\x9D\x02" +
		"\x02\u0AB7\u0AB6\x03\x02\x02\x02\u0AB7\u0AB8\x03\x02\x02\x02\u0AB8\u0AB9" +
		"\x03\x02\x02\x02\u0AB9\u0ABA\x07\xE5\x02\x02\u0ABA\u0ABB\x07\u025E\x02" +
		"\x02\u0ABB\u0ABC\x05\u0202\u0102\x02\u0ABC\u0ABD\x07\u0273\x02\x02\u0ABD" +
		"\u0AC0\x05\u01DC\xEF\x02\u0ABE\u0ABF\x07\u02CE\x02\x02\u0ABF\u0AC1\x05" +
		"\u0202\u0102\x02\u0AC0\u0ABE\x03\x02\x02\x02\u0AC0\u0AC1\x03\x02\x02\x02" +
		"\u0AC1\u0AC2\x03\x02\x02\x02\u0AC2\u0AC3\x07\x1D\x02\x02\u0AC3\u0AC8\x05" +
		"\x9CO\x02\u0AC4\u0AC5\x07\u02FA\x02\x02\u0AC5\u0AC7\x05\x9CO\x02\u0AC6" +
		"\u0AC4\x03\x02\x02\x02\u0AC7\u0ACA\x03\x02\x02\x02\u0AC8\u0AC6\x03\x02" +
		"\x02\x02\u0AC8\u0AC9\x03\x02\x02\x02\u0AC9\x9F\x03\x02\x02\x02\u0ACA\u0AC8" +
		"\x03\x02\x02\x02\u0ACB\u0ACC\x07\x80\x02\x02\u0ACC\u0ACD\x07\u0186\x02" +
		"\x02\u0ACD\u0ACE\x07\u02CE\x02\x02\u0ACE\u0ACF\x05\u0202\u0102\x02\u0ACF" +
		"\u0AD0\x07\u0273\x02\x02\u0AD0\u0AD1\x05\u01DC\xEF\x02\u0AD1\xA1\x03\x02" +
		"\x02\x02\u0AD2\u0AD3\x07\x80\x02\x02\u0AD3\u0AD4\x07\u02CF\x02\x02\u0AD4" +
		"\u0AD5\x05\u0202\u0102\x02\u0AD5\u0AD6\x07\u0182\x02\x02\u0AD6\u0AD9\x05" +
		"\u0202\u0102\x02\u0AD7\u0AD8\x07\xE5\x02\x02\u0AD8\u0ADA\t\f\x02\x02\u0AD9" +
		"\u0AD7\x03\x02\x02\x02\u0AD9\u0ADA\x03\x02\x02\x02\u0ADA\u0ADD\x03\x02" +
		"\x02\x02\u0ADB\u0ADC\x07\u0249\x02\x02\u0ADC\u0ADE\x05\u01FA\xFE\x02\u0ADD" +
		"\u0ADB\x03\x02\x02\x02\u0ADD\u0ADE\x03\x02\x02\x02\u0ADE\u0AE4\x03\x02" +
		"\x02\x02\u0ADF\u0AE0\x07\u0273\x02\x02\u0AE0\u0AE1\x07\u0300\x02\x02\u0AE1" +
		"\u0AE2\x05\u01EC\xF7\x02\u0AE2\u0AE3\x07\u0301\x02\x02\u0AE3\u0AE5\x03" +
		"\x02\x02\x02\u0AE4\u0ADF\x03\x02\x02\x02\u0AE4\u0AE5\x03\x02\x02\x02\u0AE5" +
		"\u0AEC\x03\x02\x02\x02\u0AE6\u0AE7\x07\u0288\x02\x02\u0AE7\u0AE8\x07P" +
		"\x02\x02\u0AE8\u0AE9\x07\u0300\x02\x02\u0AE9\u0AEA\x05\u01EC\xF7\x02\u0AEA" +
		"\u0AEB\x07\u0301\x02\x02\u0AEB\u0AED\x03\x02\x02\x02\u0AEC\u0AE6\x03\x02" +
		"\x02\x02\u0AEC\u0AED\x03\x02\x02\x02\u0AED\xA3\x03\x02\x02\x02\u0AEE\u0AEF" +
		"\x07\x80\x02\x02\u0AEF\u0AF0\x07\u01E7\x02\x02\u0AF0\u0B1F\x05\u01FA\xFE" +
		"\x02\u0AF1\u0AF3\x07\u0288\x02\x02\u0AF2\u0AF1\x03\x02\x02\x02\u0AF2\u0AF3" +
		"\x03\x02\x02\x02\u0AF3\u0B1B\x03\x02\x02\x02\u0AF4\u0B1C\x07\u0291\x02" +
		"\x02\u0AF5\u0B1C\x07\u0292\x02\x02\u0AF6\u0B1C\x07\x81\x02\x02\u0AF7\u0B1C" +
		"\x07\u016A\x02\x02\u0AF8\u0B1C\x07\u0293\x02\x02\u0AF9\u0B1C\x07\u0294" +
		"\x02\x02\u0AFA\u0B1C\x07\u0295\x02\x02\u0AFB\u0B1C\x07\u0296\x02\x02\u0AFC" +
		"\u0B1C\x07\u0297\x02\x02\u0AFD\u0B1C\x07\u0298\x02\x02\u0AFE\u0B1C\x07" +
		"\u0299\x02\x02\u0AFF\u0B1C\x07\u029A\x02\x02\u0B00\u0B1C\x07\u029B\x02" +
		"\x02\u0B01\u0B1C\x07\u029C\x02\x02\u0B02\u0B03\x07m\x02\x02\u0B03\u0B04" +
		"\x07\u0138\x02\x02\u0B04\u0B1C\x07\u0307\x02\x02\u0B05\u0B07\x07\xC7\x02" +
		"\x02\u0B06\u0B05\x03\x02\x02\x02\u0B06\u0B07\x03\x02\x02\x02\u0B07\u0B08" +
		"\x03\x02\x02\x02\u0B08\u0B09\x07\u01A3\x02\x02\u0B09\u0B1C\t\v\x02\x02" +
		"\u0B0A\u0B0B\x07\u0275\x02\x02\u0B0B\u0B0C\x07\u026A\x02\x02\u0B0C\u0B1C" +
		"\x07\u030A\x02\x02\u0B0D\u0B0E\x07\u010B\x02\x02\u0B0E\u0B0F\x07\u01E7" +
		"\x02\x02\u0B0F\u0B1C\x05\u01CE\xE8\x02\u0B10\u0B11\x07\u010B\x02\x02\u0B11" +
		"\u0B12\x07\xFC\x02\x02\u0B12\u0B1C\x05\u01CE\xE8\x02\u0B13\u0B14\x07\u01E7" +
		"\x02\x02\u0B14\u0B1C\x05\u01CE\xE8\x02\u0B15\u0B16\x07\x0E\x02\x02\u0B16" +
		"\u0B1C\x05\u01CE\xE8\x02\u0B17\u0B18\x07\u026E\x02\x02\u0B18\u0B1C\x05" +
		"\u01CE\xE8\x02\u0B19\u0B1A\x07\u0236\x02\x02\u0B1A\u0B1C\x07\u0307\x02" +
		"\x02\u0B1B\u0AF4\x03\x02\x02\x02\u0B1B\u0AF5\x03\x02\x02\x02\u0B1B\u0AF6" +
		"\x03\x02\x02\x02\u0B1B\u0AF7\x03\x02\x02\x02\u0B1B\u0AF8\x03\x02\x02\x02" +
		"\u0B1B\u0AF9\x03\x02\x02\x02\u0B1B\u0AFA\x03\x02\x02\x02\u0B1B\u0AFB\x03" +
		"\x02\x02\x02\u0B1B\u0AFC\x03\x02\x02\x02\u0B1B\u0AFD\x03\x02\x02\x02\u0B1B" +
		"\u0AFE\x03\x02\x02\x02\u0B1B\u0AFF\x03\x02\x02\x02\u0B1B\u0B00\x03\x02" +
		"\x02\x02\u0B1B\u0B01\x03\x02\x02\x02\u0B1B\u0B02\x03\x02\x02\x02\u0B1B" +
		"\u0B06\x03\x02\x02\x02\u0B1B\u0B0A\x03\x02\x02\x02\u0B1B\u0B0D\x03\x02" +
		"\x02\x02\u0B1B\u0B10\x03\x02\x02\x02\u0B1B\u0B13\x03\x02\x02\x02\u0B1B" +
		"\u0B15\x03\x02\x02\x02\u0B1B\u0B17\x03\x02\x02\x02\u0B1B\u0B19\x03\x02" +
		"\x02\x02\u0B1C\u0B1D\x03\x02\x02\x02\u0B1D\u0B1B\x03\x02\x02\x02\u0B1D" +
		"\u0B1E\x03\x02\x02\x02\u0B1E\u0B20\x03\x02\x02\x02\u0B1F\u0AF2\x03\x02" +
		"\x02\x02\u0B1F\u0B20\x03\x02\x02\x02\u0B20\xA5\x03\x02\x02\x02\u0B21\u0B22" +
		"\t\r\x02\x02\u0B22\xA7\x03\x02\x02\x02\u0B23\u0B26\x07\x80\x02\x02\u0B24" +
		"\u0B25\x07\u0189\x02\x02\u0B25\u0B27\x07\u01D8\x02\x02\u0B26\u0B24\x03" +
		"\x02\x02\x02\u0B26\u0B27\x03\x02\x02\x02\u0B27\u0B28\x03\x02\x02\x02\u0B28" +
		"\u0B29\x07\u01F2\x02\x02\u0B29\u0B2A\x05\u01CC\xE7\x02\u0B2A\u0B2B\x07" +
		"\x1D\x02\x02\u0B2B\u0B2C\x07\u0182\x02\x02\u0B2C\u0B2D\x05\xA6T\x02\u0B2D" +
		"\u0B2E\x07\u0249\x02\x02\u0B2E\u0B31\x05\u0202\u0102\x02\u0B2F\u0B30\x07" +
		"\u0285\x02\x02\u0B30\u0B32\x05\u01EC\xF7\x02\u0B31\u0B2F\x03\x02\x02\x02" +
		"\u0B31\u0B32\x03\x02\x02\x02\u0B32\u0B33\x03\x02\x02\x02\u0B33\u0B35\x07" +
		"\xBB\x02\x02\u0B34\u0B36\t\x0E\x02\x02\u0B35\u0B34\x03\x02\x02\x02\u0B35" +
		"\u0B36\x03\x02\x02\x02\u0B36\u0B39\x03\x02\x02\x02\u0B37\u0B3A\x07\u0170" +
		"\x02\x02\u0B38\u0B3A\x05\u0202\u0102\x02\u0B39\u0B37\x03\x02\x02\x02\u0B39" +
		"\u0B38\x03\x02\x02\x02\u0B3A\xA9\x03\x02\x02\x02\u0B3B\u0B3C\x07\x80\x02" +
		"\x02\u0B3C\u0B3D\x07\u01F5\x02\x02\u0B3D\u0B40\x05\u0202\u0102\x02\u0B3E" +
		"\u0B3F\x07\'\x02\x02\u0B3F\u0B41\x05\u01FA\xFE\x02\u0B40\u0B3E\x03\x02" +
		"\x02\x02\u0B40\u0B41\x03\x02\x02\x02\u0B41\u0B43\x03\x02\x02\x02\u0B42" +
		"\u0B44\x05\u0204\u0103\x02\u0B43\u0B42\x03\x02\x02\x02\u0B43\u0B44\x03" +
		"\x02\x02\x02\u0B44\u0B5E\x03\x02\x02\x02\u0B45\u0B46\x07\x80\x02\x02\u0B46" +
		"\u0B47\x07\u01F5\x02\x02\u0B47\u0B48\x07\'\x02\x02\u0B48\u0B4A\x05\u01FA" +
		"\xFE\x02\u0B49\u0B4B\x05\u0204\u0103\x02\u0B4A\u0B49\x03\x02\x02\x02\u0B4A" +
		"\u0B4B\x03\x02\x02\x02\u0B4B\u0B5E\x03\x02\x02\x02\u0B4C\u0B4D\x07\x80" +
		"\x02\x02\u0B4D\u0B4E\x07\u01F5\x02\x02\u0B4E\u0B4F\x07\u02B4\x02\x02\u0B4F" +
		"\u0B50\x07\u016F\x02\x02\u0B50\u0B51\x07\xD5\x02\x02\u0B51\u0B54\x05\u0202" +
		"\u0102\x02\u0B52\u0B53\x07\'\x02\x02\u0B53\u0B55\x05\u01FA\xFE\x02\u0B54" +
		"\u0B52\x03\x02\x02\x02\u0B54\u0B55\x03\x02\x02\x02\u0B55\u0B5E\x03\x02" +
		"\x02\x02\u0B56\u0B57\x07\x80\x02\x02\u0B57\u0B58\x07\u01F5\x02\x02\u0B58" +
		"\u0B59\x07\u02B4\x02\x02\u0B59\u0B5A\x07\u016F\x02\x02\u0B5A\u0B5B\x07" +
		"\xD5\x02\x02\u0B5B\u0B5C\x07\'\x02\x02\u0B5C\u0B5E\x05\u01FA\xFE\x02\u0B5D" +
		"\u0B3B\x03\x02\x02\x02\u0B5D\u0B45\x03\x02\x02\x02\u0B5D\u0B4C\x03\x02" +
		"\x02\x02\u0B5D\u0B56\x03\x02\x02\x02\u0B5E\xAB\x03\x02\x02\x02\u0B5F\u0B61" +
		"\x07\x80\x02\x02\u0B60\u0B62\t\x0F\x02\x02\u0B61\u0B60\x03\x02\x02\x02" +
		"\u0B61\u0B62\x03\x02\x02\x02\u0B62\u0B63\x03\x02\x02\x02\u0B63\u0B67\x07" +
		"\u0203\x02\x02\u0B64\u0B65\x07\u02B4\x02\x02\u0B65\u0B66\x07\u016F\x02" +
		"\x02\u0B66\u0B68\x07\xD5\x02\x02\u0B67\u0B64\x03\x02\x02\x02\u0B67\u0B68" +
		"\x03\x02\x02\x02\u0B68\u0B69\x03\x02\x02\x02\u0B69\u0B6F\x05\u0202\u0102" +
		"\x02\u0B6A\u0B6C\x07\u010D\x02\x02\u0B6B\u0B6D\x078\x02\x02\u0B6C\u0B6B" +
		"\x03\x02\x02\x02\u0B6C\u0B6D\x03\x02\x02\x02\u0B6D\u0B6E\x03\x02\x02\x02" +
		"\u0B6E\u0B70\x07\u0307\x02\x02\u0B6F\u0B6A\x03\x02\x02\x02\u0B6F\u0B70" +
		"\x03\x02\x02\x02\u0B70\u0B75\x03\x02\x02\x02\u0B71\u0B72\x07\u0155\x02" +
		"\x02\u0B72\u0B76\x07\u0307\x02\x02\u0B73\u0B74\x07\u0169\x02\x02\u0B74" +
		"\u0B76\x07\u0155\x02\x02\u0B75\u0B71\x03\x02\x02\x02\u0B75\u0B73\x03\x02" +
		"\x02\x02\u0B75\u0B76\x03\x02\x02\x02\u0B76\u0B7B\x03\x02\x02\x02\u0B77" +
		"\u0B78\x07\u014C\x02\x02\u0B78\u0B7C\x07\u0307\x02\x02\u0B79\u0B7A\x07" +
		"\u0169\x02\x02\u0B7A\u0B7C\x07\u014C\x02\x02\u0B7B\u0B77\x03\x02\x02\x02" +
		"\u0B7B\u0B79\x03\x02\x02\x02\u0B7B\u0B7C\x03\x02\x02\x02\u0B7C\u0B82\x03" +
		"\x02\x02\x02\u0B7D\u0B7F\x07\u0222\x02\x02\u0B7E\u0B80\x07\u0288\x02\x02" +
		"\u0B7F\u0B7E\x03\x02\x02\x02\u0B7F\u0B80\x03\x02\x02\x02\u0B80\u0B81\x03" +
		"\x02\x02\x02\u0B81\u0B83\x07\u0307\x02\x02\u0B82\u0B7D\x03\x02\x02\x02" +
		"\u0B82\u0B83\x03\x02\x02\x02\u0B83\u0B86\x03\x02\x02\x02\u0B84\u0B85\x07" +
		":\x02\x02\u0B85\u0B87\x07\u0307\x02\x02\u0B86\u0B84\x03\x02\x02\x02\u0B86" +
		"\u0B87\x03\x02\x02\x02\u0B87\u0B8C\x03\x02\x02\x02\u0B88\u0B8A\x07\u0169" +
		"\x02\x02\u0B89\u0B88\x03\x02\x02\x02\u0B89\u0B8A\x03\x02\x02\x02\u0B8A" +
		"\u0B8B\x03\x02\x02\x02\u0B8B\u0B8D\x07\x92\x02\x02\u0B8C\u0B89\x03\x02" +
		"\x02\x02\u0B8C\u0B8D\x03\x02\x02\x02\u0B8D\u0B97\x03\x02\x02\x02\u0B8E" +
		"\u0B8F\x07\u02D0\x02\x02\u0B8F\u0B95\x078\x02\x02\u0B90\u0B91\x05\u0202" +
		"\u0102\x02\u0B91\u0B92\x07\u0309\x02\x02\u0B92\u0B93\x05\u0202\u0102\x02" +
		"\u0B93\u0B96\x03\x02\x02\x02\u0B94\u0B96\x07\u016C\x02\x02\u0B95\u0B90" +
		"\x03\x02\x02\x02\u0B95\u0B94\x03\x02\x02\x02\u0B96\u0B98\x03\x02\x02\x02" +
		"\u0B97\u0B8E\x03\x02\x02\x02\u0B97\u0B98\x03\x02\x02\x02\u0B98\xAD\x03" +
		"\x02\x02\x02\u0B99\u0B9A\x05\u0206\u0104\x02\u0B9A\xAF\x03\x02\x02\x02" +
		"\u0B9B\u0B9C\x05\u0206\u0104\x02\u0B9C\xB1\x03\x02\x02\x02\u0B9D\u0B9E" +
		"\x05\u0206\u0104\x02\u0B9E\xB3\x03\x02\x02\x02\u0B9F\u0BA0\x05\u0206\u0104" +
		"\x02\u0BA0\xB5\x03\x02\x02\x02\u0BA1\u0BA2\x05\u0206\u0104\x02\u0BA2\xB7" +
		"\x03\x02\x02\x02\u0BA3\u0BA4\x05\u0206\u0104\x02\u0BA4\xB9\x03\x02\x02" +
		"\x02\u0BA5\u0BA6\x05\u0206\u0104\x02\u0BA6\xBB\x03\x02\x02\x02\u0BA7\u0BA8" +
		"\x05\u0206\u0104\x02\u0BA8\xBD\x03\x02\x02\x02\u0BA9\u0BAA\x05\u0206\u0104" +
		"\x02\u0BAA\xBF\x03\x02\x02\x02\u0BAB\u0BAC\x05\u0206\u0104\x02\u0BAC\xC1" +
		"\x03\x02\x02\x02\u0BAD\u0BAE\x05\u0206\u0104\x02\u0BAE\xC3\x03\x02\x02" +
		"\x02\u0BAF\u0BB0\x05\u0206\u0104\x02\u0BB0\xC5\x03\x02\x02\x02\u0BB1\u0BB2" +
		"\x05\u0206\u0104\x02\u0BB2\xC7\x03\x02\x02\x02\u0BB3\u0BB4\x05\u0206\u0104" +
		"\x02\u0BB4\xC9\x03\x02\x02\x02\u0BB5\u0BB6\x05\u0206\u0104\x02\u0BB6\xCB" +
		"\x03\x02\x02\x02\u0BB7\u0BBA\x07\x80\x02\x02\u0BB8\u0BB9\x07\u0189\x02" +
		"\x02\u0BB9\u0BBB\x07\u01D8\x02\x02\u0BBA\u0BB8\x03\x02\x02\x02\u0BBA\u0BBB" +
		"\x03\x02\x02\x02\u0BBB\u0BBD\x03\x02\x02\x02\u0BBC\u0BBE\t\x0F\x02\x02" +
		"\u0BBD\u0BBC\x03\x02\x02\x02\u0BBD\u0BBE\x03\x02\x02\x02\u0BBE\u0BC0\x03" +
		"\x02\x02\x02\u0BBF\u0BC1\x07\u01C5\x02\x02\u0BC0\u0BBF\x03\x02\x02\x02" +
		"\u0BC0\u0BC1\x03\x02\x02\x02\u0BC1\u0BC2\x03\x02\x02\x02\u0BC2\u0BC3\x07" +
		"\u0281\x02\x02\u0BC3\u0BC8\x05\u01CC\xE7\x02\u0BC4\u0BC5\x07\u0300\x02" +
		"\x02\u0BC5\u0BC6\x05\u01CE\xE8\x02\u0BC6\u0BC7\x07\u0301\x02\x02\u0BC7" +
		"\u0BC9\x03\x02\x02\x02\u0BC8\u0BC4\x03\x02\x02\x02\u0BC8\u0BC9\x03\x02" +
		"\x02\x02\u0BC9\u0BCF\x03\x02\x02\x02\u0BCA\u0BCB\x07\u0288\x02\x02\u0BCB" +
		"\u0BCC\x07\u0300\x02\x02\u0BCC\u0BCD\x05\u01D4\xEB\x02\u0BCD\u0BCE\x07" +
		"\u0301\x02\x02\u0BCE\u0BD0\x03\x02\x02\x02\u0BCF\u0BCA\x03\x02\x02\x02" +
		"\u0BCF\u0BD0\x03\x02\x02\x02\u0BD0\u0BD1\x03\x02\x02\x02\u0BD1\u0BD4\x07" +
		"\x1D\x02\x02\u0BD2\u0BD5\x05\u015A\xAE\x02\u0BD3\u0BD5\x05\u017E\xC0\x02" +
		"\u0BD4\u0BD2\x03\x02\x02\x02\u0BD4\u0BD3\x03\x02\x02\x02\u0BD5\u0BDC\x03" +
		"\x02\x02\x02\u0BD6\u0BD8\x07\u0288\x02\x02\u0BD7\u0BD9\t\x10\x02\x02\u0BD8" +
		"\u0BD7\x03\x02\x02\x02\u0BD8\u0BD9\x03\x02\x02\x02\u0BD9\u0BDA\x03\x02" +
		"\x02\x02\u0BDA\u0BDB\x07P\x02\x02\u0BDB\u0BDD\x07\u0187\x02\x02\u0BDC" +
		"\u0BD6\x03\x02\x02\x02\u0BDC\u0BDD\x03\x02\x02\x02\u0BDD\xCD\x03\x02\x02" +
		"\x02\u0BDE\u0BDF\x05\u0206\u0104\x02\u0BDF\xCF\x03\x02\x02\x02\u0BE0\u0BE1" +
		"\x05\u0206\u0104\x02\u0BE1\xD1\x03\x02\x02\x02\u0BE2\u0BE4\x05\u015E\xB0" +
		"\x02\u0BE3\u0BE2\x03\x02\x02\x02\u0BE3\u0BE4\x03\x02\x02\x02\u0BE4\u0BE5" +
		"\x03\x02\x02\x02\u0BE5\u0BE6\x07\xA5\x02\x02\u0BE6\u0BE8\x07\xEE\x02\x02" +
		"\u0BE7\u0BE9\x07\u0183\x02\x02\u0BE8\u0BE7\x03\x02\x02\x02\u0BE8\u0BE9" +
		"\x03\x02\x02\x02\u0BE9\u0BEA\x03\x02\x02\x02\u0BEA\u0BEC\x05\u01D6\xEC" +
		"\x02\u0BEB\u0BED\x07\u02FF\x02\x02\u0BEC\u0BEB\x03\x02\x02\x02\u0BEC\u0BED" +
		"\x03\x02\x02\x02\u0BED\u0BF2\x03\x02\x02\x02\u0BEE\u0BF0\x07\x1D\x02\x02" +
		"\u0BEF\u0BEE\x03\x02\x02\x02\u0BEF\u0BF0\x03\x02\x02\x02\u0BF0\u0BF1\x03" +
		"\x02\x02\x02\u0BF1\u0BF3\x05\u020C\u0107\x02\u0BF2\u0BEF\x03\x02\x02\x02" +
		"\u0BF2\u0BF3\x03\x02\x02\x02\u0BF3\u0BF6\x03\x02\x02\x02\u0BF4\u0BF5\x07" +
		"\u0273\x02\x02\u0BF5\u0BF7\x05\u01D0\xE9\x02\u0BF6\u0BF4\x03\x02\x02\x02" +
		"\u0BF6\u0BF7\x03\x02\x02\x02\u0BF7\u0BFD\x03\x02\x02\x02\u0BF8\u0BFE\x05" +
		"\u0184\xC3\x02\u0BF9\u0BFA\x07\u0285\x02\x02\u0BFA\u0BFB\x07\x87\x02\x02" +
		"\u0BFB\u0BFC\x07\u017D\x02\x02\u0BFC\u0BFE\x05\u0202\u0102\x02\u0BFD\u0BF8" +
		"\x03\x02\x02\x02\u0BFD\u0BF9\x03\x02\x02\x02\u0BFD\u0BFE\x03\x02\x02\x02" +
		"\u0BFE\u0C00\x03\x02\x02\x02\u0BFF\u0C01\x05\u01B0\xD9\x02\u0C00\u0BFF" +
		"\x03\x02\x02\x02\u0C00\u0C01\x03\x02\x02\x02\u0C01\xD3\x03\x02\x02\x02" +
		"\u0C02\u0C03\x07\xB7\x02\x02\u0C03\u0C04\t\x11\x02\x02\u0C04\xD5\x03\x02" +
		"\x02\x02\u0C05\u0C2F\x05\xD8m\x02\u0C06\u0C2F\x05\xDAn\x02\u0C07\u0C2F" +
		"\x05\xDCo\x02\u0C08\u0C2F\x05\xDEp\x02\u0C09\u0C2F\x05\xE0q\x02\u0C0A" +
		"\u0C2F\x05\xE2r\x02\u0C0B\u0C2F\x05\xE4s\x02\u0C0C\u0C2F\x05\xE6t\x02" +
		"\u0C0D\u0C2F\x05\xE8u\x02\u0C0E\u0C2F\x05\xEAv\x02\u0C0F\u0C2F\x05\xEC" +
		"w\x02\u0C10\u0C2F\x05\xEEx\x02\u0C11\u0C2F\x05\xF0y\x02\u0C12\u0C2F\x05" +
		"\xF2z\x02\u0C13\u0C2F\x05\xF4{\x02\u0C14\u0C2F\x05\xF6|\x02\u0C15\u0C2F" +
		"\x05\xF8}\x02\u0C16\u0C2F\x05\xFA~\x02\u0C17\u0C2F\x05\xFC\x7F\x02\u0C18" +
		"\u0C2F\x05\xFE\x80\x02\u0C19\u0C2F\x05\u0100\x81\x02\u0C1A\u0C2F\x05\u0102" +
		"\x82\x02\u0C1B\u0C2F\x05\u0104\x83\x02\u0C1C\u0C2F\x05\u0106\x84\x02\u0C1D" +
		"\u0C2F\x05\u0108\x85\x02\u0C1E\u0C2F\x05\u010A\x86\x02\u0C1F\u0C2F\x05" +
		"\u010C\x87\x02\u0C20\u0C2F\x05\u010E\x88\x02\u0C21\u0C2F\x05\u0110\x89" +
		"\x02\u0C22\u0C2F\x05\u0112\x8A\x02\u0C23\u0C2F\x05\u0114\x8B\x02\u0C24" +
		"\u0C2F\x05\u0116\x8C\x02\u0C25\u0C2F\x05\u0118\x8D\x02\u0C26\u0C2F\x05" +
		"\u011A\x8E\x02\u0C27\u0C2F\x05\u011C\x8F\x02\u0C28\u0C2F\x05\u011E\x90" +
		"\x02\u0C29\u0C2F\x05\u0120\x91\x02\u0C2A\u0C2F\x05\u0122\x92\x02\u0C2B" +
		"\u0C2F\x05\u0124\x93\x02\u0C2C\u0C2F\x05\u0126\x94\x02\u0C2D\u0C2F\x05" +
		"\u0128\x95\x02\u0C2E\u0C05\x03\x02\x02\x02\u0C2E\u0C06\x03\x02\x02\x02" +
		"\u0C2E\u0C07\x03\x02\x02\x02\u0C2E\u0C08\x03\x02\x02\x02\u0C2E\u0C09\x03" +
		"\x02\x02\x02\u0C2E\u0C0A\x03\x02\x02\x02\u0C2E\u0C0B\x03\x02\x02\x02\u0C2E" +
		"\u0C0C\x03\x02\x02\x02\u0C2E\u0C0D\x03\x02\x02\x02\u0C2E\u0C0E\x03\x02" +
		"\x02\x02\u0C2E\u0C0F\x03\x02\x02\x02\u0C2E\u0C10\x03\x02\x02\x02\u0C2E" +
		"\u0C11\x03\x02\x02\x02\u0C2E\u0C12\x03\x02\x02\x02\u0C2E\u0C13\x03\x02" +
		"\x02\x02\u0C2E\u0C14\x03\x02\x02\x02\u0C2E\u0C15\x03\x02\x02\x02\u0C2E" +
		"\u0C16\x03\x02\x02\x02\u0C2E\u0C17\x03\x02\x02\x02\u0C2E\u0C18\x03\x02" +
		"\x02\x02\u0C2E\u0C19\x03\x02\x02\x02\u0C2E\u0C1A\x03\x02\x02\x02\u0C2E" +
		"\u0C1B\x03\x02\x02\x02\u0C2E\u0C1C\x03\x02\x02\x02\u0C2E\u0C1D\x03\x02" +
		"\x02\x02\u0C2E\u0C1E\x03\x02\x02\x02\u0C2E\u0C1F\x03\x02\x02\x02\u0C2E" +
		"\u0C20\x03\x02\x02\x02\u0C2E\u0C21\x03\x02\x02\x02\u0C2E\u0C22\x03\x02" +
		"\x02\x02\u0C2E\u0C23\x03\x02\x02\x02\u0C2E\u0C24\x03\x02\x02\x02\u0C2E" +
		"\u0C25\x03\x02\x02\x02\u0C2E\u0C26\x03\x02\x02\x02\u0C2E\u0C27\x03\x02" +
		"\x02\x02\u0C2E\u0C28\x03\x02\x02\x02\u0C2E\u0C29\x03\x02\x02\x02\u0C2E" +
		"\u0C2A\x03\x02\x02\x02\u0C2E\u0C2B\x03\x02\x02\x02\u0C2E\u0C2C\x03\x02" +
		"\x02\x02\u0C2E\u0C2D\x03\x02\x02\x02\u0C2F\xD7\x03\x02\x02\x02\u0C30\u0C31" +
		"\x07\xBE\x02\x02\u0C31\u0C32\x07\n\x02\x02\u0C32\u0C35\x07\u0152\x02\x02" +
		"\u0C33\u0C34\x07\u02B4\x02\x02\u0C34\u0C36\x07\xD5\x02\x02\u0C35\u0C33" +
		"\x03\x02\x02\x02\u0C35\u0C36\x03\x02\x02\x02\u0C36\u0C37\x03\x02\x02\x02" +
		"\u0C37\u0C39\x05\u0202\u0102\x02\u0C38\u0C3A\t\x03\x02\x02\u0C39\u0C38" +
		"\x03\x02\x02\x02\u0C39\u0C3A\x03\x02\x02\x02\u0C3A\xD9\x03\x02\x02\x02" +
		"\u0C3B\u0C3C\x07\xBE\x02\x02\u0C3C\u0C3F\x07\x10\x02\x02\u0C3D\u0C3E\x07" +
		"\u02B4\x02\x02\u0C3E\u0C40\x07\xD5\x02\x02\u0C3F\u0C3D\x03\x02\x02\x02" +
		"\u0C3F\u0C40\x03\x02\x02\x02\u0C40\u0C41\x03\x02\x02\x02\u0C41\u0C42\x05" +
		"\u0202\u0102\x02\u0C42\u0C43\x07\u0300\x02\x02\u0C43\u0C44\x05\u01EE\xF8" +
		"\x02\u0C44\u0C45\x07\u0301\x02\x02\u0C45\xDB\x03\x02\x02\x02\u0C46\u0C47" +
		"\x07\xBE\x02\x02\u0C47\u0C4A\x07A\x02\x02\u0C48\u0C49\x07\u02B4\x02\x02" +
		"\u0C49\u0C4B\x07\xD5\x02\x02\u0C4A\u0C48\x03\x02\x02\x02\u0C4A\u0C4B\x03" +
		"\x02\x02\x02\u0C4B\u0C4C\x03\x02\x02\x02\u0C4C\u0C4D\x07\u0300\x02\x02" +
		"\u0C4D\u0C4E\x05\u01D8\xED\x02\u0C4E\u0C4F\x07\x1D\x02\x02\u0C4F\u0C50" +
		"\x05\u0202\u0102\x02\u0C50\u0C52\x07\u0301\x02\x02\u0C51\u0C53\t\x03\x02" +
		"\x02\u0C52\u0C51\x03\x02\x02\x02\u0C52\u0C53\x03\x02\x02\x02\u0C53\xDD" +
		"\x03\x02\x02\x02\u0C54\u0C55\x07\xBE\x02\x02\u0C55\u0C58\x07[\x02\x02" +
		"\u0C56\u0C57\x07\u02B4\x02\x02\u0C57\u0C59\x07\xD5\x02\x02\u0C58\u0C56" +
		"\x03\x02\x02\x02\u0C58\u0C59\x03\x02\x02\x02\u0C59\u0C5A\x03\x02\x02\x02" +
		"\u0C5A\u0C5C\x05\u01D0\xE9\x02\u0C5B\u0C5D\t\x03\x02\x02\u0C5C\u0C5B\x03" +
		"\x02\x02\x02\u0C5C\u0C5D\x03\x02\x02\x02\u0C5D\xDF\x03\x02\x02\x02\u0C5E" +
		"\u0C5F\x07\xBE\x02\x02\u0C5F\u0C62\x07w\x02\x02\u0C60\u0C61\x07\u02B4" +
		"\x02\x02\u0C61\u0C63\x07\xD5\x02\x02\u0C62\u0C60\x03\x02\x02\x02\u0C62" +
		"\u0C63\x03\x02\x02\x02\u0C63\u0C64\x03\x02\x02\x02\u0C64\u0C66\x05\u0202" +
		"\u0102\x02\u0C65\u0C67\t\x03\x02\x02\u0C66\u0C65\x03\x02\x02\x02\u0C66" +
		"\u0C67\x03\x02\x02\x02\u0C67\xE1\x03\x02\x02\x02\u0C68\u0C69\x07\xBE\x02" +
		"\x02\u0C69\u0C6C\x07\x94\x02\x02\u0C6A\u0C6B\x07\u02B4\x02\x02\u0C6B\u0C6D" +
		"\x07\xD5\x02\x02\u0C6C\u0C6A\x03\x02\x02\x02\u0C6C\u0C6D\x03\x02\x02\x02" +
		"\u0C6D\u0C6E\x03\x02\x02\x02\u0C6E\u0C6F\x05\u0202\u0102\x02\u0C6F\xE3" +
		"\x03\x02\x02\x02\u0C70\u0C71\x07\xBE\x02\x02\u0C71\u0C74\x07\xBC\x02\x02" +
		"\u0C72\u0C73\x07\u02B4\x02\x02\u0C73\u0C75\x07\xD5\x02\x02\u0C74\u0C72" +
		"\x03\x02\x02\x02\u0C74\u0C75\x03\x02\x02\x02\u0C75\u0C76\x03\x02\x02\x02" +
		"\u0C76\u0C78\x05\u01D0\xE9\x02\u0C77\u0C79\t\x03\x02\x02\u0C78\u0C77\x03" +
		"\x02\x02\x02\u0C78\u0C79\x03\x02\x02\x02\u0C79\xE5\x03\x02\x02\x02\u0C7A" +
		"\u0C7B\x07\xBE\x02\x02\u0C7B\u0C7C\x07\u02BC\x02\x02\u0C7C\u0C7F\x07\u0256" +
		"\x02\x02\u0C7D\u0C7E\x07\u02B4\x02\x02\u0C7E\u0C80\x07\xD5\x02\x02\u0C7F" +
		"\u0C7D\x03\x02\x02\x02\u0C7F\u0C80\x03\x02\x02\x02\u0C80\u0C81\x03\x02" +
		"\x02\x02\u0C81\u0C83\x05\u0202\u0102\x02\u0C82\u0C84\t\x03\x02\x02\u0C83" +
		"\u0C82\x03\x02\x02\x02\u0C83\u0C84\x03\x02\x02\x02\u0C84\xE7\x03\x02\x02" +
		"\x02\u0C85\u0C86\x07\xBE\x02\x02\u0C86\u0C89\x07\xD9\x02\x02\u0C87\u0C88" +
		"\x07\u02B4\x02\x02\u0C88\u0C8A\x07\xD5\x02\x02\u0C89\u0C87\x03\x02\x02" +
		"\x02\u0C89\u0C8A\x03\x02\x02\x02\u0C8A\u0C8B\x03\x02\x02\x02\u0C8B\u0C8D" +
		"\x05\u01D0\xE9\x02\u0C8C\u0C8E\t\x03\x02\x02\u0C8D\u0C8C\x03\x02\x02\x02" +
		"\u0C8D\u0C8E\x03\x02\x02\x02\u0C8E\xE9\x03\x02\x02\x02\u0C8F\u0C90\x07" +
		"\xBE\x02\x02\u0C90\u0C91\x07\xE7\x02\x02\u0C91\u0C92\x07\x93\x02\x02\u0C92" +
		"\u0C95\x07\u02BD\x02\x02\u0C93\u0C94\x07\u02B4\x02\x02\u0C94\u0C96\x07" +
		"\xD5\x02\x02\u0C95\u0C93\x03\x02\x02\x02\u0C95\u0C96\x03\x02\x02\x02\u0C96" +
		"\u0C97\x03\x02\x02\x02\u0C97\u0C99\x05\u01D0\xE9\x02\u0C98\u0C9A\t\x03" +
		"\x02\x02\u0C99\u0C98\x03\x02\x02\x02\u0C99\u0C9A\x03\x02\x02\x02\u0C9A" +
		"\xEB\x03\x02\x02\x02\u0C9B\u0C9C\x07\xBE\x02\x02\u0C9C\u0C9D\x07\xE7\x02" +
		"\x02\u0C9D\u0CA0\x07\u0239\x02\x02\u0C9E\u0C9F\x07\u02B4\x02\x02\u0C9F" +
		"\u0CA1\x07\xD5\x02\x02\u0CA0\u0C9E\x03\x02\x02\x02\u0CA0\u0CA1\x03\x02" +
		"\x02\x02\u0CA1\u0CA2\x03\x02\x02\x02\u0CA2\u0CA4\x05\u01D0\xE9\x02\u0CA3" +
		"\u0CA5\t\x03\x02\x02\u0CA4\u0CA3\x03\x02\x02\x02\u0CA4\u0CA5\x03\x02\x02" +
		"\x02\u0CA5\xED\x03\x02\x02\x02\u0CA6\u0CA7\x07\xBE\x02\x02\u0CA7\u0CAA" +
		"\x07\xF0\x02\x02\u0CA8\u0CA9\x07\u02B4\x02\x02\u0CA9\u0CAB\x07\xD5\x02" +
		"\x02\u0CAA\u0CA8\x03\x02\x02\x02\u0CAA\u0CAB\x03\x02\x02\x02\u0CAB\u0CAC" +
		"\x03\x02\x02\x02\u0CAC\u0CAE\x05\u01C2\xE2\x02\u0CAD\u0CAF\t\x03\x02\x02" +
		"\u0CAE\u0CAD\x03\x02\x02\x02\u0CAE\u0CAF\x03\x02\x02\x02\u0CAF\xEF\x03" +
		"\x02\x02\x02\u0CB0\u0CB1\x07\xBE\x02\x02\u0CB1\u0CB4\x07\xFC\x02\x02\u0CB2" +
		"\u0CB3\x07\u02B4\x02\x02\u0CB3\u0CB5\x07\xD5\x02\x02\u0CB4\u0CB2\x03\x02" +
		"\x02\x02\u0CB4\u0CB5\x03\x02\x02\x02\u0CB5\u0CB6\x03\x02\x02\x02\u0CB6" +
		"\u0CB7\x05\u01D0\xE9\x02\u0CB7\xF1\x03\x02\x02\x02\u0CB8\u0CB9\x07\xBE" +
		"\x02\x02\u0CB9\u0CBB\x07\u010E\x02\x02\u0CBA\u0CBC\x07\u02C5\x02\x02\u0CBB" +
		"\u0CBA\x03\x02\x02\x02\u0CBB\u0CBC\x03\x02\x02\x02\u0CBC\u0CBF\x03\x02" +
		"\x02\x02\u0CBD\u0CBE\x07\u02B4\x02\x02\u0CBE\u0CC0\x07\xD5\x02\x02\u0CBF" +
		"\u0CBD\x03\x02\x02\x02\u0CBF\u0CC0\x03\x02\x02\x02\u0CC0\u0CC1\x03\x02" +
		"\x02\x02\u0CC1\u0CC3\x05\u01CE\xE8\x02\u0CC2\u0CC4\t\x03\x02\x02\u0CC3" +
		"\u0CC2\x03\x02\x02\x02\u0CC3\u0CC4\x03\x02\x02\x02\u0CC4\xF3\x03\x02\x02" +
		"\x02\u0CC5\u0CC7\x07\xBE\x02\x02\u0CC6\u0CC8\x07\u01B9\x02\x02\u0CC7\u0CC6" +
		"\x03\x02\x02\x02\u0CC7\u0CC8\x03\x02\x02\x02\u0CC8\u0CC9\x03\x02\x02\x02" +
		"\u0CC9\u0CCC\x07\u012D\x02\x02\u0CCA\u0CCB\x07\u02B4\x02\x02\u0CCB\u0CCD" +
		"\x07\xD5\x02\x02\u0CCC\u0CCA\x03\x02\x02\x02\u0CCC\u0CCD\x03\x02\x02\x02";
	private static readonly _serializedATNSegment7: string =
		"\u0CCD\u0CCE\x03\x02\x02\x02\u0CCE\u0CD0\x05\u0202\u0102\x02\u0CCF\u0CD1" +
		"\t\x03\x02\x02\u0CD0\u0CCF\x03\x02\x02\x02\u0CD0\u0CD1\x03\x02\x02\x02" +
		"\u0CD1\xF5\x03\x02\x02\x02\u0CD2\u0CD3\x07\xBE\x02\x02\u0CD3\u0CD4\x07" +
		"\u02C7\x02\x02\u0CD4\u0CD7\x07\u0281\x02\x02\u0CD5\u0CD6\x07\u02B4\x02" +
		"\x02\u0CD6\u0CD8\x07\xD5\x02\x02\u0CD7\u0CD5\x03\x02\x02\x02\u0CD7\u0CD8" +
		"\x03\x02\x02\x02\u0CD8\u0CD9\x03\x02\x02\x02\u0CD9\u0CDB\x05\u01D0\xE9" +
		"\x02\u0CDA\u0CDC\t\x03\x02\x02\u0CDB\u0CDA\x03\x02\x02\x02\u0CDB\u0CDC" +
		"\x03\x02\x02\x02\u0CDC\xF7\x03\x02\x02\x02\u0CDD\u0CDE\x05\u0206\u0104" +
		"\x02\u0CDE\xF9\x03\x02\x02\x02\u0CDF\u0CE0\x07\xBE\x02\x02\u0CE0\u0CE1" +
		"\x07\u0186\x02\x02\u0CE1\u0CE4\x07S\x02\x02\u0CE2\u0CE3\x07\u02B4\x02" +
		"\x02\u0CE3\u0CE5\x07\xD5\x02\x02\u0CE4\u0CE2\x03\x02\x02\x02\u0CE4\u0CE5" +
		"\x03\x02\x02\x02\u0CE5\u0CE6\x03\x02\x02\x02\u0CE6\u0CE7\x05\u0202\u0102" +
		"\x02\u0CE7\u0CE8\x07\u0273\x02\x02\u0CE8\u0CEA\x05\u01DC\xEF\x02\u0CE9" +
		"\u0CEB\t\x03\x02\x02\u0CEA\u0CE9\x03\x02\x02\x02\u0CEA\u0CEB\x03\x02\x02" +
		"\x02\u0CEB\xFB\x03\x02\x02\x02\u0CEC\u0CED\x07\xBE\x02\x02\u0CED\u0CEE" +
		"\x07\u0186\x02\x02\u0CEE\u0CF1\x07\u02CE\x02\x02\u0CEF\u0CF0\x07\u02B4" +
		"\x02\x02\u0CF0\u0CF2\x07\xD5\x02\x02\u0CF1\u0CEF\x03\x02\x02\x02\u0CF1" +
		"\u0CF2\x03\x02\x02\x02\u0CF2\u0CF3\x03\x02\x02\x02\u0CF3\u0CF4\x05\u0202" +
		"\u0102\x02\u0CF4\u0CF5\x07\u0273\x02\x02\u0CF5\u0CF7\x05\u01DC\xEF\x02" +
		"\u0CF6\u0CF8\t\x03\x02\x02\u0CF7\u0CF6\x03\x02\x02\x02\u0CF7\u0CF8\x03" +
		"\x02\x02\x02\u0CF8\xFD\x03\x02\x02\x02\u0CF9\u0CFA\x07\xBE\x02\x02\u0CFA" +
		"\u0CFB\x07\u02D0\x02\x02\u0CFB\u0CFC\x078\x02\x02\u0CFC\u0CFE\x05\u01FC" +
		"\xFF\x02\u0CFD\u0CFF\t\x03\x02\x02\u0CFE\u0CFD\x03\x02\x02\x02\u0CFE\u0CFF" +
		"\x03\x02\x02\x02\u0CFF\xFF\x03\x02\x02\x02\u0D00\u0D01\x07\xBE\x02\x02" +
		"\u0D01\u0D04\x07\u02CF\x02\x02\u0D02\u0D03\x07\u02B4\x02\x02\u0D03\u0D05" +
		"\x07\xD5\x02\x02\u0D04\u0D02\x03\x02\x02\x02\u0D04\u0D05\x03\x02\x02\x02" +
		"\u0D05\u0D06\x03\x02\x02\x02\u0D06\u0D07\x05\u0202\u0102\x02\u0D07\u0D08" +
		"\x07\u0182\x02\x02\u0D08\u0D0A\x05\u0202\u0102\x02\u0D09\u0D0B\t\x03\x02" +
		"\x02\u0D0A\u0D09\x03\x02\x02\x02\u0D0A\u0D0B\x03\x02\x02\x02\u0D0B\u0101" +
		"\x03\x02\x02\x02\u0D0C\u0D0D\x07\xBE\x02\x02\u0D0D\u0D10\x07\u01BC\x02" +
		"\x02\u0D0E\u0D0F\x07\u02B4\x02\x02\u0D0F\u0D11\x07\xD5\x02\x02\u0D10\u0D0E" +
		"\x03\x02\x02\x02\u0D10\u0D11\x03\x02\x02\x02\u0D11\u0D12\x03\x02\x02\x02" +
		"\u0D12\u0D14\x05\u01D0\xE9\x02\u0D13\u0D15\t\x03\x02\x02\u0D14\u0D13\x03" +
		"\x02\x02\x02\u0D14\u0D15\x03\x02\x02\x02\u0D15\u0103\x03\x02\x02\x02\u0D16" +
		"\u0D17\x07\xBE\x02\x02\u0D17\u0D1A\x07\u01E7\x02\x02\u0D18\u0D19\x07\u02B4" +
		"\x02\x02\u0D19\u0D1B\x07\xD5\x02\x02\u0D1A\u0D18\x03\x02\x02\x02\u0D1A" +
		"\u0D1B\x03\x02\x02\x02\u0D1B\u0D1C\x03\x02\x02\x02\u0D1C\u0D1D\x05\u01D0" +
		"\xE9\x02\u0D1D\u0105\x03\x02\x02\x02\u0D1E\u0D1F\x07\xBE\x02\x02\u0D1F" +
		"\u0D22\x07\u01F2\x02\x02\u0D20\u0D21\x07\u02B4\x02\x02\u0D21\u0D23\x07" +
		"\xD5\x02\x02\u0D22\u0D20\x03\x02\x02\x02\u0D22\u0D23\x03\x02\x02\x02\u0D23" +
		"\u0D24\x03\x02\x02\x02\u0D24\u0D25\x05\u01CC\xE7\x02\u0D25\u0D26\x07\u0182" +
		"\x02\x02\u0D26\u0D28\x05\u0202\u0102\x02\u0D27\u0D29\t\x03\x02\x02\u0D28" +
		"\u0D27\x03\x02\x02\x02\u0D28\u0D29\x03\x02\x02\x02\u0D29\u0107\x03\x02" +
		"\x02\x02\u0D2A\u0D2B\x07\xBE\x02\x02\u0D2B\u0D2E\x07\u01F5\x02\x02\u0D2C" +
		"\u0D2D\x07\u02B4\x02\x02\u0D2D\u0D2F\x07\xD5\x02\x02\u0D2E\u0D2C\x03\x02" +
		"\x02\x02\u0D2E\u0D2F\x03\x02\x02\x02\u0D2F\u0D30\x03\x02\x02\x02\u0D30" +
		"\u0D32\x05\u01D0\xE9\x02\u0D31\u0D33\t\x03\x02\x02\u0D32\u0D31\x03\x02" +
		"\x02\x02\u0D32\u0D33\x03\x02\x02\x02\u0D33\u0109\x03\x02\x02\x02\u0D34" +
		"\u0D35\x07\xBE\x02\x02\u0D35\u0D38\x07\u0203\x02\x02\u0D36\u0D37\x07\u02B4" +
		"\x02\x02\u0D37\u0D39\x07\xD5\x02\x02\u0D38\u0D36\x03\x02\x02\x02\u0D38" +
		"\u0D39\x03\x02\x02\x02\u0D39\u0D3A\x03\x02\x02\x02\u0D3A\u0D3C\x05\u01D0" +
		"\xE9\x02\u0D3B\u0D3D\t\x03\x02\x02\u0D3C\u0D3B\x03\x02\x02\x02\u0D3C\u0D3D" +
		"\x03\x02\x02\x02\u0D3D\u010B\x03\x02\x02\x02\u0D3E\u0D3F\x07\xBE\x02\x02" +
		"\u0D3F\u0D42\x07\u02BE\x02\x02\u0D40\u0D41\x07\u02B4\x02\x02\u0D41\u0D43" +
		"\x07\xD5\x02\x02\u0D42\u0D40\x03\x02\x02\x02\u0D42\u0D43\x03\x02\x02\x02" +
		"\u0D43\u0D44\x03\x02\x02\x02\u0D44\u0D46\x05\u01D0\xE9\x02\u0D45\u0D47" +
		"\t\x03\x02\x02\u0D46\u0D45\x03\x02\x02\x02\u0D46\u0D47\x03\x02\x02\x02" +
		"\u0D47\u010D\x03\x02\x02\x02\u0D48\u0D49\x07\xBE\x02\x02\u0D49\u0D4C\x07" +
		"\u0226\x02\x02\u0D4A\u0D4B\x07\u02B4\x02\x02\u0D4B\u0D4D\x07\xD5\x02\x02" +
		"\u0D4C\u0D4A\x03\x02\x02\x02\u0D4C\u0D4D\x03\x02\x02\x02\u0D4D\u0D4E\x03" +
		"\x02\x02\x02\u0D4E\u0D4F\x05\u01D0\xE9\x02\u0D4F\u010F\x03\x02\x02\x02" +
		"\u0D50\u0D51\x07\xBE\x02\x02\u0D51\u0D54\x07\u0232\x02\x02\u0D52\u0D53" +
		"\x07\u02B4\x02\x02\u0D53\u0D55\x07\xD5\x02\x02\u0D54\u0D52\x03\x02\x02" +
		"\x02\u0D54\u0D55\x03\x02\x02\x02\u0D55\u0D56\x03\x02\x02\x02\u0D56\u0D58" +
		"\x05\u0202\u0102\x02\u0D57\u0D59\t\x03\x02\x02\u0D58\u0D57\x03\x02\x02" +
		"\x02\u0D58\u0D59\x03\x02\x02\x02\u0D59\u0111\x03\x02\x02\x02\u0D5A\u0D5B" +
		"\x07\xBE\x02\x02\u0D5B\u0D5E\x07\u0239\x02\x02\u0D5C\u0D5D\x07\u02B4\x02" +
		"\x02\u0D5D\u0D5F\x07\xD5\x02\x02\u0D5E\u0D5C\x03\x02\x02\x02\u0D5E\u0D5F" +
		"\x03\x02\x02\x02\u0D5F\u0D60\x03\x02\x02\x02\u0D60\u0D62\x05\u01D0\xE9" +
		"\x02\u0D61\u0D63\t\x03\x02\x02\u0D62\u0D61\x03\x02\x02\x02\u0D62\u0D63" +
		"\x03\x02\x02\x02\u0D63\u0113\x03\x02\x02\x02\u0D64\u0D65\x07\xBE\x02\x02" +
		"\u0D65\u0D68\x07\u023C\x02\x02\u0D66\u0D67\x07\u02B4\x02\x02\u0D67\u0D69" +
		"\x07\xD5\x02\x02\u0D68\u0D66\x03\x02\x02\x02\u0D68\u0D69\x03\x02\x02\x02" +
		"\u0D69\u0D6A\x03\x02\x02\x02\u0D6A\u0D6B\x05\u0202\u0102\x02\u0D6B\u0115" +
		"\x03\x02\x02\x02\u0D6C\u0D6D\x07\xBE\x02\x02\u0D6D\u0D6E\x07\u02F1\x02" +
		"\x02\u0D6E\u0D6F\x07\u01FC\x02\x02\u0D6F\u0D72\x07j\x02\x02\u0D70\u0D71" +
		"\x07\u02B4\x02\x02\u0D71\u0D73\x07\xD5\x02\x02\u0D72\u0D70\x03\x02\x02" +
		"\x02\u0D72\u0D73\x03\x02\x02\x02\u0D73\u0D74\x03\x02\x02\x02\u0D74\u0D76" +
		"\x05\u0202\u0102\x02\u0D75\u0D77\t\x03\x02\x02\u0D76\u0D75\x03\x02\x02" +
		"\x02\u0D76\u0D77\x03\x02\x02\x02\u0D77\u0117\x03\x02\x02\x02\u0D78\u0D79" +
		"\x07\xBE\x02\x02\u0D79\u0D7A\x07\u02F1\x02\x02\u0D7A\u0D7B\x07\u01FC\x02" +
		"\x02\u0D7B\u0D7E\x07\xB4\x02\x02\u0D7C\u0D7D\x07\u02B4\x02\x02\u0D7D\u0D7F" +
		"\x07\xD5\x02\x02\u0D7E\u0D7C\x03\x02\x02\x02\u0D7E\u0D7F\x03\x02\x02\x02" +
		"\u0D7F\u0D80\x03\x02\x02\x02\u0D80\u0D82\x05\u0202\u0102\x02\u0D81\u0D83" +
		"\t\x03\x02\x02\u0D82\u0D81\x03\x02\x02\x02\u0D82\u0D83\x03\x02\x02\x02" +
		"\u0D83\u0119\x03\x02\x02\x02\u0D84\u0D85\x07\xBE\x02\x02\u0D85\u0D86\x07" +
		"\u02F1\x02\x02\u0D86\u0D87\x07\u01FC\x02\x02\u0D87\u0D8A\x07\u019F\x02" +
		"\x02\u0D88\u0D89\x07\u02B4\x02\x02\u0D89\u0D8B\x07\xD5\x02\x02\u0D8A\u0D88" +
		"\x03\x02\x02\x02\u0D8A\u0D8B\x03\x02\x02\x02\u0D8B\u0D8C\x03\x02\x02\x02" +
		"\u0D8C\u0D8E\x05\u0202\u0102\x02\u0D8D\u0D8F\t\x03\x02\x02\u0D8E\u0D8D" +
		"\x03\x02\x02\x02\u0D8E\u0D8F\x03\x02\x02\x02\u0D8F\u011B\x03\x02\x02\x02" +
		"\u0D90\u0D91\x07\xBE\x02\x02\u0D91\u0D92\x07\u02F1\x02\x02\u0D92\u0D93" +
		"\x07\u01FC\x02\x02\u0D93\u0D96\x07\u023E\x02\x02\u0D94\u0D95\x07\u02B4" +
		"\x02\x02\u0D95\u0D97\x07\xD5\x02\x02\u0D96\u0D94\x03\x02\x02\x02\u0D96" +
		"\u0D97\x03\x02\x02\x02\u0D97\u0D98\x03\x02\x02\x02\u0D98\u0D9A\x05\u0202" +
		"\u0102\x02\u0D99\u0D9B\t\x03\x02\x02\u0D9A\u0D99\x03\x02\x02\x02\u0D9A" +
		"\u0D9B\x03\x02\x02\x02\u0D9B\u011D\x03\x02\x02\x02\u0D9C\u0D9D\x07\xBE" +
		"\x02\x02\u0D9D\u0DA0\x07\u0251\x02\x02\u0D9E\u0D9F\x07\u02B4\x02\x02\u0D9F" +
		"\u0DA1\x07\xD5\x02\x02\u0DA0\u0D9E\x03\x02\x02\x02\u0DA0\u0DA1\x03\x02" +
		"\x02\x02\u0DA1\u0DA2\x03\x02\x02\x02\u0DA2\u0DA3\x07\xE5\x02\x02\u0DA3" +
		"\u0DA4\x05\u0202\u0102\x02\u0DA4\u0DA5\x07\u012D\x02\x02\u0DA5\u0DA6\x05" +
		"\u0202\u0102\x02\u0DA6\u0DA7\t\x03\x02\x02\u0DA7\u011F\x03\x02\x02\x02" +
		"\u0DA8\u0DA9\x07\xBE\x02\x02\u0DA9\u0DAC\x07\u0256\x02\x02\u0DAA\u0DAB" +
		"\x07\u02B4\x02\x02\u0DAB\u0DAD\x07\xD5\x02\x02\u0DAC\u0DAA\x03\x02\x02" +
		"\x02\u0DAC\u0DAD\x03\x02\x02\x02\u0DAD\u0DAE\x03\x02\x02\x02\u0DAE\u0DAF" +
		"\x05\u0202\u0102\x02\u0DAF\u0DB0\x07\u0182\x02\x02\u0DB0\u0DB2\x05\u0202" +
		"\u0102\x02\u0DB1\u0DB3\t\x03\x02\x02\u0DB2\u0DB1\x03\x02\x02\x02\u0DB2" +
		"\u0DB3\x03\x02\x02\x02\u0DB3\u0121\x03\x02\x02\x02\u0DB4\u0DB5\x07\xBE" +
		"\x02\x02\u0DB5\u0DB8\x07\u025E\x02\x02\u0DB6\u0DB7\x07\u02B4\x02\x02\u0DB7" +
		"\u0DB9\x07\xD5\x02\x02\u0DB8\u0DB6\x03\x02\x02\x02\u0DB8\u0DB9\x03\x02" +
		"\x02\x02\u0DB9\u0DBA\x03\x02\x02\x02\u0DBA\u0DBC\x05\u01D0\xE9\x02\u0DBB" +
		"\u0DBD\t\x03\x02\x02\u0DBC\u0DBB\x03\x02\x02\x02\u0DBC\u0DBD\x03\x02\x02" +
		"\x02\u0DBD\u0123\x03\x02\x02\x02\u0DBE\u0DBF\x07\xBE\x02\x02\u0DBF\u0DC2" +
		"\x07\u026E\x02\x02\u0DC0\u0DC1\x07\u02B4\x02\x02\u0DC1\u0DC3\x07\xD5\x02" +
		"\x02\u0DC2\u0DC0\x03\x02\x02\x02\u0DC2\u0DC3\x03\x02\x02\x02\u0DC3\u0DC4" +
		"\x03\x02\x02\x02\u0DC4\u0DC5\x05\u01D0\xE9\x02\u0DC5\u0125\x03\x02\x02" +
		"\x02\u0DC6\u0DC7\x07\xBE\x02\x02\u0DC7\u0DC8\x07\u026E\x02\x02\u0DC8\u0DCB" +
		"\x07\u0147\x02\x02\u0DC9\u0DCA\x07\u02B4\x02\x02\u0DCA\u0DCC\x07\xD5\x02" +
		"\x02\u0DCB\u0DC9\x03\x02\x02\x02\u0DCB\u0DCC\x03\x02\x02\x02\u0DCC\u0DCD" +
		"\x03\x02\x02\x02\u0DCD\u0DD3\x07\xE5\x02\x02\u0DCE\u0DD4\x05\u01CC\xE7" +
		"\x02\u0DCF\u0DD4\x07\u026E\x02\x02\u0DD0\u0DD4\x07\x8F\x02\x02\u0DD1\u0DD4" +
		"\x07\u0208\x02\x02\u0DD2\u0DD4\x07\u01BB\x02\x02\u0DD3\u0DCE\x03\x02\x02" +
		"\x02\u0DD3\u0DCF\x03\x02\x02\x02\u0DD3\u0DD0\x03\x02\x02\x02\u0DD3\u0DD1" +
		"\x03\x02\x02\x02\u0DD3\u0DD2\x03\x02\x02\x02\u0DD4\u0DD5\x03\x02\x02\x02" +
		"\u0DD5\u0DD6\x07\u02BE\x02\x02\u0DD6\u0DD7\x05\u0202\u0102\x02\u0DD7\u0127" +
		"\x03\x02\x02\x02\u0DD8\u0DD9\x07\xBE\x02\x02\u0DD9\u0DDC\x07\u0281\x02" +
		"\x02\u0DDA\u0DDB\x07\u02B4\x02\x02\u0DDB\u0DDD\x07\xD5\x02\x02\u0DDC\u0DDA" +
		"\x03\x02\x02\x02\u0DDC\u0DDD\x03\x02\x02\x02\u0DDD\u0DDE\x03\x02\x02\x02" +
		"\u0DDE\u0DE0\x05\u01D0\xE9\x02\u0DDF\u0DE1\t\x03\x02\x02\u0DE0\u0DDF\x03" +
		"\x02\x02\x02\u0DE0\u0DE1\x03\x02\x02\x02\u0DE1\u0129\x03\x02\x02\x02\u0DE2" +
		"\u0DE3\x07\xD3\x02\x02\u0DE3\u0DE5\x05\u0202\u0102\x02\u0DE4\u0DE6\x05" +
		"\u01B8\xDD\x02\u0DE5\u0DE4\x03\x02\x02\x02\u0DE5\u0DE6\x03\x02\x02\x02" +
		"\u0DE6\u012B\x03\x02\x02\x02\u0DE7\u0DE9\x07\xD7\x02\x02\u0DE8\u0DEA\x07" +
		"\x18\x02\x02\u0DE9\u0DE8\x03\x02\x02\x02\u0DE9\u0DEA\x03\x02\x02\x02\u0DEA" +
		"\u0DEC\x03\x02\x02\x02\u0DEB\u0DED\x07\u0280\x02\x02\u0DEC\u0DEB\x03\x02" +
		"\x02\x02\u0DEC\u0DED\x03\x02\x02\x02\u0DED\u0DFB\x03\x02\x02\x02\u0DEE" +
		"\u0DEF\x07\xD7\x02\x02\u0DEF\u0DF0\x07\u0300\x02\x02\u0DF0\u0DF5\x05\u0190" +
		"\xC9\x02\u0DF1\u0DF2\x07\u02FA\x02\x02\u0DF2\u0DF4\x05\u0190\xC9\x02\u0DF3" +
		"\u0DF1\x03\x02\x02\x02\u0DF4\u0DF7\x03\x02\x02\x02\u0DF5\u0DF3\x03\x02" +
		"\x02\x02\u0DF5\u0DF6\x03\x02\x02\x02\u0DF6\u0DF8\x03\x02\x02\x02\u0DF7" +
		"\u0DF5\x03\x02\x02\x02\u0DF8\u0DF9\x07\u0301\x02\x02\u0DF9\u0DFB\x03\x02" +
		"\x02\x02\u0DFA\u0DE7\x03\x02\x02\x02\u0DFA\u0DEE\x03\x02\x02\x02\u0DFB" +
		"\u0E05\x03\x02\x02\x02\u0DFC\u0E06\x05\u015A\xAE\x02\u0DFD\u0E06\x05\u0134" +
		"\x9B\x02\u0DFE\u0E06\x05\u0176\xBC\x02\u0DFF\u0E06\x05\xD2j\x02\u0E00" +
		"\u0E06\x05\u017E\xC0\x02\u0E01\u0E06\x05\u012A\x96\x02\u0E02\u0E06\x05" +
		"\xD0i\x02\u0E03\u0E06\x05\xB6\\\x02\u0E04\u0E06\x05\x98M\x02\u0E05\u0DFC" +
		"\x03\x02\x02\x02\u0E05\u0DFD\x03\x02\x02\x02\u0E05\u0DFE\x03\x02\x02\x02" +
		"\u0E05\u0DFF\x03\x02\x02\x02\u0E05\u0E00\x03\x02\x02\x02\u0E05\u0E01\x03" +
		"\x02\x02\x02\u0E05\u0E02\x03\x02\x02\x02\u0E05\u0E03\x03\x02\x02\x02\u0E05" +
		"\u0E04\x03\x02\x02\x02\u0E06\u012D\x03\x02\x02\x02\u0E07\u0E08\x05\u0206" +
		"\u0104\x02\u0E08\u012F\x03\x02\x02\x02\u0E09\u0E0A\x05\u0206\u0104\x02" +
		"\u0E0A\u0131\x03\x02\x02\x02\u0E0B\u0E0C\x05\u0206\u0104\x02\u0E0C\u0133" +
		"\x03\x02\x02\x02\u0E0D\u0E0F\x05\u015E\xB0\x02\u0E0E\u0E0D\x03\x02\x02" +
		"\x02\u0E0E\u0E0F\x03\x02\x02\x02\u0E0F\u0E10\x03\x02\x02\x02\u0E10\u0E11" +
		"\x07\u0118\x02\x02\u0E11\u0E12\x07\u0121\x02\x02\u0E12\u0E15\x05\u01D6" +
		"\xEC\x02\u0E13\u0E14\x07\x1D\x02\x02\u0E14\u0E16\x05\u0202\u0102\x02\u0E15" +
		"\u0E13\x03\x02\x02\x02\u0E15\u0E16\x03\x02\x02\x02\u0E16\u0E1B\x03\x02" +
		"\x02\x02\u0E17\u0E18\x07\u0300\x02\x02\u0E18\u0E19\x05\u01CE\xE8\x02\u0E19" +
		"\u0E1A\x07\u0301\x02\x02\u0E1A\u0E1C\x03\x02\x02\x02\u0E1B\u0E17\x03\x02" +
		"\x02\x02\u0E1B\u0E1C\x03\x02\x02\x02\u0E1C\u0E22\x03\x02\x02\x02\u0E1D" +
		"\u0E1F\x07\u0194\x02\x02\u0E1E\u0E20\t\x12\x02\x02\u0E1F\u0E1E\x03\x02" +
		"\x02\x02\u0E1F\u0E20\x03\x02\x02\x02\u0E20\u0E21\x03\x02\x02\x02\u0E21" +
		"\u0E23\x07\u0278\x02\x02\u0E22\u0E1D\x03\x02\x02\x02\u0E22\u0E23\x03\x02" +
		"\x02\x02\u0E23\u0E28\x03\x02\x02\x02\u0E24\u0E25\x07\x9D\x02\x02\u0E25" +
		"\u0E29\x07\u0279\x02\x02\u0E26\u0E29\x05\u015A\xAE\x02\u0E27\u0E29\x05" +
		"\u017E\xC0\x02\u0E28\u0E24\x03\x02\x02\x02\u0E28\u0E26\x03\x02\x02\x02" +
		"\u0E28\u0E27\x03\x02\x02\x02\u0E29\u0E45\x03\x02\x02\x02\u0E2A\u0E2B\x07" +
		"\u0182\x02\x02\u0E2B\u0E30\x07k\x02\x02\u0E2C\u0E2D\x07\u0300\x02\x02" +
		"\u0E2D\u0E2E\x05\u020A\u0106\x02\u0E2E\u0E2F\x07\u0301\x02\x02\u0E2F\u0E31" +
		"\x03\x02\x02\x02\u0E30\u0E2C\x03\x02\x02\x02\u0E30\u0E31\x03\x02\x02\x02" +
		"\u0E31\u0E35\x03\x02\x02\x02\u0E32\u0E33\x07\u0182\x02\x02\u0E33\u0E34" +
		"\x07o\x02\x02\u0E34\u0E36\x05\u020A\u0106\x02\u0E35\u0E32\x03\x02\x02" +
		"\x02\u0E35\u0E36\x03\x02\x02\x02\u0E36\u0E38\x03\x02\x02\x02\u0E37\u0E39" +
		"\x05\u0184\xC3\x02\u0E38\u0E37\x03\x02\x02\x02\u0E38\u0E39\x03\x02\x02" +
		"\x02\u0E39\u0E43\x03\x02\x02\x02\u0E3A\u0E3B\x07\xBB\x02\x02\u0E3B\u0E44" +
		"\x07\u0170\x02\x02\u0E3C\u0E3D\x07\xBB\x02\x02\u0E3D\u0E3E\x07\u026B\x02" +
		"\x02\u0E3E\u0E3F\x07\u0209\x02\x02\u0E3F\u0E41\x05\u01AC\xD7\x02\u0E40" +
		"\u0E42\x05\u0184\xC3\x02\u0E41\u0E40\x03\x02\x02\x02\u0E41\u0E42\x03\x02" +
		"\x02\x02\u0E42\u0E44\x03\x02\x02\x02\u0E43\u0E3A\x03\x02\x02\x02\u0E43" +
		"\u0E3C\x03\x02\x02\x02\u0E44\u0E46\x03\x02\x02\x02\u0E45\u0E2A\x03\x02" +
		"\x02\x02\u0E45\u0E46\x03\x02\x02\x02\u0E46\u0E48\x03\x02\x02\x02\u0E47" +
		"\u0E49\x05\u01B0\xD9\x02\u0E48\u0E47\x03\x02\x02\x02\u0E48\u0E49\x03\x02" +
		"\x02\x02\u0E49\u0135\x03\x02\x02\x02\u0E4A\u0E4B\x07\u0139\x02\x02\u0E4B" +
		"\u0E4C\x05\u0202\u0102\x02\u0E4C\u0137\x03\x02\x02\x02\u0E4D\u0E4E\x05" +
		"\u0206\u0104\x02\u0E4E\u0139\x03\x02\x02\x02\u0E4F\u0E51\x07\u0141\x02" +
		"\x02\u0E50\u0E52\x07\u0239\x02\x02\u0E51\u0E50\x03\x02\x02\x02\u0E51\u0E52" +
		"\x03\x02\x02\x02\u0E52\u0E54\x03\x02\x02\x02\u0E53\u0E55\x07\u0183\x02" +
		"\x02\u0E54\u0E53\x03\x02\x02\x02\u0E54\u0E55\x03\x02\x02\x02\u0E55\u0E56" +
		"\x03\x02\x02\x02\u0E56\u0E58\x05\u01CC\xE7\x02\u0E57\u0E59\x07\u02FF\x02" +
		"\x02\u0E58\u0E57\x03\x02\x02\x02\u0E58\u0E59\x03\x02\x02\x02\u0E59\u0E6E" +
		"\x03\x02\x02\x02\u0E5A\u0E6B\x07\u010B\x02\x02\u0E5B\u0E5C\x07\n\x02\x02" +
		"\u0E5C\u0E6C\x07\u020C\x02\x02\u0E5D\u0E5E\x07\u01EE\x02\x02\u0E5E\u0E6C" +
		"\x07\u020C\x02\x02\u0E5F\u0E60\x07\u01EE\x02\x02\u0E60\u0E6C\x07\xD1\x02" +
		"\x02\u0E61\u0E62\x07\u020C\x02\x02\u0E62\u0E63\x07\u026B\x02\x02\u0E63" +
		"\u0E6C\x07\xD1\x02\x02\u0E64\u0E6C\x07\u020C\x02\x02\u0E65\u0E66\x07\u020C" +
		"\x02\x02\u0E66\u0E67\x07\u01EE\x02\x02\u0E67\u0E6C\x07\xD1\x02\x02\u0E68" +
		"\u0E6C\x07\xD1\x02\x02\u0E69\u0E6A\x07\n\x02\x02\u0E6A\u0E6C\x07\xD1\x02" +
		"\x02\u0E6B\u0E5B\x03\x02\x02\x02\u0E6B\u0E5D\x03\x02\x02\x02\u0E6B\u0E5F" +
		"\x03\x02\x02\x02\u0E6B\u0E61\x03\x02\x02\x02\u0E6B\u0E64\x03\x02\x02\x02" +
		"\u0E6B\u0E65\x03\x02\x02\x02\u0E6B\u0E68\x03\x02\x02\x02\u0E6B\u0E69\x03" +
		"\x02\x02\x02\u0E6C\u0E6D\x03\x02\x02\x02\u0E6D\u0E6F\x07\u0157\x02\x02" +
		"\u0E6E\u0E5A\x03\x02\x02\x02\u0E6E\u0E6F\x03\x02\x02\x02\u0E6F\u0E71\x03" +
		"\x02\x02\x02\u0E70\u0E72\x07\u0173\x02\x02\u0E71\u0E70\x03\x02\x02\x02" +
		"\u0E71\u0E72\x03\x02\x02\x02\u0E72\u013B\x03\x02\x02\x02\u0E73\u0E8B\x07" +
		"\u015D\x02\x02\u0E74\u0E87\x07\u0168\x02\x02\u0E75\u0E87\x07\u01B7\x02" +
		"\x02\u0E76\u0E87\x07\xE1\x02\x02\u0E77\u0E87\x07\u012F\x02\x02\u0E78\u0E79" +
		"\x07\t\x02\x02\u0E79\u0E87\x07\u011D\x02\x02\u0E7A\u0E7B\x07\u01D4\x02" +
		"\x02\u0E7B\u0E87\x07\u0307\x02\x02\u0E7C\u0E87\x07\u0307\x02\x02\u0E7D" +
		"\u0E87\x07\x12\x02\x02\u0E7E\u0E80\x07\xEA\x02\x02\u0E7F\u0E81\t\x13\x02" +
		"\x02\u0E80\u0E7F\x03\x02\x02\x02\u0E80\u0E81\x03\x02\x02\x02\u0E81\u0E87" +
		"\x03\x02\x02\x02\u0E82\u0E84\x07)\x02\x02\u0E83\u0E85\t\x13\x02\x02\u0E84" +
		"\u0E83\x03\x02\x02\x02\u0E84\u0E85\x03\x02\x02\x02\u0E85\u0E87\x03\x02" +
		"\x02\x02\u0E86\u0E74\x03\x02\x02\x02\u0E86\u0E75\x03\x02\x02\x02\u0E86" +
		"\u0E76\x03\x02\x02\x02\u0E86\u0E77\x03\x02\x02\x02\u0E86\u0E78\x03\x02" +
		"\x02\x02\u0E86\u0E7A\x03\x02\x02\x02\u0E86\u0E7C\x03\x02\x02\x02\u0E86" +
		"\u0E7D\x03\x02\x02\x02\u0E86\u0E7E\x03\x02\x02\x02\u0E86\u0E82\x03\x02" +
		"\x02\x02\u0E87\u0E89\x03\x02\x02\x02\u0E88\u0E8A\t\x14\x02\x02\u0E89\u0E88" +
		"\x03\x02\x02\x02\u0E89\u0E8A\x03\x02\x02\x02\u0E8A\u0E8C\x03\x02\x02\x02" +
		"\u0E8B\u0E86\x03\x02\x02\x02\u0E8B\u0E8C\x03\x02\x02\x02\u0E8C\u0E8D\x03" +
		"\x02\x02\x02\u0E8D\u0E8E\x05\u01CC\xE7\x02\u0E8E\u013D\x03\x02\x02\x02" +
		"\u0E8F\u0E90\x07\u0171\x02\x02\u0E90\u0E93\x05\u01CC\xE7\x02\u0E91\u0E92" +
		"\x07\u02FA\x02\x02\u0E92\u0E94\x07\u030A\x02\x02\u0E93\u0E91\x03\x02\x02" +
		"\x02\u0E93\u0E94\x03\x02\x02\x02\u0E94\u013F\x03\x02\x02\x02\u0E95\u0E96" +
		"\x07\u01B3\x02\x02\u0E96\u0E9B\x05\u0202\u0102\x02\u0E97\u0E98\x07\u0300" +
		"\x02\x02\u0E98\u0E99\x05\u01DA\xEE\x02\u0E99\u0E9A\x07\u0301\x02\x02\u0E9A" +
		"\u0E9C\x03\x02\x02\x02\u0E9B\u0E97\x03\x02\x02\x02\u0E9B\u0E9C\x03\x02" +
		"\x02\x02\u0E9C\u0E9D\x03\x02\x02\x02\u0E9D\u0EA3\x07\x1D\x02\x02\u0E9E" +
		"\u0EA4\x05\u015A\xAE\x02\u0E9F\u0EA4\x05\u0134\x9B\x02\u0EA0\u0EA4\x05" +
		"\u0176\xBC\x02\u0EA1\u0EA4\x05\xD2j\x02\u0EA2\u0EA4\x05\u017E\xC0\x02" +
		"\u0EA3\u0E9E\x03\x02\x02\x02\u0EA3\u0E9F\x03\x02\x02\x02\u0EA3\u0EA0\x03" +
		"\x02\x02\x02\u0EA3\u0EA1\x03\x02\x02\x02\u0EA3\u0EA2\x03\x02\x02\x02\u0EA4" +
		"\u0141\x03\x02\x02\x02\u0EA5\u0EA6\x07\u01B3\x02\x02\u0EA6\u0EA7\x07\u024D" +
		"\x02\x02\u0EA7\u0EA8\x05\u01CC\xE7\x02\u0EA8\u0143\x03\x02\x02\x02\u0EA9" +
		"\u0EAA\x07\u01C3\x02\x02\u0EAA\u0EAB\x07\u02D0\x02\x02\u0EAB\u0EAF\x07" +
		"8\x02\x02\u0EAC\u0EB0\x05\u0202\u0102\x02\u0EAD\u0EB0\x07\x8F\x02\x02" +
		"\u0EAE\u0EB0\x07\u0208\x02\x02\u0EAF\u0EAC\x03\x02\x02\x02\u0EAF\u0EAD" +
		"\x03\x02\x02\x02\u0EAF\u0EAE\x03\x02\x02\x02\u0EB0\u0EB9\x03\x02\x02\x02" +
		"\u0EB1\u0EB5\x07\u02FA\x02\x02\u0EB2\u0EB6\x05\u0202\u0102\x02\u0EB3\u0EB6" +
		"\x07\x8F\x02\x02\u0EB4\u0EB6\x07\u0208\x02\x02\u0EB5\u0EB2\x03\x02\x02" +
		"\x02\u0EB5\u0EB3\x03\x02\x02\x02\u0EB5\u0EB4\x03\x02\x02\x02\u0EB6\u0EB8" +
		"\x03\x02\x02\x02\u0EB7\u0EB1\x03\x02\x02\x02\u0EB8\u0EBB\x03\x02\x02\x02" +
		"\u0EB9\u0EB7\x03\x02\x02\x02\u0EB9\u0EBA\x03\x02\x02\x02\u0EBA\u0EBC\x03" +
		"\x02\x02\x02\u0EBB\u0EB9\x03\x02\x02\x02\u0EBC\u0EC0\x07\u0249\x02\x02" +
		"\u0EBD\u0EC1\x05\u0202\u0102\x02\u0EBE\u0EC1\x07\x8F\x02\x02\u0EBF\u0EC1" +
		"\x07\u0208\x02\x02\u0EC0\u0EBD\x03\x02\x02\x02\u0EC0\u0EBE\x03\x02\x02" +
		"\x02\u0EC0\u0EBF\x03\x02\x02\x02\u0EC1\u0145\x03\x02\x02\x02\u0EC2\u0EC3" +
		"\x05\u0206\u0104\x02\u0EC3\u0147\x03\x02\x02\x02\u0EC4\u0EC8\x07\u01D3" +
		"\x02\x02\u0EC5\u0EC6\x07\u0300\x02\x02\u0EC6\u0EC7\x07\u0280\x02\x02\u0EC7" +
		"\u0EC9\x07\u0301\x02\x02\u0EC8\u0EC5\x03\x02\x02\x02\u0EC8\u0EC9\x03\x02" +
		"\x02\x02\u0EC9\u0ECA\x03\x02\x02\x02\u0ECA\u0ECB\t\x15\x02\x02\u0ECB\u0ECC" +
		"\x05\u0202\u0102\x02\u0ECC\u0149\x03\x02\x02\x02\u0ECD\u0ECF\x07\u01D5" +
		"\x02\x02\u0ECE\u0ED0\x07\u01F3\x02\x02\u0ECF\u0ECE\x03\x02\x02\x02\u0ECF" +
		"\u0ED0\x03\x02\x02\x02\u0ED0\u0ED1\x03\x02\x02\x02\u0ED1\u0ED2\x05\u0202" +
		"\u0102\x02\u0ED2\u014B\x03\x02\x02\x02\u0ED3\u0ED6\x07\u01DA\x02\x02\u0ED4" +
		"\u0ED7\x05\u0202\u0102\x02\u0ED5\u0ED7\x07\x12\x02\x02\u0ED6\u0ED4\x03" +
		"\x02\x02\x02\u0ED6\u0ED5\x03\x02\x02\x02\u0ED7\u014D\x03\x02\x02\x02\u0ED8" +
		"\u0ED9\x05\u0206\u0104\x02\u0ED9\u014F\x03\x02\x02\x02\u0EDA\u0EDC\x07" +
		"\u01E8\x02\x02\u0EDB\u0EDD\t\x16\x02\x02\u0EDC\u0EDB\x03\x02\x02\x02\u0EDC" +
		"\u0EDD\x03\x02\x02\x02\u0EDD\u0151\x03\x02\x02\x02\u0EDE\u0EDF\x07\u01E8" +
		"\x02\x02\u0EDF\u0EE0\x07\u01B4\x02\x02\u0EE0\u0EE1\x07\u0307\x02\x02\u0EE1" +
		"\u0153\x03\x02\x02\x02\u0EE2\u0EE4\x07\u01E8\x02\x02\u0EE3\u0EE5\t\x16" +
		"\x02\x02\u0EE4\u0EE3\x03\x02\x02\x02\u0EE4\u0EE5\x03\x02\x02\x02\u0EE5" +
		"\u0EE6\x03\x02\x02\x02\u0EE6\u0EE8\x07\u0249\x02\x02\u0EE7\u0EE9\x07\u01F3" +
		"\x02\x02\u0EE8\u0EE7\x03\x02\x02\x02\u0EE8\u0EE9\x03\x02\x02\x02\u0EE9" +
		"\u0EEA\x03\x02\x02\x02\u0EEA\u0EEB\x05\u0202\u0102\x02\u0EEB\u0155\x03" +
		"\x02\x02\x02\u0EEC\u0EED\x07\u01F3\x02\x02\u0EED\u0EEE\x05\u0202\u0102" +
		"\x02\u0EEE\u0157\x03\x02\x02\x02\u0EEF\u0EF0\x07\u01FF\x02\x02\u0EF0\u0EF3" +
		"\x07\u012B\x02\x02\u0EF1\u0EF2\x07\xE5\x02\x02\u0EF2\u0EF4\x05\u01CC\xE7" +
		"\x02\u0EF3\u0EF1\x03\x02\x02\x02\u0EF3\u0EF4\x03\x02\x02\x02\u0EF4\u0EF5" +
		"\x03\x02\x02\x02\u0EF5\u0F2C\x07\u0182\x02\x02\u0EF6\u0EF7\x07\u0239\x02" +
		"\x02\u0EF7\u0F2D\x05\u0202\u0102\x02\u0EF8\u0EF9\x07`\x02\x02\u0EF9\u0EFA" +
		"\x05\u0202\u0102\x02\u0EFA\u0EFB\x07\u0309\x02\x02\u0EFB\u0EFC\x05\u020A" +
		"\u0106\x02\u0EFC\u0F2D\x03\x02\x02\x02\u0EFD\u0EFE\x07\x10\x02\x02\u0EFE" +
		"\u0EFF\x05\u0202\u0102\x02\u0EFF\u0F00\x07\u0300\x02\x02\u0F00\u0F01\x05" +
		"\u01EE\xF8\x02\u0F01\u0F02\x07\u0301\x02\x02\u0F02\u0F2D\x03\x02\x02\x02" +
		"\u0F03\u0F04\x07\x94\x02\x02\u0F04\u0F2D\x05\u0202\u0102\x02\u0F05\u0F06" +
		"\x07\xBC\x02\x02\u0F06\u0F2D\x05\u0202\u0102\x02\u0F07\u0F08\x07\u02BC" +
		"\x02\x02\u0F08\u0F09\x07\u0256\x02\x02\u0F09\u0F2D\x05\u0202\u0102\x02" +
		"\u0F0A\u0F0B\x07\xE7\x02\x02\u0F0B\u0F0C\x07\u0239\x02\x02\u0F0C\u0F2D" +
		"\x05\u0202\u0102\x02\u0F0D\u0F0E\x07\xF0\x02\x02\u0F0E\u0F0F\x05\u0202" +
		"\u0102\x02\u0F0F\u0F10\x05\u01C0\xE1\x02\u0F10\u0F2D\x03\x02\x02\x02\u0F11" +
		"\u0F12\x07\u012E\x02\x02\u0F12\u0F13\x07\u017A\x02\x02\u0F13\u0F2D\x07" +
		"\u0307\x02\x02\u0F14\u0F15\x07\u02C7\x02\x02\u0F15\u0F16\x07\u0281\x02" +
		"\x02\u0F16\u0F2D\x05\u0202\u0102\x02\u0F17\u0F19\x07\u01B9\x02\x02\u0F18" +
		"\u0F17\x03\x02\x02\x02\u0F18\u0F19\x03\x02\x02\x02\u0F19\u0F1A\x03\x02" +
		"\x02\x02\u0F1A\u0F1B\x07\u012D\x02\x02\u0F1B\u0F2D\x05\u0202\u0102\x02" +
		"\u0F1C\u0F1D\x07\u01BC\x02\x02\u0F1D\u0F2D\x05\u0202\u0102\x02\u0F1E\u0F1F" +
		"\x07\u01E7\x02\x02\u0F1F\u0F2D\x05\u0202\u0102\x02\u0F20\u0F21\x07\u01F5" +
		"\x02\x02\u0F21\u0F2D\x05\u0202\u0102\x02\u0F22\u0F23\x07\u0203\x02\x02" +
		"\u0F23\u0F2D\x05\u0202\u0102\x02\u0F24\u0F25\x07\u0232\x02\x02\u0F25\u0F2D" +
		"\x05\u0202\u0102\x02\u0F26\u0F27\x07\u023C\x02\x02\u0F27\u0F2D\x05\u0202" +
		"\u0102\x02\u0F28\u0F29\x07\u025E\x02\x02\u0F29\u0F2D\x05\u0202\u0102\x02" +
		"\u0F2A\u0F2B\x07\u0281\x02\x02\u0F2B\u0F2D\x05\u0202\u0102\x02\u0F2C\u0EF6" +
		"\x03\x02\x02\x02\u0F2C\u0EF8\x03\x02\x02\x02\u0F2C\u0EFD\x03\x02\x02\x02" +
		"\u0F2C\u0F03\x03\x02\x02\x02\u0F2C\u0F05\x03\x02\x02\x02\u0F2C\u0F07\x03" +
		"\x02\x02\x02\u0F2C\u0F0A\x03\x02\x02\x02\u0F2C\u0F0D\x03\x02\x02\x02\u0F2C" +
		"\u0F11\x03\x02\x02\x02\u0F2C\u0F14\x03\x02\x02\x02\u0F2C\u0F18\x03\x02" +
		"\x02\x02\u0F2C\u0F1C\x03\x02\x02\x02\u0F2C\u0F1E\x03\x02\x02\x02\u0F2C" +
		"\u0F20\x03\x02\x02\x02\u0F2C\u0F22\x03\x02\x02\x02\u0F2C\u0F24\x03\x02" +
		"\x02\x02\u0F2C\u0F26\x03\x02\x02\x02\u0F2C\u0F28\x03\x02\x02\x02\u0F2C" +
		"\u0F2A\x03\x02\x02\x02\u0F2D\u0F2E\x03\x02\x02\x02\u0F2E\u0F2F\x07\u0123" +
		"\x02\x02\u0F2F\u0F30\x07\u030A\x02\x02\u0F30\u0159\x03\x02\x02\x02\u0F31" +
		"\u0F33\x05\u015E\xB0\x02\u0F32\u0F31\x03\x02\x02\x02\u0F32\u0F33\x03\x02" +
		"\x02\x02\u0F33\u0F4E\x03\x02\x02\x02\u0F34\u0F35\x07\u0200\x02\x02\u0F35" +
		"\u0F37\x05\u0180\xC1\x02\u0F36\u0F38\x05\u0182\xC2\x02\u0F37\u0F36\x03" +
		"\x02\x02\x02\u0F37\u0F38\x03\x02\x02\x02\u0F38\u0F4F\x03\x02\x02\x02\u0F39" +
		"\u0F3B\x07\u0239\x02\x02\u0F3A\u0F3C\x07\u0183\x02\x02\u0F3B\u0F3A\x03" +
		"\x02\x02\x02\u0F3B\u0F3C\x03\x02\x02\x02\u0F3C\u0F3D\x03\x02\x02\x02\u0F3D" +
		"\u0F3F\x05\u01D6\xEC\x02\u0F3E\u0F40\x07\u02FF\x02\x02\u0F3F\u0F3E\x03" +
		"\x02\x02\x02\u0F3F\u0F40\x03\x02\x02\x02\u0F40\u0F4F\x03\x02\x02\x02\u0F41" +
		"\u0F43\x07\u0300\x02\x02\u0F42\u0F41\x03\x02\x02\x02\u0F43\u0F44\x03\x02" +
		"\x02\x02\u0F44\u0F42\x03\x02\x02\x02\u0F44\u0F45\x03\x02\x02\x02\u0F45" +
		"\u0F46\x03\x02\x02\x02\u0F46\u0F48\x05\u015A\xAE\x02\u0F47\u0F49\x07\u0301" +
		"\x02\x02\u0F48\u0F47\x03\x02\x02\x02\u0F49\u0F4A\x03\x02\x02\x02\u0F4A" +
		"\u0F48\x03\x02\x02\x02\u0F4A\u0F4B\x03\x02\x02\x02\u0F4B\u0F4C\x03\x02" +
		"\x02\x02\u0F4C\u0F4D\x05\u019E\xD0\x02\u0F4D\u0F4F\x03\x02\x02\x02\u0F4E" +
		"\u0F34\x03\x02\x02\x02\u0F4E\u0F39\x03\x02\x02\x02\u0F4E\u0F42\x03\x02" +
		"\x02\x02\u0F4F\u0F51\x03\x02\x02\x02\u0F50\u0F52\x05\u0184\xC3\x02\u0F51" +
		"\u0F50\x03\x02\x02\x02\u0F51\u0F52\x03\x02\x02\x02\u0F52\u0F54\x03\x02" +
		"\x02\x02\u0F53\u0F55\x05\u0186\xC4\x02\u0F54\u0F53\x03\x02\x02\x02\u0F54" +
		"\u0F55\x03\x02\x02\x02\u0F55\u0F57\x03\x02\x02\x02\u0F56\u0F58\x05\u018C" +
		"\xC7\x02\u0F57\u0F56\x03\x02\x02\x02\u0F57\u0F58\x03\x02\x02\x02\u0F58" +
		"\u0F5A\x03\x02\x02\x02\u0F59\u0F5B\x05\u019C\xCF\x02\u0F5A\u0F59\x03\x02" +
		"\x02\x02\u0F5A\u0F5B\x03\x02\x02\x02\u0F5B\u0F5D\x03\x02\x02\x02\u0F5C" +
		"\u0F5E\x05\u019E\xD0\x02\u0F5D\u0F5C\x03\x02\x02\x02\u0F5D\u0F5E\x03\x02" +
		"\x02\x02\u0F5E\u0F60\x03\x02\x02\x02\u0F5F\u0F61\x05\u01A0\xD1\x02\u0F60" +
		"\u0F5F\x03\x02\x02\x02\u0F60\u0F61\x03\x02\x02\x02\u0F61\u0F63\x03\x02" +
		"\x02\x02\u0F62\u0F64\x05\u01A4\xD3\x02\u0F63\u0F62\x03\x02\x02\x02\u0F63" +
		"\u0F64\x03\x02\x02\x02\u0F64\u0F66\x03\x02\x02\x02\u0F65\u0F67\x05\u01A6" +
		"\xD4\x02\u0F66\u0F65\x03\x02\x02\x02\u0F66\u0F67\x03\x02\x02\x02\u0F67" +
		"\u0F69\x03\x02\x02\x02\u0F68\u0F6A\x05\u01A8\xD5\x02\u0F69\u0F68\x03\x02" +
		"\x02\x02\u0F69\u0F6A\x03\x02\x02\x02\u0F6A\u0F6C\x03\x02\x02\x02\u0F6B" +
		"\u0F6D\x05\u01AA\xD6\x02\u0F6C\u0F6B\x03\x02\x02\x02\u0F6C\u0F6D\x03\x02" +
		"\x02\x02\u0F6D\u015B\x03\x02\x02\x02\u0F6E\u0F70\x05\u015E\xB0\x02\u0F6F" +
		"\u0F6E\x03\x02\x02\x02\u0F6F\u0F70\x03\x02\x02\x02\u0F70\u0F93";
	private static readonly _serializedATNSegment8: string =
		"\x03\x02\x02\x02\u0F71\u0F72\x07\u0200\x02\x02\u0F72\u0F73\x05\u0180\xC1" +
		"\x02\u0F73\u0F75\x07\u0121\x02\x02\u0F74\u0F76\t\x17\x02\x02\u0F75\u0F74" +
		"\x03\x02\x02\x02\u0F75\u0F76\x03\x02\x02\x02\u0F76\u0F78\x03\x02\x02\x02" +
		"\u0F77\u0F79\x07\u0239\x02\x02\u0F78\u0F77\x03\x02\x02\x02\u0F78\u0F79" +
		"\x03\x02\x02\x02\u0F79\u0F7A\x03\x02\x02\x02\u0F7A\u0F7C\x05\u01D6\xEC" +
		"\x02\u0F7B\u0F7D\x05\u0182\xC2\x02\u0F7C\u0F7B\x03\x02\x02\x02\u0F7C\u0F7D" +
		"\x03\x02\x02\x02\u0F7D\u0F94\x03\x02\x02\x02\u0F7E\u0F80\x07\u0239\x02" +
		"\x02\u0F7F\u0F81\x07\u0183\x02\x02\u0F80\u0F7F\x03\x02\x02\x02\u0F80\u0F81" +
		"\x03\x02\x02\x02\u0F81\u0F82\x03\x02\x02\x02\u0F82\u0F84\x05\u01D6\xEC" +
		"\x02\u0F83\u0F85\x07\u02FF\x02\x02\u0F84\u0F83\x03\x02\x02\x02\u0F84\u0F85" +
		"\x03\x02\x02\x02\u0F85\u0F94\x03\x02\x02\x02\u0F86\u0F88\x07\u0300\x02" +
		"\x02\u0F87\u0F86\x03\x02\x02\x02\u0F88\u0F89\x03\x02\x02\x02\u0F89\u0F87" +
		"\x03\x02\x02\x02\u0F89\u0F8A\x03\x02\x02\x02\u0F8A\u0F8B\x03\x02\x02\x02" +
		"\u0F8B\u0F8D\x05\u015A\xAE\x02\u0F8C\u0F8E\x07\u0301\x02\x02\u0F8D\u0F8C" +
		"\x03\x02\x02\x02\u0F8E\u0F8F\x03\x02\x02\x02\u0F8F\u0F8D\x03\x02\x02\x02" +
		"\u0F8F\u0F90\x03\x02\x02\x02\u0F90\u0F91\x03\x02\x02\x02\u0F91\u0F92\x05" +
		"\u019E\xD0\x02\u0F92\u0F94\x03\x02\x02\x02\u0F93\u0F71\x03\x02\x02\x02" +
		"\u0F93\u0F7E\x03\x02\x02\x02\u0F93\u0F87\x03\x02\x02\x02\u0F94\u0F96\x03" +
		"\x02\x02\x02\u0F95\u0F97\x05\u0184\xC3\x02\u0F96\u0F95\x03\x02\x02\x02" +
		"\u0F96\u0F97\x03\x02\x02\x02\u0F97\u0F99\x03\x02\x02\x02\u0F98\u0F9A\x05" +
		"\u0186\xC4\x02\u0F99\u0F98\x03\x02\x02\x02\u0F99\u0F9A\x03\x02\x02\x02" +
		"\u0F9A\u0F9C\x03\x02\x02\x02\u0F9B\u0F9D\x05\u018C\xC7\x02\u0F9C\u0F9B" +
		"\x03\x02\x02\x02\u0F9C\u0F9D\x03\x02\x02\x02\u0F9D\u0F9F\x03\x02\x02\x02" +
		"\u0F9E\u0FA0\x05\u019C\xCF\x02\u0F9F\u0F9E\x03\x02\x02\x02\u0F9F\u0FA0" +
		"\x03\x02\x02\x02\u0FA0\u0FA2\x03\x02\x02\x02\u0FA1\u0FA3\x05\u019E\xD0" +
		"\x02\u0FA2\u0FA1\x03\x02\x02\x02\u0FA2\u0FA3\x03\x02\x02\x02\u0FA3\u0FA5" +
		"\x03\x02\x02\x02\u0FA4\u0FA6\x05\u01A0\xD1\x02\u0FA5\u0FA4\x03\x02\x02" +
		"\x02\u0FA5\u0FA6\x03\x02\x02\x02\u0FA6\u0FA8\x03\x02\x02\x02\u0FA7\u0FA9" +
		"\x05\u01A4\xD3\x02\u0FA8\u0FA7\x03\x02\x02\x02\u0FA8\u0FA9\x03\x02\x02" +
		"\x02\u0FA9\u0FAB\x03\x02\x02\x02\u0FAA\u0FAC\x05\u01A6\xD4\x02\u0FAB\u0FAA" +
		"\x03\x02\x02\x02\u0FAB\u0FAC\x03\x02\x02\x02\u0FAC\u0FAE\x03\x02\x02\x02" +
		"\u0FAD\u0FAF\x05\u01A8\xD5\x02\u0FAE\u0FAD\x03\x02\x02\x02\u0FAE\u0FAF" +
		"\x03\x02\x02\x02\u0FAF\u0FB1\x03\x02\x02\x02\u0FB0\u0FB2\x05\u01AA\xD6" +
		"\x02\u0FB1\u0FB0\x03\x02\x02\x02\u0FB1\u0FB2\x03\x02\x02\x02\u0FB2\u015D" +
		"\x03\x02\x02\x02\u0FB3\u0FB5\x07\u0288\x02\x02\u0FB4\u0FB6\x07\u01C5\x02" +
		"\x02\u0FB5\u0FB4\x03\x02\x02\x02\u0FB5\u0FB6\x03\x02\x02\x02\u0FB6\u0FB7" +
		"\x03\x02\x02\x02\u0FB7\u0FBC\x05\u0160\xB1\x02\u0FB8\u0FB9\x07\u02FA\x02" +
		"\x02\u0FB9\u0FBB\x05\u0160\xB1\x02\u0FBA\u0FB8\x03\x02\x02\x02\u0FBB\u0FBE" +
		"\x03\x02\x02\x02\u0FBC\u0FBA\x03\x02\x02\x02\u0FBC\u0FBD\x03\x02\x02\x02" +
		"\u0FBD\u015F\x03\x02\x02\x02\u0FBE\u0FBC\x03\x02\x02\x02\u0FBF\u0FC4\x05" +
		"\u01D6\xEC\x02\u0FC0\u0FC1\x07\u0300\x02\x02\u0FC1\u0FC2\x05\u01CE\xE8" +
		"\x02\u0FC2\u0FC3\x07\u0301\x02\x02\u0FC3\u0FC5\x03\x02\x02\x02\u0FC4\u0FC0" +
		"\x03\x02\x02\x02\u0FC4\u0FC5\x03\x02\x02\x02\u0FC5\u0FC6\x03\x02\x02\x02" +
		"\u0FC6\u0FC7\x07\x1D\x02\x02\u0FC7\u0FCD\x07\u0300\x02\x02\u0FC8\u0FCE" +
		"\x05\u015A\xAE\x02\u0FC9\u0FCE\x05\u0134\x9B\x02\u0FCA\u0FCE\x05\xD2j" +
		"\x02\u0FCB\u0FCE\x05\u0176\xBC\x02\u0FCC\u0FCE\x05\u017E\xC0\x02\u0FCD" +
		"\u0FC8\x03\x02\x02\x02\u0FCD\u0FC9\x03\x02\x02\x02\u0FCD\u0FCA\x03\x02" +
		"\x02\x02\u0FCD\u0FCB\x03\x02\x02\x02\u0FCD\u0FCC\x03\x02\x02\x02\u0FCE" +
		"\u0FCF\x03\x02\x02\x02\u0FCF\u0FD0\x07\u0301\x02\x02\u0FD0\u0161\x03\x02" +
		"\x02\x02\u0FD1\u0FD3\x07\u0209\x02\x02\u0FD2\u0FD4\t\x18\x02\x02\u0FD3" +
		"\u0FD2\x03\x02\x02\x02\u0FD3\u0FD4\x03\x02\x02\x02\u0FD4\u0FD5\x03\x02" +
		"\x02\x02\u0FD5\u0FD6\x05\u0202\u0102\x02\u0FD6\u0FD9\t\x07\x02\x02\u0FD7" +
		"\u0FDA\x05\u01FE\u0100\x02\u0FD8\u0FDA\x07\x9D\x02\x02\u0FD9\u0FD7\x03" +
		"\x02\x02\x02\u0FD9\u0FD8\x03\x02\x02\x02\u0FDA\u0FE7\x03\x02\x02\x02\u0FDB" +
		"\u0FDD\x07\u0209\x02\x02\u0FDC\u0FDE\t\x18\x02\x02\u0FDD\u0FDC\x03\x02" +
		"\x02\x02\u0FDD\u0FDE\x03\x02\x02\x02\u0FDE\u0FDF\x03\x02\x02\x02\u0FDF" +
		"\u0FE0\x07\u0244\x02\x02\u0FE0\u0FE4\x07\u0290\x02\x02\u0FE1\u0FE5\x05" +
		"\u01C6\xE4\x02\u0FE2\u0FE5\x07\u013C\x02\x02\u0FE3\u0FE5\x07\x9D\x02\x02" +
		"\u0FE4\u0FE1\x03\x02\x02\x02\u0FE4\u0FE2\x03\x02\x02\x02\u0FE4\u0FE3\x03" +
		"\x02\x02\x02\u0FE5\u0FE7\x03\x02\x02\x02\u0FE6\u0FD1\x03\x02\x02\x02\u0FE6" +
		"\u0FDB\x03\x02\x02\x02\u0FE7\u0163\x03\x02\x02\x02\u0FE8\u0FE9\x07\u0209" +
		"\x02\x02\u0FE9\u0FEC\x07s\x02\x02\u0FEA\u0FED\x07\x12\x02\x02\u0FEB\u0FED" +
		"\x05\u01D0\xE9\x02\u0FEC\u0FEA\x03\x02\x02\x02\u0FEC\u0FEB\x03\x02\x02" +
		"\x02\u0FED\u0FEE\x03\x02\x02\x02\u0FEE\u0FEF\t\x19\x02\x02\u0FEF\u0165" +
		"\x03\x02\x02\x02\u0FF0\u0FF2\x07\u0209\x02\x02\u0FF1\u0FF3\t\x18\x02\x02" +
		"\u0FF2\u0FF1\x03\x02\x02\x02\u0FF2\u0FF3\x03\x02\x02\x02\u0FF3\u0FF4\x03" +
		"\x02\x02\x02\u0FF4\u0FF7\x07\u01E7\x02\x02\u0FF5\u0FF8\x05\u01FA\xFE\x02" +
		"\u0FF6\u0FF8\x07\u016C\x02\x02\u0FF7\u0FF5\x03\x02\x02\x02\u0FF7\u0FF6" +
		"\x03\x02\x02\x02\u0FF8\u0FFC\x03\x02\x02\x02\u0FF9\u0FFA\x07\u01DA\x02" +
		"\x02\u0FFA\u0FFC\x07\u01E7\x02\x02\u0FFB\u0FF0\x03\x02\x02\x02\u0FFB\u0FF9" +
		"\x03\x02\x02\x02\u0FFC\u0167\x03\x02\x02\x02\u0FFD\u0FFE\x05\u0206\u0104" +
		"\x02\u0FFE\u0169\x03\x02\x02\x02\u0FFF\u1000\x07\u0124\x02\x02\u1000\u1008" +
		"\x07\u0136\x02\x02\u1001\u1009\x07\u0205\x02\x02\u1002\u1003\x07\u01D7" +
		"\x02\x02\u1003\u1009\x07\u01C0\x02\x02\u1004\u1005\x07\u01C0\x02\x02\u1005" +
		"\u1009\x07f\x02\x02\u1006\u1007\x07\u01C0\x02\x02\u1007\u1009\x07\u0261" +
		"\x02\x02\u1008\u1001\x03\x02\x02\x02\u1008\u1002\x03\x02\x02\x02\u1008" +
		"\u1004\x03\x02\x02\x02\u1008\u1006\x03\x02\x02\x02\u1009\u1013\x03\x02" +
		"\x02\x02\u100A\u100B\x07\u01C0\x02\x02\u100B\u1013\x07\u028C\x02\x02\u100C" +
		"\u100D\x07\u01C0\x02\x02\u100D\u1013\x07\u0183\x02\x02\u100E\u1010\x07" +
		"\u016F\x02\x02\u100F\u100E\x03\x02\x02\x02\u100F\u1010\x03\x02\x02\x02" +
		"\u1010\u1011\x03\x02\x02\x02\u1011\u1013\x07\xA0\x02\x02\u1012\u0FFF\x03" +
		"\x02\x02\x02\u1012\u100A\x03\x02\x02\x02\u1012\u100C\x03\x02\x02\x02\u1012" +
		"\u100F\x03\x02\x02\x02\u1013\u016B\x03\x02\x02\x02\u1014\u1019\x05\u016A" +
		"\xB6\x02\u1015\u1016\x07\u02FA\x02\x02\u1016\u1018\x05\u016A\xB6\x02\u1017" +
		"\u1015\x03\x02\x02\x02\u1018\u101B\x03\x02\x02\x02\u1019\u1017\x03\x02" +
		"\x02\x02\u1019\u101A\x03\x02\x02\x02\u101A\u016D\x03\x02\x02\x02\u101B" +
		"\u1019\x03\x02\x02\x02\u101C\u101D\x07\u0209\x02\x02\u101D\u101E\x07\u024D" +
		"\x02\x02\u101E\u102A\x05\u016C\xB7\x02\u101F\u1020\x07\u0209\x02\x02\u1020" +
		"\u1021\x07\u024D\x02\x02\u1021\u1022\x07\u0213\x02\x02\u1022\u102A\x07" +
		"\u030A\x02\x02\u1023\u1024\x07\u0209\x02\x02\u1024\u1025\x07\u0207\x02" +
		"\x02\u1025\u1026\x07N\x02\x02\u1026\u1027\x07\x1D\x02\x02\u1027\u1028" +
		"\x07\u024D\x02\x02\u1028\u102A\x05\u016C\xB7\x02\u1029\u101C\x03\x02\x02" +
		"\x02\u1029\u101F\x03\x02\x02\x02\u1029\u1023\x03\x02\x02\x02\u102A\u016F" +
		"\x03\x02\x02\x02\u102B\u1030\x07\u020D\x02\x02\u102C\u1031\x05\u0202\u0102" +
		"\x02\u102D\u102E\x07\u0244\x02\x02\u102E\u1031\x07\u0290\x02\x02\u102F" +
		"\u1031\x07\x12\x02\x02\u1030\u102C\x03\x02\x02\x02\u1030\u102D\x03\x02" +
		"\x02\x02\u1030\u102F\x03\x02\x02\x02\u1031\u0171\x03\x02\x02\x02\u1032" +
		"\u1034\x07\u025C\x02\x02\u1033\u1035\x07\u0239\x02\x02\u1034\u1033\x03" +
		"\x02\x02\x02\u1034\u1035\x03\x02\x02\x02\u1035\u1037\x03\x02\x02\x02\u1036" +
		"\u1038\x07\u0183\x02\x02\u1037\u1036\x03\x02\x02\x02\u1037\u1038\x03\x02" +
		"\x02\x02\u1038\u1039\x03\x02\x02\x02\u1039\u103B\x05\u01D6\xEC\x02\u103A" +
		"\u103C\x07\u02FF\x02\x02\u103B\u103A\x03\x02\x02\x02\u103B\u103C\x03\x02" +
		"\x02\x02\u103C\u1042\x03\x02\x02\x02\u103D\u103F\x07\u02FA\x02\x02\u103E" +
		"\u1040\x07\u0183\x02\x02\u103F\u103E\x03\x02\x02\x02\u103F\u1040\x03\x02" +
		"\x02\x02\u1040\u1041\x03\x02\x02\x02\u1041\u1043\x05\u01D0\xE9\x02\u1042" +
		"\u103D\x03\x02\x02\x02\u1042\u1043\x03\x02\x02\x02\u1043\u1046\x03\x02" +
		"\x02\x02\u1044\u1045\t\x1A\x02\x02\u1045\u1047\x07\u0104\x02\x02\u1046" +
		"\u1044\x03\x02\x02\x02\u1046\u1047\x03\x02\x02\x02\u1047\u1049\x03\x02" +
		"\x02\x02\u1048\u104A\t\x03\x02\x02\u1049\u1048\x03\x02\x02\x02\u1049\u104A" +
		"\x03\x02\x02\x02\u104A\u0173\x03\x02\x02\x02\u104B\u104E\x07\u0267\x02" +
		"\x02\u104C\u104F\x05\u0202\u0102\x02\u104D\u104F\x07\u02FF\x02\x02\u104E" +
		"\u104C\x03\x02\x02\x02\u104E\u104D\x03\x02\x02\x02\u104F\u0175\x03\x02" +
		"\x02\x02\u1050\u1052\x05\u015E\xB0\x02\u1051\u1050\x03\x02\x02\x02\u1051" +
		"\u1052\x03\x02\x02\x02\u1052\u1053\x03\x02\x02\x02\u1053\u1055\x07\u026B" +
		"\x02\x02\u1054\u1056\x07\u0183\x02\x02\u1055\u1054\x03\x02\x02\x02\u1055" +
		"\u1056\x03\x02\x02\x02\u1056\u1057\x03\x02\x02\x02\u1057\u1059\x05\u01D6" +
		"\xEC\x02\u1058\u105A\x07\u02FF\x02\x02\u1059\u1058\x03\x02\x02\x02\u1059" +
		"\u105A\x03\x02\x02\x02\u105A\u105F\x03\x02\x02\x02\u105B\u105D\x07\x1D" +
		"\x02\x02\u105C\u105B\x03\x02\x02\x02\u105C\u105D\x03\x02\x02\x02\u105D" +
		"\u105E\x03\x02\x02\x02\u105E\u1060\x05\u0202\u0102\x02\u105F\u105C\x03" +
		"\x02\x02\x02\u105F\u1060\x03\x02\x02\x02\u1060\u1061\x03\x02\x02\x02\u1061" +
		"\u1062\x07\u0209\x02\x02\u1062\u1064\x05\u01AC\xD7\x02\u1063\u1065\x05" +
		"\u0182\xC2\x02\u1064\u1063\x03\x02\x02\x02\u1064\u1065\x03\x02\x02\x02" +
		"\u1065\u106B\x03\x02\x02\x02\u1066\u106C\x05\u0184\xC3\x02\u1067\u1068" +
		"\x07\u0285\x02\x02\u1068\u1069\x07\x87\x02\x02\u1069\u106A\x07\u017D\x02" +
		"\x02\u106A\u106C\x05\u0202\u0102\x02\u106B\u1066\x03\x02\x02\x02\u106B" +
		"\u1067\x03\x02\x02\x02\u106B\u106C\x03\x02\x02\x02\u106C\u106E\x03\x02" +
		"\x02\x02\u106D\u106F\x05\u01B0\xD9\x02\u106E\u106D\x03\x02\x02\x02\u106E" +
		"\u106F\x03\x02\x02\x02\u106F\u0177\x03\x02\x02\x02\u1070\u1071\t\x1B\x02" +
		"\x02\u1071\u0179\x03\x02\x02\x02\u1072\u1077\x05\u0178\xBD\x02\u1073\u1074" +
		"\x07\u02FA\x02\x02\u1074\u1076\x05\u0178\xBD\x02\u1075\u1073\x03\x02\x02" +
		"\x02\u1076\u1079\x03\x02\x02\x02\u1077\u1075\x03\x02\x02\x02\u1077\u1078" +
		"\x03\x02\x02\x02\u1078\u017B\x03\x02\x02\x02\u1079\u1077\x03\x02\x02\x02" +
		"\u107A\u107F\x07\u0274\x02\x02\u107B\u107C\x07\u0300\x02\x02\u107C\u107D" +
		"\x05\u017A\xBE\x02\u107D\u107E\x07\u0301\x02\x02\u107E\u1080\x03\x02\x02" +
		"\x02\u107F\u107B\x03\x02\x02\x02\u107F\u1080\x03\x02\x02\x02\u1080\u1081" +
		"\x03\x02\x02\x02\u1081\u1086\x05\u01D6\xEC\x02\u1082\u1083\x07\u0300\x02" +
		"\x02\u1083\u1084\x05\u018E\xC8\x02\u1084\u1085\x07\u0301\x02\x02\u1085" +
		"\u1087\x03\x02\x02\x02\u1086\u1082\x03\x02\x02\x02\u1086\u1087\x03\x02" +
		"\x02\x02\u1087\u10AA\x03\x02\x02\x02\u1088\u108A\x07\u0274\x02\x02\u1089" +
		"\u108B\x07\xEF\x02\x02\u108A\u1089\x03\x02\x02\x02\u108A\u108B\x03\x02" +
		"\x02\x02\u108B\u108D\x03\x02\x02\x02\u108C\u108E\x07\xED\x02\x02\u108D" +
		"\u108C\x03\x02\x02\x02\u108D\u108E\x03\x02\x02\x02\u108E\u1090\x03\x02" +
		"\x02\x02\u108F\u1091\x07\u0280\x02\x02\u1090\u108F\x03\x02\x02\x02\u1090" +
		"\u1091\x03\x02\x02\x02\u1091\u1093\x03\x02\x02\x02\u1092\u1094\x05\u01D6" +
		"\xEC\x02\u1093\u1092\x03\x02\x02\x02\u1093\u1094\x03\x02\x02\x02\u1094" +
		"\u10AA\x03\x02\x02\x02\u1095\u1097\x07\u0274\x02\x02\u1096\u1098\x07\xEF" +
		"\x02\x02\u1097\u1096\x03\x02\x02\x02\u1097\u1098\x03\x02\x02\x02\u1098" +
		"\u109A\x03\x02\x02\x02\u1099\u109B\x07\xED\x02\x02\u109A\u1099\x03\x02" +
		"\x02\x02\u109A\u109B\x03\x02\x02\x02\u109B\u109D\x03\x02\x02\x02\u109C" +
		"\u109E\x07\u0280\x02\x02\u109D\u109C\x03\x02\x02\x02\u109D\u109E\x03\x02" +
		"\x02\x02\u109E\u109F\x03\x02\x02\x02\u109F\u10A7\x07\x18\x02\x02\u10A0" +
		"\u10A5\x05\u01D6\xEC\x02\u10A1\u10A2\x07\u0300\x02\x02\u10A2\u10A3\x05" +
		"\u018E\xC8\x02\u10A3\u10A4\x07\u0301\x02\x02\u10A4\u10A6\x03\x02\x02\x02" +
		"\u10A5\u10A1\x03\x02\x02\x02\u10A5\u10A6\x03\x02\x02\x02\u10A6\u10A8\x03" +
		"\x02\x02\x02\u10A7\u10A0\x03\x02\x02\x02\u10A7\u10A8\x03\x02\x02\x02\u10A8" +
		"\u10AA\x03\x02\x02\x02\u10A9\u107A\x03\x02\x02\x02\u10A9\u1088\x03\x02" +
		"\x02\x02\u10A9\u1095\x03\x02\x02\x02\u10AA\u017D\x03\x02\x02\x02\u10AB" +
		"\u10AD\x05\u015E\xB0\x02\u10AC\u10AB\x03\x02\x02\x02\u10AC\u10AD\x03\x02" +
		"\x02\x02\u10AD\u10BD\x03\x02\x02\x02\u10AE\u10AF\x07\u0279\x02\x02\u10AF" +
		"\u10BE\x05\u01BA\xDE\x02\u10B0\u10B2\x07\u0300\x02\x02\u10B1\u10B0\x03" +
		"\x02\x02\x02\u10B2\u10B3\x03\x02\x02\x02\u10B3\u10B1\x03\x02\x02\x02\u10B3" +
		"\u10B4\x03\x02\x02\x02\u10B4\u10B5\x03\x02\x02\x02\u10B5\u10B7\x05\u017E" +
		"\xC0\x02\u10B6\u10B8\x07\u0301\x02\x02\u10B7\u10B6\x03\x02\x02\x02\u10B8" +
		"\u10B9\x03\x02\x02\x02\u10B9\u10B7\x03\x02\x02\x02\u10B9\u10BA\x03\x02" +
		"\x02\x02\u10BA\u10BB\x03\x02\x02\x02\u10BB\u10BC\x05\u019E\xD0\x02\u10BC" +
		"\u10BE\x03\x02\x02\x02\u10BD\u10AE\x03\x02\x02\x02\u10BD\u10B1\x03\x02" +
		"\x02\x02\u10BE\u10C0\x03\x02\x02\x02\u10BF\u10C1\x05\u01A0\xD1\x02\u10C0" +
		"\u10BF\x03\x02\x02\x02\u10C0\u10C1\x03\x02\x02\x02\u10C1\u10C3\x03\x02" +
		"\x02\x02\u10C2\u10C4\x05\u019E\xD0\x02\u10C3\u10C2\x03\x02\x02\x02\u10C3" +
		"\u10C4\x03\x02\x02\x02\u10C4\u10C6\x03\x02\x02\x02\u10C5\u10C7\x05\u01A4" +
		"\xD3\x02\u10C6\u10C5\x03\x02\x02\x02\u10C6\u10C7\x03\x02\x02\x02\u10C7" +
		"\u10C9\x03\x02\x02\x02\u10C8\u10CA\x05\u01A6\xD4\x02\u10C9\u10C8\x03\x02" +
		"\x02\x02\u10C9\u10CA\x03\x02\x02\x02\u10CA\u10CC\x03\x02\x02\x02\u10CB" +
		"\u10CD\x05\u01A8\xD5\x02\u10CC\u10CB\x03\x02\x02\x02\u10CC\u10CD\x03\x02" +
		"\x02\x02\u10CD\u017F\x03\x02\x02\x02\u10CE\u10D5\x07\x12\x02\x02\u10CF" +
		"\u10D2\x07\xBA\x02\x02\u10D0\u10D1\x07\u0182\x02\x02\u10D1\u10D3\x05\u01B8" +
		"\xDD\x02\u10D2\u10D0\x03\x02\x02\x02\u10D2\u10D3\x03\x02\x02\x02\u10D3" +
		"\u10D5\x03\x02\x02\x02\u10D4\u10CE\x03\x02\x02\x02\u10D4\u10CF\x03\x02" +
		"\x02\x02\u10D4\u10D5\x03\x02\x02\x02\u10D5\u10D6\x03\x02\x02\x02\u10D6" +
		"\u10D7\x05\u018E\xC8\x02\u10D7\u0181\x03\x02\x02\x02\u10D8\u10D9\x07\xEE" +
		"\x02\x02\u10D9\u10DE\x05\u01E4\xF3\x02\u10DA\u10DB\x07\u02FA\x02\x02\u10DB" +
		"\u10DD\x05\u01E4\xF3\x02\u10DC\u10DA\x03\x02\x02\x02\u10DD\u10E0\x03\x02" +
		"\x02\x02\u10DE\u10DC\x03\x02\x02\x02\u10DE\u10DF\x03\x02\x02\x02\u10DF" +
		"\u0183\x03\x02\x02\x02\u10E0\u10DE\x03\x02\x02\x02\u10E1\u10E2\x07\u0285" +
		"\x02\x02\u10E2\u10E3\x05\u01EC\xF7\x02\u10E3\u0185\x03\x02\x02\x02\u10E4" +
		"\u10E5\x07\xFC\x02\x02\u10E5\u10E6\x078\x02\x02\u10E6\u10EB\x05\u0188" +
		"\xC5\x02\u10E7\u10E8\x07\u02FA\x02\x02\u10E8\u10EA\x05\u0188\xC5\x02\u10E9" +
		"\u10E7\x03\x02\x02\x02\u10EA\u10ED\x03\x02\x02\x02\u10EB\u10E9\x03\x02" +
		"\x02\x02\u10EB\u10EC\x03\x02\x02\x02\u10EC\u0187\x03\x02\x02\x02\u10ED" +
		"\u10EB\x03\x02\x02\x02\u10EE\u10EF\x07\u0300\x02\x02\u10EF\u1108\x07\u0301" +
		"\x02\x02\u10F0\u1108\x05\u01B2\xDA\x02\u10F1\u1108\x05\u01B8\xDD\x02\u10F2" +
		"\u10F3\t\x1C\x02\x02\u10F3\u10F6\x07\u0300\x02\x02\u10F4\u10F7\x05\u01B2" +
		"\xDA\x02\u10F5\u10F7\x05\u01B8\xDD\x02\u10F6\u10F4\x03\x02\x02\x02\u10F6" +
		"\u10F5\x03\x02\x02\x02\u10F7\u10FF\x03\x02\x02\x02\u10F8\u10FB\x07\u02FA" +
		"\x02\x02\u10F9\u10FC\x05\u01B2\xDA\x02\u10FA\u10FC\x05\u01B8\xDD\x02\u10FB" +
		"\u10F9\x03\x02\x02\x02\u10FB\u10FA\x03\x02\x02\x02\u10FC\u10FE\x03\x02" +
		"\x02\x02\u10FD\u10F8\x03\x02\x02\x02\u10FE\u1101\x03\x02\x02\x02\u10FF" +
		"\u10FD\x03\x02\x02\x02\u10FF\u1100\x03\x02\x02\x02\u1100\u1102\x03\x02" +
		"\x02\x02\u1101\u10FF\x03\x02\x02\x02\u1102\u1103\x07\u0301\x02\x02\u1103" +
		"\u1108\x03\x02\x02\x02\u1104\u1105\x07\xFD\x02\x02\u1105\u1106\x07\u020B" +
		"\x02\x02\u1106\u1108\x05\u018A\xC6\x02\u1107\u10EE\x03\x02\x02\x02\u1107" +
		"\u10F0\x03\x02\x02\x02\u1107\u10F1\x03\x02\x02\x02\u1107\u10F2\x03\x02" +
		"\x02\x02\u1107\u1104\x03\x02\x02\x02\u1108\u0189\x03\x02\x02\x02\u1109" +
		"\u110A\x07\u0300\x02\x02\u110A\u110F\x05\u0188\xC5\x02\u110B\u110C\x07" +
		"\u02FA\x02\x02\u110C\u110E\x05\u0188\xC5\x02\u110D\u110B\x03\x02\x02\x02" +
		"\u110E\u1111\x03\x02\x02\x02\u110F\u110D\x03\x02\x02\x02\u110F\u1110\x03" +
		"\x02\x02\x02\u1110\u1112\x03\x02\x02\x02\u1111\u110F\x03\x02\x02\x02\u1112" +
		"\u1113\x07\u0301\x02\x02\u1113\u018B\x03\x02\x02\x02\u1114\u1115\x07\xFF" +
		"\x02\x02\u1115\u111A\x05\u01EC\xF7\x02\u1116\u1117\x07\u02FA\x02\x02\u1117" +
		"\u1119\x05\u01EC\xF7\x02\u1118\u1116\x03\x02\x02\x02\u1119\u111C\x03\x02" +
		"\x02\x02\u111A\u1118\x03\x02\x02\x02\u111A\u111B\x03\x02\x02\x02\u111B" +
		"\u018D\x03\x02\x02\x02\u111C\u111A\x03\x02\x02\x02\u111D\u1122\x05\u01B2" +
		"\xDA\x02\u111E\u1120\x07\x1D\x02\x02\u111F\u111E\x03\x02\x02\x02\u111F" +
		"\u1120\x03\x02\x02\x02\u1120\u1121\x03\x02\x02\x02\u1121\u1123\x05\u01CC" +
		"\xE7\x02\u1122\u111F\x03\x02\x02\x02\u1122\u1123\x03\x02\x02\x02\u1123" +
		"\u1126\x03\x02\x02\x02\u1124\u1126\x07\u02FF\x02\x02\u1125\u111D\x03\x02" +
		"\x02\x02\u1125\u1124\x03\x02\x02\x02\u1126\u1134\x03\x02\x02\x02\u1127" +
		"\u1130\x07\u02FA\x02\x02\u1128\u112D\x05\u01B2\xDA\x02\u1129\u112B\x07" +
		"\x1D\x02\x02\u112A\u1129\x03\x02\x02\x02\u112A\u112B\x03\x02\x02\x02\u112B" +
		"\u112C\x03\x02\x02\x02\u112C\u112E\x05\u01CC\xE7\x02\u112D\u112A\x03\x02" +
		"\x02\x02\u112D\u112E\x03\x02\x02\x02\u112E\u1131\x03\x02\x02\x02\u112F" +
		"\u1131\x07\u02FF\x02\x02\u1130\u1128\x03\x02\x02\x02\u1130\u112F\x03\x02" +
		"\x02\x02\u1131\u1133\x03\x02\x02\x02\u1132\u1127\x03\x02\x02\x02\u1133" +
		"\u1136\x03\x02\x02\x02\u1134\u1132\x03\x02\x02\x02\u1134\u1135\x03\x02" +
		"\x02\x02\u1135\u018F\x03\x02\x02\x02\u1136\u1134\x03\x02\x02\x02\u1137" +
		"\u1139\t\x1D\x02\x02\u1138\u113A\x05\u01FE\u0100\x02\u1139\u1138\x03\x02" +
		"\x02\x02\u1139\u113A\x03\x02\x02\x02\u113A\u113E\x03\x02\x02\x02\u113B" +
		"\u113C\x07\xE8\x02\x02\u113C\u113E\t\x1E\x02\x02\u113D\u1137\x03\x02\x02" +
		"\x02\u113D\u113B\x03\x02\x02\x02\u113E\u0191\x03\x02\x02\x02\u113F\u1140" +
		"\x07\u0260\x02\x02\u1140\u114A\x07\u01AF\x02\x02\u1141\u1142\x07\u0307" +
		"\x02\x02\u1142\u114A\x07\u01AF\x02\x02\u1143\u1144\x07\x87\x02\x02\u1144" +
		"\u114A\x07\u01EE\x02\x02\u1145\u1146\x07\u0307\x02\x02\u1146\u114A\x07" +
		"\xE4\x02\x02\u1147\u1148\x07\u0260\x02\x02\u1148\u114A\x07\xE4\x02\x02" +
		"\u1149\u113F\x03\x02\x02\x02\u1149\u1141\x03\x02\x02\x02\u1149\u1143\x03" +
		"\x02\x02\x02\u1149\u1145\x03\x02\x02\x02\u1149\u1147\x03\x02\x02\x02\u114A" +
		"\u0193\x03\x02\x02\x02\u114B\u114C\x05\u0192\xCA\x02\u114C\u0195\x03\x02" +
		"\x02\x02\u114D\u114E\x05\u0192\xCA\x02\u114E\u0197\x03\x02\x02\x02\u114F" +
		"\u1150\t\x1F\x02\x02\u1150\u1158\x05\u0194\xCB\x02\u1151\u1152\t\x1F\x02" +
		"\x02\u1152\u1153\x07-\x02\x02\u1153\u1154\x05\u0194\xCB\x02\u1154\u1155" +
		"\x07\x19\x02\x02\u1155\u1156\x05\u0196\xCC\x02\u1156\u1158\x03\x02\x02" +
		"\x02\u1157\u114F\x03\x02\x02\x02\u1157\u1151\x03\x02\x02\x02\u1158\u0199" +
		"\x03\x02\x02\x02\u1159\u1166\x05\u0212\u010A\x02\u115A\u115B\x07\u01A1" +
		"\x02\x02\u115B\u115C\x078\x02\x02\u115C\u1161\x05\u01B2\xDA\x02\u115D" +
		"\u115E\x07\u02FA\x02\x02\u115E\u1160\x05\u01B2\xDA\x02\u115F\u115D\x03" +
		"\x02\x02\x02\u1160\u1163\x03\x02\x02\x02\u1161\u115F\x03\x02\x02\x02\u1161" +
		"\u1162\x03\x02\x02\x02\u1162\u1166\x03\x02\x02\x02\u1163\u1161\x03\x02" +
		"\x02\x02\u1164\u1166\x05\u01A0\xD1\x02\u1165\u1159\x03\x02\x02\x02\u1165" +
		"\u115A\x03\x02\x02\x02\u1165\u1164\x03\x02\x02\x02\u1166\u019B\x03\x02" +
		"\x02\x02\u1167\u1168\x07\u0287\x02\x02\u1168\u1169\x05\u0212\u010A\x02" +
		"\u1169\u116A\x07\x1D\x02\x02\u116A\u116B\x07\u0300\x02\x02\u116B\u116C" +
		"\x05\u019A\xCE\x02\u116C\u116D\x07\u0301\x02\x02\u116D\u019D\x03\x02\x02" +
		"\x02\u116E\u1170\t \x02\x02\u116F\u1171\t!\x02\x02\u1170\u116F\x03\x02" +
		"\x02\x02\u1170\u1171\x03\x02\x02\x02\u1171\u1175\x03\x02\x02\x02\u1172" +
		"\u1174\x07\u0300\x02\x02\u1173\u1172\x03\x02\x02\x02\u1174\u1177\x03\x02" +
		"\x02\x02\u1175\u1173\x03\x02\x02\x02\u1175\u1176\x03\x02\x02\x02\u1176" +
		"\u117A\x03\x02\x02\x02\u1177\u1175\x03\x02\x02\x02\u1178\u117B\x05\u015A" +
		"\xAE\x02\u1179\u117B\x05\u017E\xC0\x02\u117A\u1178\x03\x02\x02\x02\u117A" +
		"\u1179\x03\x02\x02\x02\u117B\u117F\x03\x02\x02\x02\u117C\u117E\x07\u0301" +
		"\x02\x02\u117D\u117C\x03\x02\x02\x02\u117E\u1181\x03\x02\x02\x02\u117F" +
		"\u117D\x03\x02\x02\x02\u117F\u1180\x03\x02\x02\x02\u1180\u1183\x03\x02" +
		"\x02\x02\u1181\u117F\x03\x02\x02\x02\u1182\u1184\x05\u019E\xD0\x02\u1183" +
		"\u1182\x03\x02\x02\x02\u1183\u1184\x03\x02\x02\x02\u1184\u019F\x03\x02" +
		"\x02\x02\u1185\u1186\x07\u018A\x02\x02\u1186\u1187\x078\x02\x02\u1187" +
		"\u118C\x05\u01A2\xD2\x02\u1188\u1189\x07\u02FA\x02\x02\u1189\u118B\x05" +
		"\u01A2\xD2\x02\u118A\u1188\x03\x02\x02\x02\u118B\u118E\x03\x02\x02\x02" +
		"\u118C\u118A\x03\x02\x02\x02\u118C\u118D\x03\x02\x02\x02\u118D\u01A1\x03" +
		"\x02\x02\x02\u118E\u118C\x03\x02\x02\x02\u118F\u1192\x05\u01B2\xDA\x02" +
		"\u1190\u1192\x07\u030B\x02\x02\u1191\u118F\x03\x02\x02\x02\u1191\u1190" +
		"\x03\x02\x02\x02\u1192\u1197\x03\x02\x02\x02\u1193\u1198\x07\x1E\x02\x02" +
		"\u1194\u1198\x07\xAD\x02\x02\u1195\u1196\x07\u0273\x02\x02\u1196\u1198" +
		"\x05\u01B2\xDA\x02\u1197\u1193\x03\x02\x02\x02\u1197\u1194\x03\x02\x02" +
		"\x02\u1197\u1195\x03\x02\x02\x02\u1197\u1198\x03\x02\x02\x02\u1198\u11A4" +
		"\x03\x02\x02\x02\u1199\u119A\x07\u0177\x02\x02\u119A\u119B\t\"\x02\x02" +
		"\u119B\u11A1\x03\x02\x02\x02\u119C\u119D\x07\u02FA\x02\x02\u119D\u119E" +
		"\x07\u0177\x02\x02\u119E\u11A0\t\"\x02\x02\u119F\u119C\x03\x02\x02\x02" +
		"\u11A0\u11A3\x03\x02\x02\x02\u11A1\u119F\x03\x02\x02\x02\u11A1\u11A2\x03" +
		"\x02\x02\x02\u11A2\u11A5\x03\x02\x02\x02\u11A3\u11A1\x03\x02\x02\x02\u11A4" +
		"\u1199\x03\x02\x02\x02\u11A4\u11A5\x03\x02\x02\x02\u11A5\u01A3\x03\x02" +
		"\x02\x02\u11A6\u11AA\x07\u0138\x02\x02\u11A7\u11AB\x07\u0307\x02\x02\u11A8" +
		"\u11AB\x07\x12\x02\x02\u11A9\u11AB\x05\u01E0\xF1\x02\u11AA\u11A7\x03\x02" +
		"\x02\x02\u11AA\u11A8\x03\x02\x02\x02\u11AA\u11A9\x03\x02\x02\x02\u11AB" +
		"\u01A5\x03\x02\x02\x02\u11AC\u11AD\x07\u017F\x02\x02\u11AD\u11AF\x07\u0307" +
		"\x02\x02\u11AE\u11B0\t#\x02\x02\u11AF\u11AE\x03\x02\x02\x02\u11AF\u11B0" +
		"\x03\x02\x02\x02\u11B0\u01A7\x03\x02\x02\x02\u11B1\u11B2\x07\xDD\x02\x02" +
		"\u11B2\u11B4\t$\x02\x02\u11B3\u11B5\x07\u0307\x02\x02\u11B4\u11B3\x03" +
		"\x02\x02\x02\u11B4\u11B5\x03\x02\x02\x02\u11B5\u11B6\x03\x02\x02\x02\u11B6" +
		"\u11B7\t#\x02\x02\u11B7\u11B8\x07\u0183\x02\x02\u11B8\u01A9\x03\x02\x02" +
		"\x02\u11B9\u11C1\x07\xE5\x02\x02\u11BA\u11C2\x07\u026B\x02\x02\u11BB\u11BC" +
		"\x07\u0169\x02\x02\u11BC\u11BD\x07\u0128\x02\x02\u11BD\u11C2\x07\u026B" +
		"\x02\x02\u11BE\u11C2\x07\u020C\x02\x02\u11BF\u11C0\x07\u0128\x02\x02\u11C0" +
		"\u11C2\x07\u020C\x02\x02\u11C1\u11BA\x03\x02\x02\x02\u11C1\u11BB\x03\x02" +
		"\x02\x02\u11C1\u11BE\x03\x02\x02\x02\u11C1\u11BF\x03\x02\x02\x02\u11C2" +
		"\u11CC\x03\x02\x02\x02\u11C3\u11C4\x07\u017D\x02\x02\u11C4\u11C9\x05\u01D6" +
		"\xEC\x02\u11C5\u11C6\x07\u02FA\x02\x02\u11C6\u11C8\x05\u01D6\xEC\x02\u11C7" +
		"\u11C5\x03\x02\x02\x02\u11C8\u11CB\x03\x02\x02\x02\u11C9\u11C7\x03\x02" +
		"\x02\x02\u11C9\u11CA\x03\x02\x02\x02\u11CA\u11CD\x03\x02\x02\x02\u11CB" +
		"\u11C9\x03\x02\x02\x02\u11CC\u11C3\x03\x02\x02\x02\u11CC\u11CD\x03\x02" +
		"\x02\x02\u11CD\u11D3\x03\x02\x02\x02\u11CE\u11D2\x07\u0173\x02\x02\u11CF" +
		"\u11D0\x07\u0211\x02\x02\u11D0\u11D2\x07\u0142\x02\x02\u11D1\u11CE\x03" +
		"\x02\x02\x02\u11D1\u11CF\x03\x02\x02\x02\u11D2\u11D5\x03\x02\x02\x02\u11D3" +
		"\u11D1\x03\x02\x02\x02\u11D3\u11D4\x03\x02\x02\x02\u11D4\u01AB\x03\x02" +
		"\x02\x02\u11D5\u11D3\x03\x02\x02\x02\u11D6\u11DB\x05\u01AE\xD8\x02\u11D7" +
		"\u11D8\x07\u02FA\x02\x02\u11D8\u11DA\x05\u01AE\xD8\x02\u11D9\u11D7\x03" +
		"\x02\x02\x02\u11DA\u11DD\x03\x02\x02\x02\u11DB\u11D9\x03\x02\x02\x02\u11DB" +
		"\u11DC\x03\x02\x02\x02\u11DC\u01AD\x03\x02\x02\x02\u11DD\u11DB\x03\x02" +
		"\x02\x02\u11DE\u11E8\x05\u01B2\xDA\x02\u11DF\u11E0\x07\u0300\x02\x02\u11E0" +
		"\u11E1\x05\u01CE\xE8\x02\u11E1\u11E2\x07\u0301\x02\x02\u11E2\u11E5\x07" +
		"\u0319\x02\x02\u11E3\u11E6\x05\u01B2\xDA\x02\u11E4\u11E6\x05\u01B8\xDD" +
		"\x02\u11E5\u11E3\x03\x02\x02\x02\u11E5\u11E4\x03\x02\x02\x02\u11E6\u11E8" +
		"\x03\x02\x02\x02\u11E7\u11DE\x03\x02\x02\x02\u11E7\u11DF\x03\x02\x02\x02" +
		"\u11E8\u01AF\x03\x02\x02\x02\u11E9\u11EA\x07\u01E3\x02\x02\u11EA\u11EB" +
		"\x05\u018E\xC8\x02\u11EB\u01B1\x03\x02\x02\x02\u11EC\u11ED\b\xDA\x01\x02" +
		"\u11ED\u1237\x07\u0174\x02\x02\u11EE\u1237\x07\x88\x02\x02\u11EF\u1237" +
		"\x07\x8B\x02\x02\u11F0\u1237\x07\x8C\x02\x02\u11F1\u1237\x07\x8D\x02\x02" +
		"\u11F2\u1237\x07\x8F\x02\x02\u11F3\u1237\x07\x9D\x02\x02\u11F4\u1237\x07" +
		"\u0307\x02\x02\u11F5\u1237\x07\u0308\x02\x02\u11F6\u1237\x07\u0306\x02" +
		"\x02\u11F7\u1237\x07\u030A\x02\x02\u11F8\u1237\x07\u0304\x02\x02\u11F9" +
		"\u1237\x07\u0305\x02\x02\u11FA\u11FC\x07\u02FE\x02\x02\u11FB\u11FD\n%" +
		"\x02\x02\u11FC\u11FB\x03\x02\x02\x02\u11FD\u11FE\x03\x02\x02\x02\u11FE" +
		"\u11FC\x03\x02\x02\x02\u11FE\u11FF\x03\x02\x02\x02\u11FF\u1200\x03\x02" +
		"\x02\x02\u1200\u1237\x07\u02FE\x02\x02\u1201\u1202\x07\u02FD\x02\x02\u1202" +
		"\u1204\x05\u0202\u0102\x02\u1203\u1205\n%\x02\x02\u1204\u1203\x03\x02" +
		"\x02\x02\u1205\u1206\x03\x02\x02\x02\u1206\u1204\x03\x02\x02\x02\u1206" +
		"\u1207\x03\x02\x02\x02\u1207\u1208\x03\x02\x02\x02\u1208\u1209\x07\u02FD" +
		"\x02\x02\u1209\u120A\x05\u0202\u0102\x02\u120A\u120B\x07\u02FD\x02\x02" +
		"\u120B\u1237\x03\x02\x02\x02\u120C\u1237\x05\u01B4\xDB\x02\u120D\u1237" +
		"\x05\u017E\xC0\x02\u120E\u1237\x05\u01B8\xDD\x02\u120F\u1210\x07\u0300" +
		"\x02\x02\u1210\u1211\x05\u01B2\xDA\x02\u1211\u1212\x07\u0301\x02\x02\u1212" +
		"\u1237\x03\x02\x02\x02\u1213\u1214\x05\u01C4\xE3\x02\u1214\u1215\x07\u030A" +
		"\x02\x02\u1215\u1237\x03\x02\x02\x02\u1216\u1217\t&\x02\x02\u1217\u1237" +
		"\x05\u01B2\xDA \u1218\u1219\t\'\x02\x02\u1219\u1237\x05\u01B2\xDA\x1F" +
		"\u121A\u121B\t(\x02\x02\u121B\u1237\x05\u01B2\xDA\x13\u121C\u1237\x05" +
		"\u01E0\xF1\x02\u121D\u1237\x05\u0202\u0102\x02\u121E\u121F\x07A";
	private static readonly _serializedATNSegment9: string =
		"\x02\x02\u121F\u1220\x07\u0300\x02\x02\u1220\u1221\x05\u01B2\xDA\x02\u1221" +
		"\u1222\x07\x1D\x02\x02\u1222\u1223\x05\u01D8\xED\x02\u1223\u1224\x07\u0301" +
		"\x02\x02\u1224\u1237\x03\x02\x02\x02\u1225\u1226\x05\u0208\u0105\x02\u1226" +
		"\u1227\x07\u0309\x02\x02\u1227\u1228\x05\u020A\u0106\x02\u1228\u1237\x03" +
		"\x02\x02\x02\u1229\u1237\x05\u01B6\xDC\x02\u122A\u122B\x05\u01D8\xED\x02" +
		"\u122B\u122C\x05\u01B2\xDA\v\u122C\u1237\x03\x02\x02\x02\u122D\u1237\x05" +
		"\u01CA\xE6\x02\u122E\u1237\x05\u01E2\xF2\x02\u122F\u1230\x07\xD5\x02\x02" +
		"\u1230\u1237\x05\u01B2\xDA\x05\u1231\u1237\x07\u030D\x02\x02\u1232\u1233" +
		"\x07\u0300\x02\x02\u1233\u1234\x05\u015A\xAE\x02\u1234\u1235\x07\u0301" +
		"\x02\x02\u1235\u1237\x03\x02\x02\x02\u1236\u11EC\x03\x02\x02\x02\u1236" +
		"\u11EE\x03\x02\x02\x02\u1236\u11EF\x03\x02\x02\x02\u1236\u11F0\x03\x02" +
		"\x02\x02\u1236\u11F1\x03\x02\x02\x02\u1236\u11F2\x03\x02\x02\x02\u1236" +
		"\u11F3\x03\x02\x02\x02\u1236\u11F4\x03\x02\x02\x02\u1236\u11F5\x03\x02" +
		"\x02\x02\u1236\u11F6\x03\x02\x02\x02\u1236\u11F7\x03\x02\x02\x02\u1236" +
		"\u11F8\x03\x02\x02\x02\u1236\u11F9\x03\x02\x02\x02\u1236\u11FA\x03\x02" +
		"\x02\x02\u1236\u1201\x03\x02\x02\x02\u1236\u120C\x03\x02\x02\x02\u1236" +
		"\u120D\x03\x02\x02\x02\u1236\u120E\x03\x02\x02\x02\u1236\u120F\x03\x02" +
		"\x02\x02\u1236\u1213\x03\x02\x02\x02\u1236\u1216\x03\x02\x02\x02\u1236" +
		"\u1218\x03\x02\x02\x02\u1236\u121A\x03\x02\x02\x02\u1236\u121C\x03\x02" +
		"\x02\x02\u1236\u121D\x03\x02\x02\x02\u1236\u121E\x03\x02\x02\x02\u1236" +
		"\u1225\x03\x02\x02\x02\u1236\u1229\x03\x02\x02\x02\u1236\u122A\x03\x02" +
		"\x02\x02\u1236\u122D\x03\x02\x02\x02\u1236\u122E\x03\x02\x02\x02\u1236" +
		"\u122F\x03\x02\x02\x02\u1236\u1231\x03\x02\x02\x02\u1236\u1232\x03\x02" +
		"\x02\x02\u1237\u129B\x03\x02\x02\x02\u1238\u1239\f\x1D\x02\x02\u1239\u123A" +
		"\t)\x02\x02\u123A\u129A\x05\u01B2\xDA\x1E\u123B\u123C\f\x1C\x02\x02\u123C" +
		"\u123D\t*\x02\x02\u123D\u129A\x05\u01B2\xDA\x1D\u123E\u123F\f\x1B\x02" +
		"\x02\u123F\u1240\t+\x02\x02\u1240\u129A\x05\u01B2\xDA\x1C\u1241\u1242" +
		"\f\x1A\x02\x02\u1242\u1243\t,\x02\x02\u1243\u129A\x05\u01B2\xDA\x1B\u1244" +
		"\u1248\f\x19\x02\x02\u1245\u1246\x07\u016F\x02\x02\u1246\u1249\x07\u0137" +
		"\x02\x02\u1247\u1249\x07\u0137\x02\x02\u1248\u1245\x03\x02\x02\x02\u1248" +
		"\u1247\x03\x02\x02\x02\u1249\u124A\x03\x02\x02\x02\u124A\u129A\x05\u01B2" +
		"\xDA\x1A\u124B\u124D\f\x18\x02\x02\u124C\u124E\x07\u016F\x02\x02\u124D" +
		"\u124C\x03\x02\x02\x02\u124D\u124E\x03\x02\x02\x02\u124E\u124F\x03\x02" +
		"\x02\x02\u124F\u1250\x07-\x02\x02\u1250\u1251\x05\u01B2\xDA\x02\u1251" +
		"\u1252\x07\x19\x02\x02\u1252\u1253\x05\u01B2\xDA\x19\u1253\u129A\x03\x02" +
		"\x02\x02\u1254\u1255\f\x17\x02\x02\u1255\u1256\x07\u010B\x02\x02\u1256" +
		"\u129A\x05\u01B2\xDA\x18\u1257\u1258\f\x16\x02\x02\u1258\u1259\t-\x02" +
		"\x02\u1259\u129A\x05\u01B2\xDA\x17\u125A\u125B\f\x14\x02\x02\u125B\u125D" +
		"\x07\u0123\x02\x02\u125C\u125E\x07\u016F\x02\x02\u125D\u125C\x03\x02\x02" +
		"\x02\u125D\u125E\x03\x02\x02\x02\u125E\u125F\x03\x02\x02\x02\u125F\u1260" +
		"\x07\xBA\x02\x02\u1260\u1261\x07\xEE\x02\x02\u1261\u129A\x05\u01B2\xDA" +
		"\x15\u1262\u1263\f#\x02\x02\u1263\u1264\x07\u0302\x02\x02\u1264\u1265" +
		"\x05\u01B2\xDA\x02\u1265\u1266\x07\u0303\x02\x02\u1266\u129A\x03\x02\x02" +
		"\x02\u1267\u1268\f\x1E\x02\x02\u1268\u129A\x07\u0315\x02\x02\u1269\u126A" +
		"\f\x15\x02\x02\u126A\u126F\x07\u0123\x02\x02\u126B\u1270\x05\u01B4\xDB" +
		"\x02\u126C\u1270\x07\u0174\x02\x02\u126D\u126E\x07\u016F\x02\x02\u126E" +
		"\u1270\x07\u0174\x02\x02\u126F\u126B\x03\x02\x02\x02\u126F\u126C\x03\x02" +
		"\x02\x02\u126F\u126D\x03\x02\x02\x02\u1270\u129A\x03\x02\x02\x02\u1271" +
		"\u127B\f\r\x02\x02\u1272\u1274\x07\u0302\x02\x02\u1273\u1275\x05\u01B2" +
		"\xDA\x02\u1274\u1273\x03\x02\x02\x02\u1274\u1275\x03\x02\x02\x02\u1275" +
		"\u1276\x03\x02\x02\x02\u1276\u1278\x07\u02FB\x02\x02\u1277\u1279\x05\u01B2" +
		"\xDA\x02\u1278\u1277\x03\x02\x02\x02\u1278\u1279\x03\x02\x02\x02\u1279" +
		"\u127A\x03\x02\x02\x02\u127A\u127C\x07\u0303\x02\x02\u127B\u1272\x03\x02" +
		"\x02\x02\u127C\u127D\x03\x02\x02\x02\u127D\u127B\x03\x02\x02\x02\u127D" +
		"\u127E\x03\x02\x02\x02\u127E\u129A\x03\x02\x02\x02\u127F\u1282\f\f\x02" +
		"\x02\u1280\u1281\x07\u02FC\x02\x02\u1281\u1283\x05\u01D8\xED\x02\u1282" +
		"\u1280\x03\x02\x02\x02\u1283\u1284\x03\x02\x02\x02\u1284\u1282\x03\x02" +
		"\x02\x02\u1284\u1285\x03\x02\x02\x02\u1285\u129A\x03\x02\x02\x02\u1286" +
		"\u1287\f\n\x02\x02\u1287\u1288\x07\u0123\x02\x02\u1288\u1289\x07\u017D" +
		"\x02\x02\u1289\u128A\x07\u0300\x02\x02\u128A\u128B\x05\u01D8\xED\x02\u128B" +
		"\u128C\x07\u0301\x02\x02\u128C\u129A\x03\x02\x02\x02\u128D\u128E\f\t\x02" +
		"\x02\u128E\u1291\x07\u0309\x02\x02\u128F\u1292\x05\u0202\u0102\x02\u1290" +
		"\u1292\x07\u02FF\x02\x02\u1291\u128F\x03\x02\x02\x02\u1291\u1290\x03\x02" +
		"\x02\x02\u1292\u129A\x03\x02\x02\x02\u1293\u1294\f\x06\x02\x02\u1294\u1295" +
		"\x07#\x02\x02\u1295\u1296\x07\u0244\x02\x02\u1296\u1297\x07\u0290\x02" +
		"\x02\u1297\u1298\x03\x02\x02\x02\u1298\u129A\x07\u030A\x02\x02\u1299\u1238" +
		"\x03\x02\x02\x02\u1299\u123B\x03\x02\x02\x02\u1299\u123E\x03\x02\x02\x02" +
		"\u1299\u1241\x03\x02\x02\x02\u1299\u1244\x03\x02\x02\x02\u1299\u124B\x03" +
		"\x02\x02\x02\u1299\u1254\x03\x02\x02\x02\u1299\u1257\x03\x02\x02\x02\u1299" +
		"\u125A\x03\x02\x02\x02\u1299\u1262\x03\x02\x02\x02\u1299\u1267\x03\x02" +
		"\x02\x02\u1299\u1269\x03\x02\x02\x02\u1299\u1271\x03\x02\x02\x02\u1299" +
		"\u127F\x03\x02\x02\x02\u1299\u1286\x03\x02\x02\x02\u1299\u128D\x03\x02" +
		"\x02\x02\u1299\u1293\x03\x02\x02\x02\u129A\u129D\x03\x02\x02\x02\u129B" +
		"\u1299\x03\x02\x02\x02\u129B\u129C\x03\x02\x02\x02\u129C\u01B3\x03\x02" +
		"\x02\x02\u129D\u129B\x03\x02\x02\x02\u129E\u129F\b\xDB\x01\x02\u129F\u12A4" +
		"\x07\u025B\x02\x02\u12A0\u12A4\x07\xDC\x02\x02\u12A1\u12A2\x07\u016F\x02" +
		"\x02\u12A2\u12A4\x05\u01B4\xDB\x05\u12A3\u129E\x03\x02\x02\x02\u12A3\u12A0" +
		"\x03\x02\x02\x02\u12A3\u12A1\x03\x02\x02\x02\u12A4\u12AD\x03\x02\x02\x02" +
		"\u12A5\u12A6\f\x04\x02\x02\u12A6\u12A7\x07\x19\x02\x02\u12A7\u12AC\x05" +
		"\u01B4\xDB\x05\u12A8\u12A9\f\x03\x02\x02\u12A9\u12AA\x07\u0189\x02\x02" +
		"\u12AA\u12AC\x05\u01B4\xDB\x04\u12AB\u12A5\x03\x02\x02\x02\u12AB\u12A8" +
		"\x03\x02\x02\x02\u12AC\u12AF\x03\x02\x02\x02\u12AD\u12AB\x03\x02\x02\x02" +
		"\u12AD\u12AE\x03\x02\x02\x02\u12AE\u01B5\x03\x02\x02\x02\u12AF\u12AD\x03" +
		"\x02\x02\x02\u12B0\u12B1\x07@\x02\x02\u12B1\u12B7\x05\u01B2\xDA\x02\u12B2" +
		"\u12B3\x07\u0283\x02\x02\u12B3\u12B4\x05\u01B2\xDA\x02\u12B4\u12B5\x07" +
		"\u0242\x02\x02\u12B5\u12B6\x05\u01B2\xDA\x02\u12B6\u12B8\x03\x02\x02\x02" +
		"\u12B7\u12B2\x03\x02\x02\x02\u12B8\u12B9\x03\x02\x02\x02\u12B9\u12B7\x03" +
		"\x02\x02\x02\u12B9\u12BA\x03\x02\x02\x02\u12BA\u12BD\x03\x02\x02\x02\u12BB" +
		"\u12BC\x07\xC4\x02\x02\u12BC\u12BE\x05\u01B2\xDA\x02\u12BD\u12BB\x03\x02" +
		"\x02\x02\u12BD\u12BE\x03\x02\x02\x02\u12BE\u12BF\x03\x02\x02\x02\u12BF" +
		"\u12C0\x07\xC8\x02\x02\u12C0\u12D2\x03\x02\x02\x02\u12C1\u12C7\x07@\x02" +
		"\x02\u12C2\u12C3\x07\u0283\x02\x02\u12C3\u12C4\x05\u01EC\xF7\x02\u12C4" +
		"\u12C5\x07\u0242\x02\x02\u12C5\u12C6\x05\u01B2\xDA\x02\u12C6\u12C8\x03" +
		"\x02\x02\x02\u12C7\u12C2\x03\x02\x02\x02\u12C8\u12C9\x03\x02\x02\x02\u12C9" +
		"\u12C7\x03\x02\x02\x02\u12C9\u12CA\x03\x02\x02\x02\u12CA\u12CD\x03\x02" +
		"\x02\x02\u12CB\u12CC\x07\xC4\x02\x02\u12CC\u12CE\x05\u01B2\xDA\x02\u12CD" +
		"\u12CB\x03\x02\x02\x02\u12CD\u12CE\x03\x02\x02\x02\u12CE\u12CF\x03\x02" +
		"\x02\x02\u12CF\u12D0\x07\xC8\x02\x02\u12D0\u12D2\x03\x02\x02\x02\u12D1" +
		"\u12B0\x03\x02\x02\x02\u12D1\u12C1\x03\x02\x02\x02\u12D2\u01B7\x03\x02" +
		"\x02\x02\u12D3\u12D4\x07\u0300\x02\x02\u12D4\u12D9\x05\u01B2\xDA\x02\u12D5" +
		"\u12D6\x07\u02FA\x02\x02\u12D6\u12D8\x05\u01B2\xDA\x02\u12D7\u12D5\x03" +
		"\x02\x02\x02\u12D8\u12DB\x03\x02\x02\x02\u12D9\u12D7\x03\x02\x02\x02\u12D9" +
		"\u12DA\x03\x02\x02\x02\u12DA\u12DC\x03\x02\x02\x02\u12DB\u12D9\x03\x02" +
		"\x02\x02\u12DC\u12DD\x07\u0301\x02\x02\u12DD\u01B9\x03\x02\x02\x02\u12DE" +
		"\u12E0\x07\u0300\x02\x02\u12DF\u12DE\x03\x02\x02\x02\u12DF\u12E0\x03\x02" +
		"\x02\x02\u12E0\u12E1\x03\x02\x02\x02\u12E1\u12E6\x05\u01B8\xDD\x02\u12E2" +
		"\u12E3\x07\u02FA\x02\x02\u12E3\u12E5\x05\u01B8\xDD\x02\u12E4\u12E2\x03" +
		"\x02\x02\x02\u12E5\u12E8\x03\x02\x02\x02\u12E6\u12E4\x03\x02\x02\x02\u12E6" +
		"\u12E7\x03\x02\x02\x02\u12E7\u12EA\x03\x02\x02\x02\u12E8\u12E6\x03\x02" +
		"\x02\x02\u12E9\u12EB\x07\u0301\x02\x02\u12EA\u12E9\x03\x02\x02\x02\u12EA" +
		"\u12EB\x03\x02\x02\x02\u12EB\u01BB\x03\x02\x02\x02\u12EC\u12EE\t.\x02" +
		"\x02\u12ED\u12EC\x03\x02\x02\x02\u12ED\u12EE\x03\x02\x02\x02\u12EE\u12F0" +
		"\x03\x02\x02\x02\u12EF\u12F1\x05\u0202\u0102\x02\u12F0\u12EF\x03\x02\x02" +
		"\x02\u12F0\u12F1\x03\x02\x02\x02\u12F1\u12F2\x03\x02\x02\x02\u12F2\u12F4" +
		"\x05\u01D8\xED\x02\u12F3\u12ED\x03\x02\x02\x02\u12F3\u12F4\x03\x02\x02" +
		"\x02\u12F4\u01BD\x03\x02\x02\x02\u12F5\u12FA\x05\u01BC\xDF\x02\u12F6\u12F7" +
		"\x07\u02FA\x02\x02\u12F7\u12F9\x05\u01BC\xDF\x02\u12F8\u12F6\x03\x02\x02" +
		"\x02\u12F9\u12FC\x03\x02\x02\x02\u12FA\u12F8\x03\x02\x02\x02\u12FA\u12FB" +
		"\x03\x02\x02\x02\u12FB\u01BF\x03\x02\x02\x02\u12FC\u12FA\x03\x02\x02\x02" +
		"\u12FD\u1302\x05\u0202\u0102\x02\u12FE\u12FF\x07\u0300\x02\x02\u12FF\u1300" +
		"\x05\u01BE\xE0\x02\u1300\u1301\x07\u0301\x02\x02\u1301\u1303\x03\x02\x02" +
		"\x02\u1302\u12FE\x03\x02\x02\x02\u1302\u1303\x03\x02\x02\x02\u1303\u01C1" +
		"\x03\x02\x02\x02\u1304\u1309\x05\u01C0\xE1\x02\u1305\u1306\x07\u02FA\x02" +
		"\x02\u1306\u1308\x05\u01C0\xE1\x02\u1307\u1305\x03\x02\x02\x02\u1308\u130B" +
		"\x03\x02\x02\x02\u1309\u1307\x03\x02\x02\x02\u1309\u130A\x03\x02\x02\x02" +
		"\u130A\u01C3\x03\x02\x02\x02\u130B\u1309\x03\x02\x02\x02\u130C\u139D\x07" +
		"\u02D1\x02\x02\u130D\u139D\x07\u02EA\x02\x02\u130E\u139D\x07.\x02\x02" +
		"\u130F\u139D\x07\u02D2\x02\x02\u1310\u1314\x070\x02\x02\u1311\u1312\x07" +
		"\u0300\x02\x02\u1312\u1313\x07\u0307\x02\x02\u1313\u1315\x07\u0301\x02" +
		"\x02\u1314\u1311\x03\x02\x02\x02\u1314\u1315\x03\x02\x02\x02\u1315\u139D" +
		"\x03\x02\x02\x02\u1316\u131A\x07\u02D3\x02\x02\u1317\u1318\x07\u0300\x02" +
		"\x02\u1318\u1319\x07\u0307\x02\x02\u1319\u131B\x07\u0301\x02\x02\u131A" +
		"\u1317\x03\x02\x02\x02\u131A\u131B\x03\x02\x02\x02\u131B\u139D\x03\x02" +
		"\x02\x02\u131C\u139D\x07\u02D4\x02\x02\u131D\u139D\x074\x02\x02\u131E" +
		"\u139D\x07\u02D5\x02\x02\u131F\u139D\x07\u02D6\x02\x02\u1320\u1324\x07" +
		"G\x02\x02\u1321\u1322\x07\u0300\x02\x02\u1322\u1323\x07\u0307\x02\x02" +
		"\u1323\u1325\x07\u0301\x02\x02\u1324\u1321\x03\x02\x02\x02\u1324\u1325" +
		"\x03\x02\x02\x02\u1325\u139D\x03\x02\x02\x02\u1326\u132A\x07I\x02\x02" +
		"\u1327\u1328\x07\u0300\x02\x02\u1328\u1329\x07\u0307\x02\x02\u1329\u132B" +
		"\x07\u0301\x02\x02\u132A\u1327\x03\x02\x02\x02\u132A\u132B\x03\x02\x02" +
		"\x02\u132B\u139D\x03\x02\x02\x02\u132C\u1330\x07\u02D7\x02\x02\u132D\u132E" +
		"\x07\u0300\x02\x02\u132E\u132F\x07\u0307\x02\x02\u132F\u1331\x07\u0301" +
		"\x02\x02\u1330\u132D\x03\x02\x02\x02\u1330\u1331\x03\x02\x02\x02\u1331" +
		"\u139D\x03\x02\x02\x02\u1332\u139D\x07\u02D8\x02\x02\u1333\u139D\x07\u02D9" +
		"\x02\x02\u1334\u139D\x07\x95\x02\x02\u1335\u133B\x07\x9B\x02\x02\u1336" +
		"\u1337\x07\u0300\x02\x02\u1337\u1338\x07\u0307\x02\x02\u1338\u1339\x07" +
		"\u02FA\x02\x02\u1339\u133A\x07\u0307\x02\x02\u133A\u133C\x07\u0301\x02" +
		"\x02\u133B\u1336\x03\x02\x02\x02\u133B\u133C\x03\x02\x02\x02\u133C\u139D" +
		"\x03\x02\x02\x02\u133D\u133E\x07\xBD\x02\x02\u133E\u139D\x07\u01B0\x02" +
		"\x02\u133F\u139D\x07\u02DA\x02\x02\u1340\u139D\x07\u02DB\x02\x02\u1341" +
		"\u139D\x07\u02DC\x02\x02\u1342\u139D\x07\u011C\x02\x02\u1343\u139D\x07" +
		"\u02DE\x02\x02\u1344\u139D\x07\u02DD\x02\x02\u1345\u139D\x07\u02DF\x02" +
		"\x02\u1346\u139D\x07\u011D\x02\x02\u1347\u1349\x07\u0120\x02\x02\u1348" +
		"\u134A\x07\xDE\x02\x02\u1349\u1348\x03\x02\x02\x02\u1349\u134A\x03\x02" +
		"\x02\x02\u134A\u134C\x03\x02\x02\x02\u134B\u134D\x07\u0307\x02\x02\u134C" +
		"\u134B\x03\x02\x02\x02\u134C\u134D\x03\x02\x02\x02\u134D\u139D\x03\x02" +
		"\x02\x02\u134E\u139D\x07\u02E0\x02\x02\u134F\u139D\x07\u02E1\x02\x02\u1350" +
		"\u139D\x07\u02E2\x02\x02\u1351\u139D\x07\u02E3\x02\x02\u1352\u139D\x07" +
		"\u02E4\x02\x02\u1353\u139D\x07\u02E5\x02\x02\u1354\u139D\x07\u02E6\x02" +
		"\x02\u1355\u135B\x07\u0179\x02\x02\u1356\u1357\x07\u0300\x02\x02\u1357" +
		"\u1358\x07\u0307\x02\x02\u1358\u1359\x07\u02FA\x02\x02\u1359\u135A\x07" +
		"\u0307\x02\x02\u135A\u135C\x07\u0301\x02\x02\u135B\u1356\x03\x02\x02\x02" +
		"\u135B\u135C\x03\x02\x02\x02\u135C\u139D\x03\x02\x02\x02\u135D\u139D\x07" +
		"\u01A4\x02\x02\u135E\u139D\x07\u02E7\x02\x02\u135F\u139D\x07\u02E8\x02" +
		"\x02\u1360\u139D\x07\u02E9\x02\x02\u1361\u139D\x07\u01C2\x02\x02\u1362" +
		"\u139D\x07\u02EB\x02\x02\u1363\u139D\x07\u02EC\x02\x02\u1364\u139D\x07" +
		"\u02ED\x02\x02\u1365\u139D\x07\u02EE\x02\x02\u1366\u139D\x07\u0212\x02" +
		"\x02\u1367\u139D\x07\u02EF\x02\x02\u1368\u139D\x07\u02F1\x02\x02\u1369" +
		"\u136D\x07\u0244\x02\x02\u136A\u136B\x07\u0300\x02\x02\u136B\u136C\x07" +
		"\u0307\x02\x02\u136C\u136E\x07\u0301\x02\x02\u136D\u136A\x03\x02\x02\x02" +
		"\u136D\u136E\x03\x02\x02\x02\u136E\u1372\x03\x02\x02\x02\u136F\u1370\t" +
		"/\x02\x02\u1370\u1371\x07\u0244\x02\x02\u1371\u1373\x07\u0290\x02\x02" +
		"\u1372\u136F\x03\x02\x02\x02\u1372\u1373\x03\x02\x02\x02\u1373\u139D\x03" +
		"\x02\x02\x02\u1374\u1378\x07\u0245\x02\x02\u1375\u1376\x07\u0300\x02\x02" +
		"\u1376\u1377\x07\u0307\x02\x02\u1377\u1379\x07\u0301\x02\x02\u1378\u1375" +
		"\x03\x02\x02\x02\u1378\u1379\x03\x02\x02\x02\u1379\u137D\x03\x02\x02\x02" +
		"\u137A\u137B\t/\x02\x02\u137B\u137C\x07\u0244\x02\x02\u137C\u137E\x07" +
		"\u0290\x02\x02\u137D\u137A\x03\x02\x02\x02\u137D\u137E\x03\x02\x02\x02" +
		"\u137E\u139D\x03\x02\x02\x02\u137F\u1383\x07\u02F3\x02\x02\u1380\u1381" +
		"\x07\u0300\x02\x02\u1381\u1382\x07\u0307\x02\x02\u1382\u1384\x07\u0301" +
		"\x02\x02\u1383\u1380\x03\x02\x02\x02\u1383\u1384\x03\x02\x02\x02\u1384" +
		"\u139D\x03\x02\x02\x02\u1385\u1389\x07\u02F2\x02\x02\u1386\u1387\x07\u0300" +
		"\x02\x02\u1387\u1388\x07\u0307\x02\x02\u1388\u138A\x07\u0301\x02\x02\u1389" +
		"\u1386\x03\x02\x02\x02\u1389\u138A\x03\x02\x02\x02\u138A\u139D\x03\x02" +
		"\x02\x02\u138B\u139D\x07\u02F4\x02\x02\u138C\u139D\x07\u02F5\x02\x02\u138D" +
		"\u139D\x07\u02F6\x02\x02\u138E\u139D\x07\u02F7\x02\x02\u138F\u1393\x07" +
		"\u02F8\x02\x02\u1390\u1391\x07\u0300\x02\x02\u1391\u1392\x07\u0307\x02" +
		"\x02\u1392\u1394\x07\u0301\x02\x02\u1393\u1390\x03\x02\x02\x02\u1393\u1394" +
		"\x03\x02\x02\x02\u1394\u139D\x03\x02\x02\x02\u1395\u1399\x07\u027C\x02" +
		"\x02\u1396\u1397\x07\u0300\x02\x02\u1397\u1398\x07\u0307\x02\x02\u1398" +
		"\u139A\x07\u0301\x02\x02\u1399\u1396\x03\x02\x02\x02\u1399\u139A\x03\x02" +
		"\x02\x02\u139A\u139D\x03\x02\x02\x02\u139B\u139D\x07\u02F9\x02\x02\u139C" +
		"\u130C\x03\x02\x02\x02\u139C\u130D\x03\x02\x02\x02\u139C\u130E\x03\x02" +
		"\x02\x02\u139C\u130F\x03\x02\x02\x02\u139C\u1310\x03\x02\x02\x02\u139C" +
		"\u1316\x03\x02\x02\x02\u139C\u131C\x03\x02\x02\x02\u139C\u131D\x03\x02" +
		"\x02\x02\u139C\u131E\x03\x02\x02\x02\u139C\u131F\x03\x02\x02\x02\u139C" +
		"\u1320\x03\x02\x02\x02\u139C\u1326\x03\x02\x02\x02\u139C\u132C\x03\x02" +
		"\x02\x02\u139C\u1332\x03\x02\x02\x02\u139C\u1333\x03\x02\x02\x02\u139C" +
		"\u1334\x03\x02\x02\x02\u139C\u1335\x03\x02\x02\x02\u139C\u133D\x03\x02" +
		"\x02\x02\u139C\u133F\x03\x02\x02\x02\u139C\u1340\x03\x02\x02\x02\u139C" +
		"\u1341\x03\x02\x02\x02\u139C\u1342\x03\x02\x02\x02\u139C\u1343\x03\x02" +
		"\x02\x02\u139C\u1344\x03\x02\x02\x02\u139C\u1345\x03\x02\x02\x02\u139C" +
		"\u1346\x03\x02\x02\x02\u139C\u1347\x03\x02\x02\x02\u139C\u134E\x03\x02" +
		"\x02\x02\u139C\u134F\x03\x02\x02\x02\u139C\u1350\x03\x02\x02\x02\u139C" +
		"\u1351\x03\x02\x02\x02\u139C\u1352\x03\x02\x02\x02\u139C\u1353\x03\x02" +
		"\x02\x02\u139C\u1354\x03\x02\x02\x02\u139C\u1355\x03\x02\x02\x02\u139C" +
		"\u135D\x03\x02\x02\x02\u139C\u135E\x03\x02\x02\x02\u139C\u135F\x03\x02" +
		"\x02\x02\u139C\u1360\x03\x02\x02\x02\u139C\u1361\x03\x02\x02\x02\u139C" +
		"\u1362\x03\x02\x02\x02\u139C\u1363\x03\x02\x02\x02\u139C\u1364\x03\x02" +
		"\x02\x02\u139C\u1365\x03\x02\x02\x02\u139C\u1366\x03\x02\x02\x02\u139C" +
		"\u1367\x03\x02\x02\x02\u139C\u1368\x03\x02\x02\x02\u139C\u1369\x03\x02" +
		"\x02\x02\u139C\u1374\x03\x02\x02\x02\u139C\u137F\x03\x02\x02\x02\u139C" +
		"\u1385\x03\x02\x02\x02\u139C\u138B\x03\x02\x02\x02\u139C\u138C\x03\x02" +
		"\x02\x02\u139C\u138D\x03\x02\x02\x02\u139C\u138E\x03\x02\x02\x02\u139C" +
		"\u138F\x03\x02\x02\x02\u139C\u1395\x03\x02\x02\x02\u139C\u139B\x03\x02" +
		"\x02\x02\u139D\u01C5\x03\x02\x02\x02\u139E\u139F\t0\x02\x02\u139F\u01C7" +
		"\x03\x02\x02\x02\u13A0\u13A5\x03\x02\x02\x02\u13A1\u13A2\x07\u0123\x02" +
		"\x02\u13A2\u13A5\x07\u017D\x02\x02\u13A3\u13A5\x07\x12\x02\x02\u13A4\u13A0" +
		"\x03\x02\x02\x02\u13A4\u13A1\x03\x02\x02\x02\u13A4\u13A3\x03\x02\x02\x02" +
		"\u13A5\u01C9\x03\x02\x02\x02\u13A6\u13A7\x05\u0202\u0102\x02\u13A7\u13A9" +
		"\x07\u0300\x02\x02\u13A8\u13AA\t!\x02\x02\u13A9\u13A8\x03\x02\x02\x02" +
		"\u13A9\u13AA\x03\x02\x02\x02\u13AA\u13AB\x03\x02\x02\x02\u13AB\u13B0\x05" +
		"\u01B2\xDA\x02\u13AC\u13AD\x07\u02FA\x02\x02\u13AD\u13AF\x05\u01B2\xDA" +
		"\x02\u13AE\u13AC\x03\x02\x02\x02\u13AF\u13B2\x03\x02\x02\x02\u13B0\u13AE" +
		"\x03\x02\x02\x02\u13B0\u13B1\x03\x02\x02\x02\u13B1\u13B4\x03\x02\x02\x02" +
		"\u13B2\u13B0\x03\x02\x02\x02\u13B3\u13B5\x05\u01A0\xD1\x02\u13B4\u13B3" +
		"\x03\x02\x02\x02\u13B4\u13B5\x03\x02\x02\x02\u13B5\u13B6\x03\x02\x02\x02" +
		"\u13B6\u13BD\x07\u0301\x02\x02\u13B7\u13B8\x07\xDF\x02\x02\u13B8\u13B9" +
		"\x07\u0300\x02\x02\u13B9\u13BA\x07\u0285\x02\x02\u13BA\u13BB\x05\u0184" +
		"\xC3\x02\u13BB\u13BC\x07\u0301\x02\x02\u13BC\u13BE\x03\x02\x02\x02\u13BD" +
		"\u13B7\x03\x02\x02\x02\u13BD\u13BE\x03\x02\x02\x02\u13BE\u13E6\x03\x02" +
		"\x02\x02\u13BF\u13C0\x05\u0202\u0102\x02\u13C0\u13C1\x07\u0300\x02\x02" +
		"\u13C1\u13C2\x07\u02FF\x02\x02\u13C2\u13C9\x07\u0301\x02\x02\u13C3\u13C4" +
		"\x07\xDF\x02\x02\u13C4\u13C5\x07\u0300\x02\x02\u13C5\u13C6\x07\u0285\x02" +
		"\x02\u13C6\u13C7\x05\u0184\xC3\x02\u13C7\u13C8\x07\u0301\x02\x02\u13C8" +
		"\u13CA\x03\x02\x02\x02\u13C9\u13C3\x03\x02\x02\x02\u13C9\u13CA\x03\x02" +
		"\x02\x02\u13CA\u13E6\x03\x02\x02\x02\u13CB\u13CC\x05\u0202\u0102\x02\u13CC" +
		"\u13D5\x07\u0300\x02\x02\u13CD\u13D2\x05\u01B2\xDA\x02\u13CE\u13CF\x07" +
		"\u02FA\x02\x02\u13CF\u13D1\x05\u01B2\xDA\x02\u13D0\u13CE\x03\x02\x02\x02" +
		"\u13D1\u13D4\x03\x02\x02\x02\u13D2\u13D0\x03\x02\x02\x02\u13D2\u13D3\x03" +
		"\x02\x02\x02\u13D3\u13D6\x03\x02\x02\x02\u13D4\u13D2\x03\x02\x02\x02\u13D5" +
		"\u13CD\x03\x02\x02\x02\u13D5\u13D6\x03\x02\x02\x02\u13D6\u13D7\x03\x02" +
		"\x02\x02\u13D7\u13D8\x07\u0301\x02\x02\u13D8\u13D9\x07\u0289\x02\x02\u13D9" +
		"\u13DA\x07\xFC\x02\x02\u13DA\u13DB\x07\u0300\x02\x02\u13DB\u13DC\x05\u01A0" +
		"\xD1\x02\u13DC\u13E3\x07\u0301\x02\x02\u13DD\u13DE\x07\xDF\x02\x02\u13DE" +
		"\u13DF\x07\u0300\x02\x02\u13DF\u13E0\x07\u0285\x02\x02\u13E0\u13E1\x05" +
		"\u0184\xC3\x02\u13E1\u13E2\x07\u0301\x02\x02\u13E2\u13E4\x03\x02\x02\x02" +
		"\u13E3\u13DD\x03\x02\x02\x02\u13E3\u13E4\x03\x02\x02\x02\u13E4\u13E6\x03" +
		"\x02\x02\x02\u13E5\u13A6\x03\x02\x02\x02\u13E5\u13BF\x03\x02\x02\x02\u13E5" +
		"\u13CB\x03\x02\x02\x02\u13E6\u01CB\x03\x02\x02\x02\u13E7\u13EA\x07\u030A" +
		"\x02\x02\u13E8\u13EA\x05\u0202\u0102\x02\u13E9\u13E7\x03\x02\x02\x02\u13E9" +
		"\u13E8\x03\x02\x02\x02\u13EA\u01CD\x03\x02\x02\x02\u13EB\u13F0\x05\u01CC" +
		"\xE7\x02\u13EC\u13ED\x07\u02FA\x02\x02\u13ED\u13EF\x05\u01CC\xE7\x02\u13EE" +
		"\u13EC\x03\x02\x02\x02\u13EF\u13F2\x03\x02\x02\x02\u13F0\u13EE\x03\x02" +
		"\x02\x02\u13F0\u13F1\x03\x02\x02\x02\u13F1\u01CF\x03\x02\x02\x02\u13F2" +
		"\u13F0\x03\x02\x02\x02\u13F3\u13F8\x05\u0202\u0102\x02\u13F4\u13F5\x07" +
		"\u02FA\x02\x02\u13F5\u13F7\x05\u0202\u0102\x02\u13F6\u13F4\x03\x02\x02" +
		"\x02\u13F7\u13FA\x03\x02\x02\x02\u13F8\u13F6\x03\x02\x02\x02\u13F8\u13F9" +
		"\x03\x02\x02\x02\u13F9\u01D1\x03\x02\x02\x02\u13FA\u13F8\x03\x02\x02\x02" +
		"\u13FB\u13FE\x05\u0202\u0102\x02\u13FC\u13FD\x07\u0319\x02\x02\u13FD\u13FF" +
		"\x05\u01FE\u0100\x02\u13FE\u13FC\x03\x02\x02\x02\u13FE\u13FF\x03\x02\x02" +
		"\x02\u13FF\u01D3\x03\x02\x02\x02\u1400\u1405\x05\u01D2\xEA\x02\u1401\u1402" +
		"\x07\u02FA\x02\x02\u1402\u1404\x05\u01D2\xEA\x02\u1403\u1401\x03\x02\x02" +
		"\x02\u1404\u1407\x03\x02\x02\x02\u1405\u1403\x03\x02\x02\x02\u1405\u1406" +
		"\x03\x02\x02\x02\u1406\u01D5\x03\x02\x02\x02\u1407\u1405\x03\x02\x02\x02" +
		"\u1408\u1409\x05\u0202\u0102\x02\u1409\u01D7\x03\x02\x02\x02\u140A\u140D" +
		"\x05\u01C4\xE3\x02\u140B\u140D\x05\u0202\u0102\x02\u140C\u140A\x03\x02" +
		"\x02\x02\u140C\u140B\x03\x02\x02\x02\u140D\u1415\x03\x02\x02\x02\u140E" +
		"\u1410\x07\u0302\x02\x02\u140F\u1411\x07\u0307\x02\x02\u1410\u140F\x03" +
		"\x02\x02\x02\u1410\u1411\x03\x02\x02\x02\u1411\u1412\x03\x02\x02\x02\u1412" +
		"\u1414\x07\u0303\x02\x02\u1413\u140E\x03\x02\x02\x02\u1414\u1417\x03\x02" +
		"\x02\x02\u1415\u1413\x03\x02\x02\x02\u1415\u1416\x03\x02\x02\x02\u1416" +
		"\u01D9\x03\x02\x02\x02\u1417\u1415\x03\x02\x02\x02\u1418\u141D\x05\u01D8" +
		"\xED\x02\u1419\u141A\x07\u02FA\x02\x02\u141A\u141C\x05\u01D8\xED\x02\u141B" +
		"\u1419\x03\x02\x02\x02\u141C\u141F\x03\x02\x02\x02\u141D\u141B\x03\x02" +
		"\x02\x02\u141D\u141E\x03\x02\x02\x02\u141E\u01DB\x03\x02\x02\x02\u141F" +
		"\u141D\x03\x02\x02\x02\u1420\u1423\t1\x02\x02\u1421\u1423\x05\u0202\u0102" +
		"\x02\u1422\u1420\x03\x02\x02\x02\u1422\u1421\x03\x02\x02\x02\u1423\u01DD" +
		"\x03\x02\x02\x02\u1424\u1425\x05\u0202\u0102\x02\u1425\u01DF\x03\x02\x02" +
		"\x02\u1426\u1427\x05\u01DE\xF0\x02\u1427\u1428\x07\u0300\x02\x02\u1428" +
		"\u1429\x07\u027E\x02\x02\u1429\u142A\x05\u01B2\xDA\x02\u142A\u142B\x07" +
		"\u0301\x02\x02\u142B\u144B\x03\x02\x02\x02\u142C\u142D\x05\u01DE\xF0\x02" +
		"\u142D\u143B\x07\u0300\x02\x02\u142E\u1433\x05\u01B2\xDA\x02\u142F\u1430" +
		"\x07\u02FA\x02\x02\u1430\u1432\x05\u01B2\xDA\x02\u1431\u142F\x03\x02\x02" +
		"\x02\u1432\u1435\x03\x02\x02\x02\u1433\u1431\x03\x02\x02\x02\u1433\u1434" +
		"\x03\x02\x02\x02\u1434\u1439\x03\x02\x02\x02\u1435\u1433\x03\x02\x02\x02" +
		"\u1436\u1437\x07\u02FA\x02\x02\u1437\u1438\x07\u027E\x02\x02\u1438\u143A" +
		"\x05\u01B2\xDA\x02\u1439\u1436\x03\x02\x02\x02\u1439\u143A\x03\x02\x02" +
		"\x02\u143A\u143C\x03\x02\x02\x02\u143B\u142E\x03\x02\x02\x02\u143B\u143C" +
		"\x03\x02\x02\x02\u143C\u143D\x03\x02\x02\x02\u143D\u143E\x07\u0301\x02" +
		"\x02\u143E\u144B\x03\x02\x02\x02\u143F\u1440\x05\u01DE\xF0\x02\u1440\u1441" +
		"\x07\u0300\x02\x02\u1441\u1442\x05\u0204\u0103\x02\u1442\u1443\x07\xEE" +
		"\x02\x02\u1443\u1446\x05\u01B2\xDA\x02\u1444\u1445\x07\xE5\x02\x02\u1445" +
		"\u1447\x05\u01B2\xDA\x02\u1446\u1444\x03\x02\x02\x02\u1446\u1447\x03\x02" +
		"\x02\x02\u1447\u1448\x03\x02\x02\x02\u1448\u1449\x07\u0301\x02\x02\u1449" +
		"\u144B\x03\x02\x02\x02\u144A\u1426\x03\x02\x02\x02\u144A\u142C\x03\x02" +
		"\x02\x02\u144A\u143F\x03\x02\x02\x02\u144B\u01E1\x03\x02\x02\x02\u144C" +
		"\u144D\x07\x1C\x02\x02\u144D\u1456\x07\u0302\x02\x02\u144E\u1453\x05\u01B2" +
		"\xDA\x02\u144F\u1450\x07\u02FA\x02\x02\u1450\u1452\x05\u01B2\xDA\x02\u1451" +
		"\u144F\x03\x02\x02\x02\u1452\u1455\x03\x02\x02\x02\u1453\u1451\x03\x02" +
		"\x02\x02\u1453\u1454\x03\x02\x02\x02\u1454\u1457\x03\x02\x02\x02\u1455" +
		"\u1453\x03\x02\x02\x02\u1456\u144E\x03\x02\x02\x02\u1456\u1457\x03\x02" +
		"\x02\x02\u1457\u1458\x03\x02\x02\x02\u1458\u1459\x07\u0303\x02\x02\u1459" +
		"\u01E3\x03\x02\x02\x02\u145A\u145C\b\xF3\x01\x02\u145B\u145D\x07\u0183" +
		"\x02\x02\u145C\u145B\x03\x02\x02\x02\u145C\u145D\x03\x02\x02\x02\u145D" +
		"\u145E\x03\x02\x02\x02\u145E\u1460\x05\u01D6\xEC\x02\u145F\u1461\x07\u02FF" +
		"\x02\x02\u1460\u145F\x03\x02\x02\x02\u1460\u1461\x03\x02\x02\x02\u1461" +
		"\u1463\x03\x02\x02\x02\u1462\u1464\x05\u01E6\xF4\x02\u1463\u1462\x03\x02" +
		"\x02\x02\u1463\u1464\x03\x02\x02\x02\u1464\u1478\x03\x02\x02\x02\u1465" +
		"\u1466\x07\u023B\x02\x02\u1466\u1467\x05\u0204\u0103\x02\u1467\u1468\x07" +
		"\u0300\x02\x02\u1468\u146D\x05\u01B2\xDA\x02\u1469\u146A\x07\u02FA\x02" +
		"\x02\u146A\u146C\x05\u01B2\xDA\x02\u146B\u1469\x03\x02\x02\x02\u146C\u146F" +
		"\x03\x02\x02\x02\u146D\u146B\x03\x02\x02\x02\u146D\u146E\x03\x02\x02\x02" +
		"\u146E\u1470\x03\x02\x02\x02\u146F\u146D\x03\x02\x02\x02\u1470\u1476\x07" +
		"\u0301\x02\x02\u1471\u1472\x07\u01D7\x02\x02\u1472\u1473\x07\u0300\x02" +
		"\x02\u1473\u1474\x05\u0204\u0103\x02\u1474\u1475\x07\u0301\x02\x02\u1475" +
		"\u1477\x03\x02\x02\x02\u1476\u1471\x03\x02\x02\x02\u1476\u1477\x03\x02" +
		"\x02\x02\u1477\u1479\x03\x02\x02\x02\u1478\u1465\x03\x02\x02\x02\u1478" +
		"\u1479\x03\x02\x02\x02\u1479\u14C5\x03\x02\x02\x02\u147A\u147C\x07\u0130" +
		"\x02\x02\u147B\u147A\x03\x02\x02\x02\u147B\u147C\x03\x02\x02\x02\u147C" +
		"\u147D\x03\x02\x02\x02\u147D\u147E\x07\u0300\x02\x02\u147E\u147F\x05\x04" +
		"\x03\x02\u147F\u1481\x07\u0301\x02\x02\u1480\u1482\x07\x1D\x02\x02\u1481" +
		"\u1480\x03\x02\x02\x02\u1481\u1482\x03\x02\x02\x02\u1482\u1483\x03\x02" +
		"\x02\x02\u1483\u148F\x05\u020C\u0107\x02\u1484\u1485\x07\u0300\x02\x02" +
		"\u1485\u148A\x05\u020E\u0108\x02\u1486\u1487\x07\u02FA\x02\x02\u1487\u1489" +
		"\x05\u020E\u0108\x02\u1488\u1486\x03\x02\x02\x02\u1489\u148C\x03\x02\x02" +
		"\x02\u148A\u1488\x03\x02\x02\x02\u148A\u148B\x03\x02\x02\x02\u148B\u148D" +
		"\x03\x02\x02\x02\u148C\u148A\x03\x02\x02\x02\u148D\u148E\x07\u0301\x02" +
		"\x02\u148E\u1490\x03\x02\x02\x02\u148F\u1484\x03\x02\x02\x02\u148F\u1490" +
		"\x03\x02\x02\x02\u1490\u14C5\x03\x02\x02\x02\u1491\u1493\x07\u0130\x02" +
		"\x02\u1492\u1491\x03\x02\x02\x02\u1492\u1493\x03\x02\x02\x02\u1493\u1494" +
		"\x03\x02\x02\x02\u1494\u1497\x05\u01E0\xF1\x02\u1495\u1496\x07\u0288\x02" +
		"\x02\u1496\u1498\x07\u018C\x02\x02\u1497\u1495\x03\x02\x02\x02\u1497\u1498" +
		"\x03\x02\x02\x02\u1498\u149A\x03\x02\x02\x02\u1499\u149B\x05\u01E6\xF4" +
		"\x02\u149A\u1499\x03\x02\x02\x02\u149A\u149B\x03\x02\x02\x02\u149B\u14C5" +
		"\x03\x02\x02\x02";
	private static readonly _serializedATNSegment10: string =
		"\u149C\u149E\x07\u0130\x02\x02\u149D\u149C\x03\x02\x02\x02\u149D\u149E" +
		"\x03\x02\x02\x02\u149E\u149F\x03\x02\x02\x02\u149F\u14A0\x05\u01E0\xF1" +
		"\x02\u14A0\u14A1\x07\x1D\x02\x02\u14A1\u14A2\x07\u0300\x02\x02\u14A2\u14A7" +
		"\x05\u0210\u0109\x02\u14A3\u14A4\x07\u02FA\x02\x02\u14A4\u14A6\x05\u0210" +
		"\u0109\x02\u14A5\u14A3\x03\x02\x02\x02\u14A6\u14A9\x03\x02\x02\x02\u14A7" +
		"\u14A5\x03\x02\x02\x02\u14A7\u14A8\x03\x02\x02\x02\u14A8\u14AA\x03\x02" +
		"\x02\x02\u14A9\u14A7\x03\x02\x02\x02\u14AA\u14AB\x07\u0301\x02\x02\u14AB" +
		"\u14C5\x03\x02\x02\x02\u14AC\u14AE\x07\u0130\x02\x02\u14AD\u14AC\x03\x02" +
		"\x02\x02\u14AD\u14AE\x03\x02\x02\x02\u14AE\u14AF\x03\x02\x02\x02\u14AF" +
		"\u14B0\x07\u01F1\x02\x02\u14B0\u14B1\x07\xEE\x02\x02\u14B1\u14B2\x07\u0300" +
		"\x02\x02\u14B2\u14B3\x05\u01E0\xF1\x02\u14B3\u14C0\x07\u0301\x02\x02\u14B4" +
		"\u14B5\x07\x1D\x02\x02\u14B5\u14B6\x07\u0300\x02\x02\u14B6\u14BB\x05\u0210" +
		"\u0109\x02\u14B7\u14B8\x07\u02FA\x02\x02\u14B8\u14BA\x05\u0210\u0109\x02" +
		"\u14B9\u14B7\x03\x02\x02\x02\u14BA\u14BD\x03\x02\x02\x02\u14BB\u14B9\x03" +
		"\x02\x02\x02\u14BB\u14BC\x03\x02\x02\x02\u14BC\u14BE\x03\x02\x02\x02\u14BD" +
		"\u14BB\x03\x02\x02\x02\u14BE\u14BF\x07\u0301\x02\x02\u14BF\u14C1\x03\x02" +
		"\x02\x02\u14C0\u14B4\x03\x02\x02\x02\u14C0\u14C1\x03\x02\x02\x02\u14C1" +
		"\u14C2\x03\x02\x02\x02\u14C2\u14C3\x07\u0301\x02\x02\u14C3\u14C5\x03\x02" +
		"\x02\x02\u14C4\u145A\x03\x02\x02\x02\u14C4\u147B\x03\x02\x02\x02\u14C4" +
		"\u1492\x03\x02\x02\x02\u14C4\u149D\x03\x02\x02\x02\u14C4\u14AD\x03\x02" +
		"\x02\x02\u14C5\u14D7\x03\x02\x02\x02\u14C6\u14C8\f\x03\x02\x02\u14C7\u14C9" +
		"\x07\u0163\x02\x02\u14C8\u14C7\x03\x02\x02\x02\u14C8\u14C9\x03\x02\x02" +
		"\x02\u14C9\u14CA\x03\x02\x02\x02\u14CA\u14CC\x05\u01E8\xF5\x02\u14CB\u14CD" +
		"\x07\u0300\x02\x02\u14CC\u14CB\x03\x02\x02\x02\u14CC\u14CD\x03\x02\x02" +
		"\x02\u14CD\u14CE\x03\x02\x02\x02\u14CE\u14D0\x05\u01E4\xF3\x02\u14CF\u14D1" +
		"\x05\u01EA\xF6\x02\u14D0\u14CF\x03\x02\x02\x02\u14D0\u14D1\x03\x02\x02" +
		"\x02\u14D1\u14D3\x03\x02\x02\x02\u14D2\u14D4\x07\u0301\x02\x02\u14D3\u14D2" +
		"\x03\x02\x02\x02\u14D3\u14D4\x03\x02\x02\x02\u14D4\u14D6\x03\x02\x02\x02" +
		"\u14D5\u14C6\x03\x02\x02\x02\u14D6\u14D9\x03\x02\x02\x02\u14D7\u14D5\x03" +
		"\x02\x02\x02\u14D7\u14D8\x03\x02\x02\x02\u14D8\u01E5\x03\x02\x02\x02\u14D9" +
		"\u14D7\x03\x02\x02\x02\u14DA\u14DC\x07\x1D\x02\x02\u14DB\u14DA\x03\x02" +
		"\x02\x02\u14DB\u14DC\x03\x02\x02\x02\u14DC\u14DD\x03\x02\x02\x02\u14DD" +
		"\u14E6\x05\u020C\u0107\x02\u14DE\u14E3\x05\u020E\u0108\x02\u14DF\u14E0" +
		"\x07\u02FA\x02\x02\u14E0\u14E2\x05\u020E\u0108\x02\u14E1\u14DF\x03\x02" +
		"\x02\x02\u14E2\u14E5\x03\x02\x02\x02\u14E3\u14E1\x03\x02\x02\x02\u14E3" +
		"\u14E4\x03\x02\x02\x02\u14E4\u14E7\x03\x02\x02\x02\u14E5\u14E3\x03\x02" +
		"\x02\x02\u14E6\u14DE\x03\x02\x02\x02\u14E6\u14E7\x03\x02\x02\x02\u14E7" +
		"\u14F1\x03\x02\x02\x02\u14E8\u14EA\x07\x1D\x02\x02\u14E9\u14E8\x03\x02" +
		"\x02\x02\u14E9\u14EA\x03\x02\x02\x02\u14EA\u14EB\x03\x02\x02\x02\u14EB" +
		"\u14EC\x05\u020C\u0107\x02\u14EC\u14ED\x07\u0300\x02\x02\u14ED\u14EE\x05" +
		"\u01CE\xE8\x02\u14EE\u14EF\x07\u0301\x02\x02\u14EF\u14F1\x03\x02\x02\x02" +
		"\u14F0\u14DB\x03\x02\x02\x02\u14F0\u14E9\x03\x02\x02\x02\u14F1\u01E7\x03" +
		"\x02\x02\x02\u14F2\u14F4\x07\u0114\x02\x02\u14F3\u14F2\x03\x02\x02\x02" +
		"\u14F3\u14F4\x03\x02\x02\x02\u14F4\u14F5\x03\x02\x02\x02\u14F5\u1508\x07" +
		"\u0126\x02\x02\u14F6\u14F8\x07\u0133\x02\x02\u14F7\u14F9\x07\u018F\x02" +
		"\x02\u14F8\u14F7\x03\x02\x02\x02\u14F8\u14F9\x03\x02\x02\x02\u14F9\u14FA" +
		"\x03\x02\x02\x02\u14FA\u1508\x07\u0126\x02\x02\u14FB\u14FD\x07\u01E6\x02" +
		"\x02\u14FC\u14FE\x07\u018F\x02\x02\u14FD\u14FC\x03\x02\x02\x02\u14FD\u14FE" +
		"\x03\x02\x02\x02\u14FE\u14FF\x03\x02\x02\x02\u14FF\u1508\x07\u0126\x02" +
		"\x02\u1500\u1502\x07\xEF\x02\x02\u1501\u1503\x07\u018F\x02\x02\u1502\u1501" +
		"\x03\x02\x02\x02\u1502\u1503\x03\x02\x02\x02\u1503\u1504\x03\x02\x02\x02" +
		"\u1504\u1508\x07\u0126\x02\x02\u1505\u1506\x07\x83\x02\x02\u1506\u1508" +
		"\x07\u0126\x02\x02\u1507\u14F3\x03\x02\x02\x02\u1507\u14F6\x03\x02\x02" +
		"\x02\u1507\u14FB\x03\x02\x02\x02\u1507\u1500\x03\x02\x02\x02\u1507\u1505" +
		"\x03\x02\x02\x02\u1508\u01E9\x03\x02\x02\x02\u1509\u150A\x07\u0182\x02" +
		"\x02\u150A\u1518\x05\u01EC\xF7\x02\u150B\u150C\x07\u0273\x02\x02\u150C" +
		"\u150D\x07\u0300\x02\x02\u150D\u1512\x05\u020A\u0106\x02\u150E\u150F\x07" +
		"\u02FA\x02\x02\u150F\u1511\x05\u020A\u0106\x02\u1510\u150E\x03\x02\x02" +
		"\x02\u1511\u1514\x03\x02\x02\x02\u1512\u1510\x03\x02\x02\x02\u1512\u1513" +
		"\x03\x02\x02\x02\u1513\u1515\x03\x02\x02\x02\u1514\u1512\x03\x02\x02\x02" +
		"\u1515\u1516\x07\u0301\x02\x02\u1516\u1518\x03\x02\x02\x02\u1517\u1509" +
		"\x03\x02\x02\x02\u1517\u150B\x03\x02\x02\x02\u1518\u01EB\x03\x02\x02\x02" +
		"\u1519\u151A\b\xF7\x01\x02\u151A\u1526\x05\u01B2\xDA\x02\u151B\u151C\x05" +
		"\u01B2\xDA\x02\u151C\u151D\x05\u01C8\xE5\x02\u151D\u151E\x05\u01B2\xDA" +
		"\x02\u151E\u1526\x03\x02\x02\x02\u151F\u1520\x07\u0300\x02\x02\u1520\u1521" +
		"\x05\u01EC\xF7\x02\u1521\u1522\x07\u0301\x02\x02\u1522\u1526\x03\x02\x02" +
		"\x02\u1523\u1524\x07\u016F\x02\x02\u1524\u1526\x05\u01EC\xF7\x03\u1525" +
		"\u1519\x03\x02\x02\x02\u1525\u151B\x03\x02\x02\x02\u1525\u151F\x03\x02" +
		"\x02\x02\u1525\u1523\x03\x02\x02\x02\u1526\u152F\x03\x02\x02\x02\u1527" +
		"\u1528\f\x05\x02\x02\u1528\u1529\x07\x19\x02\x02\u1529\u152E\x05\u01EC" +
		"\xF7\x06\u152A\u152B\f\x04\x02\x02\u152B\u152C\x07\u0189\x02\x02\u152C" +
		"\u152E\x05\u01EC\xF7\x05\u152D\u1527\x03\x02\x02\x02\u152D\u152A\x03\x02" +
		"\x02\x02\u152E\u1531\x03\x02\x02\x02\u152F\u152D\x03\x02\x02\x02\u152F" +
		"\u1530\x03\x02\x02\x02\u1530\u01ED\x03\x02\x02\x02\u1531\u152F\x03\x02" +
		"\x02\x02\u1532\u154D\x07\u02FF\x02\x02\u1533\u1535\t\b\x02\x02\u1534\u1533" +
		"\x03\x02\x02\x02\u1534\u1535\x03\x02\x02\x02\u1535\u1537\x03\x02\x02\x02" +
		"\u1536\u1538\x05\u0202\u0102\x02\u1537\u1536\x03\x02\x02\x02\u1537\u1538" +
		"\x03\x02\x02\x02\u1538\u1539\x03\x02\x02\x02\u1539\u154D\x05\u01DA\xEE" +
		"\x02\u153A\u153C\t\b\x02\x02\u153B\u153A\x03\x02\x02\x02\u153B\u153C\x03" +
		"\x02\x02\x02\u153C\u153E\x03\x02\x02\x02\u153D\u153F\x05\u0202\u0102\x02" +
		"\u153E\u153D\x03\x02\x02\x02\u153E\u153F\x03\x02\x02\x02\u153F\u1540\x03" +
		"\x02\x02\x02\u1540\u1541\x05\u01DA\xEE\x02\u1541\u1542\x03\x02\x02\x02" +
		"\u1542\u1543\x07\u018A\x02\x02\u1543\u1545\x078\x02\x02\u1544\u1546\t" +
		"\b\x02\x02\u1545\u1544\x03\x02\x02\x02\u1545\u1546\x03\x02\x02\x02\u1546" +
		"\u1548\x03\x02\x02\x02\u1547\u1549\x05\u0202\u0102\x02\u1548\u1547\x03" +
		"\x02\x02\x02\u1548\u1549\x03\x02\x02\x02\u1549\u154A\x03\x02\x02\x02\u154A" +
		"\u154B\x05\u01DA\xEE\x02\u154B\u154D\x03\x02\x02\x02\u154C\u1532\x03\x02" +
		"\x02\x02\u154C\u1534\x03\x02\x02\x02\u154C\u153B\x03\x02\x02\x02\u154D" +
		"\u01EF\x03\x02\x02\x02\u154E\u154F\x07\u016F\x02\x02\u154F\u1550\x07\u0174" +
		"\x02\x02\u1550\u01F1\x03\x02\x02\x02\u1551\u1553\x05\u01F0\xF9\x02\u1552" +
		"\u1551\x03\x02\x02\x02\u1553\u1554\x03\x02\x02\x02\u1554\u1552\x03\x02" +
		"\x02\x02\u1554\u1555\x03\x02\x02\x02\u1555\u01F3\x03\x02\x02\x02\u1556" +
		"\u1557\x07\u0288\x02\x02\u1557\u1558\x07\u0300\x02\x02\u1558\u1559\x05" +
		"\u01D4\xEB\x02\u1559\u155A\x07\u0301\x02\x02\u155A\u155C\x03\x02\x02\x02" +
		"\u155B\u1556\x03\x02\x02\x02\u155B\u155C\x03\x02\x02\x02\u155C\u1561\x03" +
		"\x02\x02\x02\u155D\u155E\x07\u0273\x02\x02\u155E\u155F\x07\u010E\x02\x02" +
		"\u155F\u1560\x07\u023C\x02\x02\u1560\u1562\x05\u0202\u0102\x02\u1561\u155D" +
		"\x03\x02\x02\x02\u1561\u1562\x03\x02\x02\x02\u1562\u01F5\x03\x02\x02\x02" +
		"\u1563\u1569\x05\u0202\u0102\x02\u1564\u1565\x07\u0300\x02\x02\u1565\u1566" +
		"\x05\u01B2\xDA\x02\u1566\u1567\x07\u0301\x02\x02\u1567\u1569\x03\x02\x02" +
		"\x02\u1568\u1563\x03\x02\x02\x02\u1568\u1564\x03\x02\x02\x02\u1569\u156B" +
		"\x03\x02\x02\x02\u156A\u156C\x05\u0202\u0102\x02\u156B\u156A\x03\x02\x02" +
		"\x02\u156B\u156C\x03\x02\x02\x02\u156C\u156E\x03\x02\x02\x02\u156D\u156F" +
		"\t2\x02\x02\u156E\u156D\x03\x02\x02\x02\u156E\u156F\x03\x02\x02\x02\u156F" +
		"\u1572\x03\x02\x02\x02\u1570\u1571\x07\u0177\x02\x02\u1571\u1573\t\"\x02" +
		"\x02\u1572\u1570\x03\x02\x02\x02\u1572\u1573\x03\x02\x02\x02\u1573\u01F7" +
		"\x03\x02\x02\x02\u1574\u1575\x07o\x02\x02\u1575\u1577\x05\u01CC\xE7\x02" +
		"\u1576\u1574\x03\x02\x02\x02\u1576\u1577\x03\x02\x02\x02\u1577\u15B9\x03" +
		"\x02\x02\x02\u1578\u1579\x07P\x02\x02\u1579\u157A\x07\u0300\x02\x02\u157A" +
		"\u157B\x05\u01B2\xDA\x02\u157B\u157E\x07\u0301\x02\x02\u157C\u157D\x07" +
		"\u0169\x02\x02\u157D\u157F\x07\u0295\x02\x02\u157E\u157C\x03\x02\x02\x02" +
		"\u157E\u157F\x03\x02\x02\x02\u157F\u15BA\x03\x02\x02\x02\u1580\u1581\x07" +
		"\u0265\x02\x02\u1581\u1582\x07\u0300\x02\x02\u1582\u1583\x05\u01D0\xE9" +
		"\x02\u1583\u1584\x07\u0301\x02\x02\u1584\u15BA\x03\x02\x02\x02\u1585\u1586" +
		"\x07\u01B6\x02\x02\u1586\u1587\x07\u0128\x02\x02\u1587\u1588\x07\u0300" +
		"\x02\x02\u1588\u1589\x05\u01D0\xE9\x02\u1589\u158A\x07\u0301\x02\x02\u158A" +
		"\u158B\x05\u01F4\xFB\x02\u158B\u15BA\x03\x02\x02\x02\u158C\u158F\x07\xCF" +
		"\x02\x02\u158D\u158E\x07\u0273\x02\x02\u158E\u1590\x05\u01DC\xEF\x02\u158F" +
		"\u158D\x03\x02\x02\x02\u158F\u1590\x03\x02\x02\x02\u1590\u1591\x03\x02" +
		"\x02\x02\u1591\u1592\x07\u0300\x02\x02\u1592\u1593\x05\u01F6\xFC\x02\u1593" +
		"\u1594\x07\u0288\x02\x02\u1594\u1595\x05\u01D0\xE9\x02\u1595\u1596\x07" +
		"\u0301\x02\x02\u1596\u1597\x05\u01F4\xFB\x02\u1597\u1598\x07\u0285\x02" +
		"\x02\u1598\u1599\x07\u0300\x02\x02\u1599\u159A\x05\u01EC\xF7\x02\u159A" +
		"\u159B\x07\u0301\x02\x02\u159B\u159D\x03\x02\x02\x02\u159C\u158C\x03\x02" +
		"\x02\x02\u159C\u159D\x03\x02\x02\x02\u159D\u15BA\x03\x02\x02\x02\u159E" +
		"\u159F\x07\xE7\x02\x02\u159F\u15A0\x07\u0128\x02\x02\u15A0\u15A1\x07\u0300" +
		"\x02\x02\u15A1\u15A2\x05\u01D0\xE9\x02\u15A2\u15A3\x07\u0301\x02\x02\u15A3" +
		"\u15A4\x07\u01C7\x02\x02\u15A4\u15A6\x05\u0202\u0102\x02\u15A5\u15A7\x05" +
		"\u01D0\xE9\x02\u15A6\u15A5\x03\x02\x02\x02\u15A6\u15A7\x03\x02\x02\x02" +
		"\u15A7\u15AD\x03\x02\x02\x02\u15A8\u15A9\x07\u0148\x02\x02\u15A9\u15AE" +
		"\x07\xEF\x02\x02\u15AA\u15AB\x07\u0148\x02\x02\u15AB\u15AE\x07\u01A0\x02" +
		"\x02\u15AC\u15AE\x07\u0149\x02\x02\u15AD\u15A8\x03\x02\x02\x02\u15AD\u15AA" +
		"\x03\x02\x02\x02\u15AD\u15AC\x03\x02\x02\x02\u15AD\u15AE\x03\x02\x02\x02" +
		"\u15AE\u15B2\x03\x02\x02\x02\u15AF\u15B0\x07\u0182\x02\x02\u15B0\u15B1" +
		"\x07\xA5\x02\x02\u15B1\u15B3\x05\u0202\u0102\x02\u15B2\u15AF\x03\x02\x02" +
		"\x02\u15B2\u15B3\x03\x02\x02\x02\u15B3\u15B7\x03\x02\x02\x02\u15B4\u15B5" +
		"\x07\u0182\x02\x02\u15B5\u15B6\x07\u026B\x02\x02\u15B6\u15B8\x05\u0202" +
		"\u0102\x02\u15B7\u15B4\x03\x02\x02\x02\u15B7\u15B8\x03\x02\x02\x02\u15B8" +
		"\u15BA\x03\x02\x02\x02\u15B9\u1578\x03\x02\x02\x02\u15B9\u1580\x03\x02" +
		"\x02\x02\u15B9\u1585\x03\x02\x02\x02\u15B9\u159C\x03\x02\x02\x02\u15B9" +
		"\u159E\x03\x02\x02\x02\u15BA\u15BF\x03\x02\x02\x02\u15BB\u15BD\x07\u016F" +
		"\x02\x02\u15BC\u15BB\x03\x02\x02\x02\u15BC\u15BD\x03\x02\x02\x02\u15BD" +
		"\u15BE\x03\x02\x02\x02\u15BE\u15C0\x07\x9F\x02\x02\u15BF\u15BC\x03\x02" +
		"\x02\x02\u15BF\u15C0\x03\x02\x02\x02\u15C0\u15C3\x03\x02\x02\x02\u15C1" +
		"\u15C2\x07\u0113\x02\x02\u15C2\u15C4\t\x19\x02\x02\u15C3\u15C1\x03\x02" +
		"\x02\x02\u15C3\u15C4\x03\x02\x02\x02\u15C4\u01F9\x03\x02\x02\x02\u15C5" +
		"\u15CA\x05\u01CC\xE7\x02\u15C6\u15CA\x07\x8F\x02\x02\u15C7\u15CA\x07\u0208" +
		"\x02\x02\u15C8\u15CA\x07\u01BB\x02\x02\u15C9\u15C5\x03\x02\x02\x02\u15C9" +
		"\u15C6\x03\x02\x02\x02\u15C9\u15C7\x03\x02\x02\x02\u15C9\u15C8\x03\x02" +
		"\x02\x02\u15CA\u01FB\x03\x02\x02\x02\u15CB\u15D0\x05\u01FA\xFE\x02\u15CC" +
		"\u15CD\x07\u02FA\x02\x02\u15CD\u15CF\x05\u01FA\xFE\x02\u15CE\u15CC\x03" +
		"\x02\x02\x02\u15CF\u15D2\x03\x02\x02\x02\u15D0\u15CE\x03\x02\x02\x02\u15D0" +
		"\u15D1\x03\x02\x02\x02\u15D1\u01FD\x03\x02\x02\x02\u15D2\u15D0\x03\x02" +
		"\x02\x02\u15D3\u15DF\x07\u0182\x02\x02\u15D4\u15DF\x07\u017E\x02\x02\u15D5" +
		"\u15DF\x07\u025B\x02\x02\u15D6\u15DF\x07\xDC\x02\x02\u15D7\u15DF\x07\u028F" +
		"\x02\x02\u15D8\u15DF\x07\u0169\x02\x02\u15D9\u15DF\x07\u016C\x02\x02\u15DA" +
		"\u15DF\x07\u030A\x02\x02\u15DB\u15DF\x07\u0306\x02\x02\u15DC\u15DF\x07" +
		"\u0307\x02\x02\u15DD\u15DF\x05\u0202\u0102\x02\u15DE\u15D3\x03\x02\x02" +
		"\x02\u15DE\u15D4\x03\x02\x02\x02\u15DE\u15D5\x03\x02\x02\x02\u15DE\u15D6" +
		"\x03\x02\x02\x02\u15DE\u15D7\x03\x02\x02\x02\u15DE\u15D8\x03\x02\x02\x02" +
		"\u15DE\u15D9\x03\x02\x02\x02\u15DE\u15DA\x03\x02\x02\x02\u15DE\u15DB\x03" +
		"\x02\x02\x02\u15DE\u15DC\x03\x02\x02\x02\u15DE\u15DD\x03\x02\x02\x02\u15DF" +
		"\u01FF\x03\x02\x02\x02\u15E0\u15E1\t3\x02\x02\u15E1\u0201\x03\x02\x02" +
		"\x02\u15E2\u15E3\b\u0102\x01\x02\u15E3\u15E9\x05\u0200\u0101\x02\u15E4" +
		"\u15E9\x07\u030B\x02\x02\u15E5\u15E9\x07\u030C\x02\x02\u15E6\u15E9\x05" +
		"\u01C4\xE3\x02\u15E7\u15E9\x07\u030E\x02\x02\u15E8\u15E2\x03\x02\x02\x02" +
		"\u15E8\u15E4\x03\x02\x02\x02\u15E8\u15E5\x03\x02\x02\x02\u15E8\u15E6\x03" +
		"\x02\x02\x02\u15E8\u15E7\x03\x02\x02\x02\u15E9\u15EF\x03\x02\x02\x02\u15EA" +
		"\u15EB\f\x05\x02\x02\u15EB\u15EC\x07\u0309\x02\x02\u15EC\u15EE\x05\u0202" +
		"\u0102\x06\u15ED\u15EA\x03\x02\x02\x02\u15EE\u15F1\x03\x02\x02\x02\u15EF" +
		"\u15ED\x03\x02\x02\x02\u15EF\u15F0\x03\x02\x02\x02\u15F0\u0203\x03\x02" +
		"\x02\x02\u15F1\u15EF\x03\x02\x02\x02\u15F2\u15F3\v\x02\x02\x02\u15F3\u0205" +
		"\x03\x02\x02\x02\u15F4\u15F5\x05\u0202\u0102\x02\u15F5\u0207\x03\x02\x02" +
		"\x02\u15F6\u15F7\x05\u0202\u0102\x02\u15F7\u0209\x03\x02\x02\x02\u15F8" +
		"\u15F9\x05\u0202\u0102\x02\u15F9\u020B\x03\x02\x02\x02\u15FA\u15FB\x05" +
		"\u0202\u0102\x02\u15FB\u020D\x03\x02\x02\x02\u15FC\u15FD\x05\u0202\u0102" +
		"\x02\u15FD\u020F\x03\x02\x02\x02\u15FE\u15FF\x05\u0202\u0102\x02\u15FF" +
		"\u0211\x03\x02\x02\x02\u1600\u1601\x05\u0202\u0102\x02\u1601\u0213\x03" +
		"\x02\x02\x02\u02B5\u0219\u021D\u0255\u0281\u02A1\u02BE\u02D5\u02E3\u02F3" +
		"\u02FC\u0300\u0327\u0335\u0340\u034A\u0352\u035B\u0361\u0367\u036A\u036E" +
		"\u0372\u0376\u037A\u037F\u0385\u0389\u0392\u039A\u03A3\u03AC\u03B6\u03C0" +
		"\u03C9\u03CE\u03D4\u03DD\u03E1\u03E8\u03EF\u0409\u040B\u0412\u041A\u041D" +
		"\u0421\u042A\u042D\u0431\u0435\u0440\u044C\u0453\u046C\u0472\u047D\u0490" +
		"\u049C\u04AC\u04B2\u04B4\u04B8\u04C2\u04CB\u04CD\u04D8\u04F3\u04FF\u0513" +
		"\u0517\u051C\u051E\u0526\u0530\u053A\u0554\u0568\u056F\u0575\u057A\u0587" +
		"\u058C\u0593\u0599\u059E\u05A9\u05AE\u05B6\u05BB\u05BF\u05D9\u05DB\u05E1" +
		"\u05E6\u05EA\u05EE\u05F2\u05F6\u0600\u0607\u0617\u0621\u0631\u0644\u0650" +
		"\u0672\u0682\u0695\u06A7\u06E4\u0704\u071C\u0731\u0747\u074E\u0783\u0793" +
		"\u0796\u07A6\u07AC\u07B0\u07B6\u07BC\u07C2\u07C8\u07CE\u07D4\u07DA\u07E0" +
		"\u07E6\u07EA\u07F0\u07F6\u07FC\u0805\u0808\u080B\u0810\u0813\u0823\u0829" +
		"\u082D\u0833\u0839\u083D\u0854\u085A\u085E\u0864\u086A\u0870\u0876\u087C" +
		"\u0882\u0888\u088E\u0894\u0898\u089E\u08A4\u08A8\u08B8\u08BE\u08C4\u08D8" +
		"\u08DF\u08E7\u08F3\u08F9\u08FD\u090C\u0911\u0916\u091B\u0920\u0925\u092A" +
		"\u092F\u0935\u093A\u093E\u0948\u094E\u0956\u0958\u0963\u096B\u0976\u0984" +
		"\u0990\u0992\u0999\u09A0\u09A8\u09B3\u09B7\u09BC\u09C5\u09CA\u09D3\u09E2" +
		"\u09F7\u09F9\u09FB\u09FF\u0A03\u0A08\u0A0B\u0A11\u0A15\u0A19\u0A1E\u0A21" +
		"\u0A28\u0A2B\u0A2E\u0A36\u0A3A\u0A3C\u0A44\u0A4B\u0A4E\u0A52\u0A58\u0A5B" +
		"\u0A68\u0A6E\u0A74\u0A7A\u0A80\u0A86\u0A8A\u0A8E\u0A9B\u0AA3\u0AA7\u0AB0" +
		"\u0AB7\u0AC0\u0AC8\u0AD9\u0ADD\u0AE4\u0AEC\u0AF2\u0B06\u0B1B\u0B1D\u0B1F" +
		"\u0B26\u0B31\u0B35\u0B39\u0B40\u0B43\u0B4A\u0B54\u0B5D\u0B61\u0B67\u0B6C" +
		"\u0B6F\u0B75\u0B7B\u0B7F\u0B82\u0B86\u0B89\u0B8C\u0B95\u0B97\u0BBA\u0BBD" +
		"\u0BC0\u0BC8\u0BCF\u0BD4\u0BD8\u0BDC\u0BE3\u0BE8\u0BEC\u0BEF\u0BF2\u0BF6" +
		"\u0BFD\u0C00\u0C2E\u0C35\u0C39\u0C3F\u0C4A\u0C52\u0C58\u0C5C\u0C62\u0C66" +
		"\u0C6C\u0C74\u0C78\u0C7F\u0C83\u0C89\u0C8D\u0C95\u0C99\u0CA0\u0CA4\u0CAA" +
		"\u0CAE\u0CB4\u0CBB\u0CBF\u0CC3\u0CC7\u0CCC\u0CD0\u0CD7\u0CDB\u0CE4\u0CEA" +
		"\u0CF1\u0CF7\u0CFE\u0D04\u0D0A\u0D10\u0D14\u0D1A\u0D22\u0D28\u0D2E\u0D32" +
		"\u0D38\u0D3C\u0D42\u0D46\u0D4C\u0D54\u0D58\u0D5E\u0D62\u0D68\u0D72\u0D76" +
		"\u0D7E\u0D82\u0D8A\u0D8E\u0D96\u0D9A\u0DA0\u0DAC\u0DB2\u0DB8\u0DBC\u0DC2" +
		"\u0DCB\u0DD3\u0DDC\u0DE0\u0DE5\u0DE9\u0DEC\u0DF5\u0DFA\u0E05\u0E0E\u0E15" +
		"\u0E1B\u0E1F\u0E22\u0E28\u0E30\u0E35\u0E38\u0E41\u0E43\u0E45\u0E48\u0E51" +
		"\u0E54\u0E58\u0E6B\u0E6E\u0E71\u0E80\u0E84\u0E86\u0E89\u0E8B\u0E93\u0E9B" +
		"\u0EA3\u0EAF\u0EB5\u0EB9\u0EC0\u0EC8\u0ECF\u0ED6\u0EDC\u0EE4\u0EE8\u0EF3" +
		"\u0F18\u0F2C\u0F32\u0F37\u0F3B\u0F3F\u0F44\u0F4A\u0F4E\u0F51\u0F54\u0F57" +
		"\u0F5A\u0F5D\u0F60\u0F63\u0F66\u0F69\u0F6C\u0F6F\u0F75\u0F78\u0F7C\u0F80" +
		"\u0F84\u0F89\u0F8F\u0F93\u0F96\u0F99\u0F9C\u0F9F\u0FA2\u0FA5\u0FA8\u0FAB" +
		"\u0FAE\u0FB1\u0FB5\u0FBC\u0FC4\u0FCD\u0FD3\u0FD9\u0FDD\u0FE4\u0FE6\u0FEC" +
		"\u0FF2\u0FF7\u0FFB\u1008\u100F\u1012\u1019\u1029\u1030\u1034\u1037\u103B" +
		"\u103F\u1042\u1046\u1049\u104E\u1051\u1055\u1059\u105C\u105F\u1064\u106B" +
		"\u106E\u1077\u107F\u1086\u108A\u108D\u1090\u1093\u1097\u109A\u109D\u10A5" +
		"\u10A7\u10A9\u10AC\u10B3\u10B9\u10BD\u10C0\u10C3\u10C6\u10C9\u10CC\u10D2" +
		"\u10D4\u10DE\u10EB\u10F6\u10FB\u10FF\u1107\u110F\u111A\u111F\u1122\u1125" +
		"\u112A\u112D\u1130\u1134\u1139\u113D\u1149\u1157\u1161\u1165\u1170\u1175" +
		"\u117A\u117F\u1183\u118C\u1191\u1197\u11A1\u11A4\u11AA\u11AF\u11B4\u11C1" +
		"\u11C9\u11CC\u11D1\u11D3\u11DB\u11E5\u11E7\u11FE\u1206\u1236\u1248\u124D" +
		"\u125D\u126F\u1274\u1278\u127D\u1284\u1291\u1299\u129B\u12A3\u12AB\u12AD" +
		"\u12B9\u12BD\u12C9\u12CD\u12D1\u12D9\u12DF\u12E6\u12EA\u12ED\u12F0\u12F3" +
		"\u12FA\u1302\u1309\u1314\u131A\u1324\u132A\u1330\u133B\u1349\u134C\u135B" +
		"\u136D\u1372\u1378\u137D\u1383\u1389\u1393\u1399\u139C\u13A4\u13A9\u13B0" +
		"\u13B4\u13BD\u13C9\u13D2\u13D5\u13E3\u13E5\u13E9\u13F0\u13F8\u13FE\u1405" +
		"\u140C\u1410\u1415\u141D\u1422\u1433\u1439\u143B\u1446\u144A\u1453\u1456" +
		"\u145C\u1460\u1463\u146D\u1476\u1478\u147B\u1481\u148A\u148F\u1492\u1497" +
		"\u149A\u149D\u14A7\u14AD\u14BB\u14C0\u14C4\u14C8\u14CC\u14D0\u14D3\u14D7" +
		"\u14DB\u14E3\u14E6\u14E9\u14F0\u14F3\u14F8\u14FD\u1502\u1507\u1512\u1517" +
		"\u1525\u152D\u152F\u1534\u1537\u153B\u153E\u1545\u1548\u154C\u1554\u155B" +
		"\u1561\u1568\u156B\u156E\u1572\u1576\u157E\u158F\u159C\u15A6\u15AD\u15B2" +
		"\u15B7\u15B9\u15BC\u15BF\u15C3\u15C9\u15D0\u15DE\u15E8\u15EF";
	public static readonly _serializedATN: string = Utils.join(
		[
			PostgreSQLParserParser._serializedATNSegment0,
			PostgreSQLParserParser._serializedATNSegment1,
			PostgreSQLParserParser._serializedATNSegment2,
			PostgreSQLParserParser._serializedATNSegment3,
			PostgreSQLParserParser._serializedATNSegment4,
			PostgreSQLParserParser._serializedATNSegment5,
			PostgreSQLParserParser._serializedATNSegment6,
			PostgreSQLParserParser._serializedATNSegment7,
			PostgreSQLParserParser._serializedATNSegment8,
			PostgreSQLParserParser._serializedATNSegment9,
			PostgreSQLParserParser._serializedATNSegment10,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!PostgreSQLParserParser.__ATN) {
			PostgreSQLParserParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(PostgreSQLParserParser._serializedATN));
		}

		return PostgreSQLParserParser.__ATN;
	}

}

export class RootContext extends ParserRuleContext {
	public stmt(): StmtContext[];
	public stmt(i: number): StmtContext;
	public stmt(i?: number): StmtContext | StmtContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StmtContext);
		} else {
			return this.getRuleContext(i, StmtContext);
		}
	}
	public EOF(): TerminalNode { return this.getToken(PostgreSQLParserParser.EOF, 0); }
	public SEMI(): TerminalNode[];
	public SEMI(i: number): TerminalNode;
	public SEMI(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.SEMI);
		} else {
			return this.getToken(PostgreSQLParserParser.SEMI, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_root; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRoot) {
			listener.enterRoot(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRoot) {
			listener.exitRoot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRoot) {
			return visitor.visitRoot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StmtContext extends ParserRuleContext {
	public abort_stmt(): Abort_stmtContext | undefined {
		return this.tryGetRuleContext(0, Abort_stmtContext);
	}
	public alter_stmt(): Alter_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_stmtContext);
	}
	public analyze_stmt(): Analyze_stmtContext | undefined {
		return this.tryGetRuleContext(0, Analyze_stmtContext);
	}
	public create_stmt(): Create_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_stmtContext);
	}
	public close_stmt(): Close_stmtContext | undefined {
		return this.tryGetRuleContext(0, Close_stmtContext);
	}
	public cluster_stmt(): Cluster_stmtContext | undefined {
		return this.tryGetRuleContext(0, Cluster_stmtContext);
	}
	public comment_stmt(): Comment_stmtContext | undefined {
		return this.tryGetRuleContext(0, Comment_stmtContext);
	}
	public commit_stmt(): Commit_stmtContext | undefined {
		return this.tryGetRuleContext(0, Commit_stmtContext);
	}
	public commit_prepared_stmt(): Commit_prepared_stmtContext | undefined {
		return this.tryGetRuleContext(0, Commit_prepared_stmtContext);
	}
	public copy_stmt(): Copy_stmtContext | undefined {
		return this.tryGetRuleContext(0, Copy_stmtContext);
	}
	public deallocate_stmt(): Deallocate_stmtContext | undefined {
		return this.tryGetRuleContext(0, Deallocate_stmtContext);
	}
	public declare_stmt(): Declare_stmtContext | undefined {
		return this.tryGetRuleContext(0, Declare_stmtContext);
	}
	public delete_stmt(): Delete_stmtContext | undefined {
		return this.tryGetRuleContext(0, Delete_stmtContext);
	}
	public discard_stmt(): Discard_stmtContext | undefined {
		return this.tryGetRuleContext(0, Discard_stmtContext);
	}
	public drop_stmt(): Drop_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_stmtContext);
	}
	public execute_stmt(): Execute_stmtContext | undefined {
		return this.tryGetRuleContext(0, Execute_stmtContext);
	}
	public explain_stmt(): Explain_stmtContext | undefined {
		return this.tryGetRuleContext(0, Explain_stmtContext);
	}
	public fetch_stmt(): Fetch_stmtContext | undefined {
		return this.tryGetRuleContext(0, Fetch_stmtContext);
	}
	public grant_stmt(): Grant_stmtContext | undefined {
		return this.tryGetRuleContext(0, Grant_stmtContext);
	}
	public import_foreign_schema_stmt(): Import_foreign_schema_stmtContext | undefined {
		return this.tryGetRuleContext(0, Import_foreign_schema_stmtContext);
	}
	public insert_stmt(): Insert_stmtContext | undefined {
		return this.tryGetRuleContext(0, Insert_stmtContext);
	}
	public listen_stmt(): Listen_stmtContext | undefined {
		return this.tryGetRuleContext(0, Listen_stmtContext);
	}
	public load_stmt(): Load_stmtContext | undefined {
		return this.tryGetRuleContext(0, Load_stmtContext);
	}
	public lock_stmt(): Lock_stmtContext | undefined {
		return this.tryGetRuleContext(0, Lock_stmtContext);
	}
	public move_stmt(): Move_stmtContext | undefined {
		return this.tryGetRuleContext(0, Move_stmtContext);
	}
	public notify_stmt(): Notify_stmtContext | undefined {
		return this.tryGetRuleContext(0, Notify_stmtContext);
	}
	public prepare_stmt(): Prepare_stmtContext | undefined {
		return this.tryGetRuleContext(0, Prepare_stmtContext);
	}
	public prepare_transaction_stmt(): Prepare_transaction_stmtContext | undefined {
		return this.tryGetRuleContext(0, Prepare_transaction_stmtContext);
	}
	public reassign_owned_stmt(): Reassign_owned_stmtContext | undefined {
		return this.tryGetRuleContext(0, Reassign_owned_stmtContext);
	}
	public refresh_materialized_view_stmt(): Refresh_materialized_view_stmtContext | undefined {
		return this.tryGetRuleContext(0, Refresh_materialized_view_stmtContext);
	}
	public reindex_stmt(): Reindex_stmtContext | undefined {
		return this.tryGetRuleContext(0, Reindex_stmtContext);
	}
	public release_savepoint_stmt(): Release_savepoint_stmtContext | undefined {
		return this.tryGetRuleContext(0, Release_savepoint_stmtContext);
	}
	public reset_stmt(): Reset_stmtContext | undefined {
		return this.tryGetRuleContext(0, Reset_stmtContext);
	}
	public revoke_stmt(): Revoke_stmtContext | undefined {
		return this.tryGetRuleContext(0, Revoke_stmtContext);
	}
	public rollback_stmt(): Rollback_stmtContext | undefined {
		return this.tryGetRuleContext(0, Rollback_stmtContext);
	}
	public rollback_prepared_stmt(): Rollback_prepared_stmtContext | undefined {
		return this.tryGetRuleContext(0, Rollback_prepared_stmtContext);
	}
	public rollback_to_savepoint_stmt(): Rollback_to_savepoint_stmtContext | undefined {
		return this.tryGetRuleContext(0, Rollback_to_savepoint_stmtContext);
	}
	public savepoint_stmt(): Savepoint_stmtContext | undefined {
		return this.tryGetRuleContext(0, Savepoint_stmtContext);
	}
	public security_label_stmt(): Security_label_stmtContext | undefined {
		return this.tryGetRuleContext(0, Security_label_stmtContext);
	}
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public select_into_stmt(): Select_into_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_into_stmtContext);
	}
	public set_stmt(): Set_stmtContext | undefined {
		return this.tryGetRuleContext(0, Set_stmtContext);
	}
	public set_constraints_stmt(): Set_constraints_stmtContext | undefined {
		return this.tryGetRuleContext(0, Set_constraints_stmtContext);
	}
	public set_role_stmt(): Set_role_stmtContext | undefined {
		return this.tryGetRuleContext(0, Set_role_stmtContext);
	}
	public set_session_authorization_stmt(): Set_session_authorization_stmtContext | undefined {
		return this.tryGetRuleContext(0, Set_session_authorization_stmtContext);
	}
	public set_transaction_stmt(): Set_transaction_stmtContext | undefined {
		return this.tryGetRuleContext(0, Set_transaction_stmtContext);
	}
	public show_stmt(): Show_stmtContext | undefined {
		return this.tryGetRuleContext(0, Show_stmtContext);
	}
	public truncate_stmt(): Truncate_stmtContext | undefined {
		return this.tryGetRuleContext(0, Truncate_stmtContext);
	}
	public unlisten_stmt(): Unlisten_stmtContext | undefined {
		return this.tryGetRuleContext(0, Unlisten_stmtContext);
	}
	public update_stmt(): Update_stmtContext | undefined {
		return this.tryGetRuleContext(0, Update_stmtContext);
	}
	public vacuum_stmt(): Vacuum_stmtContext | undefined {
		return this.tryGetRuleContext(0, Vacuum_stmtContext);
	}
	public values_stmt(): Values_stmtContext | undefined {
		return this.tryGetRuleContext(0, Values_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt) {
			listener.enterStmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt) {
			listener.exitStmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt) {
			return visitor.visitStmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Abort_stmtContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_abort_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAbort_stmt) {
			listener.enterAbort_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAbort_stmt) {
			listener.exitAbort_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAbort_stmt) {
			return visitor.visitAbort_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_stmtContext extends ParserRuleContext {
	public alter_aggregate_stmt(): Alter_aggregate_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_aggregate_stmtContext);
	}
	public alter_collation_stmt(): Alter_collation_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_collation_stmtContext);
	}
	public alter_conversion_stmt(): Alter_conversion_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_conversion_stmtContext);
	}
	public alter_database_stmt(): Alter_database_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_database_stmtContext);
	}
	public alter_default_privileges_stmt(): Alter_default_privileges_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_default_privileges_stmtContext);
	}
	public alter_domain_stmt(): Alter_domain_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_domain_stmtContext);
	}
	public alter_event_trigger_stmt(): Alter_event_trigger_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_event_trigger_stmtContext);
	}
	public alter_extension_stmt(): Alter_extension_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_extension_stmtContext);
	}
	public alter_foreign_data_wrapper_stmt(): Alter_foreign_data_wrapper_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_foreign_data_wrapper_stmtContext);
	}
	public alter_foreign_table_stmt(): Alter_foreign_table_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_foreign_table_stmtContext);
	}
	public alter_function_stmt(): Alter_function_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_function_stmtContext);
	}
	public alter_group_stmt(): Alter_group_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_group_stmtContext);
	}
	public alter_index_stmt(): Alter_index_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_index_stmtContext);
	}
	public alter_language_stmt(): Alter_language_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_language_stmtContext);
	}
	public alter_large_object_stmt(): Alter_large_object_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_large_object_stmtContext);
	}
	public alter_materialize_view_stmt(): Alter_materialize_view_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_materialize_view_stmtContext);
	}
	public alter_operator_stmt(): Alter_operator_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_operator_stmtContext);
	}
	public alter_operator_class_stmt(): Alter_operator_class_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_operator_class_stmtContext);
	}
	public alter_operator_family_stmt(): Alter_operator_family_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_operator_family_stmtContext);
	}
	public alter_policy_stmt(): Alter_policy_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_policy_stmtContext);
	}
	public alter_publication_stmt(): Alter_publication_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_publication_stmtContext);
	}
	public alter_role_stmt(): Alter_role_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_role_stmtContext);
	}
	public alter_rule_stmt(): Alter_rule_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_rule_stmtContext);
	}
	public alter_schema_stmt(): Alter_schema_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_schema_stmtContext);
	}
	public alter_sequence_stmt(): Alter_sequence_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_sequence_stmtContext);
	}
	public alter_server_stmt(): Alter_server_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_server_stmtContext);
	}
	public alter_statistics_stmt(): Alter_statistics_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_statistics_stmtContext);
	}
	public alter_subscription_stmt(): Alter_subscription_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_subscription_stmtContext);
	}
	public alter_system_stmt(): Alter_system_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_system_stmtContext);
	}
	public alter_table_stmt(): Alter_table_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_table_stmtContext);
	}
	public alter_tablespace_stmt(): Alter_tablespace_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_tablespace_stmtContext);
	}
	public alter_text_search_config_stmt(): Alter_text_search_config_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_text_search_config_stmtContext);
	}
	public alter_text_search_dict_stmt(): Alter_text_search_dict_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_text_search_dict_stmtContext);
	}
	public alter_text_search_parser_stmt(): Alter_text_search_parser_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_text_search_parser_stmtContext);
	}
	public alter_text_search_template_stmt(): Alter_text_search_template_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_text_search_template_stmtContext);
	}
	public alter_trigger_stmt(): Alter_trigger_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_trigger_stmtContext);
	}
	public alter_type_stmt(): Alter_type_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_type_stmtContext);
	}
	public alter_user_stmt(): Alter_user_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_user_stmtContext);
	}
	public alter_user_mapping_stmt(): Alter_user_mapping_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_user_mapping_stmtContext);
	}
	public alter_view_stmt(): Alter_view_stmtContext | undefined {
		return this.tryGetRuleContext(0, Alter_view_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_stmt) {
			listener.enterAlter_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_stmt) {
			listener.exitAlter_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_stmt) {
			return visitor.visitAlter_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_aggregate_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _new_owner!: Role_nameContext;
	public _new_schema!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public AGGREGATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.AGGREGATE, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public aggregate_signature(): Aggregate_signatureContext {
		return this.getRuleContext(0, Aggregate_signatureContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_aggregate_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_aggregate_stmt) {
			listener.enterAlter_aggregate_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_aggregate_stmt) {
			listener.exitAlter_aggregate_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_aggregate_stmt) {
			return visitor.visitAlter_aggregate_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_collation_stmtContext extends ParserRuleContext {
	public _name!: Name_Context;
	public _new_name!: IdentifierContext;
	public _new_owner!: Role_nameContext;
	public _new_schema!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public COLLATION(): TerminalNode { return this.getToken(PostgreSQLParserParser.COLLATION, 0); }
	public REFRESH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REFRESH, 0); }
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VERSION, 0); }
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_collation_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_collation_stmt) {
			listener.enterAlter_collation_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_collation_stmt) {
			listener.exitAlter_collation_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_collation_stmt) {
			return visitor.visitAlter_collation_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_conversion_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _new_owner!: Role_nameContext;
	public _new_schema!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public CONVERSION(): TerminalNode { return this.getToken(PostgreSQLParserParser.CONVERSION, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_conversion_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_conversion_stmt) {
			listener.enterAlter_conversion_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_conversion_stmt) {
			listener.exitAlter_conversion_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_conversion_stmt) {
			return visitor.visitAlter_conversion_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_database_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_database_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_database_stmt) {
			listener.enterAlter_database_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_database_stmt) {
			listener.exitAlter_database_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_database_stmt) {
			return visitor.visitAlter_database_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_default_privileges_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_default_privileges_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_default_privileges_stmt) {
			listener.enterAlter_default_privileges_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_default_privileges_stmt) {
			listener.exitAlter_default_privileges_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_default_privileges_stmt) {
			return visitor.visitAlter_default_privileges_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_domain_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _constraint_name!: IdentifierContext;
	public _new_constraint_name!: IdentifierContext;
	public _new_owner!: Role_nameContext;
	public _new_name!: IdentifierContext;
	public _new_schema!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public DOMAIN(): TerminalNode { return this.getToken(PostgreSQLParserParser.DOMAIN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFAULT, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DROP, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NULL, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ADD, 0); }
	public domain_constraint(): Domain_constraintContext | undefined {
		return this.tryGetRuleContext(0, Domain_constraintContext);
	}
	public VALID(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALID, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONSTRAINT, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public VALIDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALIDATE, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_domain_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_domain_stmt) {
			listener.enterAlter_domain_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_domain_stmt) {
			listener.exitAlter_domain_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_domain_stmt) {
			return visitor.visitAlter_domain_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_event_trigger_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _new_owner!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public EVENT(): TerminalNode { return this.getToken(PostgreSQLParserParser.EVENT, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(PostgreSQLParserParser.TRIGGER, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DISABLE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ENABLE, 0); }
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REPLICA, 0); }
	public ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALWAYS, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_USER, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION_USER, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_event_trigger_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_event_trigger_stmt) {
			listener.enterAlter_event_trigger_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_event_trigger_stmt) {
			listener.exitAlter_event_trigger_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_event_trigger_stmt) {
			return visitor.visitAlter_event_trigger_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_extension_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _new_version!: IdentifierContext;
	public _new_schema!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public EXTENSION(): TerminalNode { return this.getToken(PostgreSQLParserParser.EXTENSION, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UPDATE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_extension_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_extension_stmt) {
			listener.enterAlter_extension_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_extension_stmt) {
			listener.exitAlter_extension_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_extension_stmt) {
			return visitor.visitAlter_extension_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_foreign_data_wrapper_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_foreign_data_wrapper_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_foreign_data_wrapper_stmt) {
			listener.enterAlter_foreign_data_wrapper_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_foreign_data_wrapper_stmt) {
			listener.exitAlter_foreign_data_wrapper_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_foreign_data_wrapper_stmt) {
			return visitor.visitAlter_foreign_data_wrapper_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_foreign_table_actionContext extends ParserRuleContext {
	public _column_name_!: Column_nameContext;
	public _data_type_!: Data_typeContext;
	public _collation!: IdentifierContext;
	public _column_constraints_!: Column_constraintsContext;
	public _attribute_values!: Option_listContext;
	public _attributes!: Identifier_listContext;
	public _constraint_name!: Todo_fill_inContext;
	public _trigger_name!: Todo_fill_inContext;
	public _parent_table!: IdentifierContext;
	public _new_owner!: Role_nameContext;
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ADD, 0); }
	public column_name(): Column_nameContext | undefined {
		return this.tryGetRuleContext(0, Column_nameContext);
	}
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COLUMN, 0); }
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COLLATE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public column_constraints(): Column_constraintsContext | undefined {
		return this.tryGetRuleContext(0, Column_constraintsContext);
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DROP, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALTER, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TYPE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DATA, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFAULT, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NULL, 0); }
	public STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STATISTICS, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public option_list(): Option_listContext | undefined {
		return this.tryGetRuleContext(0, Option_listContext);
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESET, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STORAGE, 0); }
	public PLAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PLAIN, 0); }
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXTERNAL, 0); }
	public EXTENDED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXTENDED, 0); }
	public MAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MAIN, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPTIONS, 0); }
	public table_constraint(): Table_constraintContext | undefined {
		return this.tryGetRuleContext(0, Table_constraintContext);
	}
	public VALID(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALID, 0); }
	public VALIDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALIDATE, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONSTRAINT, 0); }
	public todo_fill_in(): Todo_fill_inContext | undefined {
		return this.tryGetRuleContext(0, Todo_fill_inContext);
	}
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DISABLE, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRIGGER, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USER, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ENABLE, 0); }
	public REPLICA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REPLICA, 0); }
	public ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALWAYS, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public OIDS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OIDS, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITHOUT, 0); }
	public INHERIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INHERIT, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NO, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_foreign_table_action; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_foreign_table_action) {
			listener.enterAlter_foreign_table_action(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_foreign_table_action) {
			listener.exitAlter_foreign_table_action(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_foreign_table_action) {
			return visitor.visitAlter_foreign_table_action(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_foreign_table_action_listContext extends ParserRuleContext {
	public alter_foreign_table_action(): Alter_foreign_table_actionContext[];
	public alter_foreign_table_action(i: number): Alter_foreign_table_actionContext;
	public alter_foreign_table_action(i?: number): Alter_foreign_table_actionContext | Alter_foreign_table_actionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_foreign_table_actionContext);
		} else {
			return this.getRuleContext(i, Alter_foreign_table_actionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_foreign_table_action_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_foreign_table_action_list) {
			listener.enterAlter_foreign_table_action_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_foreign_table_action_list) {
			listener.exitAlter_foreign_table_action_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_foreign_table_action_list) {
			return visitor.visitAlter_foreign_table_action_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_foreign_table_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _actions!: Alter_foreign_table_action_listContext;
	public _column_name_!: Column_nameContext;
	public _new_column_name!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _new_schama!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public FOREIGN(): TerminalNode { return this.getToken(PostgreSQLParserParser.FOREIGN, 0); }
	public TABLE(): TerminalNode { return this.getToken(PostgreSQLParserParser.TABLE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public alter_foreign_table_action_list(): Alter_foreign_table_action_listContext | undefined {
		return this.tryGetRuleContext(0, Alter_foreign_table_action_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ONLY, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STAR, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public column_name(): Column_nameContext | undefined {
		return this.tryGetRuleContext(0, Column_nameContext);
	}
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COLUMN, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_foreign_table_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_foreign_table_stmt) {
			listener.enterAlter_foreign_table_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_foreign_table_stmt) {
			listener.exitAlter_foreign_table_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_foreign_table_stmt) {
			return visitor.visitAlter_foreign_table_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_function_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_function_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_function_stmt) {
			listener.enterAlter_function_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_function_stmt) {
			listener.exitAlter_function_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_function_stmt) {
			return visitor.visitAlter_function_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_group_stmtContext extends ParserRuleContext {
	public _role!: Role_nameContext;
	public _users!: Identifier_listContext;
	public _group_name!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public GROUP(): TerminalNode { return this.getToken(PostgreSQLParserParser.GROUP, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ADD, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USER, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DROP, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_group_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_group_stmt) {
			listener.enterAlter_group_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_group_stmt) {
			listener.exitAlter_group_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_group_stmt) {
			return visitor.visitAlter_group_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_index_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _tablespace_name!: IdentifierContext;
	public _extension_name!: IdentifierContext;
	public _roles!: Identifier_listContext;
	public _new_tablespace!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public INDEX(): TerminalNode { return this.getToken(PostgreSQLParserParser.INDEX, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public TABLESPACE(): TerminalNode[];
	public TABLESPACE(i: number): TerminalNode;
	public TABLESPACE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.TABLESPACE);
		} else {
			return this.getToken(PostgreSQLParserParser.TABLESPACE, i);
		}
	}
	public DEPENDS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEPENDS, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ON, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXTENSION, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public option_list(): Option_listContext | undefined {
		return this.tryGetRuleContext(0, Option_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESET, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IN, 0); }
	public OWNED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNED, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BY, 0); }
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOWAIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_index_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_index_stmt) {
			listener.enterAlter_index_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_index_stmt) {
			listener.exitAlter_index_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_index_stmt) {
			return visitor.visitAlter_index_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_language_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _new_owner!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public LANGUAGE(): TerminalNode { return this.getToken(PostgreSQLParserParser.LANGUAGE, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode { return this.getToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PROCEDURAL, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_USER, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION_USER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_language_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_language_stmt) {
			listener.enterAlter_language_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_language_stmt) {
			listener.exitAlter_language_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_language_stmt) {
			return visitor.visitAlter_language_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_large_object_stmtContext extends ParserRuleContext {
	public _large_object_oid!: Token;
	public _new_owner!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public LARGE(): TerminalNode { return this.getToken(PostgreSQLParserParser.LARGE, 0); }
	public OBJECT(): TerminalNode { return this.getToken(PostgreSQLParserParser.OBJECT, 0); }
	public OWNER(): TerminalNode { return this.getToken(PostgreSQLParserParser.OWNER, 0); }
	public TO(): TerminalNode { return this.getToken(PostgreSQLParserParser.TO, 0); }
	public INTEGER_LITERAL(): TerminalNode { return this.getToken(PostgreSQLParserParser.INTEGER_LITERAL, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_USER, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION_USER, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_large_object_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_large_object_stmt) {
			listener.enterAlter_large_object_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_large_object_stmt) {
			listener.exitAlter_large_object_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_large_object_stmt) {
			return visitor.visitAlter_large_object_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_materialize_view_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_materialize_view_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_materialize_view_stmt) {
			listener.enterAlter_materialize_view_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_materialize_view_stmt) {
			listener.exitAlter_materialize_view_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_materialize_view_stmt) {
			return visitor.visitAlter_materialize_view_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_operator_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_operator_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_operator_stmt) {
			listener.enterAlter_operator_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_operator_stmt) {
			listener.exitAlter_operator_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_operator_stmt) {
			return visitor.visitAlter_operator_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_operator_class_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _new_owner!: IdentifierContext;
	public _new_schema!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPERATOR, 0); }
	public CLASS(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLASS, 0); }
	public USING(): TerminalNode { return this.getToken(PostgreSQLParserParser.USING, 0); }
	public index_method(): Index_methodContext {
		return this.getRuleContext(0, Index_methodContext);
	}
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_USER, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION_USER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_operator_class_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_operator_class_stmt) {
			listener.enterAlter_operator_class_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_operator_class_stmt) {
			listener.exitAlter_operator_class_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_operator_class_stmt) {
			return visitor.visitAlter_operator_class_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_operator_family_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_operator_family_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_operator_family_stmt) {
			listener.enterAlter_operator_family_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_operator_family_stmt) {
			listener.exitAlter_operator_family_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_operator_family_stmt) {
			return visitor.visitAlter_operator_family_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_policy_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _table_name!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _roles!: Role_name_listContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public POLICY(): TerminalNode { return this.getToken(PostgreSQLParserParser.POLICY, 0); }
	public ON(): TerminalNode { return this.getToken(PostgreSQLParserParser.ON, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USING, 0); }
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHECK, 0); }
	public role_name_list(): Role_name_listContext | undefined {
		return this.tryGetRuleContext(0, Role_name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_policy_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_policy_stmt) {
			listener.enterAlter_policy_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_policy_stmt) {
			listener.exitAlter_policy_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_policy_stmt) {
			return visitor.visitAlter_policy_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_publication_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _table_names!: Identifier_listContext;
	public _new_owner!: Role_nameContext;
	public _new_name!: Name_Context;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public PUBLICATION(): TerminalNode { return this.getToken(PostgreSQLParserParser.PUBLICATION, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ADD, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ONLY, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DROP, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public option_list(): Option_listContext | undefined {
		return this.tryGetRuleContext(0, Option_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public name_(): Name_Context | undefined {
		return this.tryGetRuleContext(0, Name_Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_publication_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_publication_stmt) {
			listener.enterAlter_publication_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_publication_stmt) {
			listener.exitAlter_publication_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_publication_stmt) {
			return visitor.visitAlter_publication_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_role_optionsContext extends ParserRuleContext {
	public _connlimit!: Token;
	public SUPERUSER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SUPERUSER, 0); }
	public NOSUPERUSER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOSUPERUSER, 0); }
	public CREATEDB(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CREATEDB, 0); }
	public NOCREATEDB(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOCREATEDB, 0); }
	public CREATEROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CREATEROLE, 0); }
	public NOCREATEROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOCREATEROLE, 0); }
	public INHERIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INHERIT, 0); }
	public NOINHERIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOINHERIT, 0); }
	public LOGIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LOGIN, 0); }
	public NOLOGIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOLOGIN, 0); }
	public REPLICATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REPLICATION, 0); }
	public NOREPLICATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOREPLICATION, 0); }
	public BYPASSRLS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BYPASSRLS, 0); }
	public NOBYPASSRLS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOBYPASSRLS, 0); }
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONNECTION, 0); }
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LIMIT, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PASSWORD, 0); }
	public SINGLEQ_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, 0); }
	public ENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ENCRYPTED, 0); }
	public VALID(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALID, 0); }
	public UNTIL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNTIL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_role_options; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_role_options) {
			listener.enterAlter_role_options(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_role_options) {
			listener.exitAlter_role_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_role_options) {
			return visitor.visitAlter_role_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_role_stmtContext extends ParserRuleContext {
	public _role!: Role_nameContext;
	public _options!: Alter_role_optionsContext;
	public _name!: Name_Context;
	public _new_name!: Name_Context;
	public _database_name!: Name_Context;
	public _configuration_parameter!: IdentifierContext;
	public _value!: Param_valueContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public ROLE(): TerminalNode { return this.getToken(PostgreSQLParserParser.ROLE, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public alter_role_options(): Alter_role_optionsContext[];
	public alter_role_options(i: number): Alter_role_optionsContext;
	public alter_role_options(i?: number): Alter_role_optionsContext | Alter_role_optionsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_role_optionsContext);
		} else {
			return this.getRuleContext(i, Alter_role_optionsContext);
		}
	}
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public name_(): Name_Context[];
	public name_(i: number): Name_Context;
	public name_(i?: number): Name_Context | Name_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Name_Context);
		} else {
			return this.getRuleContext(i, Name_Context);
		}
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EQUAL, 0); }
	public ALL(): TerminalNode[];
	public ALL(i: number): TerminalNode;
	public ALL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ALL);
		} else {
			return this.getToken(PostgreSQLParserParser.ALL, i);
		}
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFAULT, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IN, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DATABASE, 0); }
	public param_value(): Param_valueContext | undefined {
		return this.tryGetRuleContext(0, Param_valueContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FROM, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_role_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_role_stmt) {
			listener.enterAlter_role_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_role_stmt) {
			listener.exitAlter_role_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_role_stmt) {
			return visitor.visitAlter_role_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_rule_stmtContext extends ParserRuleContext {
	public _name!: Name_Context;
	public _table_name!: IdentifierContext;
	public _new_name!: Name_Context;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public RULE(): TerminalNode { return this.getToken(PostgreSQLParserParser.RULE, 0); }
	public ON(): TerminalNode { return this.getToken(PostgreSQLParserParser.ON, 0); }
	public RENAME(): TerminalNode { return this.getToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode { return this.getToken(PostgreSQLParserParser.TO, 0); }
	public name_(): Name_Context[];
	public name_(i: number): Name_Context;
	public name_(i?: number): Name_Context | Name_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Name_Context);
		} else {
			return this.getRuleContext(i, Name_Context);
		}
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_rule_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_rule_stmt) {
			listener.enterAlter_rule_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_rule_stmt) {
			listener.exitAlter_rule_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_rule_stmt) {
			return visitor.visitAlter_rule_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_schema_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _new_owner!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(PostgreSQLParserParser.SCHEMA, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode { return this.getToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_USER, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION_USER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_schema_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_schema_stmt) {
			listener.enterAlter_schema_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_schema_stmt) {
			listener.exitAlter_schema_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_schema_stmt) {
			return visitor.visitAlter_schema_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_sequence_stmtContext extends ParserRuleContext {
	public _name!: Name_Context;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public SEQUENCE(): TerminalNode { return this.getToken(PostgreSQLParserParser.SEQUENCE, 0); }
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_sequence_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_sequence_stmt) {
			listener.enterAlter_sequence_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_sequence_stmt) {
			listener.exitAlter_sequence_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_sequence_stmt) {
			return visitor.visitAlter_sequence_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_server_options_listContext extends ParserRuleContext {
	public _option!: IdentifierContext;
	public _value!: Param_valueContext;
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public ADD(): TerminalNode[];
	public ADD(i: number): TerminalNode;
	public ADD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ADD);
		} else {
			return this.getToken(PostgreSQLParserParser.ADD, i);
		}
	}
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.SET);
		} else {
			return this.getToken(PostgreSQLParserParser.SET, i);
		}
	}
	public DROP(): TerminalNode[];
	public DROP(i: number): TerminalNode;
	public DROP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.DROP);
		} else {
			return this.getToken(PostgreSQLParserParser.DROP, i);
		}
	}
	public param_value(): Param_valueContext[];
	public param_value(i: number): Param_valueContext;
	public param_value(i?: number): Param_valueContext | Param_valueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Param_valueContext);
		} else {
			return this.getRuleContext(i, Param_valueContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_server_options_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_server_options_list) {
			listener.enterAlter_server_options_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_server_options_list) {
			listener.exitAlter_server_options_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_server_options_list) {
			return visitor.visitAlter_server_options_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_server_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _new_owner!: Role_nameContext;
	public _new_name!: Name_Context;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public SERVER(): TerminalNode { return this.getToken(PostgreSQLParserParser.SERVER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VERSION, 0); }
	public SINGLEQ_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPTIONS, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public alter_server_options_list(): Alter_server_options_listContext | undefined {
		return this.tryGetRuleContext(0, Alter_server_options_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public name_(): Name_Context | undefined {
		return this.tryGetRuleContext(0, Name_Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_server_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_server_stmt) {
			listener.enterAlter_server_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_server_stmt) {
			listener.exitAlter_server_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_server_stmt) {
			return visitor.visitAlter_server_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_statistics_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _new_owner!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _new_schema!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public STATISTICS(): TerminalNode { return this.getToken(PostgreSQLParserParser.STATISTICS, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_USER, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION_USER, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_statistics_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_statistics_stmt) {
			listener.enterAlter_statistics_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_statistics_stmt) {
			listener.exitAlter_statistics_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_statistics_stmt) {
			return visitor.visitAlter_statistics_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_subscription_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _conninfo!: Param_valueContext;
	public _publication_name!: Name_listContext;
	public _new_owner!: Role_nameContext;
	public _new_name!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public SUBSCRIPTION(): TerminalNode { return this.getToken(PostgreSQLParserParser.SUBSCRIPTION, 0); }
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONNECTION, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public param_value(): Param_valueContext | undefined {
		return this.tryGetRuleContext(0, Param_valueContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public PUBLICATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PUBLICATION, 0); }
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public option_list(): Option_listContext | undefined {
		return this.tryGetRuleContext(0, Option_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public REFRESH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REFRESH, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ENABLE, 0); }
	public DISABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DISABLE, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_subscription_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_subscription_stmt) {
			listener.enterAlter_subscription_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_subscription_stmt) {
			listener.exitAlter_subscription_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_subscription_stmt) {
			return visitor.visitAlter_subscription_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_system_stmtContext extends ParserRuleContext {
	public _param!: Token;
	public _value!: Param_valueContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public SYSTEM(): TerminalNode { return this.getToken(PostgreSQLParserParser.SYSTEM, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IDENTIFIER, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EQUAL, 0); }
	public param_value(): Param_valueContext | undefined {
		return this.tryGetRuleContext(0, Param_valueContext);
	}
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESET, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_system_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_system_stmt) {
			listener.enterAlter_system_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_system_stmt) {
			listener.exitAlter_system_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_system_stmt) {
			return visitor.visitAlter_system_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_table_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_table_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_table_stmt) {
			listener.enterAlter_table_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_table_stmt) {
			listener.exitAlter_table_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_table_stmt) {
			return visitor.visitAlter_table_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_tablespace_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _new_owner!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(PostgreSQLParserParser.TABLESPACE, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_USER, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION_USER, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public option_list(): Option_listContext | undefined {
		return this.tryGetRuleContext(0, Option_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESET, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_tablespace_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_tablespace_stmt) {
			listener.enterAlter_tablespace_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_tablespace_stmt) {
			listener.exitAlter_tablespace_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_tablespace_stmt) {
			return visitor.visitAlter_tablespace_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_text_search_config_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _token_types!: Identifier_listContext;
	public _dictionary_names!: Identifier_listContext;
	public _old_dictionary!: IdentifierContext;
	public _new_dictionary!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _new_owner!: Role_nameContext;
	public _new_schema!: IdentifierContext;
	public ALTER(): TerminalNode[];
	public ALTER(i: number): TerminalNode;
	public ALTER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ALTER);
		} else {
			return this.getToken(PostgreSQLParserParser.ALTER, i);
		}
	}
	public TEXT(): TerminalNode { return this.getToken(PostgreSQLParserParser.TEXT, 0); }
	public SEARCH(): TerminalNode { return this.getToken(PostgreSQLParserParser.SEARCH, 0); }
	public CONFIGURATION(): TerminalNode { return this.getToken(PostgreSQLParserParser.CONFIGURATION, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ADD, 0); }
	public MAPPING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MAPPING, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FOR, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public identifier_list(): Identifier_listContext[];
	public identifier_list(i: number): Identifier_listContext;
	public identifier_list(i?: number): Identifier_listContext | Identifier_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_listContext);
		} else {
			return this.getRuleContext(i, Identifier_listContext);
		}
	}
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REPLACE, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DROP, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_text_search_config_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_text_search_config_stmt) {
			listener.enterAlter_text_search_config_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_text_search_config_stmt) {
			listener.exitAlter_text_search_config_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_text_search_config_stmt) {
			return visitor.visitAlter_text_search_config_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_text_search_dict_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_text_search_dict_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_text_search_dict_stmt) {
			listener.enterAlter_text_search_dict_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_text_search_dict_stmt) {
			listener.exitAlter_text_search_dict_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_text_search_dict_stmt) {
			return visitor.visitAlter_text_search_dict_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_text_search_parser_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_text_search_parser_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_text_search_parser_stmt) {
			listener.enterAlter_text_search_parser_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_text_search_parser_stmt) {
			listener.exitAlter_text_search_parser_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_text_search_parser_stmt) {
			return visitor.visitAlter_text_search_parser_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_text_search_template_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _new_schema!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public TEXT(): TerminalNode { return this.getToken(PostgreSQLParserParser.TEXT, 0); }
	public SEARCH(): TerminalNode { return this.getToken(PostgreSQLParserParser.SEARCH, 0); }
	public TEMPLATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.TEMPLATE, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_text_search_template_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_text_search_template_stmt) {
			listener.enterAlter_text_search_template_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_text_search_template_stmt) {
			listener.exitAlter_text_search_template_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_text_search_template_stmt) {
			return visitor.visitAlter_text_search_template_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_trigger_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _table_name!: IdentifierContext;
	public _new_name!: IdentifierContext;
	public _extension_name!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(PostgreSQLParserParser.TRIGGER, 0); }
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ON);
		} else {
			return this.getToken(PostgreSQLParserParser.ON, i);
		}
	}
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DEPENDS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEPENDS, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXTENSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_trigger_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_trigger_stmt) {
			listener.enterAlter_trigger_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_trigger_stmt) {
			listener.exitAlter_trigger_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_trigger_stmt) {
			return visitor.visitAlter_trigger_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_type_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_type_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_type_stmt) {
			listener.enterAlter_type_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_type_stmt) {
			listener.exitAlter_type_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_type_stmt) {
			return visitor.visitAlter_type_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_user_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_user_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_user_stmt) {
			listener.enterAlter_user_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_user_stmt) {
			listener.exitAlter_user_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_user_stmt) {
			return visitor.visitAlter_user_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_user_mapping_stmtContext extends ParserRuleContext {
	public _user!: Role_nameContext;
	public _server_name!: IdentifierContext;
	public ALTER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ALTER, 0); }
	public USER(): TerminalNode { return this.getToken(PostgreSQLParserParser.USER, 0); }
	public MAPPING(): TerminalNode { return this.getToken(PostgreSQLParserParser.MAPPING, 0); }
	public FOR(): TerminalNode { return this.getToken(PostgreSQLParserParser.FOR, 0); }
	public SERVER(): TerminalNode { return this.getToken(PostgreSQLParserParser.SERVER, 0); }
	public OPTIONS(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPTIONS, 0); }
	public role_name(): Role_nameContext {
		return this.getRuleContext(0, Role_nameContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public alter_server_options_list(): Alter_server_options_listContext | undefined {
		return this.tryGetRuleContext(0, Alter_server_options_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_user_mapping_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_user_mapping_stmt) {
			listener.enterAlter_user_mapping_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_user_mapping_stmt) {
			listener.exitAlter_user_mapping_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_user_mapping_stmt) {
			return visitor.visitAlter_user_mapping_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_view_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alter_view_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_view_stmt) {
			listener.enterAlter_view_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_view_stmt) {
			listener.exitAlter_view_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_view_stmt) {
			return visitor.visitAlter_view_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Analyze_stmtContext extends ParserRuleContext {
	public ANALYZE(): TerminalNode { return this.getToken(PostgreSQLParserParser.ANALYZE, 0); }
	public table_name_(): Table_name_Context {
		return this.getRuleContext(0, Table_name_Context);
	}
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VERBOSE, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_analyze_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAnalyze_stmt) {
			listener.enterAnalyze_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAnalyze_stmt) {
			listener.exitAnalyze_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAnalyze_stmt) {
			return visitor.visitAnalyze_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Close_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_close_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterClose_stmt) {
			listener.enterClose_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitClose_stmt) {
			listener.exitClose_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitClose_stmt) {
			return visitor.visitClose_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cluster_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_cluster_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCluster_stmt) {
			listener.enterCluster_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCluster_stmt) {
			listener.exitCluster_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCluster_stmt) {
			return visitor.visitCluster_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Comment_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_comment_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterComment_stmt) {
			listener.enterComment_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitComment_stmt) {
			listener.exitComment_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitComment_stmt) {
			return visitor.visitComment_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Commit_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_commit_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCommit_stmt) {
			listener.enterCommit_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCommit_stmt) {
			listener.exitCommit_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCommit_stmt) {
			return visitor.visitCommit_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Commit_prepared_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_commit_prepared_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCommit_prepared_stmt) {
			listener.enterCommit_prepared_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCommit_prepared_stmt) {
			listener.exitCommit_prepared_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCommit_prepared_stmt) {
			return visitor.visitCommit_prepared_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_copy_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopy_stmt) {
			listener.enterCopy_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopy_stmt) {
			listener.exitCopy_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopy_stmt) {
			return visitor.visitCopy_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_stmtContext extends ParserRuleContext {
	public create_access_method_stmt(): Create_access_method_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_access_method_stmtContext);
	}
	public create_aggregate_stmt(): Create_aggregate_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_aggregate_stmtContext);
	}
	public create_cast_stmt(): Create_cast_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_cast_stmtContext);
	}
	public create_collation_stmt(): Create_collation_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_collation_stmtContext);
	}
	public create_conversion_stmt(): Create_conversion_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_conversion_stmtContext);
	}
	public create_database_stmt(): Create_database_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_database_stmtContext);
	}
	public create_domain_stmt(): Create_domain_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_domain_stmtContext);
	}
	public create_event_trigger_stmt(): Create_event_trigger_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_event_trigger_stmtContext);
	}
	public create_foreign_data_stmt(): Create_foreign_data_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_foreign_data_stmtContext);
	}
	public create_foreign_table_stmt(): Create_foreign_table_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_foreign_table_stmtContext);
	}
	public create_function_stmt(): Create_function_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_function_stmtContext);
	}
	public create_group_stmt(): Create_group_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_group_stmtContext);
	}
	public create_index_stmt(): Create_index_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_index_stmtContext);
	}
	public create_language_stmt(): Create_language_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_language_stmtContext);
	}
	public create_materialized_view_stmt(): Create_materialized_view_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_materialized_view_stmtContext);
	}
	public create_operator_stmt(): Create_operator_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_operator_stmtContext);
	}
	public create_operator_class_stmt(): Create_operator_class_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_operator_class_stmtContext);
	}
	public create_operator_family_stmt(): Create_operator_family_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_operator_family_stmtContext);
	}
	public create_policy_stmt(): Create_policy_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_policy_stmtContext);
	}
	public create_role_stmt(): Create_role_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_role_stmtContext);
	}
	public create_rule_stmt(): Create_rule_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_rule_stmtContext);
	}
	public create_schema_stmt(): Create_schema_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_schema_stmtContext);
	}
	public create_sequence_stmt(): Create_sequence_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_sequence_stmtContext);
	}
	public create_server_stmt(): Create_server_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_server_stmtContext);
	}
	public create_statistics_stmt(): Create_statistics_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_statistics_stmtContext);
	}
	public create_subscription_stmt(): Create_subscription_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_subscription_stmtContext);
	}
	public create_table_stmt(): Create_table_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_table_stmtContext);
	}
	public create_table_as_stmt(): Create_table_as_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_table_as_stmtContext);
	}
	public create_tablespace_stmt(): Create_tablespace_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_tablespace_stmtContext);
	}
	public create_text_search_config_stmt(): Create_text_search_config_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_text_search_config_stmtContext);
	}
	public create_text_search_dict_stmt(): Create_text_search_dict_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_text_search_dict_stmtContext);
	}
	public create_text_search_parser_stmt(): Create_text_search_parser_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_text_search_parser_stmtContext);
	}
	public create_text_search_template_stmt(): Create_text_search_template_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_text_search_template_stmtContext);
	}
	public create_transform_stmt(): Create_transform_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_transform_stmtContext);
	}
	public create_trigger_stmt(): Create_trigger_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_trigger_stmtContext);
	}
	public create_type_stmt(): Create_type_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_type_stmtContext);
	}
	public create_user_stmt(): Create_user_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_user_stmtContext);
	}
	public create_user_mapping_stmt(): Create_user_mapping_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_user_mapping_stmtContext);
	}
	public create_view_stmt(): Create_view_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_view_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_stmt) {
			listener.enterCreate_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_stmt) {
			listener.exitCreate_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_stmt) {
			return visitor.visitCreate_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_access_method_stmtContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public ACCESS(): TerminalNode { return this.getToken(PostgreSQLParserParser.ACCESS, 0); }
	public METHOD(): TerminalNode { return this.getToken(PostgreSQLParserParser.METHOD, 0); }
	public name_(): Name_Context[];
	public name_(i: number): Name_Context;
	public name_(i?: number): Name_Context | Name_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Name_Context);
		} else {
			return this.getRuleContext(i, Name_Context);
		}
	}
	public TYPE(): TerminalNode { return this.getToken(PostgreSQLParserParser.TYPE, 0); }
	public INDEX(): TerminalNode { return this.getToken(PostgreSQLParserParser.INDEX, 0); }
	public HANDLER(): TerminalNode { return this.getToken(PostgreSQLParserParser.HANDLER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_access_method_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_access_method_stmt) {
			listener.enterCreate_access_method_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_access_method_stmt) {
			listener.exitCreate_access_method_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_access_method_stmt) {
			return visitor.visitCreate_access_method_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_aggregate_stmtContext extends ParserRuleContext {
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CREATE, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AGGREGATE, 0); }
	public name_(): Name_Context[];
	public name_(i: number): Name_Context;
	public name_(i?: number): Name_Context | Name_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Name_Context);
		} else {
			return this.getRuleContext(i, Name_Context);
		}
	}
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public data_type_list(): Data_type_listContext[];
	public data_type_list(i: number): Data_type_listContext;
	public data_type_list(i?: number): Data_type_listContext | Data_type_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_type_listContext);
		} else {
			return this.getRuleContext(i, Data_type_listContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public SFUNC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SFUNC, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.EQUAL);
		} else {
			return this.getToken(PostgreSQLParserParser.EQUAL, i);
		}
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public STYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STYPE, 0); }
	public SSPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SSPACE, 0); }
	public INTEGER_LITERAL(): TerminalNode[];
	public INTEGER_LITERAL(i: number): TerminalNode;
	public INTEGER_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.INTEGER_LITERAL);
		} else {
			return this.getToken(PostgreSQLParserParser.INTEGER_LITERAL, i);
		}
	}
	public FINALFUNC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FINALFUNC, 0); }
	public FINALFUNC_EXTRA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FINALFUNC_EXTRA, 0); }
	public COMBINEFUNC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COMBINEFUNC, 0); }
	public SERIALFUNC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SERIALFUNC, 0); }
	public DESERIALFUNC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DESERIALFUNC, 0); }
	public INITCOND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INITCOND, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public MSFUNC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MSFUNC, 0); }
	public MINVFUNC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MINVFUNC, 0); }
	public MSTYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MSTYPE, 0); }
	public MSSPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MSSPACE, 0); }
	public MFINALFUNC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MFINALFUNC, 0); }
	public MFINALFUNC_EXTRA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MFINALFUNC_EXTRA, 0); }
	public MINITCOND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MINITCOND, 0); }
	public SORTOP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SORTOP, 0); }
	public PARALLEL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PARALLEL, 0); }
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.IN);
		} else {
			return this.getToken(PostgreSQLParserParser.IN, i);
		}
	}
	public VARIADIC(): TerminalNode[];
	public VARIADIC(i: number): TerminalNode;
	public VARIADIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.VARIADIC);
		} else {
			return this.getToken(PostgreSQLParserParser.VARIADIC, i);
		}
	}
	public SAFE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SAFE, 0); }
	public RESTRICTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICTED, 0); }
	public UNSAFE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNSAFE, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BY, 0); }
	public HYPOTHETICAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HYPOTHETICAL, 0); }
	public BASETYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BASETYPE, 0); }
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_aggregate_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_aggregate_stmt) {
			listener.enterCreate_aggregate_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_aggregate_stmt) {
			listener.exitCreate_aggregate_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_aggregate_stmt) {
			return visitor.visitCreate_aggregate_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_cast_stmtContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public CAST(): TerminalNode { return this.getToken(PostgreSQLParserParser.CAST, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public AS(): TerminalNode[];
	public AS(i: number): TerminalNode;
	public AS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.AS);
		} else {
			return this.getToken(PostgreSQLParserParser.AS, i);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public ASSIGNMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ASSIGNMENT, 0); }
	public IMPLICIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IMPLICIT, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FUNCTION, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITHOUT, 0); }
	public INOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INOUT, 0); }
	public data_type_list(): Data_type_listContext | undefined {
		return this.tryGetRuleContext(0, Data_type_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_cast_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_cast_stmt) {
			listener.enterCreate_cast_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_cast_stmt) {
			listener.exitCreate_cast_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_cast_stmt) {
			return visitor.visitCreate_cast_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_collation_optContext extends ParserRuleContext {
	public LOCALE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LOCALE, 0); }
	public EQUAL(): TerminalNode { return this.getToken(PostgreSQLParserParser.EQUAL, 0); }
	public expr(): ExprContext {
		return this.getRuleContext(0, ExprContext);
	}
	public LC_COLLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LC_COLLATE, 0); }
	public LC_CTYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LC_CTYPE, 0); }
	public PROVIDER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PROVIDER, 0); }
	public VERSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VERSION, 0); }
	public DOUBLEQ_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_collation_opt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_collation_opt) {
			listener.enterCreate_collation_opt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_collation_opt) {
			listener.exitCreate_collation_opt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_collation_opt) {
			return visitor.visitCreate_collation_opt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_collation_opt_listContext extends ParserRuleContext {
	public create_collation_opt(): Create_collation_optContext[];
	public create_collation_opt(i: number): Create_collation_optContext;
	public create_collation_opt(i?: number): Create_collation_optContext | Create_collation_optContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_collation_optContext);
		} else {
			return this.getRuleContext(i, Create_collation_optContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_collation_opt_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_collation_opt_list) {
			listener.enterCreate_collation_opt_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_collation_opt_list) {
			listener.exitCreate_collation_opt_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_collation_opt_list) {
			return visitor.visitCreate_collation_opt_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_collation_stmtContext extends ParserRuleContext {
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CREATE, 0); }
	public COLLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COLLATION, 0); }
	public name_(): Name_Context[];
	public name_(i: number): Name_Context;
	public name_(i?: number): Name_Context | Name_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Name_Context);
		} else {
			return this.getRuleContext(i, Name_Context);
		}
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public create_collation_opt_list(): Create_collation_opt_listContext | undefined {
		return this.tryGetRuleContext(0, Create_collation_opt_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FROM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_collation_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_collation_stmt) {
			listener.enterCreate_collation_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_collation_stmt) {
			listener.exitCreate_collation_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_collation_stmt) {
			return visitor.visitCreate_collation_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_conversion_stmtContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public CONVERSION(): TerminalNode { return this.getToken(PostgreSQLParserParser.CONVERSION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public FOR(): TerminalNode { return this.getToken(PostgreSQLParserParser.FOR, 0); }
	public SINGLEQ_STRING_LITERAL(): TerminalNode[];
	public SINGLEQ_STRING_LITERAL(i: number): TerminalNode;
	public SINGLEQ_STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
		} else {
			return this.getToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, i);
		}
	}
	public TO(): TerminalNode { return this.getToken(PostgreSQLParserParser.TO, 0); }
	public FROM(): TerminalNode { return this.getToken(PostgreSQLParserParser.FROM, 0); }
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_conversion_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_conversion_stmt) {
			listener.enterCreate_conversion_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_conversion_stmt) {
			listener.exitCreate_conversion_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_conversion_stmt) {
			return visitor.visitCreate_conversion_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_database_stmtContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public DATABASE(): TerminalNode { return this.getToken(PostgreSQLParserParser.DATABASE, 0); }
	public name_(): Name_Context[];
	public name_(i: number): Name_Context;
	public name_(i?: number): Name_Context | Name_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Name_Context);
		} else {
			return this.getRuleContext(i, Name_Context);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.EQUAL);
		} else {
			return this.getToken(PostgreSQLParserParser.EQUAL, i);
		}
	}
	public TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEMPLATE, 0); }
	public ENCODING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ENCODING, 0); }
	public LC_COLLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LC_COLLATE, 0); }
	public LC_CTYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LC_CTYPE, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLESPACE, 0); }
	public ALLOW_CONNECTIONS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALLOW_CONNECTIONS, 0); }
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONNECTION, 0); }
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LIMIT, 0); }
	public INTEGER_LITERAL(): TerminalNode[];
	public INTEGER_LITERAL(i: number): TerminalNode;
	public INTEGER_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.INTEGER_LITERAL);
		} else {
			return this.getToken(PostgreSQLParserParser.INTEGER_LITERAL, i);
		}
	}
	public IS_TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IS_TEMPLATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_database_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_database_stmt) {
			listener.enterCreate_database_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_database_stmt) {
			listener.exitCreate_database_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_database_stmt) {
			return visitor.visitCreate_database_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Domain_constraintContext extends ParserRuleContext {
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NULL, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHECK, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONSTRAINT, 0); }
	public name_(): Name_Context | undefined {
		return this.tryGetRuleContext(0, Name_Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_domain_constraint; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDomain_constraint) {
			listener.enterDomain_constraint(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDomain_constraint) {
			listener.exitDomain_constraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDomain_constraint) {
			return visitor.visitDomain_constraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_domain_stmtContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public DOMAIN(): TerminalNode { return this.getToken(PostgreSQLParserParser.DOMAIN, 0); }
	public name_(): Name_Context[];
	public name_(i: number): Name_Context;
	public name_(i?: number): Name_Context | Name_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Name_Context);
		} else {
			return this.getRuleContext(i, Name_Context);
		}
	}
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AS, 0); }
	public domain_constraint(): Domain_constraintContext[];
	public domain_constraint(i: number): Domain_constraintContext;
	public domain_constraint(i?: number): Domain_constraintContext | Domain_constraintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Domain_constraintContext);
		} else {
			return this.getRuleContext(i, Domain_constraintContext);
		}
	}
	public COLLATE(): TerminalNode[];
	public COLLATE(i: number): TerminalNode;
	public COLLATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COLLATE);
		} else {
			return this.getToken(PostgreSQLParserParser.COLLATE, i);
		}
	}
	public DEFAULT(): TerminalNode[];
	public DEFAULT(i: number): TerminalNode;
	public DEFAULT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.DEFAULT);
		} else {
			return this.getToken(PostgreSQLParserParser.DEFAULT, i);
		}
	}
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_domain_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_domain_stmt) {
			listener.enterCreate_domain_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_domain_stmt) {
			listener.exitCreate_domain_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_domain_stmt) {
			return visitor.visitCreate_domain_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_event_trigger_condContext extends ParserRuleContext {
	public _filter_stmt!: IdentifierContext;
	public IN(): TerminalNode { return this.getToken(PostgreSQLParserParser.IN, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public SINGLEQ_STRING_LITERAL(): TerminalNode[];
	public SINGLEQ_STRING_LITERAL(i: number): TerminalNode;
	public SINGLEQ_STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
		} else {
			return this.getToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, i);
		}
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.AND);
		} else {
			return this.getToken(PostgreSQLParserParser.AND, i);
		}
	}
	public create_event_trigger_cond(): Create_event_trigger_condContext[];
	public create_event_trigger_cond(i: number): Create_event_trigger_condContext;
	public create_event_trigger_cond(i?: number): Create_event_trigger_condContext | Create_event_trigger_condContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_event_trigger_condContext);
		} else {
			return this.getRuleContext(i, Create_event_trigger_condContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_event_trigger_cond; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_event_trigger_cond) {
			listener.enterCreate_event_trigger_cond(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_event_trigger_cond) {
			listener.exitCreate_event_trigger_cond(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_event_trigger_cond) {
			return visitor.visitCreate_event_trigger_cond(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_event_trigger_stmtContext extends ParserRuleContext {
	public _trigger!: IdentifierContext;
	public _event!: IdentifierContext;
	public _fn_name!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public EVENT(): TerminalNode { return this.getToken(PostgreSQLParserParser.EVENT, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(PostgreSQLParserParser.TRIGGER, 0); }
	public ON(): TerminalNode { return this.getToken(PostgreSQLParserParser.ON, 0); }
	public EXECUTE(): TerminalNode { return this.getToken(PostgreSQLParserParser.EXECUTE, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(PostgreSQLParserParser.PROCEDURE, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WHEN, 0); }
	public create_event_trigger_cond(): Create_event_trigger_condContext | undefined {
		return this.tryGetRuleContext(0, Create_event_trigger_condContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_event_trigger_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_event_trigger_stmt) {
			listener.enterCreate_event_trigger_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_event_trigger_stmt) {
			listener.exitCreate_event_trigger_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_event_trigger_stmt) {
			return visitor.visitCreate_event_trigger_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_foreign_data_optionsContext extends ParserRuleContext {
	public _opt!: Name_Context;
	public SINGLEQ_STRING_LITERAL(): TerminalNode { return this.getToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, 0); }
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public create_foreign_data_options(): Create_foreign_data_optionsContext[];
	public create_foreign_data_options(i: number): Create_foreign_data_optionsContext;
	public create_foreign_data_options(i?: number): Create_foreign_data_optionsContext | Create_foreign_data_optionsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_foreign_data_optionsContext);
		} else {
			return this.getRuleContext(i, Create_foreign_data_optionsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_foreign_data_options; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_foreign_data_options) {
			listener.enterCreate_foreign_data_options(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_foreign_data_options) {
			listener.exitCreate_foreign_data_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_foreign_data_options) {
			return visitor.visitCreate_foreign_data_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_foreign_data_stmtContext extends ParserRuleContext {
	public _wrapper!: IdentifierContext;
	public _handler!: IdentifierContext;
	public _validator!: IdentifierContext;
	public _opts!: Create_foreign_data_optionsContext;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public FOREIGN(): TerminalNode { return this.getToken(PostgreSQLParserParser.FOREIGN, 0); }
	public DATA(): TerminalNode { return this.getToken(PostgreSQLParserParser.DATA, 0); }
	public WRAPPER(): TerminalNode { return this.getToken(PostgreSQLParserParser.WRAPPER, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public HANDLER(): TerminalNode[];
	public HANDLER(i: number): TerminalNode;
	public HANDLER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.HANDLER);
		} else {
			return this.getToken(PostgreSQLParserParser.HANDLER, i);
		}
	}
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NO);
		} else {
			return this.getToken(PostgreSQLParserParser.NO, i);
		}
	}
	public VALIDATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALIDATOR, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPTIONS, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public create_foreign_data_options(): Create_foreign_data_optionsContext | undefined {
		return this.tryGetRuleContext(0, Create_foreign_data_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_foreign_data_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_foreign_data_stmt) {
			listener.enterCreate_foreign_data_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_foreign_data_stmt) {
			listener.exitCreate_foreign_data_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_foreign_data_stmt) {
			return visitor.visitCreate_foreign_data_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_foreign_table_stmtContext extends ParserRuleContext {
	public _table_name_TODO!: IdentifierContext;
	public _column_name_TODO!: IdentifierContext;
	public _column_type!: IdentifierContext;
	public _opts!: Create_foreign_data_optionsContext;
	public _server_name!: Name_Context;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public FOREIGN(): TerminalNode { return this.getToken(PostgreSQLParserParser.FOREIGN, 0); }
	public TABLE(): TerminalNode { return this.getToken(PostgreSQLParserParser.TABLE, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public SERVER(): TerminalNode { return this.getToken(PostgreSQLParserParser.SERVER, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public OPTIONS(): TerminalNode[];
	public OPTIONS(i: number): TerminalNode;
	public OPTIONS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPTIONS);
		} else {
			return this.getToken(PostgreSQLParserParser.OPTIONS, i);
		}
	}
	public COLLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COLLATE, 0); }
	public create_collation_opt(): Create_collation_optContext | undefined {
		return this.tryGetRuleContext(0, Create_collation_optContext);
	}
	public INHERITS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INHERITS, 0); }
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public create_foreign_data_options(): Create_foreign_data_optionsContext[];
	public create_foreign_data_options(i: number): Create_foreign_data_optionsContext;
	public create_foreign_data_options(i?: number): Create_foreign_data_optionsContext | Create_foreign_data_optionsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_foreign_data_optionsContext);
		} else {
			return this.getRuleContext(i, Create_foreign_data_optionsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_foreign_table_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_foreign_table_stmt) {
			listener.enterCreate_foreign_table_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_foreign_table_stmt) {
			listener.exitCreate_foreign_table_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_foreign_table_stmt) {
			return visitor.visitCreate_foreign_table_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_function_stmtContext extends ParserRuleContext {
	public _fn_name!: Name_Context;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(PostgreSQLParserParser.FUNCTION, 0); }
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REPLACE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_function_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_function_stmt) {
			listener.enterCreate_function_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_function_stmt) {
			listener.exitCreate_function_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_function_stmt) {
			return visitor.visitCreate_function_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_group_stmtContext extends ParserRuleContext {
	public _group!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public GROUP(): TerminalNode[];
	public GROUP(i: number): TerminalNode;
	public GROUP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.GROUP);
		} else {
			return this.getToken(PostgreSQLParserParser.GROUP, i);
		}
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public SUPERUSER(): TerminalNode[];
	public SUPERUSER(i: number): TerminalNode;
	public SUPERUSER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.SUPERUSER);
		} else {
			return this.getToken(PostgreSQLParserParser.SUPERUSER, i);
		}
	}
	public NOSUPERUSER(): TerminalNode[];
	public NOSUPERUSER(i: number): TerminalNode;
	public NOSUPERUSER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOSUPERUSER);
		} else {
			return this.getToken(PostgreSQLParserParser.NOSUPERUSER, i);
		}
	}
	public CREATEDB(): TerminalNode[];
	public CREATEDB(i: number): TerminalNode;
	public CREATEDB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CREATEDB);
		} else {
			return this.getToken(PostgreSQLParserParser.CREATEDB, i);
		}
	}
	public NOCREATEDB(): TerminalNode[];
	public NOCREATEDB(i: number): TerminalNode;
	public NOCREATEDB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOCREATEDB);
		} else {
			return this.getToken(PostgreSQLParserParser.NOCREATEDB, i);
		}
	}
	public CREATEROLE(): TerminalNode[];
	public CREATEROLE(i: number): TerminalNode;
	public CREATEROLE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CREATEROLE);
		} else {
			return this.getToken(PostgreSQLParserParser.CREATEROLE, i);
		}
	}
	public NOCREATEROLE(): TerminalNode[];
	public NOCREATEROLE(i: number): TerminalNode;
	public NOCREATEROLE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOCREATEROLE);
		} else {
			return this.getToken(PostgreSQLParserParser.NOCREATEROLE, i);
		}
	}
	public CREATEUSER(): TerminalNode[];
	public CREATEUSER(i: number): TerminalNode;
	public CREATEUSER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CREATEUSER);
		} else {
			return this.getToken(PostgreSQLParserParser.CREATEUSER, i);
		}
	}
	public NOCREATEUSER(): TerminalNode[];
	public NOCREATEUSER(i: number): TerminalNode;
	public NOCREATEUSER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOCREATEUSER);
		} else {
			return this.getToken(PostgreSQLParserParser.NOCREATEUSER, i);
		}
	}
	public INHERIT(): TerminalNode[];
	public INHERIT(i: number): TerminalNode;
	public INHERIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.INHERIT);
		} else {
			return this.getToken(PostgreSQLParserParser.INHERIT, i);
		}
	}
	public NOINHERIT(): TerminalNode[];
	public NOINHERIT(i: number): TerminalNode;
	public NOINHERIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOINHERIT);
		} else {
			return this.getToken(PostgreSQLParserParser.NOINHERIT, i);
		}
	}
	public LOGIN(): TerminalNode[];
	public LOGIN(i: number): TerminalNode;
	public LOGIN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.LOGIN);
		} else {
			return this.getToken(PostgreSQLParserParser.LOGIN, i);
		}
	}
	public NOLOGIN(): TerminalNode[];
	public NOLOGIN(i: number): TerminalNode;
	public NOLOGIN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOLOGIN);
		} else {
			return this.getToken(PostgreSQLParserParser.NOLOGIN, i);
		}
	}
	public PASSWORD(): TerminalNode[];
	public PASSWORD(i: number): TerminalNode;
	public PASSWORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.PASSWORD);
		} else {
			return this.getToken(PostgreSQLParserParser.PASSWORD, i);
		}
	}
	public VALID(): TerminalNode[];
	public VALID(i: number): TerminalNode;
	public VALID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.VALID);
		} else {
			return this.getToken(PostgreSQLParserParser.VALID, i);
		}
	}
	public UNTIL(): TerminalNode[];
	public UNTIL(i: number): TerminalNode;
	public UNTIL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.UNTIL);
		} else {
			return this.getToken(PostgreSQLParserParser.UNTIL, i);
		}
	}
	public SINGLEQ_STRING_LITERAL(): TerminalNode[];
	public SINGLEQ_STRING_LITERAL(i: number): TerminalNode;
	public SINGLEQ_STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
		} else {
			return this.getToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.IN);
		} else {
			return this.getToken(PostgreSQLParserParser.IN, i);
		}
	}
	public ROLE(): TerminalNode[];
	public ROLE(i: number): TerminalNode;
	public ROLE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ROLE);
		} else {
			return this.getToken(PostgreSQLParserParser.ROLE, i);
		}
	}
	public name_list(): Name_listContext[];
	public name_list(i: number): Name_listContext;
	public name_list(i?: number): Name_listContext | Name_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Name_listContext);
		} else {
			return this.getRuleContext(i, Name_listContext);
		}
	}
	public ADMIN(): TerminalNode[];
	public ADMIN(i: number): TerminalNode;
	public ADMIN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ADMIN);
		} else {
			return this.getToken(PostgreSQLParserParser.ADMIN, i);
		}
	}
	public USER(): TerminalNode[];
	public USER(i: number): TerminalNode;
	public USER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.USER);
		} else {
			return this.getToken(PostgreSQLParserParser.USER, i);
		}
	}
	public SYSID(): TerminalNode[];
	public SYSID(i: number): TerminalNode;
	public SYSID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.SYSID);
		} else {
			return this.getToken(PostgreSQLParserParser.SYSID, i);
		}
	}
	public INTEGER_LITERAL(): TerminalNode[];
	public INTEGER_LITERAL(i: number): TerminalNode;
	public INTEGER_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.INTEGER_LITERAL);
		} else {
			return this.getToken(PostgreSQLParserParser.INTEGER_LITERAL, i);
		}
	}
	public NULL(): TerminalNode[];
	public NULL(i: number): TerminalNode;
	public NULL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NULL);
		} else {
			return this.getToken(PostgreSQLParserParser.NULL, i);
		}
	}
	public ENCRYPTED(): TerminalNode[];
	public ENCRYPTED(i: number): TerminalNode;
	public ENCRYPTED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ENCRYPTED);
		} else {
			return this.getToken(PostgreSQLParserParser.ENCRYPTED, i);
		}
	}
	public UNENCRYPTED(): TerminalNode[];
	public UNENCRYPTED(i: number): TerminalNode;
	public UNENCRYPTED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.UNENCRYPTED);
		} else {
			return this.getToken(PostgreSQLParserParser.UNENCRYPTED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_group_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_group_stmt) {
			listener.enterCreate_group_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_group_stmt) {
			listener.exitCreate_group_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_group_stmt) {
			return visitor.visitCreate_group_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_index_stmtContext extends ParserRuleContext {
	public _index_name!: IdentifierContext;
	public _tableName!: IdentifierContext;
	public _tablespace_name!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public INDEX(): TerminalNode { return this.getToken(PostgreSQLParserParser.INDEX, 0); }
	public ON(): TerminalNode { return this.getToken(PostgreSQLParserParser.ON, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNIQUE, 0); }
	public CONCURRENTLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONCURRENTLY, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USING, 0); }
	public index_method(): Index_methodContext | undefined {
		return this.tryGetRuleContext(0, Index_methodContext);
	}
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLESPACE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WHERE, 0); }
	public predicate(): PredicateContext | undefined {
		return this.tryGetRuleContext(0, PredicateContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_index_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_index_stmt) {
			listener.enterCreate_index_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_index_stmt) {
			listener.exitCreate_index_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_index_stmt) {
			return visitor.visitCreate_index_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_language_stmtContext extends ParserRuleContext {
	public _language_name!: IdentifierContext;
	public _call_handler!: IdentifierContext;
	public _inline_handler!: IdentifierContext;
	public _valfunction!: IdentifierContext;
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CREATE, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LANGUAGE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REPLACE, 0); }
	public PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PROCEDURAL, 0); }
	public HANDLER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HANDLER, 0); }
	public TRUSTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRUSTED, 0); }
	public INLINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INLINE, 0); }
	public VALIDATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALIDATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_language_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_language_stmt) {
			listener.enterCreate_language_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_language_stmt) {
			listener.exitCreate_language_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_language_stmt) {
			return visitor.visitCreate_language_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_materialized_view_stmtContext extends ParserRuleContext {
	public _tableName!: IdentifierContext;
	public _columns!: Identifier_listContext;
	public _tablespace_name!: IdentifierContext;
	public _query!: Select_stmtContext;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(PostgreSQLParserParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(PostgreSQLParserParser.VIEW, 0); }
	public AS(): TerminalNode { return this.getToken(PostgreSQLParserParser.AS, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public select_stmt(): Select_stmtContext {
		return this.getRuleContext(0, Select_stmtContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.WITH);
		} else {
			return this.getToken(PostgreSQLParserParser.WITH, i);
		}
	}
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLESPACE, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DATA, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_materialized_view_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_materialized_view_stmt) {
			listener.enterCreate_materialized_view_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_materialized_view_stmt) {
			listener.exitCreate_materialized_view_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_materialized_view_stmt) {
			return visitor.visitCreate_materialized_view_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_operator_stmtContext extends ParserRuleContext {
	public _opName!: IdentifierContext;
	public _function_name!: IdentifierContext;
	public _left_type!: Name_Context;
	public _right_type!: Name_Context;
	public _com_op!: Name_Context;
	public _neg_op!: Name_Context;
	public _res_proc!: Name_Context;
	public _join_proc!: Name_Context;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPERATOR, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public PROCEDURE(): TerminalNode { return this.getToken(PostgreSQLParserParser.PROCEDURE, 0); }
	public EQUAL(): TerminalNode[];
	public EQUAL(i: number): TerminalNode;
	public EQUAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.EQUAL);
		} else {
			return this.getToken(PostgreSQLParserParser.EQUAL, i);
		}
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public LEFTARG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LEFTARG, 0); }
	public RIGHTARG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RIGHTARG, 0); }
	public COMMUTATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COMMUTATOR, 0); }
	public NEGATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NEGATOR, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.JOIN, 0); }
	public HASHES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HASHES, 0); }
	public MERGES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MERGES, 0); }
	public name_(): Name_Context[];
	public name_(i: number): Name_Context;
	public name_(i?: number): Name_Context | Name_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Name_Context);
		} else {
			return this.getRuleContext(i, Name_Context);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_operator_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_operator_stmt) {
			listener.enterCreate_operator_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_operator_stmt) {
			listener.exitCreate_operator_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_operator_stmt) {
			return visitor.visitCreate_operator_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_operator_class_optContext extends ParserRuleContext {
	public _strategy_number!: Token;
	public _opName!: IdentifierContext;
	public _support_number!: Token;
	public _func_name_!: IdentifierContext;
	public _storage_type!: IdentifierContext;
	public OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPERATOR, 0); }
	public INTEGER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER_LITERAL, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COMMA, 0); }
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FUNCTION, 0); }
	public data_type_list(): Data_type_listContext | undefined {
		return this.tryGetRuleContext(0, Data_type_listContext);
	}
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STORAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_operator_class_opt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_operator_class_opt) {
			listener.enterCreate_operator_class_opt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_operator_class_opt) {
			listener.exitCreate_operator_class_opt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_operator_class_opt) {
			return visitor.visitCreate_operator_class_opt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_operator_class_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _op_type!: IdentifierContext;
	public _family_name!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPERATOR, 0); }
	public CLASS(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLASS, 0); }
	public FOR(): TerminalNode { return this.getToken(PostgreSQLParserParser.FOR, 0); }
	public TYPE(): TerminalNode { return this.getToken(PostgreSQLParserParser.TYPE, 0); }
	public USING(): TerminalNode { return this.getToken(PostgreSQLParserParser.USING, 0); }
	public index_method(): Index_methodContext {
		return this.getRuleContext(0, Index_methodContext);
	}
	public AS(): TerminalNode { return this.getToken(PostgreSQLParserParser.AS, 0); }
	public create_operator_class_opt(): Create_operator_class_optContext[];
	public create_operator_class_opt(i: number): Create_operator_class_optContext;
	public create_operator_class_opt(i?: number): Create_operator_class_optContext | Create_operator_class_optContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_operator_class_optContext);
		} else {
			return this.getRuleContext(i, Create_operator_class_optContext);
		}
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFAULT, 0); }
	public FAMILY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FAMILY, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_operator_class_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_operator_class_stmt) {
			listener.enterCreate_operator_class_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_operator_class_stmt) {
			listener.exitCreate_operator_class_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_operator_class_stmt) {
			return visitor.visitCreate_operator_class_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_operator_family_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPERATOR, 0); }
	public FAMILY(): TerminalNode { return this.getToken(PostgreSQLParserParser.FAMILY, 0); }
	public USING(): TerminalNode { return this.getToken(PostgreSQLParserParser.USING, 0); }
	public index_method(): Index_methodContext {
		return this.getRuleContext(0, Index_methodContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_operator_family_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_operator_family_stmt) {
			listener.enterCreate_operator_family_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_operator_family_stmt) {
			listener.exitCreate_operator_family_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_operator_family_stmt) {
			return visitor.visitCreate_operator_family_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_policy_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _tableName!: IdentifierContext;
	public _role!: Role_nameContext;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public POLICY(): TerminalNode { return this.getToken(PostgreSQLParserParser.POLICY, 0); }
	public ON(): TerminalNode { return this.getToken(PostgreSQLParserParser.ON, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FOR, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USING, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHECK, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SELECT, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INSERT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UPDATE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DELETE, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_policy_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_policy_stmt) {
			listener.enterCreate_policy_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_policy_stmt) {
			listener.exitCreate_policy_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_policy_stmt) {
			return visitor.visitCreate_policy_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_role_stmtContext extends ParserRuleContext {
	public _role!: Role_nameContext;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public ROLE(): TerminalNode[];
	public ROLE(i: number): TerminalNode;
	public ROLE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ROLE);
		} else {
			return this.getToken(PostgreSQLParserParser.ROLE, i);
		}
	}
	public role_name(): Role_nameContext {
		return this.getRuleContext(0, Role_nameContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public SUPERUSER(): TerminalNode[];
	public SUPERUSER(i: number): TerminalNode;
	public SUPERUSER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.SUPERUSER);
		} else {
			return this.getToken(PostgreSQLParserParser.SUPERUSER, i);
		}
	}
	public NOSUPERUSER(): TerminalNode[];
	public NOSUPERUSER(i: number): TerminalNode;
	public NOSUPERUSER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOSUPERUSER);
		} else {
			return this.getToken(PostgreSQLParserParser.NOSUPERUSER, i);
		}
	}
	public CREATEDB(): TerminalNode[];
	public CREATEDB(i: number): TerminalNode;
	public CREATEDB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CREATEDB);
		} else {
			return this.getToken(PostgreSQLParserParser.CREATEDB, i);
		}
	}
	public NOCREATEDB(): TerminalNode[];
	public NOCREATEDB(i: number): TerminalNode;
	public NOCREATEDB(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOCREATEDB);
		} else {
			return this.getToken(PostgreSQLParserParser.NOCREATEDB, i);
		}
	}
	public CREATEROLE(): TerminalNode[];
	public CREATEROLE(i: number): TerminalNode;
	public CREATEROLE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CREATEROLE);
		} else {
			return this.getToken(PostgreSQLParserParser.CREATEROLE, i);
		}
	}
	public NOCREATEROLE(): TerminalNode[];
	public NOCREATEROLE(i: number): TerminalNode;
	public NOCREATEROLE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOCREATEROLE);
		} else {
			return this.getToken(PostgreSQLParserParser.NOCREATEROLE, i);
		}
	}
	public INHERIT(): TerminalNode[];
	public INHERIT(i: number): TerminalNode;
	public INHERIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.INHERIT);
		} else {
			return this.getToken(PostgreSQLParserParser.INHERIT, i);
		}
	}
	public NOINHERIT(): TerminalNode[];
	public NOINHERIT(i: number): TerminalNode;
	public NOINHERIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOINHERIT);
		} else {
			return this.getToken(PostgreSQLParserParser.NOINHERIT, i);
		}
	}
	public LOGIN(): TerminalNode[];
	public LOGIN(i: number): TerminalNode;
	public LOGIN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.LOGIN);
		} else {
			return this.getToken(PostgreSQLParserParser.LOGIN, i);
		}
	}
	public NOLOGIN(): TerminalNode[];
	public NOLOGIN(i: number): TerminalNode;
	public NOLOGIN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOLOGIN);
		} else {
			return this.getToken(PostgreSQLParserParser.NOLOGIN, i);
		}
	}
	public REPLICATION(): TerminalNode[];
	public REPLICATION(i: number): TerminalNode;
	public REPLICATION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.REPLICATION);
		} else {
			return this.getToken(PostgreSQLParserParser.REPLICATION, i);
		}
	}
	public NOREPLICATION(): TerminalNode[];
	public NOREPLICATION(i: number): TerminalNode;
	public NOREPLICATION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOREPLICATION);
		} else {
			return this.getToken(PostgreSQLParserParser.NOREPLICATION, i);
		}
	}
	public BYPASSRLS(): TerminalNode[];
	public BYPASSRLS(i: number): TerminalNode;
	public BYPASSRLS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.BYPASSRLS);
		} else {
			return this.getToken(PostgreSQLParserParser.BYPASSRLS, i);
		}
	}
	public NOBYPASSRLS(): TerminalNode[];
	public NOBYPASSRLS(i: number): TerminalNode;
	public NOBYPASSRLS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOBYPASSRLS);
		} else {
			return this.getToken(PostgreSQLParserParser.NOBYPASSRLS, i);
		}
	}
	public CONNECTION(): TerminalNode[];
	public CONNECTION(i: number): TerminalNode;
	public CONNECTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CONNECTION);
		} else {
			return this.getToken(PostgreSQLParserParser.CONNECTION, i);
		}
	}
	public LIMIT(): TerminalNode[];
	public LIMIT(i: number): TerminalNode;
	public LIMIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.LIMIT);
		} else {
			return this.getToken(PostgreSQLParserParser.LIMIT, i);
		}
	}
	public INTEGER_LITERAL(): TerminalNode[];
	public INTEGER_LITERAL(i: number): TerminalNode;
	public INTEGER_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.INTEGER_LITERAL);
		} else {
			return this.getToken(PostgreSQLParserParser.INTEGER_LITERAL, i);
		}
	}
	public PASSWORD(): TerminalNode[];
	public PASSWORD(i: number): TerminalNode;
	public PASSWORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.PASSWORD);
		} else {
			return this.getToken(PostgreSQLParserParser.PASSWORD, i);
		}
	}
	public VALID(): TerminalNode[];
	public VALID(i: number): TerminalNode;
	public VALID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.VALID);
		} else {
			return this.getToken(PostgreSQLParserParser.VALID, i);
		}
	}
	public UNTIL(): TerminalNode[];
	public UNTIL(i: number): TerminalNode;
	public UNTIL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.UNTIL);
		} else {
			return this.getToken(PostgreSQLParserParser.UNTIL, i);
		}
	}
	public SINGLEQ_STRING_LITERAL(): TerminalNode[];
	public SINGLEQ_STRING_LITERAL(i: number): TerminalNode;
	public SINGLEQ_STRING_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL);
		} else {
			return this.getToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, i);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.IN);
		} else {
			return this.getToken(PostgreSQLParserParser.IN, i);
		}
	}
	public name_list(): Name_listContext[];
	public name_list(i: number): Name_listContext;
	public name_list(i?: number): Name_listContext | Name_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Name_listContext);
		} else {
			return this.getRuleContext(i, Name_listContext);
		}
	}
	public GROUP(): TerminalNode[];
	public GROUP(i: number): TerminalNode;
	public GROUP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.GROUP);
		} else {
			return this.getToken(PostgreSQLParserParser.GROUP, i);
		}
	}
	public ADMIN(): TerminalNode[];
	public ADMIN(i: number): TerminalNode;
	public ADMIN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ADMIN);
		} else {
			return this.getToken(PostgreSQLParserParser.ADMIN, i);
		}
	}
	public USER(): TerminalNode[];
	public USER(i: number): TerminalNode;
	public USER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.USER);
		} else {
			return this.getToken(PostgreSQLParserParser.USER, i);
		}
	}
	public SYSID(): TerminalNode[];
	public SYSID(i: number): TerminalNode;
	public SYSID(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.SYSID);
		} else {
			return this.getToken(PostgreSQLParserParser.SYSID, i);
		}
	}
	public NULL(): TerminalNode[];
	public NULL(i: number): TerminalNode;
	public NULL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NULL);
		} else {
			return this.getToken(PostgreSQLParserParser.NULL, i);
		}
	}
	public ENCRYPTED(): TerminalNode[];
	public ENCRYPTED(i: number): TerminalNode;
	public ENCRYPTED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ENCRYPTED);
		} else {
			return this.getToken(PostgreSQLParserParser.ENCRYPTED, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_role_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_role_stmt) {
			listener.enterCreate_role_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_role_stmt) {
			listener.exitCreate_role_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_role_stmt) {
			return visitor.visitCreate_role_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_rule_eventContext extends ParserRuleContext {
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SELECT, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INSERT, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UPDATE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DELETE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_rule_event; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_rule_event) {
			listener.enterCreate_rule_event(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_rule_event) {
			listener.exitCreate_rule_event(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_rule_event) {
			return visitor.visitCreate_rule_event(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_rule_stmtContext extends ParserRuleContext {
	public _name!: Name_Context;
	public _event!: Create_rule_eventContext;
	public _tableName!: IdentifierContext;
	public _command!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public RULE(): TerminalNode { return this.getToken(PostgreSQLParserParser.RULE, 0); }
	public AS(): TerminalNode { return this.getToken(PostgreSQLParserParser.AS, 0); }
	public ON(): TerminalNode { return this.getToken(PostgreSQLParserParser.ON, 0); }
	public TO(): TerminalNode { return this.getToken(PostgreSQLParserParser.TO, 0); }
	public DO(): TerminalNode { return this.getToken(PostgreSQLParserParser.DO, 0); }
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	public create_rule_event(): Create_rule_eventContext {
		return this.getRuleContext(0, Create_rule_eventContext);
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public NOTHING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOTHING, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REPLACE, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WHERE, 0); }
	public predicate(): PredicateContext | undefined {
		return this.tryGetRuleContext(0, PredicateContext);
	}
	public ALSO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALSO, 0); }
	public INSTEAD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INSTEAD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_rule_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_rule_stmt) {
			listener.enterCreate_rule_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_rule_stmt) {
			listener.exitCreate_rule_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_rule_stmt) {
			return visitor.visitCreate_rule_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_schema_stmtContext extends ParserRuleContext {
	public _schema_name!: IdentifierContext;
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CREATE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AUTHORIZATION, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	public todo_fill_in(): Todo_fill_inContext | undefined {
		return this.tryGetRuleContext(0, Todo_fill_inContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_schema_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_schema_stmt) {
			listener.enterCreate_schema_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_schema_stmt) {
			listener.exitCreate_schema_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_schema_stmt) {
			return visitor.visitCreate_schema_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_sequence_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _increment!: Token;
	public _minvalue!: Token;
	public _maxvalue!: Token;
	public _start!: Token;
	public _cache!: Token;
	public _table_name!: IdentifierContext;
	public _column_name_!: IdentifierContext;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public SEQUENCE(): TerminalNode { return this.getToken(PostgreSQLParserParser.SEQUENCE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public INCREMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INCREMENT, 0); }
	public MINVALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MINVALUE, 0); }
	public NO(): TerminalNode[];
	public NO(i: number): TerminalNode;
	public NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NO);
		} else {
			return this.getToken(PostgreSQLParserParser.NO, i);
		}
	}
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MAXVALUE, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.START, 0); }
	public CACHE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CACHE, 0); }
	public CYCLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CYCLE, 0); }
	public OWNED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNED, 0); }
	public BY(): TerminalNode[];
	public BY(i: number): TerminalNode;
	public BY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.BY);
		} else {
			return this.getToken(PostgreSQLParserParser.BY, i);
		}
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEMPORARY, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEMP, 0); }
	public INTEGER_LITERAL(): TerminalNode[];
	public INTEGER_LITERAL(i: number): TerminalNode;
	public INTEGER_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.INTEGER_LITERAL);
		} else {
			return this.getToken(PostgreSQLParserParser.INTEGER_LITERAL, i);
		}
	}
	public NONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NONE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_sequence_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_sequence_stmt) {
			listener.enterCreate_sequence_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_sequence_stmt) {
			listener.exitCreate_sequence_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_sequence_stmt) {
			return visitor.visitCreate_sequence_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_server_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_server_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_server_stmt) {
			listener.enterCreate_server_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_server_stmt) {
			listener.exitCreate_server_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_server_stmt) {
			return visitor.visitCreate_server_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_statistics_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_statistics_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_statistics_stmt) {
			listener.enterCreate_statistics_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_statistics_stmt) {
			listener.exitCreate_statistics_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_statistics_stmt) {
			return visitor.visitCreate_statistics_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_subscription_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_subscription_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_subscription_stmt) {
			listener.enterCreate_subscription_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_subscription_stmt) {
			listener.exitCreate_subscription_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_subscription_stmt) {
			return visitor.visitCreate_subscription_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_table_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_table_stmt) {
			listener.enterCreate_table_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_table_stmt) {
			listener.exitCreate_table_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_table_stmt) {
			return visitor.visitCreate_table_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_table_as_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_table_as_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_table_as_stmt) {
			listener.enterCreate_table_as_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_table_as_stmt) {
			listener.exitCreate_table_as_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_table_as_stmt) {
			return visitor.visitCreate_table_as_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_tablespace_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_tablespace_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_tablespace_stmt) {
			listener.enterCreate_tablespace_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_tablespace_stmt) {
			listener.exitCreate_tablespace_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_tablespace_stmt) {
			return visitor.visitCreate_tablespace_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_text_search_config_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_text_search_config_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_text_search_config_stmt) {
			listener.enterCreate_text_search_config_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_text_search_config_stmt) {
			listener.exitCreate_text_search_config_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_text_search_config_stmt) {
			return visitor.visitCreate_text_search_config_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_text_search_dict_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_text_search_dict_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_text_search_dict_stmt) {
			listener.enterCreate_text_search_dict_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_text_search_dict_stmt) {
			listener.exitCreate_text_search_dict_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_text_search_dict_stmt) {
			return visitor.visitCreate_text_search_dict_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_text_search_parser_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_text_search_parser_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_text_search_parser_stmt) {
			listener.enterCreate_text_search_parser_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_text_search_parser_stmt) {
			listener.exitCreate_text_search_parser_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_text_search_parser_stmt) {
			return visitor.visitCreate_text_search_parser_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_text_search_template_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_text_search_template_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_text_search_template_stmt) {
			listener.enterCreate_text_search_template_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_text_search_template_stmt) {
			listener.exitCreate_text_search_template_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_text_search_template_stmt) {
			return visitor.visitCreate_text_search_template_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_transform_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_transform_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_transform_stmt) {
			listener.enterCreate_transform_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_transform_stmt) {
			listener.exitCreate_transform_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_transform_stmt) {
			return visitor.visitCreate_transform_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_trigger_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_trigger_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_trigger_stmt) {
			listener.enterCreate_trigger_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_trigger_stmt) {
			listener.exitCreate_trigger_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_trigger_stmt) {
			return visitor.visitCreate_trigger_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_type_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_type_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_type_stmt) {
			listener.enterCreate_type_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_type_stmt) {
			listener.exitCreate_type_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_type_stmt) {
			return visitor.visitCreate_type_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_user_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_user_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_user_stmt) {
			listener.enterCreate_user_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_user_stmt) {
			listener.exitCreate_user_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_user_stmt) {
			return visitor.visitCreate_user_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_user_mapping_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_user_mapping_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_user_mapping_stmt) {
			listener.enterCreate_user_mapping_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_user_mapping_stmt) {
			listener.exitCreate_user_mapping_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_user_mapping_stmt) {
			return visitor.visitCreate_user_mapping_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_view_stmtContext extends ParserRuleContext {
	public _name!: Name_Context;
	public CREATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CREATE, 0); }
	public VIEW(): TerminalNode { return this.getToken(PostgreSQLParserParser.VIEW, 0); }
	public AS(): TerminalNode { return this.getToken(PostgreSQLParserParser.AS, 0); }
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public values_stmt(): Values_stmtContext | undefined {
		return this.tryGetRuleContext(0, Values_stmtContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REPLACE, 0); }
	public RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RECURSIVE, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public WITH(): TerminalNode[];
	public WITH(i: number): TerminalNode;
	public WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.WITH);
		} else {
			return this.getToken(PostgreSQLParserParser.WITH, i);
		}
	}
	public option_list(): Option_listContext | undefined {
		return this.tryGetRuleContext(0, Option_listContext);
	}
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHECK, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPTION, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEMP, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEMPORARY, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADED, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_create_view_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_view_stmt) {
			listener.enterCreate_view_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_view_stmt) {
			listener.exitCreate_view_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_view_stmt) {
			return visitor.visitCreate_view_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Deallocate_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_deallocate_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDeallocate_stmt) {
			listener.enterDeallocate_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDeallocate_stmt) {
			listener.exitDeallocate_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDeallocate_stmt) {
			return visitor.visitDeallocate_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Declare_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_declare_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDeclare_stmt) {
			listener.enterDeclare_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDeclare_stmt) {
			listener.exitDeclare_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDeclare_stmt) {
			return visitor.visitDeclare_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Delete_stmtContext extends ParserRuleContext {
	public _cursor_name_!: IdentifierContext;
	public DELETE(): TerminalNode { return this.getToken(PostgreSQLParserParser.DELETE, 0); }
	public FROM(): TerminalNode { return this.getToken(PostgreSQLParserParser.FROM, 0); }
	public table_name_(): Table_name_Context {
		return this.getRuleContext(0, Table_name_Context);
	}
	public with_clause(): With_clauseContext | undefined {
		return this.tryGetRuleContext(0, With_clauseContext);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ONLY, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STAR, 0); }
	public alias(): AliasContext | undefined {
		return this.tryGetRuleContext(0, AliasContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USING, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public returning_clause(): Returning_clauseContext | undefined {
		return this.tryGetRuleContext(0, Returning_clauseContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WHERE, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OF, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AS, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_delete_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDelete_stmt) {
			listener.enterDelete_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDelete_stmt) {
			listener.exitDelete_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDelete_stmt) {
			return visitor.visitDelete_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Discard_stmtContext extends ParserRuleContext {
	public DISCARD(): TerminalNode { return this.getToken(PostgreSQLParserParser.DISCARD, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public PLANS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PLANS, 0); }
	public SEQUENCES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SEQUENCES, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEMPORARY, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEMP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_discard_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDiscard_stmt) {
			listener.enterDiscard_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDiscard_stmt) {
			listener.exitDiscard_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDiscard_stmt) {
			return visitor.visitDiscard_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_stmtContext extends ParserRuleContext {
	public drop_access_method_stmt(): Drop_access_method_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_access_method_stmtContext);
	}
	public drop_aggregate_stmt(): Drop_aggregate_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_aggregate_stmtContext);
	}
	public drop_cast_stmt(): Drop_cast_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_cast_stmtContext);
	}
	public drop_collation_stmt(): Drop_collation_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_collation_stmtContext);
	}
	public drop_conversion_stmt(): Drop_conversion_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_conversion_stmtContext);
	}
	public drop_database_stmt(): Drop_database_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_database_stmtContext);
	}
	public drop_domain_stmt(): Drop_domain_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_domain_stmtContext);
	}
	public drop_event_trigger_stmt(): Drop_event_trigger_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_event_trigger_stmtContext);
	}
	public drop_extension_stmt(): Drop_extension_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_extension_stmtContext);
	}
	public drop_foreign_data_wrapper_stmt(): Drop_foreign_data_wrapper_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_foreign_data_wrapper_stmtContext);
	}
	public drop_foreign_table_stmt(): Drop_foreign_table_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_foreign_table_stmtContext);
	}
	public drop_function_stmt(): Drop_function_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_function_stmtContext);
	}
	public drop_group_stmt(): Drop_group_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_group_stmtContext);
	}
	public drop_index_stmt(): Drop_index_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_index_stmtContext);
	}
	public drop_language_stmt(): Drop_language_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_language_stmtContext);
	}
	public drop_materialized_view_stmt(): Drop_materialized_view_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_materialized_view_stmtContext);
	}
	public drop_operator_stmt(): Drop_operator_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_operator_stmtContext);
	}
	public drop_operator_class_stmt(): Drop_operator_class_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_operator_class_stmtContext);
	}
	public drop_operator_family_stmt(): Drop_operator_family_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_operator_family_stmtContext);
	}
	public drop_owned_stmt(): Drop_owned_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_owned_stmtContext);
	}
	public drop_policy_stmt(): Drop_policy_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_policy_stmtContext);
	}
	public drop_publication_stmt(): Drop_publication_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_publication_stmtContext);
	}
	public drop_role_stmt(): Drop_role_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_role_stmtContext);
	}
	public drop_rule_stmt(): Drop_rule_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_rule_stmtContext);
	}
	public drop_schema_stmt(): Drop_schema_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_schema_stmtContext);
	}
	public drop_sequence_stmt(): Drop_sequence_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_sequence_stmtContext);
	}
	public drop_server_stmt(): Drop_server_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_server_stmtContext);
	}
	public drop_statistics_stmt(): Drop_statistics_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_statistics_stmtContext);
	}
	public drop_subscription_stmt(): Drop_subscription_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_subscription_stmtContext);
	}
	public drop_table_stmt(): Drop_table_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_table_stmtContext);
	}
	public drop_tablespace_stmt(): Drop_tablespace_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_tablespace_stmtContext);
	}
	public drop_text_search_config_stmt(): Drop_text_search_config_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_text_search_config_stmtContext);
	}
	public drop_text_search_dict_stmt(): Drop_text_search_dict_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_text_search_dict_stmtContext);
	}
	public drop_text_search_parser_stmt(): Drop_text_search_parser_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_text_search_parser_stmtContext);
	}
	public drop_text_search_template_stmt(): Drop_text_search_template_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_text_search_template_stmtContext);
	}
	public drop_transform_stmt(): Drop_transform_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_transform_stmtContext);
	}
	public drop_trigger_stmt(): Drop_trigger_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_trigger_stmtContext);
	}
	public drop_type_stmt(): Drop_type_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_type_stmtContext);
	}
	public drop_user_stmt(): Drop_user_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_user_stmtContext);
	}
	public drop_user_mapping_stmt(): Drop_user_mapping_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_user_mapping_stmtContext);
	}
	public drop_view_stmt(): Drop_view_stmtContext | undefined {
		return this.tryGetRuleContext(0, Drop_view_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_stmt) {
			listener.enterDrop_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_stmt) {
			listener.exitDrop_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_stmt) {
			return visitor.visitDrop_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_access_method_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public ACCESS(): TerminalNode { return this.getToken(PostgreSQLParserParser.ACCESS, 0); }
	public METHOD(): TerminalNode { return this.getToken(PostgreSQLParserParser.METHOD, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_access_method_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_access_method_stmt) {
			listener.enterDrop_access_method_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_access_method_stmt) {
			listener.exitDrop_access_method_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_access_method_stmt) {
			return visitor.visitDrop_access_method_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_aggregate_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public AGGREGATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.AGGREGATE, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public aggregate_signature(): Aggregate_signatureContext {
		return this.getRuleContext(0, Aggregate_signatureContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_aggregate_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_aggregate_stmt) {
			listener.enterDrop_aggregate_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_aggregate_stmt) {
			listener.exitDrop_aggregate_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_aggregate_stmt) {
			return visitor.visitDrop_aggregate_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_cast_stmtContext extends ParserRuleContext {
	public _source_type!: Data_typeContext;
	public _target_type!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public CAST(): TerminalNode { return this.getToken(PostgreSQLParserParser.CAST, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public AS(): TerminalNode { return this.getToken(PostgreSQLParserParser.AS, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public data_type(): Data_typeContext {
		return this.getRuleContext(0, Data_typeContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_cast_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_cast_stmt) {
			listener.enterDrop_cast_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_cast_stmt) {
			listener.exitDrop_cast_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_cast_stmt) {
			return visitor.visitDrop_cast_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_collation_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public COLLATION(): TerminalNode { return this.getToken(PostgreSQLParserParser.COLLATION, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_collation_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_collation_stmt) {
			listener.enterDrop_collation_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_collation_stmt) {
			listener.exitDrop_collation_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_collation_stmt) {
			return visitor.visitDrop_collation_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_conversion_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public CONVERSION(): TerminalNode { return this.getToken(PostgreSQLParserParser.CONVERSION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_conversion_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_conversion_stmt) {
			listener.enterDrop_conversion_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_conversion_stmt) {
			listener.exitDrop_conversion_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_conversion_stmt) {
			return visitor.visitDrop_conversion_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_database_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public DATABASE(): TerminalNode { return this.getToken(PostgreSQLParserParser.DATABASE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_database_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_database_stmt) {
			listener.enterDrop_database_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_database_stmt) {
			listener.exitDrop_database_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_database_stmt) {
			return visitor.visitDrop_database_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_domain_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public DOMAIN(): TerminalNode { return this.getToken(PostgreSQLParserParser.DOMAIN, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_domain_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_domain_stmt) {
			listener.enterDrop_domain_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_domain_stmt) {
			listener.exitDrop_domain_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_domain_stmt) {
			return visitor.visitDrop_domain_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_event_trigger_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public EVENT(): TerminalNode { return this.getToken(PostgreSQLParserParser.EVENT, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(PostgreSQLParserParser.TRIGGER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_event_trigger_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_event_trigger_stmt) {
			listener.enterDrop_event_trigger_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_event_trigger_stmt) {
			listener.exitDrop_event_trigger_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_event_trigger_stmt) {
			return visitor.visitDrop_event_trigger_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_extension_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public EXTENSION(): TerminalNode { return this.getToken(PostgreSQLParserParser.EXTENSION, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_extension_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_extension_stmt) {
			listener.enterDrop_extension_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_extension_stmt) {
			listener.exitDrop_extension_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_extension_stmt) {
			return visitor.visitDrop_extension_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_foreign_data_wrapper_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public FOREIGN(): TerminalNode { return this.getToken(PostgreSQLParserParser.FOREIGN, 0); }
	public DATA(): TerminalNode { return this.getToken(PostgreSQLParserParser.DATA, 0); }
	public WRAPPER(): TerminalNode { return this.getToken(PostgreSQLParserParser.WRAPPER, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_foreign_data_wrapper_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_foreign_data_wrapper_stmt) {
			listener.enterDrop_foreign_data_wrapper_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_foreign_data_wrapper_stmt) {
			listener.exitDrop_foreign_data_wrapper_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_foreign_data_wrapper_stmt) {
			return visitor.visitDrop_foreign_data_wrapper_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_foreign_table_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public FOREIGN(): TerminalNode { return this.getToken(PostgreSQLParserParser.FOREIGN, 0); }
	public TABLE(): TerminalNode { return this.getToken(PostgreSQLParserParser.TABLE, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_foreign_table_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_foreign_table_stmt) {
			listener.enterDrop_foreign_table_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_foreign_table_stmt) {
			listener.exitDrop_foreign_table_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_foreign_table_stmt) {
			return visitor.visitDrop_foreign_table_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_function_stmtContext extends ParserRuleContext {
	public _functions!: Func_sig_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public FUNCTION(): TerminalNode { return this.getToken(PostgreSQLParserParser.FUNCTION, 0); }
	public func_sig_list(): Func_sig_listContext {
		return this.getRuleContext(0, Func_sig_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_function_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_function_stmt) {
			listener.enterDrop_function_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_function_stmt) {
			listener.exitDrop_function_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_function_stmt) {
			return visitor.visitDrop_function_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_group_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public GROUP(): TerminalNode { return this.getToken(PostgreSQLParserParser.GROUP, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_group_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_group_stmt) {
			listener.enterDrop_group_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_group_stmt) {
			listener.exitDrop_group_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_group_stmt) {
			return visitor.visitDrop_group_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_index_stmtContext extends ParserRuleContext {
	public _names!: Name_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public INDEX(): TerminalNode { return this.getToken(PostgreSQLParserParser.INDEX, 0); }
	public name_list(): Name_listContext {
		return this.getRuleContext(0, Name_listContext);
	}
	public CONCURRENTLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONCURRENTLY, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_index_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_index_stmt) {
			listener.enterDrop_index_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_index_stmt) {
			listener.exitDrop_index_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_index_stmt) {
			return visitor.visitDrop_index_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_language_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public LANGUAGE(): TerminalNode { return this.getToken(PostgreSQLParserParser.LANGUAGE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PROCEDURAL, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_language_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_language_stmt) {
			listener.enterDrop_language_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_language_stmt) {
			listener.exitDrop_language_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_language_stmt) {
			return visitor.visitDrop_language_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_materialized_view_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public MATERIALIZED(): TerminalNode { return this.getToken(PostgreSQLParserParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode { return this.getToken(PostgreSQLParserParser.VIEW, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_materialized_view_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_materialized_view_stmt) {
			listener.enterDrop_materialized_view_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_materialized_view_stmt) {
			listener.exitDrop_materialized_view_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_materialized_view_stmt) {
			return visitor.visitDrop_materialized_view_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_operator_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_operator_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_operator_stmt) {
			listener.enterDrop_operator_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_operator_stmt) {
			listener.exitDrop_operator_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_operator_stmt) {
			return visitor.visitDrop_operator_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_operator_class_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPERATOR, 0); }
	public CLASS(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLASS, 0); }
	public USING(): TerminalNode { return this.getToken(PostgreSQLParserParser.USING, 0); }
	public index_method(): Index_methodContext {
		return this.getRuleContext(0, Index_methodContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_operator_class_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_operator_class_stmt) {
			listener.enterDrop_operator_class_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_operator_class_stmt) {
			listener.exitDrop_operator_class_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_operator_class_stmt) {
			return visitor.visitDrop_operator_class_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_operator_family_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPERATOR, 0); }
	public FAMILY(): TerminalNode { return this.getToken(PostgreSQLParserParser.FAMILY, 0); }
	public USING(): TerminalNode { return this.getToken(PostgreSQLParserParser.USING, 0); }
	public index_method(): Index_methodContext {
		return this.getRuleContext(0, Index_methodContext);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_operator_family_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_operator_family_stmt) {
			listener.enterDrop_operator_family_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_operator_family_stmt) {
			listener.exitDrop_operator_family_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_operator_family_stmt) {
			return visitor.visitDrop_operator_family_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_owned_stmtContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public OWNED(): TerminalNode { return this.getToken(PostgreSQLParserParser.OWNED, 0); }
	public BY(): TerminalNode { return this.getToken(PostgreSQLParserParser.BY, 0); }
	public role_name_list(): Role_name_listContext {
		return this.getRuleContext(0, Role_name_listContext);
	}
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_owned_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_owned_stmt) {
			listener.enterDrop_owned_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_owned_stmt) {
			listener.exitDrop_owned_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_owned_stmt) {
			return visitor.visitDrop_owned_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_policy_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _table_name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public POLICY(): TerminalNode { return this.getToken(PostgreSQLParserParser.POLICY, 0); }
	public ON(): TerminalNode { return this.getToken(PostgreSQLParserParser.ON, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_policy_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_policy_stmt) {
			listener.enterDrop_policy_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_policy_stmt) {
			listener.exitDrop_policy_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_policy_stmt) {
			return visitor.visitDrop_policy_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_publication_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public PUBLICATION(): TerminalNode { return this.getToken(PostgreSQLParserParser.PUBLICATION, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_publication_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_publication_stmt) {
			listener.enterDrop_publication_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_publication_stmt) {
			listener.exitDrop_publication_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_publication_stmt) {
			return visitor.visitDrop_publication_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_role_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public ROLE(): TerminalNode { return this.getToken(PostgreSQLParserParser.ROLE, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_role_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_role_stmt) {
			listener.enterDrop_role_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_role_stmt) {
			listener.exitDrop_role_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_role_stmt) {
			return visitor.visitDrop_role_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_rule_stmtContext extends ParserRuleContext {
	public _name!: Name_Context;
	public _table_name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public RULE(): TerminalNode { return this.getToken(PostgreSQLParserParser.RULE, 0); }
	public ON(): TerminalNode { return this.getToken(PostgreSQLParserParser.ON, 0); }
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_rule_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_rule_stmt) {
			listener.enterDrop_rule_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_rule_stmt) {
			listener.exitDrop_rule_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_rule_stmt) {
			return visitor.visitDrop_rule_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_schema_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public SCHEMA(): TerminalNode { return this.getToken(PostgreSQLParserParser.SCHEMA, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_schema_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_schema_stmt) {
			listener.enterDrop_schema_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_schema_stmt) {
			listener.exitDrop_schema_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_schema_stmt) {
			return visitor.visitDrop_schema_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_sequence_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public SEQUENCE(): TerminalNode { return this.getToken(PostgreSQLParserParser.SEQUENCE, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_sequence_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_sequence_stmt) {
			listener.enterDrop_sequence_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_sequence_stmt) {
			listener.exitDrop_sequence_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_sequence_stmt) {
			return visitor.visitDrop_sequence_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_server_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public SERVER(): TerminalNode { return this.getToken(PostgreSQLParserParser.SERVER, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_server_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_server_stmt) {
			listener.enterDrop_server_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_server_stmt) {
			listener.exitDrop_server_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_server_stmt) {
			return visitor.visitDrop_server_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_statistics_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public STATISTICS(): TerminalNode { return this.getToken(PostgreSQLParserParser.STATISTICS, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_statistics_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_statistics_stmt) {
			listener.enterDrop_statistics_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_statistics_stmt) {
			listener.exitDrop_statistics_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_statistics_stmt) {
			return visitor.visitDrop_statistics_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_subscription_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public SUBSCRIPTION(): TerminalNode { return this.getToken(PostgreSQLParserParser.SUBSCRIPTION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_subscription_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_subscription_stmt) {
			listener.enterDrop_subscription_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_subscription_stmt) {
			listener.exitDrop_subscription_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_subscription_stmt) {
			return visitor.visitDrop_subscription_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_table_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public TABLE(): TerminalNode { return this.getToken(PostgreSQLParserParser.TABLE, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_table_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_table_stmt) {
			listener.enterDrop_table_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_table_stmt) {
			listener.exitDrop_table_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_table_stmt) {
			return visitor.visitDrop_table_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_tablespace_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public TABLESPACE(): TerminalNode { return this.getToken(PostgreSQLParserParser.TABLESPACE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_tablespace_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_tablespace_stmt) {
			listener.enterDrop_tablespace_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_tablespace_stmt) {
			listener.exitDrop_tablespace_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_tablespace_stmt) {
			return visitor.visitDrop_tablespace_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_text_search_config_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public TEXT(): TerminalNode { return this.getToken(PostgreSQLParserParser.TEXT, 0); }
	public SEARCH(): TerminalNode { return this.getToken(PostgreSQLParserParser.SEARCH, 0); }
	public CONFIGURATION(): TerminalNode { return this.getToken(PostgreSQLParserParser.CONFIGURATION, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_text_search_config_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_text_search_config_stmt) {
			listener.enterDrop_text_search_config_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_text_search_config_stmt) {
			listener.exitDrop_text_search_config_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_text_search_config_stmt) {
			return visitor.visitDrop_text_search_config_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_text_search_dict_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public TEXT(): TerminalNode { return this.getToken(PostgreSQLParserParser.TEXT, 0); }
	public SEARCH(): TerminalNode { return this.getToken(PostgreSQLParserParser.SEARCH, 0); }
	public DICTIONARY(): TerminalNode { return this.getToken(PostgreSQLParserParser.DICTIONARY, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_text_search_dict_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_text_search_dict_stmt) {
			listener.enterDrop_text_search_dict_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_text_search_dict_stmt) {
			listener.exitDrop_text_search_dict_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_text_search_dict_stmt) {
			return visitor.visitDrop_text_search_dict_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_text_search_parser_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public TEXT(): TerminalNode { return this.getToken(PostgreSQLParserParser.TEXT, 0); }
	public SEARCH(): TerminalNode { return this.getToken(PostgreSQLParserParser.SEARCH, 0); }
	public PARSER(): TerminalNode { return this.getToken(PostgreSQLParserParser.PARSER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_text_search_parser_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_text_search_parser_stmt) {
			listener.enterDrop_text_search_parser_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_text_search_parser_stmt) {
			listener.exitDrop_text_search_parser_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_text_search_parser_stmt) {
			return visitor.visitDrop_text_search_parser_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_text_search_template_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public TEXT(): TerminalNode { return this.getToken(PostgreSQLParserParser.TEXT, 0); }
	public SEARCH(): TerminalNode { return this.getToken(PostgreSQLParserParser.SEARCH, 0); }
	public TEMPLATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.TEMPLATE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_text_search_template_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_text_search_template_stmt) {
			listener.enterDrop_text_search_template_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_text_search_template_stmt) {
			listener.exitDrop_text_search_template_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_text_search_template_stmt) {
			return visitor.visitDrop_text_search_template_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_transform_stmtContext extends ParserRuleContext {
	public _type_name_!: IdentifierContext;
	public _lang_name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public TRANSFORM(): TerminalNode { return this.getToken(PostgreSQLParserParser.TRANSFORM, 0); }
	public FOR(): TerminalNode { return this.getToken(PostgreSQLParserParser.FOR, 0); }
	public LANGUAGE(): TerminalNode { return this.getToken(PostgreSQLParserParser.LANGUAGE, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_transform_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_transform_stmt) {
			listener.enterDrop_transform_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_transform_stmt) {
			listener.exitDrop_transform_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_transform_stmt) {
			return visitor.visitDrop_transform_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_trigger_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public _table_name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public TRIGGER(): TerminalNode { return this.getToken(PostgreSQLParserParser.TRIGGER, 0); }
	public ON(): TerminalNode { return this.getToken(PostgreSQLParserParser.ON, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_trigger_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_trigger_stmt) {
			listener.enterDrop_trigger_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_trigger_stmt) {
			listener.exitDrop_trigger_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_trigger_stmt) {
			return visitor.visitDrop_trigger_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_type_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public TYPE(): TerminalNode { return this.getToken(PostgreSQLParserParser.TYPE, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_type_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_type_stmt) {
			listener.enterDrop_type_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_type_stmt) {
			listener.exitDrop_type_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_type_stmt) {
			return visitor.visitDrop_type_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_user_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public USER(): TerminalNode { return this.getToken(PostgreSQLParserParser.USER, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_user_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_user_stmt) {
			listener.enterDrop_user_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_user_stmt) {
			listener.exitDrop_user_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_user_stmt) {
			return visitor.visitDrop_user_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_user_mapping_stmtContext extends ParserRuleContext {
	public _user_name!: Name_Context;
	public _server_name!: IdentifierContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public USER(): TerminalNode[];
	public USER(i: number): TerminalNode;
	public USER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.USER);
		} else {
			return this.getToken(PostgreSQLParserParser.USER, i);
		}
	}
	public MAPPING(): TerminalNode { return this.getToken(PostgreSQLParserParser.MAPPING, 0); }
	public FOR(): TerminalNode { return this.getToken(PostgreSQLParserParser.FOR, 0); }
	public SERVER(): TerminalNode { return this.getToken(PostgreSQLParserParser.SERVER, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_USER, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION_USER, 0); }
	public PUBLIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PUBLIC, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public name_(): Name_Context | undefined {
		return this.tryGetRuleContext(0, Name_Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_user_mapping_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_user_mapping_stmt) {
			listener.enterDrop_user_mapping_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_user_mapping_stmt) {
			listener.exitDrop_user_mapping_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_user_mapping_stmt) {
			return visitor.visitDrop_user_mapping_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_view_stmtContext extends ParserRuleContext {
	public _names!: Identifier_listContext;
	public DROP(): TerminalNode { return this.getToken(PostgreSQLParserParser.DROP, 0); }
	public VIEW(): TerminalNode { return this.getToken(PostgreSQLParserParser.VIEW, 0); }
	public identifier_list(): Identifier_listContext {
		return this.getRuleContext(0, Identifier_listContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_drop_view_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_view_stmt) {
			listener.enterDrop_view_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_view_stmt) {
			listener.exitDrop_view_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_view_stmt) {
			return visitor.visitDrop_view_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Execute_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public EXECUTE(): TerminalNode { return this.getToken(PostgreSQLParserParser.EXECUTE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_execute_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExecute_stmt) {
			listener.enterExecute_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExecute_stmt) {
			listener.exitExecute_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExecute_stmt) {
			return visitor.visitExecute_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Explain_stmtContext extends ParserRuleContext {
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public insert_stmt(): Insert_stmtContext | undefined {
		return this.tryGetRuleContext(0, Insert_stmtContext);
	}
	public update_stmt(): Update_stmtContext | undefined {
		return this.tryGetRuleContext(0, Update_stmtContext);
	}
	public delete_stmt(): Delete_stmtContext | undefined {
		return this.tryGetRuleContext(0, Delete_stmtContext);
	}
	public values_stmt(): Values_stmtContext | undefined {
		return this.tryGetRuleContext(0, Values_stmtContext);
	}
	public execute_stmt(): Execute_stmtContext | undefined {
		return this.tryGetRuleContext(0, Execute_stmtContext);
	}
	public declare_stmt(): Declare_stmtContext | undefined {
		return this.tryGetRuleContext(0, Declare_stmtContext);
	}
	public create_table_as_stmt(): Create_table_as_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_table_as_stmtContext);
	}
	public create_materialized_view_stmt(): Create_materialized_view_stmtContext | undefined {
		return this.tryGetRuleContext(0, Create_materialized_view_stmtContext);
	}
	public EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXPLAIN, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public explain_parameter(): Explain_parameterContext[];
	public explain_parameter(i: number): Explain_parameterContext;
	public explain_parameter(i?: number): Explain_parameterContext | Explain_parameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Explain_parameterContext);
		} else {
			return this.getRuleContext(i, Explain_parameterContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public ANALYZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ANALYZE, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VERBOSE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_explain_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExplain_stmt) {
			listener.enterExplain_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExplain_stmt) {
			listener.exitExplain_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExplain_stmt) {
			return visitor.visitExplain_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fetch_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_fetch_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFetch_stmt) {
			listener.enterFetch_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFetch_stmt) {
			listener.exitFetch_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFetch_stmt) {
			return visitor.visitFetch_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Grant_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_grant_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGrant_stmt) {
			listener.enterGrant_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGrant_stmt) {
			listener.exitGrant_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGrant_stmt) {
			return visitor.visitGrant_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Import_foreign_schema_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_import_foreign_schema_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterImport_foreign_schema_stmt) {
			listener.enterImport_foreign_schema_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitImport_foreign_schema_stmt) {
			listener.exitImport_foreign_schema_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitImport_foreign_schema_stmt) {
			return visitor.visitImport_foreign_schema_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_stmtContext extends ParserRuleContext {
	public _alias_!: IdentifierContext;
	public INSERT(): TerminalNode { return this.getToken(PostgreSQLParserParser.INSERT, 0); }
	public INTO(): TerminalNode { return this.getToken(PostgreSQLParserParser.INTO, 0); }
	public table_name_(): Table_name_Context {
		return this.getRuleContext(0, Table_name_Context);
	}
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFAULT, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALUES, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public values_stmt(): Values_stmtContext | undefined {
		return this.tryGetRuleContext(0, Values_stmtContext);
	}
	public with_clause(): With_clauseContext | undefined {
		return this.tryGetRuleContext(0, With_clauseContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AS, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public OVERRIDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OVERRIDING, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALUE, 0); }
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ON);
		} else {
			return this.getToken(PostgreSQLParserParser.ON, i);
		}
	}
	public CONFLICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONFLICT, 0); }
	public returning_clause(): Returning_clauseContext | undefined {
		return this.tryGetRuleContext(0, Returning_clauseContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public column_name(): Column_nameContext[];
	public column_name(i: number): Column_nameContext;
	public column_name(i?: number): Column_nameContext | Column_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Column_nameContext);
		} else {
			return this.getRuleContext(i, Column_nameContext);
		}
	}
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONSTRAINT, 0); }
	public where_clause(): Where_clauseContext[];
	public where_clause(i: number): Where_clauseContext;
	public where_clause(i?: number): Where_clauseContext | Where_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Where_clauseContext);
		} else {
			return this.getRuleContext(i, Where_clauseContext);
		}
	}
	public SYSTEM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SYSTEM, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USER, 0); }
	public DO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DO, 0); }
	public NOTHING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOTHING, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UPDATE, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public updater_clause(): Updater_clauseContext | undefined {
		return this.tryGetRuleContext(0, Updater_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_insert_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterInsert_stmt) {
			listener.enterInsert_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitInsert_stmt) {
			listener.exitInsert_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitInsert_stmt) {
			return visitor.visitInsert_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Listen_stmtContext extends ParserRuleContext {
	public _channel!: IdentifierContext;
	public LISTEN(): TerminalNode { return this.getToken(PostgreSQLParserParser.LISTEN, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_listen_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterListen_stmt) {
			listener.enterListen_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitListen_stmt) {
			listener.exitListen_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitListen_stmt) {
			return visitor.visitListen_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Load_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_load_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterLoad_stmt) {
			listener.enterLoad_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitLoad_stmt) {
			listener.exitLoad_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitLoad_stmt) {
			return visitor.visitLoad_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_stmtContext extends ParserRuleContext {
	public _name!: Name_Context;
	public LOCK(): TerminalNode { return this.getToken(PostgreSQLParserParser.LOCK, 0); }
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ONLY, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STAR, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IN, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MODE, 0); }
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOWAIT, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ACCESS, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SHARE, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROW, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXCLUSIVE, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UPDATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_lock_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterLock_stmt) {
			listener.enterLock_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitLock_stmt) {
			listener.exitLock_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitLock_stmt) {
			return visitor.visitLock_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Move_stmtContext extends ParserRuleContext {
	public _cursor_name!: Name_Context;
	public MOVE(): TerminalNode { return this.getToken(PostgreSQLParserParser.MOVE, 0); }
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NEXT, 0); }
	public PRIOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PRIOR, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FIRST, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LAST, 0); }
	public ABSOLUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ABSOLUTE, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RELATIVE, 0); }
	public INTEGER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER_LITERAL, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public FORWARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FORWARD, 0); }
	public BACKWARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BACKWARD, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FROM, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_move_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterMove_stmt) {
			listener.enterMove_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitMove_stmt) {
			listener.exitMove_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitMove_stmt) {
			return visitor.visitMove_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Notify_stmtContext extends ParserRuleContext {
	public _channel!: Name_Context;
	public _payload!: Token;
	public NOTIFY(): TerminalNode { return this.getToken(PostgreSQLParserParser.NOTIFY, 0); }
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COMMA, 0); }
	public SINGLEQ_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_notify_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterNotify_stmt) {
			listener.enterNotify_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitNotify_stmt) {
			listener.exitNotify_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitNotify_stmt) {
			return visitor.visitNotify_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prepare_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public PREPARE(): TerminalNode { return this.getToken(PostgreSQLParserParser.PREPARE, 0); }
	public AS(): TerminalNode { return this.getToken(PostgreSQLParserParser.AS, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public insert_stmt(): Insert_stmtContext | undefined {
		return this.tryGetRuleContext(0, Insert_stmtContext);
	}
	public update_stmt(): Update_stmtContext | undefined {
		return this.tryGetRuleContext(0, Update_stmtContext);
	}
	public delete_stmt(): Delete_stmtContext | undefined {
		return this.tryGetRuleContext(0, Delete_stmtContext);
	}
	public values_stmt(): Values_stmtContext | undefined {
		return this.tryGetRuleContext(0, Values_stmtContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public data_type_list(): Data_type_listContext | undefined {
		return this.tryGetRuleContext(0, Data_type_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_prepare_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPrepare_stmt) {
			listener.enterPrepare_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPrepare_stmt) {
			listener.exitPrepare_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPrepare_stmt) {
			return visitor.visitPrepare_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prepare_transaction_stmtContext extends ParserRuleContext {
	public _name!: Name_Context;
	public PREPARE(): TerminalNode { return this.getToken(PostgreSQLParserParser.PREPARE, 0); }
	public TRANSACTION(): TerminalNode { return this.getToken(PostgreSQLParserParser.TRANSACTION, 0); }
	public name_(): Name_Context {
		return this.getRuleContext(0, Name_Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_prepare_transaction_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPrepare_transaction_stmt) {
			listener.enterPrepare_transaction_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPrepare_transaction_stmt) {
			listener.exitPrepare_transaction_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPrepare_transaction_stmt) {
			return visitor.visitPrepare_transaction_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reassign_owned_stmtContext extends ParserRuleContext {
	public REASSIGN(): TerminalNode { return this.getToken(PostgreSQLParserParser.REASSIGN, 0); }
	public OWNED(): TerminalNode { return this.getToken(PostgreSQLParserParser.OWNED, 0); }
	public BY(): TerminalNode { return this.getToken(PostgreSQLParserParser.BY, 0); }
	public TO(): TerminalNode { return this.getToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public CURRENT_USER(): TerminalNode[];
	public CURRENT_USER(i: number): TerminalNode;
	public CURRENT_USER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CURRENT_USER);
		} else {
			return this.getToken(PostgreSQLParserParser.CURRENT_USER, i);
		}
	}
	public SESSION_USER(): TerminalNode[];
	public SESSION_USER(i: number): TerminalNode;
	public SESSION_USER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.SESSION_USER);
		} else {
			return this.getToken(PostgreSQLParserParser.SESSION_USER, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_reassign_owned_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReassign_owned_stmt) {
			listener.enterReassign_owned_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReassign_owned_stmt) {
			listener.exitReassign_owned_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReassign_owned_stmt) {
			return visitor.visitReassign_owned_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Refresh_materialized_view_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_refresh_materialized_view_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRefresh_materialized_view_stmt) {
			listener.enterRefresh_materialized_view_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRefresh_materialized_view_stmt) {
			listener.exitRefresh_materialized_view_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRefresh_materialized_view_stmt) {
			return visitor.visitRefresh_materialized_view_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reindex_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public REINDEX(): TerminalNode { return this.getToken(PostgreSQLParserParser.REINDEX, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INDEX, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DATABASE, 0); }
	public SYSTEM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SYSTEM, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VERBOSE, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_reindex_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReindex_stmt) {
			listener.enterReindex_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReindex_stmt) {
			listener.exitReindex_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReindex_stmt) {
			return visitor.visitReindex_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Release_savepoint_stmtContext extends ParserRuleContext {
	public _savepoint_name!: IdentifierContext;
	public RELEASE(): TerminalNode { return this.getToken(PostgreSQLParserParser.RELEASE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SAVEPOINT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_release_savepoint_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRelease_savepoint_stmt) {
			listener.enterRelease_savepoint_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRelease_savepoint_stmt) {
			listener.exitRelease_savepoint_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRelease_savepoint_stmt) {
			return visitor.visitRelease_savepoint_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reset_stmtContext extends ParserRuleContext {
	public _configuration_parameter!: IdentifierContext;
	public RESET(): TerminalNode { return this.getToken(PostgreSQLParserParser.RESET, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_reset_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReset_stmt) {
			listener.enterReset_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReset_stmt) {
			listener.exitReset_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReset_stmt) {
			return visitor.visitReset_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Revoke_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_revoke_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRevoke_stmt) {
			listener.enterRevoke_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRevoke_stmt) {
			listener.exitRevoke_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRevoke_stmt) {
			return visitor.visitRevoke_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rollback_stmtContext extends ParserRuleContext {
	public ROLLBACK(): TerminalNode { return this.getToken(PostgreSQLParserParser.ROLLBACK, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WORK, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRANSACTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_rollback_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRollback_stmt) {
			listener.enterRollback_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRollback_stmt) {
			listener.exitRollback_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRollback_stmt) {
			return visitor.visitRollback_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rollback_prepared_stmtContext extends ParserRuleContext {
	public _transaction_id!: Token;
	public ROLLBACK(): TerminalNode { return this.getToken(PostgreSQLParserParser.ROLLBACK, 0); }
	public PREPARED(): TerminalNode { return this.getToken(PostgreSQLParserParser.PREPARED, 0); }
	public INTEGER_LITERAL(): TerminalNode { return this.getToken(PostgreSQLParserParser.INTEGER_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_rollback_prepared_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRollback_prepared_stmt) {
			listener.enterRollback_prepared_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRollback_prepared_stmt) {
			listener.exitRollback_prepared_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRollback_prepared_stmt) {
			return visitor.visitRollback_prepared_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rollback_to_savepoint_stmtContext extends ParserRuleContext {
	public _savepoint_name!: IdentifierContext;
	public ROLLBACK(): TerminalNode { return this.getToken(PostgreSQLParserParser.ROLLBACK, 0); }
	public TO(): TerminalNode { return this.getToken(PostgreSQLParserParser.TO, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SAVEPOINT, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WORK, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRANSACTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_rollback_to_savepoint_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRollback_to_savepoint_stmt) {
			listener.enterRollback_to_savepoint_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRollback_to_savepoint_stmt) {
			listener.exitRollback_to_savepoint_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRollback_to_savepoint_stmt) {
			return visitor.visitRollback_to_savepoint_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Savepoint_stmtContext extends ParserRuleContext {
	public _savepoint_name!: IdentifierContext;
	public SAVEPOINT(): TerminalNode { return this.getToken(PostgreSQLParserParser.SAVEPOINT, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_savepoint_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSavepoint_stmt) {
			listener.enterSavepoint_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSavepoint_stmt) {
			listener.exitSavepoint_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSavepoint_stmt) {
			return visitor.visitSavepoint_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Security_label_stmtContext extends ParserRuleContext {
	public _provider!: Name_Context;
	public _object_name!: IdentifierContext;
	public _table_name!: IdentifierContext;
	public _column_name_!: Column_nameContext;
	public _aggregate_name!: IdentifierContext;
	public _function_name!: IdentifierContext;
	public _large_object_oid!: Token;
	public _label!: Token;
	public SECURITY(): TerminalNode { return this.getToken(PostgreSQLParserParser.SECURITY, 0); }
	public LABEL(): TerminalNode { return this.getToken(PostgreSQLParserParser.LABEL, 0); }
	public ON(): TerminalNode { return this.getToken(PostgreSQLParserParser.ON, 0); }
	public IS(): TerminalNode { return this.getToken(PostgreSQLParserParser.IS, 0); }
	public SINGLEQ_STRING_LITERAL(): TerminalNode { return this.getToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLE, 0); }
	public COLUMN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COLUMN, 0); }
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOT, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AGGREGATE, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public aggregate_signature(): Aggregate_signatureContext | undefined {
		return this.tryGetRuleContext(0, Aggregate_signatureContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DATABASE, 0); }
	public DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOMAIN, 0); }
	public EVENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EVENT, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRIGGER, 0); }
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FOREIGN, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FUNCTION, 0); }
	public func_sig(): Func_sigContext | undefined {
		return this.tryGetRuleContext(0, Func_sigContext);
	}
	public LARGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LARGE, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OBJECT, 0); }
	public MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MATERIALIZED, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VIEW, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LANGUAGE, 0); }
	public PUBLICATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PUBLICATION, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROLE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SEQUENCE, 0); }
	public SUBSCRIPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SUBSCRIPTION, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLESPACE, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TYPE, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FOR, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public column_name(): Column_nameContext | undefined {
		return this.tryGetRuleContext(0, Column_nameContext);
	}
	public INTEGER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER_LITERAL, 0); }
	public name_(): Name_Context | undefined {
		return this.tryGetRuleContext(0, Name_Context);
	}
	public PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PROCEDURAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_security_label_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSecurity_label_stmt) {
			listener.enterSecurity_label_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSecurity_label_stmt) {
			listener.exitSecurity_label_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSecurity_label_stmt) {
			return visitor.visitSecurity_label_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_stmtContext extends ParserRuleContext {
	public with_clause(): With_clauseContext | undefined {
		return this.tryGetRuleContext(0, With_clauseContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public group_by_clause(): Group_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Group_by_clauseContext);
	}
	public having_clause(): Having_clauseContext | undefined {
		return this.tryGetRuleContext(0, Having_clauseContext);
	}
	public window_clause(): Window_clauseContext | undefined {
		return this.tryGetRuleContext(0, Window_clauseContext);
	}
	public combine_clause(): Combine_clauseContext[];
	public combine_clause(i: number): Combine_clauseContext;
	public combine_clause(i?: number): Combine_clauseContext | Combine_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Combine_clauseContext);
		} else {
			return this.getRuleContext(i, Combine_clauseContext);
		}
	}
	public order_by_clause(): Order_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Order_by_clauseContext);
	}
	public limit_clause(): Limit_clauseContext | undefined {
		return this.tryGetRuleContext(0, Limit_clauseContext);
	}
	public offset_clause(): Offset_clauseContext | undefined {
		return this.tryGetRuleContext(0, Offset_clauseContext);
	}
	public fetch_clause(): Fetch_clauseContext | undefined {
		return this.tryGetRuleContext(0, Fetch_clauseContext);
	}
	public for_clause(): For_clauseContext | undefined {
		return this.tryGetRuleContext(0, For_clauseContext);
	}
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SELECT, 0); }
	public selector_clause(): Selector_clauseContext | undefined {
		return this.tryGetRuleContext(0, Selector_clauseContext);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLE, 0); }
	public table_name_(): Table_name_Context | undefined {
		return this.tryGetRuleContext(0, Table_name_Context);
	}
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public from_clause(): From_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_clauseContext);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ONLY, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STAR, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_select_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSelect_stmt) {
			listener.enterSelect_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSelect_stmt) {
			listener.exitSelect_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSelect_stmt) {
			return visitor.visitSelect_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_into_stmtContext extends ParserRuleContext {
	public _new_table!: Table_name_Context;
	public with_clause(): With_clauseContext | undefined {
		return this.tryGetRuleContext(0, With_clauseContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public group_by_clause(): Group_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Group_by_clauseContext);
	}
	public having_clause(): Having_clauseContext | undefined {
		return this.tryGetRuleContext(0, Having_clauseContext);
	}
	public window_clause(): Window_clauseContext | undefined {
		return this.tryGetRuleContext(0, Window_clauseContext);
	}
	public combine_clause(): Combine_clauseContext[];
	public combine_clause(i: number): Combine_clauseContext;
	public combine_clause(i?: number): Combine_clauseContext | Combine_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Combine_clauseContext);
		} else {
			return this.getRuleContext(i, Combine_clauseContext);
		}
	}
	public order_by_clause(): Order_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Order_by_clauseContext);
	}
	public limit_clause(): Limit_clauseContext | undefined {
		return this.tryGetRuleContext(0, Limit_clauseContext);
	}
	public offset_clause(): Offset_clauseContext | undefined {
		return this.tryGetRuleContext(0, Offset_clauseContext);
	}
	public fetch_clause(): Fetch_clauseContext | undefined {
		return this.tryGetRuleContext(0, Fetch_clauseContext);
	}
	public for_clause(): For_clauseContext | undefined {
		return this.tryGetRuleContext(0, For_clauseContext);
	}
	public SELECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SELECT, 0); }
	public selector_clause(): Selector_clauseContext | undefined {
		return this.tryGetRuleContext(0, Selector_clauseContext);
	}
	public INTO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTO, 0); }
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLE, 0); }
	public table_name_(): Table_name_Context | undefined {
		return this.tryGetRuleContext(0, Table_name_Context);
	}
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public from_clause(): From_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_clauseContext);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ONLY, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STAR, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEMPORARY, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEMP, 0); }
	public UNLOGGED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNLOGGED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_select_into_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSelect_into_stmt) {
			listener.enterSelect_into_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSelect_into_stmt) {
			listener.exitSelect_into_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSelect_into_stmt) {
			return visitor.visitSelect_into_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_clauseContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(PostgreSQLParserParser.WITH, 0); }
	public with_expr(): With_exprContext[];
	public with_expr(i: number): With_exprContext;
	public with_expr(i?: number): With_exprContext | With_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(With_exprContext);
		} else {
			return this.getRuleContext(i, With_exprContext);
		}
	}
	public RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RECURSIVE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_with_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWith_clause) {
			listener.enterWith_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWith_clause) {
			listener.exitWith_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWith_clause) {
			return visitor.visitWith_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_exprContext extends ParserRuleContext {
	public table_name_(): Table_name_Context {
		return this.getRuleContext(0, Table_name_Context);
	}
	public AS(): TerminalNode { return this.getToken(PostgreSQLParserParser.AS, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public insert_stmt(): Insert_stmtContext | undefined {
		return this.tryGetRuleContext(0, Insert_stmtContext);
	}
	public delete_stmt(): Delete_stmtContext | undefined {
		return this.tryGetRuleContext(0, Delete_stmtContext);
	}
	public update_stmt(): Update_stmtContext | undefined {
		return this.tryGetRuleContext(0, Update_stmtContext);
	}
	public values_stmt(): Values_stmtContext | undefined {
		return this.tryGetRuleContext(0, Values_stmtContext);
	}
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_with_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWith_expr) {
			listener.enterWith_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWith_expr) {
			listener.exitWith_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWith_expr) {
			return visitor.visitWith_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_stmtContext extends ParserRuleContext {
	public _configuration_parameter!: IdentifierContext;
	public _value!: Param_valueContext;
	public SET(): TerminalNode { return this.getToken(PostgreSQLParserParser.SET, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TO, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EQUAL, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFAULT, 0); }
	public param_value(): Param_valueContext | undefined {
		return this.tryGetRuleContext(0, Param_valueContext);
	}
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION, 0); }
	public LOCAL(): TerminalNode[];
	public LOCAL(i: number): TerminalNode;
	public LOCAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.LOCAL);
		} else {
			return this.getToken(PostgreSQLParserParser.LOCAL, i);
		}
	}
	public TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIME, 0); }
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ZONE, 0); }
	public timezone(): TimezoneContext | undefined {
		return this.tryGetRuleContext(0, TimezoneContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_set_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSet_stmt) {
			listener.enterSet_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSet_stmt) {
			listener.exitSet_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSet_stmt) {
			return visitor.visitSet_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_constraints_stmtContext extends ParserRuleContext {
	public _constraints!: Identifier_listContext;
	public SET(): TerminalNode { return this.getToken(PostgreSQLParserParser.SET, 0); }
	public CONSTRAINTS(): TerminalNode { return this.getToken(PostgreSQLParserParser.CONSTRAINTS, 0); }
	public DEFERRED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFERRED, 0); }
	public IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IMMEDIATE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_set_constraints_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSet_constraints_stmt) {
			listener.enterSet_constraints_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSet_constraints_stmt) {
			listener.exitSet_constraints_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSet_constraints_stmt) {
			return visitor.visitSet_constraints_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_role_stmtContext extends ParserRuleContext {
	public _role_name_!: Role_nameContext;
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public ROLE(): TerminalNode { return this.getToken(PostgreSQLParserParser.ROLE, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NONE, 0); }
	public role_name(): Role_nameContext | undefined {
		return this.tryGetRuleContext(0, Role_nameContext);
	}
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LOCAL, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_set_role_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSet_role_stmt) {
			listener.enterSet_role_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSet_role_stmt) {
			listener.exitSet_role_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSet_role_stmt) {
			return visitor.visitSet_role_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_session_authorization_stmtContext extends ParserRuleContext {
	public todo_implement(): Todo_implementContext {
		return this.getRuleContext(0, Todo_implementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_set_session_authorization_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSet_session_authorization_stmt) {
			listener.enterSet_session_authorization_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSet_session_authorization_stmt) {
			listener.exitSet_session_authorization_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSet_session_authorization_stmt) {
			return visitor.visitSet_session_authorization_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Transaction_modeContext extends ParserRuleContext {
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ISOLATION, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LEVEL, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SERIALIZABLE, 0); }
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REPEATABLE, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.READ, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COMMITTED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNCOMMITTED, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WRITE, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ONLY, 0); }
	public DEFERRABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFERRABLE, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_transaction_mode; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTransaction_mode) {
			listener.enterTransaction_mode(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTransaction_mode) {
			listener.exitTransaction_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTransaction_mode) {
			return visitor.visitTransaction_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Transaction_mode_listContext extends ParserRuleContext {
	public transaction_mode(): Transaction_modeContext[];
	public transaction_mode(i: number): Transaction_modeContext;
	public transaction_mode(i?: number): Transaction_modeContext | Transaction_modeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Transaction_modeContext);
		} else {
			return this.getRuleContext(i, Transaction_modeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_transaction_mode_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTransaction_mode_list) {
			listener.enterTransaction_mode_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTransaction_mode_list) {
			listener.exitTransaction_mode_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTransaction_mode_list) {
			return visitor.visitTransaction_mode_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_transaction_stmtContext extends ParserRuleContext {
	public _snapshot_id!: Token;
	public SET(): TerminalNode { return this.getToken(PostgreSQLParserParser.SET, 0); }
	public TRANSACTION(): TerminalNode { return this.getToken(PostgreSQLParserParser.TRANSACTION, 0); }
	public transaction_mode_list(): Transaction_mode_listContext | undefined {
		return this.tryGetRuleContext(0, Transaction_mode_listContext);
	}
	public SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SNAPSHOT, 0); }
	public SINGLEQ_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION, 0); }
	public CHARACTERISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHARACTERISTICS, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_set_transaction_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSet_transaction_stmt) {
			listener.enterSet_transaction_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSet_transaction_stmt) {
			listener.exitSet_transaction_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSet_transaction_stmt) {
			return visitor.visitSet_transaction_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Show_stmtContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public SHOW(): TerminalNode { return this.getToken(PostgreSQLParserParser.SHOW, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIME, 0); }
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ZONE, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_show_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterShow_stmt) {
			listener.enterShow_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitShow_stmt) {
			listener.exitShow_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitShow_stmt) {
			return visitor.visitShow_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Truncate_stmtContext extends ParserRuleContext {
	public TRUNCATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.TRUNCATE, 0); }
	public table_name_(): Table_name_Context {
		return this.getRuleContext(0, Table_name_Context);
	}
	public TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLE, 0); }
	public ONLY(): TerminalNode[];
	public ONLY(i: number): TerminalNode;
	public ONLY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ONLY);
		} else {
			return this.getToken(PostgreSQLParserParser.ONLY, i);
		}
	}
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STAR, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COMMA, 0); }
	public identifier_list(): Identifier_listContext | undefined {
		return this.tryGetRuleContext(0, Identifier_listContext);
	}
	public IDENTITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IDENTITY, 0); }
	public RESTART(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTART, 0); }
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONTINUE, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_truncate_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTruncate_stmt) {
			listener.enterTruncate_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTruncate_stmt) {
			listener.exitTruncate_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTruncate_stmt) {
			return visitor.visitTruncate_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unlisten_stmtContext extends ParserRuleContext {
	public _channel!: IdentifierContext;
	public UNLISTEN(): TerminalNode { return this.getToken(PostgreSQLParserParser.UNLISTEN, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STAR, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_unlisten_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterUnlisten_stmt) {
			listener.enterUnlisten_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitUnlisten_stmt) {
			listener.exitUnlisten_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitUnlisten_stmt) {
			return visitor.visitUnlisten_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Update_stmtContext extends ParserRuleContext {
	public _alias_!: IdentifierContext;
	public _cursor_name_!: IdentifierContext;
	public UPDATE(): TerminalNode { return this.getToken(PostgreSQLParserParser.UPDATE, 0); }
	public table_name_(): Table_name_Context {
		return this.getRuleContext(0, Table_name_Context);
	}
	public SET(): TerminalNode { return this.getToken(PostgreSQLParserParser.SET, 0); }
	public updater_clause(): Updater_clauseContext {
		return this.getRuleContext(0, Updater_clauseContext);
	}
	public with_clause(): With_clauseContext | undefined {
		return this.tryGetRuleContext(0, With_clauseContext);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ONLY, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STAR, 0); }
	public from_clause(): From_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_clauseContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public returning_clause(): Returning_clauseContext | undefined {
		return this.tryGetRuleContext(0, Returning_clauseContext);
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WHERE, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OF, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_update_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterUpdate_stmt) {
			listener.enterUpdate_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitUpdate_stmt) {
			listener.exitUpdate_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitUpdate_stmt) {
			return visitor.visitUpdate_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Vacuum_optContext extends ParserRuleContext {
	public FULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FULL, 0); }
	public FREEZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FREEZE, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VERBOSE, 0); }
	public ANALYZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ANALYZE, 0); }
	public DISABLE_PAGE_SKIPPING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DISABLE_PAGE_SKIPPING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_vacuum_opt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVacuum_opt) {
			listener.enterVacuum_opt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVacuum_opt) {
			listener.exitVacuum_opt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVacuum_opt) {
			return visitor.visitVacuum_opt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Vacuum_opt_listContext extends ParserRuleContext {
	public vacuum_opt(): Vacuum_optContext[];
	public vacuum_opt(i: number): Vacuum_optContext;
	public vacuum_opt(i?: number): Vacuum_optContext | Vacuum_optContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Vacuum_optContext);
		} else {
			return this.getRuleContext(i, Vacuum_optContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_vacuum_opt_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVacuum_opt_list) {
			listener.enterVacuum_opt_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVacuum_opt_list) {
			listener.exitVacuum_opt_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVacuum_opt_list) {
			return visitor.visitVacuum_opt_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Vacuum_stmtContext extends ParserRuleContext {
	public _table_name!: Table_name_Context;
	public VACUUM(): TerminalNode { return this.getToken(PostgreSQLParserParser.VACUUM, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public vacuum_opt_list(): Vacuum_opt_listContext | undefined {
		return this.tryGetRuleContext(0, Vacuum_opt_listContext);
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public table_name_(): Table_name_Context | undefined {
		return this.tryGetRuleContext(0, Table_name_Context);
	}
	public column_list(): Column_listContext | undefined {
		return this.tryGetRuleContext(0, Column_listContext);
	}
	public FULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FULL, 0); }
	public FREEZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FREEZE, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VERBOSE, 0); }
	public ANALYZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ANALYZE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_vacuum_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVacuum_stmt) {
			listener.enterVacuum_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVacuum_stmt) {
			listener.exitVacuum_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVacuum_stmt) {
			return visitor.visitVacuum_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Values_stmtContext extends ParserRuleContext {
	public with_clause(): With_clauseContext | undefined {
		return this.tryGetRuleContext(0, With_clauseContext);
	}
	public order_by_clause(): Order_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Order_by_clauseContext);
	}
	public combine_clause(): Combine_clauseContext[];
	public combine_clause(i: number): Combine_clauseContext;
	public combine_clause(i?: number): Combine_clauseContext | Combine_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Combine_clauseContext);
		} else {
			return this.getRuleContext(i, Combine_clauseContext);
		}
	}
	public limit_clause(): Limit_clauseContext | undefined {
		return this.tryGetRuleContext(0, Limit_clauseContext);
	}
	public offset_clause(): Offset_clauseContext | undefined {
		return this.tryGetRuleContext(0, Offset_clauseContext);
	}
	public fetch_clause(): Fetch_clauseContext | undefined {
		return this.tryGetRuleContext(0, Fetch_clauseContext);
	}
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALUES, 0); }
	public expr_list_list(): Expr_list_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_list_listContext);
	}
	public values_stmt(): Values_stmtContext | undefined {
		return this.tryGetRuleContext(0, Values_stmtContext);
	}
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_values_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterValues_stmt) {
			listener.enterValues_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitValues_stmt) {
			listener.exitValues_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitValues_stmt) {
			return visitor.visitValues_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Selector_clauseContext extends ParserRuleContext {
	public column_list(): Column_listContext {
		return this.getRuleContext(0, Column_listContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DISTINCT, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ON, 0); }
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_selector_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSelector_clause) {
			listener.enterSelector_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSelector_clause) {
			listener.exitSelector_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSelector_clause) {
			return visitor.visitSelector_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_clauseContext extends ParserRuleContext {
	public FROM(): TerminalNode { return this.getToken(PostgreSQLParserParser.FROM, 0); }
	public from_item(): From_itemContext[];
	public from_item(i: number): From_itemContext;
	public from_item(i?: number): From_itemContext | From_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(From_itemContext);
		} else {
			return this.getRuleContext(i, From_itemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_from_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFrom_clause) {
			listener.enterFrom_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFrom_clause) {
			listener.exitFrom_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFrom_clause) {
			return visitor.visitFrom_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Where_clauseContext extends ParserRuleContext {
	public WHERE(): TerminalNode { return this.getToken(PostgreSQLParserParser.WHERE, 0); }
	public predicate(): PredicateContext {
		return this.getRuleContext(0, PredicateContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_where_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWhere_clause) {
			listener.enterWhere_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWhere_clause) {
			listener.exitWhere_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWhere_clause) {
			return visitor.visitWhere_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Group_by_clauseContext extends ParserRuleContext {
	public GROUP(): TerminalNode { return this.getToken(PostgreSQLParserParser.GROUP, 0); }
	public BY(): TerminalNode { return this.getToken(PostgreSQLParserParser.BY, 0); }
	public grouping_elem(): Grouping_elemContext[];
	public grouping_elem(i: number): Grouping_elemContext;
	public grouping_elem(i?: number): Grouping_elemContext | Grouping_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Grouping_elemContext);
		} else {
			return this.getRuleContext(i, Grouping_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_group_by_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGroup_by_clause) {
			listener.enterGroup_by_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGroup_by_clause) {
			listener.exitGroup_by_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGroup_by_clause) {
			return visitor.visitGroup_by_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Grouping_elemContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public expr_list(): Expr_listContext[];
	public expr_list(i: number): Expr_listContext;
	public expr_list(i?: number): Expr_listContext | Expr_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Expr_listContext);
		} else {
			return this.getRuleContext(i, Expr_listContext);
		}
	}
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROLLUP, 0); }
	public CUBE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CUBE, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public GROUPING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GROUPING, 0); }
	public SETS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SETS, 0); }
	public grouping_elem_list(): Grouping_elem_listContext | undefined {
		return this.tryGetRuleContext(0, Grouping_elem_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_grouping_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGrouping_elem) {
			listener.enterGrouping_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGrouping_elem) {
			listener.exitGrouping_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGrouping_elem) {
			return visitor.visitGrouping_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Grouping_elem_listContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public grouping_elem(): Grouping_elemContext[];
	public grouping_elem(i: number): Grouping_elemContext;
	public grouping_elem(i?: number): Grouping_elemContext | Grouping_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Grouping_elemContext);
		} else {
			return this.getRuleContext(i, Grouping_elemContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_grouping_elem_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGrouping_elem_list) {
			listener.enterGrouping_elem_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGrouping_elem_list) {
			listener.exitGrouping_elem_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGrouping_elem_list) {
			return visitor.visitGrouping_elem_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Having_clauseContext extends ParserRuleContext {
	public HAVING(): TerminalNode { return this.getToken(PostgreSQLParserParser.HAVING, 0); }
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_having_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterHaving_clause) {
			listener.enterHaving_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitHaving_clause) {
			listener.exitHaving_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitHaving_clause) {
			return visitor.visitHaving_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_listContext extends ParserRuleContext {
	public _column_name_!: ExprContext;
	public _output_name!: Name_Context;
	public STAR(): TerminalNode[];
	public STAR(i: number): TerminalNode;
	public STAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.STAR);
		} else {
			return this.getToken(PostgreSQLParserParser.STAR, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public name_(): Name_Context[];
	public name_(i: number): Name_Context;
	public name_(i?: number): Name_Context | Name_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Name_Context);
		} else {
			return this.getRuleContext(i, Name_Context);
		}
	}
	public AS(): TerminalNode[];
	public AS(i: number): TerminalNode;
	public AS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.AS);
		} else {
			return this.getToken(PostgreSQLParserParser.AS, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_column_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColumn_list) {
			listener.enterColumn_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColumn_list) {
			listener.exitColumn_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColumn_list) {
			return visitor.visitColumn_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Explain_parameterContext extends ParserRuleContext {
	public ANALYZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ANALYZE, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VERBOSE, 0); }
	public COSTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COSTS, 0); }
	public BUFFERS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BUFFERS, 0); }
	public TIMING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIMING, 0); }
	public param_value(): Param_valueContext | undefined {
		return this.tryGetRuleContext(0, Param_valueContext);
	}
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FORMAT, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEXT, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.XML, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.JSON, 0); }
	public YAML(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.YAML, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_explain_parameter; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExplain_parameter) {
			listener.enterExplain_parameter(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExplain_parameter) {
			listener.exitExplain_parameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExplain_parameter) {
			return visitor.visitExplain_parameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FrameContext extends ParserRuleContext {
	public UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNBOUNDED, 0); }
	public PRECEDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PRECEDING, 0); }
	public INTEGER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER_LITERAL, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROW, 0); }
	public FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FOLLOWING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_frame; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFrame) {
			listener.enterFrame(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFrame) {
			listener.exitFrame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFrame) {
			return visitor.visitFrame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Frame_startContext extends ParserRuleContext {
	public frame(): FrameContext {
		return this.getRuleContext(0, FrameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_frame_start; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFrame_start) {
			listener.enterFrame_start(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFrame_start) {
			listener.exitFrame_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFrame_start) {
			return visitor.visitFrame_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Frame_endContext extends ParserRuleContext {
	public frame(): FrameContext {
		return this.getRuleContext(0, FrameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_frame_end; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFrame_end) {
			listener.enterFrame_end(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFrame_end) {
			listener.exitFrame_end(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFrame_end) {
			return visitor.visitFrame_end(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Frame_clauseContext extends ParserRuleContext {
	public frame_start(): Frame_startContext {
		return this.getRuleContext(0, Frame_startContext);
	}
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RANGE, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROWS, 0); }
	public BETWEEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BETWEEN, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AND, 0); }
	public frame_end(): Frame_endContext | undefined {
		return this.tryGetRuleContext(0, Frame_endContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_frame_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFrame_clause) {
			listener.enterFrame_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFrame_clause) {
			listener.exitFrame_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFrame_clause) {
			return visitor.visitFrame_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_definitionContext extends ParserRuleContext {
	public window_name(): Window_nameContext | undefined {
		return this.tryGetRuleContext(0, Window_nameContext);
	}
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PARTITION, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BY, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public order_by_clause(): Order_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Order_by_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_window_definition; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWindow_definition) {
			listener.enterWindow_definition(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWindow_definition) {
			listener.exitWindow_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWindow_definition) {
			return visitor.visitWindow_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_clauseContext extends ParserRuleContext {
	public WINDOW(): TerminalNode { return this.getToken(PostgreSQLParserParser.WINDOW, 0); }
	public window_name(): Window_nameContext {
		return this.getRuleContext(0, Window_nameContext);
	}
	public AS(): TerminalNode { return this.getToken(PostgreSQLParserParser.AS, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public window_definition(): Window_definitionContext {
		return this.getRuleContext(0, Window_definitionContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_window_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWindow_clause) {
			listener.enterWindow_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWindow_clause) {
			listener.exitWindow_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWindow_clause) {
			return visitor.visitWindow_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Combine_clauseContext extends ParserRuleContext {
	public UNION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNION, 0); }
	public INTERSECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTERSECT, 0); }
	public EXCEPT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXCEPT, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	public values_stmt(): Values_stmtContext | undefined {
		return this.tryGetRuleContext(0, Values_stmtContext);
	}
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public combine_clause(): Combine_clauseContext | undefined {
		return this.tryGetRuleContext(0, Combine_clauseContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DISTINCT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_combine_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCombine_clause) {
			listener.enterCombine_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCombine_clause) {
			listener.exitCombine_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCombine_clause) {
			return visitor.visitCombine_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Order_by_clauseContext extends ParserRuleContext {
	public ORDER(): TerminalNode { return this.getToken(PostgreSQLParserParser.ORDER, 0); }
	public BY(): TerminalNode { return this.getToken(PostgreSQLParserParser.BY, 0); }
	public order_by_item(): Order_by_itemContext[];
	public order_by_item(i: number): Order_by_itemContext;
	public order_by_item(i?: number): Order_by_itemContext | Order_by_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Order_by_itemContext);
		} else {
			return this.getRuleContext(i, Order_by_itemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_order_by_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOrder_by_clause) {
			listener.enterOrder_by_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOrder_by_clause) {
			listener.exitOrder_by_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOrder_by_clause) {
			return visitor.visitOrder_by_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Order_by_itemContext extends ParserRuleContext {
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public DOUBLEQ_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL, 0); }
	public ASC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DESC, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USING, 0); }
	public NULLS(): TerminalNode[];
	public NULLS(i: number): TerminalNode;
	public NULLS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NULLS);
		} else {
			return this.getToken(PostgreSQLParserParser.NULLS, i);
		}
	}
	public FIRST(): TerminalNode[];
	public FIRST(i: number): TerminalNode;
	public FIRST(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.FIRST);
		} else {
			return this.getToken(PostgreSQLParserParser.FIRST, i);
		}
	}
	public LAST(): TerminalNode[];
	public LAST(i: number): TerminalNode;
	public LAST(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.LAST);
		} else {
			return this.getToken(PostgreSQLParserParser.LAST, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_order_by_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOrder_by_item) {
			listener.enterOrder_by_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOrder_by_item) {
			listener.exitOrder_by_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOrder_by_item) {
			return visitor.visitOrder_by_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Limit_clauseContext extends ParserRuleContext {
	public LIMIT(): TerminalNode { return this.getToken(PostgreSQLParserParser.LIMIT, 0); }
	public INTEGER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER_LITERAL, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public func_call(): Func_callContext | undefined {
		return this.tryGetRuleContext(0, Func_callContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_limit_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterLimit_clause) {
			listener.enterLimit_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitLimit_clause) {
			listener.exitLimit_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitLimit_clause) {
			return visitor.visitLimit_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Offset_clauseContext extends ParserRuleContext {
	public OFFSET(): TerminalNode { return this.getToken(PostgreSQLParserParser.OFFSET, 0); }
	public INTEGER_LITERAL(): TerminalNode { return this.getToken(PostgreSQLParserParser.INTEGER_LITERAL, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROW, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROWS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_offset_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOffset_clause) {
			listener.enterOffset_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOffset_clause) {
			listener.exitOffset_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOffset_clause) {
			return visitor.visitOffset_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fetch_clauseContext extends ParserRuleContext {
	public FETCH(): TerminalNode { return this.getToken(PostgreSQLParserParser.FETCH, 0); }
	public ONLY(): TerminalNode { return this.getToken(PostgreSQLParserParser.ONLY, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FIRST, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NEXT, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROW, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROWS, 0); }
	public INTEGER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_fetch_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFetch_clause) {
			listener.enterFetch_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFetch_clause) {
			listener.exitFetch_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFetch_clause) {
			return visitor.visitFetch_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class For_clauseContext extends ParserRuleContext {
	public FOR(): TerminalNode { return this.getToken(PostgreSQLParserParser.FOR, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UPDATE, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NO, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.KEY, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SHARE, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OF, 0); }
	public table_name_(): Table_name_Context[];
	public table_name_(i: number): Table_name_Context;
	public table_name_(i?: number): Table_name_Context | Table_name_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_name_Context);
		} else {
			return this.getRuleContext(i, Table_name_Context);
		}
	}
	public NOWAIT(): TerminalNode[];
	public NOWAIT(i: number): TerminalNode;
	public NOWAIT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.NOWAIT);
		} else {
			return this.getToken(PostgreSQLParserParser.NOWAIT, i);
		}
	}
	public SKIP_(): TerminalNode[];
	public SKIP_(i: number): TerminalNode;
	public SKIP_(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.SKIP_);
		} else {
			return this.getToken(PostgreSQLParserParser.SKIP_, i);
		}
	}
	public LOCKED(): TerminalNode[];
	public LOCKED(i: number): TerminalNode;
	public LOCKED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.LOCKED);
		} else {
			return this.getToken(PostgreSQLParserParser.LOCKED, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_for_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFor_clause) {
			listener.enterFor_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFor_clause) {
			listener.exitFor_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFor_clause) {
			return visitor.visitFor_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Updater_clauseContext extends ParserRuleContext {
	public updater_expr(): Updater_exprContext[];
	public updater_expr(i: number): Updater_exprContext;
	public updater_expr(i?: number): Updater_exprContext | Updater_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Updater_exprContext);
		} else {
			return this.getRuleContext(i, Updater_exprContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_updater_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterUpdater_clause) {
			listener.enterUpdater_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitUpdater_clause) {
			listener.exitUpdater_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitUpdater_clause) {
			return visitor.visitUpdater_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Updater_exprContext extends ParserRuleContext {
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EQUAL, 0); }
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_updater_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterUpdater_expr) {
			listener.enterUpdater_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitUpdater_expr) {
			listener.exitUpdater_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitUpdater_expr) {
			return visitor.visitUpdater_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Returning_clauseContext extends ParserRuleContext {
	public RETURNING(): TerminalNode { return this.getToken(PostgreSQLParserParser.RETURNING, 0); }
	public column_list(): Column_listContext {
		return this.getRuleContext(0, Column_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_returning_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReturning_clause) {
			listener.enterReturning_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReturning_clause) {
			listener.exitReturning_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReturning_clause) {
			return visitor.visitReturning_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExprContext extends ParserRuleContext {
	public _op!: Token;
	public NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NULL, 0); }
	public CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_DATE, 0); }
	public CURRENT_ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_ROLE, 0); }
	public CURRENT_TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_TIME, 0); }
	public CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_TIMESTAMP, 0); }
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_USER, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFAULT, 0); }
	public INTEGER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER_LITERAL, 0); }
	public HEX_INTEGER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HEX_INTEGER_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NUMERIC_LITERAL, 0); }
	public SINGLEQ_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, 0); }
	public BIT_STRING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BIT_STRING, 0); }
	public REGEX_STRING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REGEX_STRING, 0); }
	public DOLLAR_DOLLAR(): TerminalNode[];
	public DOLLAR_DOLLAR(i: number): TerminalNode;
	public DOLLAR_DOLLAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.DOLLAR_DOLLAR);
		} else {
			return this.getToken(PostgreSQLParserParser.DOLLAR_DOLLAR, i);
		}
	}
	public DOLLAR(): TerminalNode[];
	public DOLLAR(i: number): TerminalNode;
	public DOLLAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.DOLLAR);
		} else {
			return this.getToken(PostgreSQLParserParser.DOLLAR, i);
		}
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public bool_expr(): Bool_exprContext | undefined {
		return this.tryGetRuleContext(0, Bool_exprContext);
	}
	public values_stmt(): Values_stmtContext | undefined {
		return this.tryGetRuleContext(0, Values_stmtContext);
	}
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public OPEN_BRACKET(): TerminalNode[];
	public OPEN_BRACKET(i: number): TerminalNode;
	public OPEN_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_BRACKET);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_BRACKET, i);
		}
	}
	public CLOSE_BRACKET(): TerminalNode[];
	public CLOSE_BRACKET(i: number): TerminalNode;
	public CLOSE_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_BRACKET);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_BRACKET, i);
		}
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public type_name(): Type_nameContext | undefined {
		return this.tryGetRuleContext(0, Type_nameContext);
	}
	public BANG_BANG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BANG_BANG, 0); }
	public AT_SIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AT_SIGN, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MINUS, 0); }
	public TIL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIL, 0); }
	public QMARK_HYPHEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.QMARK_HYPHEN, 0); }
	public BANG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BANG, 0); }
	public CARET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CARET, 0); }
	public PIPE_SLASH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PIPE_SLASH, 0); }
	public PIPE_PIPE_SLASH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PIPE_PIPE_SLASH, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STAR, 0); }
	public SLASH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SLASH, 0); }
	public PERCENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PERCENT, 0); }
	public AMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AMP, 0); }
	public PIPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PIPE, 0); }
	public HASH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HASH, 0); }
	public LT_LT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LT_LT, 0); }
	public LT_LT_EQ(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LT_LT_EQ, 0); }
	public GT_GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GT_GT, 0); }
	public AT_AT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AT_AT, 0); }
	public LT_HYPHEN_GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LT_HYPHEN_GT, 0); }
	public AT_GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AT_GT, 0); }
	public LT_AT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LT_AT, 0); }
	public TIL_EQ(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIL_EQ, 0); }
	public TIL_STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIL_STAR, 0); }
	public TIL_TIL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIL_TIL, 0); }
	public TIL_LT_TIL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIL_LT_TIL, 0); }
	public TIL_GT_TIL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIL_GT_TIL, 0); }
	public TIL_LTE_TIL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIL_LTE_TIL, 0); }
	public TIL_GTE_TIL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIL_GTE_TIL, 0); }
	public LT_QMARK_GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LT_QMARK_GT, 0); }
	public HYPHEN_GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HYPHEN_GT, 0); }
	public HYPHEN_GT_GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HYPHEN_GT_GT, 0); }
	public HASH_HASH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HASH_HASH, 0); }
	public HASH_GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HASH_GT, 0); }
	public HASH_GT_GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HASH_GT_GT, 0); }
	public QMARK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.QMARK, 0); }
	public QMARK_PIPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.QMARK_PIPE, 0); }
	public QMARK_AMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.QMARK_AMP, 0); }
	public QMARK_HASH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.QMARK_HASH, 0); }
	public LT_CARET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LT_CARET, 0); }
	public AMP_LT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AMP_LT, 0); }
	public HYPHEN_PIPE_HYPHEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HYPHEN_PIPE_HYPHEN, 0); }
	public HASH_EQ(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HASH_EQ, 0); }
	public AMP_AMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AMP_AMP, 0); }
	public PIPE_PIPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PIPE_PIPE, 0); }
	public EQUAL_GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EQUAL_GT, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OR, 0); }
	public LIKE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LIKE, 0); }
	public BETWEEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BETWEEN, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IN, 0); }
	public LT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LT, 0); }
	public GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GT, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EQUAL, 0); }
	public LTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LTE, 0); }
	public GTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GTE, 0); }
	public LT_GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LT_GT, 0); }
	public BANG_EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BANG_EQUAL, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IS, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DISTINCT, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FROM, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public func_call(): Func_callContext | undefined {
		return this.tryGetRuleContext(0, Func_callContext);
	}
	public CAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CAST, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AS, 0); }
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public correlation_name(): Correlation_nameContext | undefined {
		return this.tryGetRuleContext(0, Correlation_nameContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOT, 0); }
	public column_name(): Column_nameContext | undefined {
		return this.tryGetRuleContext(0, Column_nameContext);
	}
	public case_expr(): Case_exprContext | undefined {
		return this.tryGetRuleContext(0, Case_exprContext);
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COLON);
		} else {
			return this.getToken(PostgreSQLParserParser.COLON, i);
		}
	}
	public COLON_COLON(): TerminalNode[];
	public COLON_COLON(i: number): TerminalNode;
	public COLON_COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COLON_COLON);
		} else {
			return this.getToken(PostgreSQLParserParser.COLON_COLON, i);
		}
	}
	public OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OF, 0); }
	public aggregate(): AggregateContext | undefined {
		return this.tryGetRuleContext(0, AggregateContext);
	}
	public array_cons_expr(): Array_cons_exprContext | undefined {
		return this.tryGetRuleContext(0, Array_cons_exprContext);
	}
	public AT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AT, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIME, 0); }
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ZONE, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public DOLLAR_DEC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOLLAR_DEC, 0); }
	public select_stmt(): Select_stmtContext | undefined {
		return this.tryGetRuleContext(0, Select_stmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExpr) {
			listener.enterExpr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExpr) {
			listener.exitExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExpr) {
			return visitor.visitExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Bool_exprContext extends ParserRuleContext {
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FALSE, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	public bool_expr(): Bool_exprContext[];
	public bool_expr(i: number): Bool_exprContext;
	public bool_expr(i?: number): Bool_exprContext | Bool_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Bool_exprContext);
		} else {
			return this.getRuleContext(i, Bool_exprContext);
		}
	}
	public AND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_bool_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterBool_expr) {
			listener.enterBool_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitBool_expr) {
			listener.exitBool_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitBool_expr) {
			return visitor.visitBool_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Case_exprContext extends ParserRuleContext {
	public CASE(): TerminalNode { return this.getToken(PostgreSQLParserParser.CASE, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public END(): TerminalNode { return this.getToken(PostgreSQLParserParser.END, 0); }
	public WHEN(): TerminalNode[];
	public WHEN(i: number): TerminalNode;
	public WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.WHEN);
		} else {
			return this.getToken(PostgreSQLParserParser.WHEN, i);
		}
	}
	public THEN(): TerminalNode[];
	public THEN(i: number): TerminalNode;
	public THEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.THEN);
		} else {
			return this.getToken(PostgreSQLParserParser.THEN, i);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ELSE, 0); }
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_case_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCase_expr) {
			listener.enterCase_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCase_expr) {
			listener.exitCase_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCase_expr) {
			return visitor.visitCase_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_listContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_expr_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExpr_list) {
			listener.enterExpr_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExpr_list) {
			listener.exitExpr_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExpr_list) {
			return visitor.visitExpr_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_list_listContext extends ParserRuleContext {
	public expr_list(): Expr_listContext[];
	public expr_list(i: number): Expr_listContext;
	public expr_list(i?: number): Expr_listContext | Expr_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Expr_listContext);
		} else {
			return this.getRuleContext(i, Expr_listContext);
		}
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_expr_list_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExpr_list_list) {
			listener.enterExpr_list_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExpr_list_list) {
			listener.exitExpr_list_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExpr_list_list) {
			return visitor.visitExpr_list_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_sig_argContext extends ParserRuleContext {
	public _argmode!: Token;
	public _argname!: IdentifierContext;
	public _argtype!: Data_typeContext;
	public data_type(): Data_typeContext | undefined {
		return this.tryGetRuleContext(0, Data_typeContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IN, 0); }
	public OUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OUT, 0); }
	public INOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INOUT, 0); }
	public VARIADIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VARIADIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_func_sig_arg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_sig_arg) {
			listener.enterFunc_sig_arg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_sig_arg) {
			listener.exitFunc_sig_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_sig_arg) {
			return visitor.visitFunc_sig_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_sig_arg_listContext extends ParserRuleContext {
	public func_sig_arg(): Func_sig_argContext[];
	public func_sig_arg(i: number): Func_sig_argContext;
	public func_sig_arg(i?: number): Func_sig_argContext | Func_sig_argContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Func_sig_argContext);
		} else {
			return this.getRuleContext(i, Func_sig_argContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_func_sig_arg_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_sig_arg_list) {
			listener.enterFunc_sig_arg_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_sig_arg_list) {
			listener.exitFunc_sig_arg_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_sig_arg_list) {
			return visitor.visitFunc_sig_arg_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_sigContext extends ParserRuleContext {
	public _name!: IdentifierContext;
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public func_sig_arg_list(): Func_sig_arg_listContext | undefined {
		return this.tryGetRuleContext(0, Func_sig_arg_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_func_sig; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_sig) {
			listener.enterFunc_sig(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_sig) {
			listener.exitFunc_sig(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_sig) {
			return visitor.visitFunc_sig(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_sig_listContext extends ParserRuleContext {
	public func_sig(): Func_sigContext[];
	public func_sig(i: number): Func_sigContext;
	public func_sig(i?: number): Func_sigContext | Func_sigContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Func_sigContext);
		} else {
			return this.getRuleContext(i, Func_sigContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_func_sig_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_sig_list) {
			listener.enterFunc_sig_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_sig_list) {
			listener.exitFunc_sig_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_sig_list) {
			return visitor.visitFunc_sig_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_nameContext extends ParserRuleContext {
	public ABSTIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ABSTIME, 0); }
	public RELTIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RELTIME, 0); }
	public BIGINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BIGINT, 0); }
	public BIGSERIAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BIGSERIAL, 0); }
	public BIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BIT, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public INTEGER_LITERAL(): TerminalNode[];
	public INTEGER_LITERAL(i: number): TerminalNode;
	public INTEGER_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.INTEGER_LITERAL);
		} else {
			return this.getToken(PostgreSQLParserParser.INTEGER_LITERAL, i);
		}
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public BIT_VARYING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BIT_VARYING, 0); }
	public BOOL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BOOL, 0); }
	public BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BOOLEAN, 0); }
	public BOX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BOX, 0); }
	public BYTEA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BYTEA, 0); }
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHAR, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHARACTER, 0); }
	public CHARACTER_VARYING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHARACTER_VARYING, 0); }
	public CIDR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CIDR, 0); }
	public CIRCLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CIRCLE, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DATE, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DECIMAL, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COMMA, 0); }
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOUBLE, 0); }
	public PRECISION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PRECISION, 0); }
	public FLOAT4(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FLOAT4, 0); }
	public FLOAT8(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FLOAT8, 0); }
	public INET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INET, 0); }
	public INT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INT, 0); }
	public INT4(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INT4, 0); }
	public INT2(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INT2, 0); }
	public INT8(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INT8, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER, 0); }
	public INTERVAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTERVAL, 0); }
	public FIELDS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FIELDS, 0); }
	public JSON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.JSON, 0); }
	public JSONB(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.JSONB, 0); }
	public LINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LINE, 0); }
	public LSEG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LSEG, 0); }
	public MACADDR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MACADDR, 0); }
	public MACADDR8(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MACADDR8, 0); }
	public MONEY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MONEY, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NUMERIC, 0); }
	public PATH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PATH, 0); }
	public PG_LSN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PG_LSN, 0); }
	public POINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.POINT, 0); }
	public POLYGON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.POLYGON, 0); }
	public REAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REAL, 0); }
	public SERIAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SERIAL, 0); }
	public SERIAL2(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SERIAL2, 0); }
	public SERIAL4(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SERIAL4, 0); }
	public SERIAL8(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SERIAL8, 0); }
	public SMALLINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SMALLINT, 0); }
	public SMALLSERIAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SMALLSERIAL, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEXT, 0); }
	public TIME(): TerminalNode[];
	public TIME(i: number): TerminalNode;
	public TIME(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.TIME);
		} else {
			return this.getToken(PostgreSQLParserParser.TIME, i);
		}
	}
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ZONE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITHOUT, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIMESTAMP, 0); }
	public TIMETZ(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIMETZ, 0); }
	public TIMESTAMPTZ(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIMESTAMPTZ, 0); }
	public TSQUERY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TSQUERY, 0); }
	public TSVECTOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TSVECTOR, 0); }
	public TXID_SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TXID_SNAPSHOT, 0); }
	public UUID(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UUID, 0); }
	public VARBIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VARBIT, 0); }
	public VARCHAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VARCHAR, 0); }
	public XML(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.XML, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_type_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterType_name) {
			listener.enterType_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitType_name) {
			listener.exitType_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitType_name) {
			return visitor.visitType_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TimezoneContext extends ParserRuleContext {
	public SINGLEQ_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, 0); }
	public DOUBLEQ_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL, 0); }
	public INTEGER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NUMERIC_LITERAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_timezone; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTimezone) {
			listener.enterTimezone(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTimezone) {
			listener.exitTimezone(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTimezone) {
			return visitor.visitTimezone(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OperContext extends ParserRuleContext {
	public IS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IS, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OF, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_oper; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOper) {
			listener.enterOper(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOper) {
			listener.exitOper(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOper) {
			return visitor.visitOper(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AggregateContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public order_by_clause(): Order_by_clauseContext | undefined {
		return this.tryGetRuleContext(0, Order_by_clauseContext);
	}
	public FILTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FILTER, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WHERE, 0); }
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALL, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DISTINCT, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STAR, 0); }
	public WITHIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITHIN, 0); }
	public GROUP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GROUP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_aggregate; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAggregate) {
			listener.enterAggregate(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAggregate) {
			listener.exitAggregate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAggregate) {
			return visitor.visitAggregate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Name_Context extends ParserRuleContext {
	public SINGLEQ_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_name_; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterName_) {
			listener.enterName_(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitName_) {
			listener.exitName_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitName_) {
			return visitor.visitName_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Name_listContext extends ParserRuleContext {
	public name_(): Name_Context[];
	public name_(i: number): Name_Context;
	public name_(i?: number): Name_Context | Name_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Name_Context);
		} else {
			return this.getRuleContext(i, Name_Context);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_name_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterName_list) {
			listener.enterName_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitName_list) {
			listener.exitName_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitName_list) {
			return visitor.visitName_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Identifier_listContext extends ParserRuleContext {
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_identifier_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIdentifier_list) {
			listener.enterIdentifier_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIdentifier_list) {
			listener.exitIdentifier_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIdentifier_list) {
			return visitor.visitIdentifier_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Option_exprContext extends ParserRuleContext {
	public _option_name!: IdentifierContext;
	public _value!: Param_valueContext;
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EQUAL, 0); }
	public param_value(): Param_valueContext | undefined {
		return this.tryGetRuleContext(0, Param_valueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_option_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOption_expr) {
			listener.enterOption_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOption_expr) {
			listener.exitOption_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOption_expr) {
			return visitor.visitOption_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Option_listContext extends ParserRuleContext {
	public option_expr(): Option_exprContext[];
	public option_expr(i: number): Option_exprContext;
	public option_expr(i?: number): Option_exprContext | Option_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Option_exprContext);
		} else {
			return this.getRuleContext(i, Option_exprContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_option_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOption_list) {
			listener.enterOption_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOption_list) {
			listener.exitOption_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOption_list) {
			return visitor.visitOption_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_name_Context extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_table_name_; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTable_name_) {
			listener.enterTable_name_(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTable_name_) {
			listener.exitTable_name_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTable_name_) {
			return visitor.visitTable_name_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_typeContext extends ParserRuleContext {
	public type_name(): Type_nameContext | undefined {
		return this.tryGetRuleContext(0, Type_nameContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public OPEN_BRACKET(): TerminalNode[];
	public OPEN_BRACKET(i: number): TerminalNode;
	public OPEN_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_BRACKET);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_BRACKET, i);
		}
	}
	public CLOSE_BRACKET(): TerminalNode[];
	public CLOSE_BRACKET(i: number): TerminalNode;
	public CLOSE_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_BRACKET);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_BRACKET, i);
		}
	}
	public INTEGER_LITERAL(): TerminalNode[];
	public INTEGER_LITERAL(i: number): TerminalNode;
	public INTEGER_LITERAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.INTEGER_LITERAL);
		} else {
			return this.getToken(PostgreSQLParserParser.INTEGER_LITERAL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_data_type; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterData_type) {
			listener.enterData_type(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitData_type) {
			listener.exitData_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitData_type) {
			return visitor.visitData_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Data_type_listContext extends ParserRuleContext {
	public data_type(): Data_typeContext[];
	public data_type(i: number): Data_typeContext;
	public data_type(i?: number): Data_typeContext | Data_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_typeContext);
		} else {
			return this.getRuleContext(i, Data_typeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_data_type_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterData_type_list) {
			listener.enterData_type_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitData_type_list) {
			listener.exitData_type_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitData_type_list) {
			return visitor.visitData_type_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_methodContext extends ParserRuleContext {
	public _builtin!: Token;
	public _unknown!: IdentifierContext;
	public BTREE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BTREE, 0); }
	public HASH_(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HASH_, 0); }
	public GIST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GIST, 0); }
	public SPGIST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SPGIST, 0); }
	public GIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GIN, 0); }
	public BRIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BRIN, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_index_method; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIndex_method) {
			listener.enterIndex_method(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIndex_method) {
			listener.exitIndex_method(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIndex_method) {
			return visitor.visitIndex_method(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_nameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_func_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_name) {
			listener.enterFunc_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_name) {
			listener.exitFunc_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_name) {
			return visitor.visitFunc_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_callContext extends ParserRuleContext {
	public func_name(): Func_nameContext {
		return this.getRuleContext(0, Func_nameContext);
	}
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public VARIADIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VARIADIC, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public todo_fill_in(): Todo_fill_inContext | undefined {
		return this.tryGetRuleContext(0, Todo_fill_inContext);
	}
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FROM, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_func_call; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_call) {
			listener.enterFunc_call(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_call) {
			listener.exitFunc_call(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_call) {
			return visitor.visitFunc_call(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Array_cons_exprContext extends ParserRuleContext {
	public ARRAY(): TerminalNode { return this.getToken(PostgreSQLParserParser.ARRAY, 0); }
	public OPEN_BRACKET(): TerminalNode { return this.getToken(PostgreSQLParserParser.OPEN_BRACKET, 0); }
	public CLOSE_BRACKET(): TerminalNode { return this.getToken(PostgreSQLParserParser.CLOSE_BRACKET, 0); }
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_array_cons_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterArray_cons_expr) {
			listener.enterArray_cons_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitArray_cons_expr) {
			listener.exitArray_cons_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitArray_cons_expr) {
			return visitor.visitArray_cons_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_itemContext extends ParserRuleContext {
	public table_name_(): Table_name_Context | undefined {
		return this.tryGetRuleContext(0, Table_name_Context);
	}
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ONLY, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STAR, 0); }
	public with_column_alias(): With_column_aliasContext | undefined {
		return this.tryGetRuleContext(0, With_column_aliasContext);
	}
	public TABLESAMPLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLESAMPLE, 0); }
	public todo_fill_in(): Todo_fill_inContext[];
	public todo_fill_in(i: number): Todo_fill_inContext;
	public todo_fill_in(i?: number): Todo_fill_inContext | Todo_fill_inContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Todo_fill_inContext);
		} else {
			return this.getRuleContext(i, Todo_fill_inContext);
		}
	}
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REPEATABLE, 0); }
	public stmt(): StmtContext | undefined {
		return this.tryGetRuleContext(0, StmtContext);
	}
	public alias(): AliasContext | undefined {
		return this.tryGetRuleContext(0, AliasContext);
	}
	public LATERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LATERAL, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AS, 0); }
	public column_alias(): Column_aliasContext[];
	public column_alias(i: number): Column_aliasContext;
	public column_alias(i?: number): Column_aliasContext | Column_aliasContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Column_aliasContext);
		} else {
			return this.getRuleContext(i, Column_aliasContext);
		}
	}
	public func_call(): Func_callContext | undefined {
		return this.tryGetRuleContext(0, Func_callContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public ORDINALITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ORDINALITY, 0); }
	public column_definition(): Column_definitionContext[];
	public column_definition(i: number): Column_definitionContext;
	public column_definition(i?: number): Column_definitionContext | Column_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Column_definitionContext);
		} else {
			return this.getRuleContext(i, Column_definitionContext);
		}
	}
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROWS, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FROM, 0); }
	public from_item(): From_itemContext[];
	public from_item(i: number): From_itemContext;
	public from_item(i?: number): From_itemContext | From_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(From_itemContext);
		} else {
			return this.getRuleContext(i, From_itemContext);
		}
	}
	public join_type(): Join_typeContext | undefined {
		return this.tryGetRuleContext(0, Join_typeContext);
	}
	public NATURAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NATURAL, 0); }
	public join_clause(): Join_clauseContext | undefined {
		return this.tryGetRuleContext(0, Join_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_from_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFrom_item) {
			listener.enterFrom_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFrom_item) {
			listener.exitFrom_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFrom_item) {
			return visitor.visitFrom_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_column_aliasContext extends ParserRuleContext {
	public alias(): AliasContext {
		return this.getRuleContext(0, AliasContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AS, 0); }
	public column_alias(): Column_aliasContext[];
	public column_alias(i: number): Column_aliasContext;
	public column_alias(i?: number): Column_aliasContext | Column_aliasContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Column_aliasContext);
		} else {
			return this.getRuleContext(i, Column_aliasContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_with_column_alias; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWith_column_alias) {
			listener.enterWith_column_alias(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWith_column_alias) {
			listener.exitWith_column_alias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWith_column_alias) {
			return visitor.visitWith_column_alias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Join_typeContext extends ParserRuleContext {
	public JOIN(): TerminalNode { return this.getToken(PostgreSQLParserParser.JOIN, 0); }
	public INNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INNER, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LEFT, 0); }
	public OUTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OUTER, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RIGHT, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FULL, 0); }
	public CROSS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CROSS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_join_type; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterJoin_type) {
			listener.enterJoin_type(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitJoin_type) {
			listener.exitJoin_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitJoin_type) {
			return visitor.visitJoin_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Join_clauseContext extends ParserRuleContext {
	public ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ON, 0); }
	public predicate(): PredicateContext | undefined {
		return this.tryGetRuleContext(0, PredicateContext);
	}
	public USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USING, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public column_name(): Column_nameContext[];
	public column_name(i: number): Column_nameContext;
	public column_name(i?: number): Column_nameContext | Column_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Column_nameContext);
		} else {
			return this.getRuleContext(i, Column_nameContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_join_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterJoin_clause) {
			listener.enterJoin_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitJoin_clause) {
			listener.exitJoin_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitJoin_clause) {
			return visitor.visitJoin_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PredicateContext extends ParserRuleContext {
	public expr(): ExprContext[];
	public expr(i: number): ExprContext;
	public expr(i?: number): ExprContext | ExprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExprContext);
		} else {
			return this.getRuleContext(i, ExprContext);
		}
	}
	public oper(): OperContext | undefined {
		return this.tryGetRuleContext(0, OperContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public predicate(): PredicateContext[];
	public predicate(i: number): PredicateContext;
	public predicate(i?: number): PredicateContext | PredicateContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PredicateContext);
		} else {
			return this.getRuleContext(i, PredicateContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AND, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OR, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_predicate; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPredicate) {
			listener.enterPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPredicate) {
			listener.exitPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPredicate) {
			return visitor.visitPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Aggregate_signatureContext extends ParserRuleContext {
	public _argmode!: Token;
	public _argname!: IdentifierContext;
	public _argtype!: Data_type_listContext;
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STAR, 0); }
	public data_type_list(): Data_type_listContext[];
	public data_type_list(i: number): Data_type_listContext;
	public data_type_list(i?: number): Data_type_listContext | Data_type_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Data_type_listContext);
		} else {
			return this.getRuleContext(i, Data_type_listContext);
		}
	}
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public IN(): TerminalNode[];
	public IN(i: number): TerminalNode;
	public IN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.IN);
		} else {
			return this.getToken(PostgreSQLParserParser.IN, i);
		}
	}
	public VARIADIC(): TerminalNode[];
	public VARIADIC(i: number): TerminalNode;
	public VARIADIC(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.VARIADIC);
		} else {
			return this.getToken(PostgreSQLParserParser.VARIADIC, i);
		}
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_aggregate_signature; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAggregate_signature) {
			listener.enterAggregate_signature(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAggregate_signature) {
			listener.exitAggregate_signature(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAggregate_signature) {
			return visitor.visitAggregate_signature(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_constraintContext extends ParserRuleContext {
	public NOT(): TerminalNode { return this.getToken(PostgreSQLParserParser.NOT, 0); }
	public NULL(): TerminalNode { return this.getToken(PostgreSQLParserParser.NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_column_constraint; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColumn_constraint) {
			listener.enterColumn_constraint(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColumn_constraint) {
			listener.exitColumn_constraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColumn_constraint) {
			return visitor.visitColumn_constraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_constraintsContext extends ParserRuleContext {
	public column_constraint(): Column_constraintContext[];
	public column_constraint(i: number): Column_constraintContext;
	public column_constraint(i?: number): Column_constraintContext | Column_constraintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Column_constraintContext);
		} else {
			return this.getRuleContext(i, Column_constraintContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_column_constraints; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColumn_constraints) {
			listener.enterColumn_constraints(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColumn_constraints) {
			listener.exitColumn_constraints(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColumn_constraints) {
			return visitor.visitColumn_constraints(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_parametersContext extends ParserRuleContext {
	public _tablespace!: IdentifierContext;
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public option_list(): Option_listContext | undefined {
		return this.tryGetRuleContext(0, Option_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USING, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INDEX, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLESPACE, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_index_parameters; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIndex_parameters) {
			listener.enterIndex_parameters(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIndex_parameters) {
			listener.exitIndex_parameters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIndex_parameters) {
			return visitor.visitIndex_parameters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exclude_elementContext extends ParserRuleContext {
	public _column_name_!: IdentifierContext;
	public _opclass!: IdentifierContext;
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN_PAREN, 0); }
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE_PAREN, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public NULLS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NULLS, 0); }
	public ASC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ASC, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DESC, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FIRST, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LAST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_exclude_element; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExclude_element) {
			listener.enterExclude_element(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExclude_element) {
			listener.exitExclude_element(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExclude_element) {
			return visitor.visitExclude_element(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_constraintContext extends ParserRuleContext {
	public _constraint_name!: Name_Context;
	public _columns!: Identifier_listContext;
	public _operators!: Identifier_listContext;
	public _reftable!: IdentifierContext;
	public _action!: IdentifierContext;
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONSTRAINT, 0); }
	public DEFERABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFERABLE, 0); }
	public INITIALLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INITIALLY, 0); }
	public name_(): Name_Context | undefined {
		return this.tryGetRuleContext(0, Name_Context);
	}
	public CHECK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHECK, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.OPEN_PAREN, i);
		}
	}
	public expr(): ExprContext | undefined {
		return this.tryGetRuleContext(0, ExprContext);
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParserParser.CLOSE_PAREN, i);
		}
	}
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNIQUE, 0); }
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PRIMARY, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.KEY, 0); }
	public index_parameters(): Index_parametersContext | undefined {
		return this.tryGetRuleContext(0, Index_parametersContext);
	}
	public FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FOREIGN, 0); }
	public REFERENCES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REFERENCES, 0); }
	public DEFERRED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFERRED, 0); }
	public IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IMMEDIATE, 0); }
	public identifier_list(): Identifier_listContext[];
	public identifier_list(i: number): Identifier_listContext;
	public identifier_list(i?: number): Identifier_listContext | Identifier_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Identifier_listContext);
		} else {
			return this.getRuleContext(i, Identifier_listContext);
		}
	}
	public EXCLUDE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXCLUDE, 0); }
	public exclude_element(): Exclude_elementContext | undefined {
		return this.tryGetRuleContext(0, Exclude_elementContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITH, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOT, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NO, 0); }
	public INHERIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INHERIT, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WHERE, 0); }
	public predicate(): PredicateContext | undefined {
		return this.tryGetRuleContext(0, PredicateContext);
	}
	public MATCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MATCH, 0); }
	public FULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FULL, 0); }
	public PARTIAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PARTIAL, 0); }
	public MATCH_SIMPLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MATCH_SIMPLE, 0); }
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.ON);
		} else {
			return this.getToken(PostgreSQLParserParser.ON, i);
		}
	}
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DELETE, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UPDATE, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USING, 0); }
	public index_method(): Index_methodContext | undefined {
		return this.tryGetRuleContext(0, Index_methodContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_table_constraint; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTable_constraint) {
			listener.enterTable_constraint(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTable_constraint) {
			listener.exitTable_constraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTable_constraint) {
			return visitor.visitTable_constraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Role_nameContext extends ParserRuleContext {
	public _name!: Name_Context;
	public name_(): Name_Context | undefined {
		return this.tryGetRuleContext(0, Name_Context);
	}
	public CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_USER, 0); }
	public SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION_USER, 0); }
	public PUBLIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PUBLIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_role_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRole_name) {
			listener.enterRole_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRole_name) {
			listener.exitRole_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRole_name) {
			return visitor.visitRole_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Role_name_listContext extends ParserRuleContext {
	public role_name(): Role_nameContext[];
	public role_name(i: number): Role_nameContext;
	public role_name(i?: number): Role_nameContext | Role_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Role_nameContext);
		} else {
			return this.getRuleContext(i, Role_nameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParserParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParserParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_role_name_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRole_name_list) {
			listener.enterRole_name_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRole_name_list) {
			listener.exitRole_name_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRole_name_list) {
			return visitor.visitRole_name_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Param_valueContext extends ParserRuleContext {
	public ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ON, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OFF, 0); }
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FALSE, 0); }
	public YES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.YES, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NO, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NONE, 0); }
	public SINGLEQ_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SINGLEQ_STRING_LITERAL, 0); }
	public NUMERIC_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NUMERIC_LITERAL, 0); }
	public INTEGER_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER_LITERAL, 0); }
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_param_value; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterParam_value) {
			listener.enterParam_value(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitParam_value) {
			listener.exitParam_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitParam_value) {
			return visitor.visitParam_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Non_reserved_keywordContext extends ParserRuleContext {
	public A_(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.A_, 0); }
	public ABORT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ABORT, 0); }
	public ABS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ABS, 0); }
	public ABSOLUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ABSOLUTE, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ACCESS, 0); }
	public ACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ACTION, 0); }
	public ADA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ADA, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ADD, 0); }
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ADMIN, 0); }
	public AFTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AFTER, 0); }
	public AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AGGREGATE, 0); }
	public ALLOCATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALLOCATE, 0); }
	public ALSO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALSO, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALTER, 0); }
	public ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ALWAYS, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ANY, 0); }
	public ARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ARE, 0); }
	public ASENSITIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ASENSITIVE, 0); }
	public ASSERTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ASSERTION, 0); }
	public ASSIGNMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ASSIGNMENT, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AT, 0); }
	public ATOMIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ATOMIC, 0); }
	public ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ATTRIBUTE, 0); }
	public ATTRIBUTES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ATTRIBUTES, 0); }
	public AVG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.AVG, 0); }
	public BACKWARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BACKWARD, 0); }
	public BEFORE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BEFORE, 0); }
	public BEGIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BEGIN, 0); }
	public BERNOULLI(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BERNOULLI, 0); }
	public BETWEEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BETWEEN, 0); }
	public BIGINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BIGINT, 0); }
	public BIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BIT, 0); }
	public BIT_LENGTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BIT_LENGTH, 0); }
	public BLOB(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BLOB, 0); }
	public BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BOOLEAN, 0); }
	public BREADTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BREADTH, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.BY, 0); }
	public C_(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.C_, 0); }
	public CACHE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CACHE, 0); }
	public CALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CALL, 0); }
	public CALLED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CALLED, 0); }
	public CARDINALITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CARDINALITY, 0); }
	public CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADE, 0); }
	public CASCADED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CASCADED, 0); }
	public CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CATALOG, 0); }
	public CATALOG_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CATALOG_NAME, 0); }
	public CEIL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CEIL, 0); }
	public CEILING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CEILING, 0); }
	public CHAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHAIN, 0); }
	public CHAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHAR, 0); }
	public CHARACTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHARACTER, 0); }
	public CHARACTERISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHARACTERISTICS, 0); }
	public CHARACTERS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHARACTERS, 0); }
	public CHARACTER_LENGTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHARACTER_LENGTH, 0); }
	public CHARACTER_SET_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHARACTER_SET_CATALOG, 0); }
	public CHARACTER_SET_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHARACTER_SET_NAME, 0); }
	public CHARACTER_SET_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHARACTER_SET_SCHEMA, 0); }
	public CHAR_LENGTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHAR_LENGTH, 0); }
	public CHECKPOINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CHECKPOINT, 0); }
	public CLASS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLASS, 0); }
	public CLASS_ORIGIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLASS_ORIGIN, 0); }
	public CLOB(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOB, 0); }
	public CLOSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLOSE, 0); }
	public CLUSTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CLUSTER, 0); }
	public COALESCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COALESCE, 0); }
	public COBOL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COBOL, 0); }
	public COLLATION_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COLLATION_CATALOG, 0); }
	public COLLATION_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COLLATION_NAME, 0); }
	public COLLATION_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COLLATION_SCHEMA, 0); }
	public COLLECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COLLECT, 0); }
	public COLUMN_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COLUMN_NAME, 0); }
	public COMMAND_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COMMAND_FUNCTION, 0); }
	public COMMAND_FUNCTION_CODE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COMMAND_FUNCTION_CODE, 0); }
	public COMMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COMMENT, 0); }
	public COMMIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COMMIT, 0); }
	public COMMITTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COMMITTED, 0); }
	public CONDITION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONDITION, 0); }
	public CONDITION_NUMBER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONDITION_NUMBER, 0); }
	public CONNECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONNECT, 0); }
	public CONNECTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONNECTION, 0); }
	public CONNECTION_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONNECTION_NAME, 0); }
	public CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONSTRAINTS, 0); }
	public CONSTRAINT_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONSTRAINT_CATALOG, 0); }
	public CONSTRAINT_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONSTRAINT_NAME, 0); }
	public CONSTRAINT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONSTRAINT_SCHEMA, 0); }
	public CONSTRUCTOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONSTRUCTOR, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONTAINS, 0); }
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONTINUE, 0); }
	public CONVERSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONVERSION, 0); }
	public CONVERT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CONVERT, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COPY, 0); }
	public CORR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CORR, 0); }
	public CORRESPONDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CORRESPONDING, 0); }
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COUNT, 0); }
	public COVAR_POP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COVAR_POP, 0); }
	public COVAR_SAMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.COVAR_SAMP, 0); }
	public CSV(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CSV, 0); }
	public CUBE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CUBE, 0); }
	public CUME_DIST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CUME_DIST, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT, 0); }
	public CURRENT_DEFAULT_TRANSFORM_GROUP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_DEFAULT_TRANSFORM_GROUP, 0); }
	public CURRENT_PATH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_PATH, 0); }
	public CURRENT_TRANSFORM_GROUP_FOR_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE, 0); }
	public CURSOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURSOR, 0); }
	public CURSOR_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CURSOR_NAME, 0); }
	public CYCLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.CYCLE, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DATA, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DATABASE, 0); }
	public DATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DATE, 0); }
	public DATETIME_INTERVAL_CODE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DATETIME_INTERVAL_CODE, 0); }
	public DATETIME_INTERVAL_PRECISION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DATETIME_INTERVAL_PRECISION, 0); }
	public DAY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DAY, 0); }
	public DEALLOCATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEALLOCATE, 0); }
	public DEC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEC, 0); }
	public DECIMAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DECIMAL, 0); }
	public DECLARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DECLARE, 0); }
	public DEFAULTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFAULTS, 0); }
	public DEFERRED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFERRED, 0); }
	public DEFINED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFINED, 0); }
	public DEFINER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEFINER, 0); }
	public DEGREE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEGREE, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DELETE, 0); }
	public DELIMITER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DELIMITER, 0); }
	public DELIMITERS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DELIMITERS, 0); }
	public DENSE_RANK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DENSE_RANK, 0); }
	public DEPTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEPTH, 0); }
	public DEREF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DEREF, 0); }
	public DERIVED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DERIVED, 0); }
	public DESCRIBE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DESCRIBE, 0); }
	public DESCRIPTOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DESCRIPTOR, 0); }
	public DETERMINISTIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DETERMINISTIC, 0); }
	public DIAGNOSTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DIAGNOSTICS, 0); }
	public DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DICTIONARY, 0); }
	public DISCONNECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DISCONNECT, 0); }
	public DISPATCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DISPATCH, 0); }
	public DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOMAIN, 0); }
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOUBLE, 0); }
	public DYNAMIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DYNAMIC, 0); }
	public DYNAMIC_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DYNAMIC_FUNCTION, 0); }
	public DYNAMIC_FUNCTION_CODE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DYNAMIC_FUNCTION_CODE, 0); }
	public EACH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EACH, 0); }
	public ELEMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ELEMENT, 0); }
	public ENCODING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ENCODING, 0); }
	public ENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ENCRYPTED, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.END, 0); }
	public EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EQUALS, 0); }
	public ESCAPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ESCAPE, 0); }
	public EVERY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EVERY, 0); }
	public EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXCEPTION, 0); }
	public EXCLUDE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXCLUDE, 0); }
	public EXCLUDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXCLUDING, 0); }
	public EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXCLUSIVE, 0); }
	public EXEC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXEC, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXECUTE, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXISTS, 0); }
	public EXP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXP, 0); }
	public EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXPLAIN, 0); }
	public EXTENSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXTENSION, 0); }
	public EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXTERNAL, 0); }
	public EXTRACT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.EXTRACT, 0); }
	public FILTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FILTER, 0); }
	public FINAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FINAL, 0); }
	public FIRST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FIRST, 0); }
	public FLOAT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FLOAT, 0); }
	public FLOOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FLOOR, 0); }
	public FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FOLLOWING, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FORCE, 0); }
	public FORMAT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FORMAT, 0); }
	public FORTRAN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FORTRAN, 0); }
	public FORWARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FORWARD, 0); }
	public FOUND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FOUND, 0); }
	public FREE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FREE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FUNCTION, 0); }
	public FUSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.FUSION, 0); }
	public G_(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.G_, 0); }
	public GENERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GENERAL, 0); }
	public GENERATED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GENERATED, 0); }
	public GET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GET, 0); }
	public GLOBAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GLOBAL, 0); }
	public GO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GO, 0); }
	public GOTO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GOTO, 0); }
	public GREATEST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GREATEST, 0); }
	public GRANTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GRANTED, 0); }
	public GROUPING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.GROUPING, 0); }
	public HANDLER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HANDLER, 0); }
	public HIERARCHY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HIERARCHY, 0); }
	public HOLD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HOLD, 0); }
	public HOST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HOST, 0); }
	public HOUR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.HOUR, 0); }
	public IDENTITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IDENTITY, 0); }
	public IGNORE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IGNORE, 0); }
	public IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IMMEDIATE, 0); }
	public IMMUTABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IMMUTABLE, 0); }
	public IMPLEMENTATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IMPLEMENTATION, 0); }
	public IMPLICIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IMPLICIT, 0); }
	public INCLUDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INCLUDING, 0); }
	public INCREMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INCREMENT, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INDEX, 0); }
	public INDICATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INDICATOR, 0); }
	public INHERITS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INHERITS, 0); }
	public INOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INOUT, 0); }
	public INPUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INPUT, 0); }
	public INSENSITIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INSENSITIVE, 0); }
	public INSERT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INSERT, 0); }
	public INSTANCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INSTANCE, 0); }
	public INSTANTIABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INSTANTIABLE, 0); }
	public INSTEAD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INSTEAD, 0); }
	public INT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INT, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTEGER, 0); }
	public INTERSECTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTERSECTION, 0); }
	public INTERVAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INTERVAL, 0); }
	public INVOKER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.INVOKER, 0); }
	public ISOLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ISOLATION, 0); }
	public K_(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.K_, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.KEY, 0); }
	public KEY_MEMBER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.KEY_MEMBER, 0); }
	public KEY_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.KEY_TYPE, 0); }
	public LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LANGUAGE, 0); }
	public LARGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LARGE, 0); }
	public LAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LAST, 0); }
	public LEAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LEAST, 0); }
	public LEFT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LEFT, 0); }
	public LENGTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LENGTH, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LEVEL, 0); }
	public LISTEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LISTEN, 0); }
	public LN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LN, 0); }
	public LOAD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LOAD, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LOCAL, 0); }
	public LOCATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LOCATION, 0); }
	public LOCATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LOCATOR, 0); }
	public LOCK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LOCK, 0); }
	public LOCKED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LOCKED, 0); }
	public LOWER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.LOWER, 0); }
	public M_(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.M_, 0); }
	public MAP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MAP, 0); }
	public MATCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MATCH, 0); }
	public MATCHED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MATCHED, 0); }
	public MAX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MAX, 0); }
	public MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MAXVALUE, 0); }
	public MEMBER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MEMBER, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MERGE, 0); }
	public MESSAGE_LENGTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MESSAGE_LENGTH, 0); }
	public MESSAGE_OCTET_LENGTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MESSAGE_OCTET_LENGTH, 0); }
	public MESSAGE_TEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MESSAGE_TEXT, 0); }
	public METHOD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.METHOD, 0); }
	public MIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MIN, 0); }
	public MINUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MINUTE, 0); }
	public MINVALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MINVALUE, 0); }
	public MOD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MOD, 0); }
	public MODE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MODE, 0); }
	public MODIFIES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MODIFIES, 0); }
	public MODULE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MODULE, 0); }
	public MONTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MONTH, 0); }
	public MORE_(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MORE_, 0); }
	public MOVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MOVE, 0); }
	public MULTISET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MULTISET, 0); }
	public MUMPS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.MUMPS, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NAME, 0); }
	public NAMES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NAMES, 0); }
	public NATIONAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NATIONAL, 0); }
	public NCHAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NCHAR, 0); }
	public NCLOB(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NCLOB, 0); }
	public NESTING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NESTING, 0); }
	public NEW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NEW, 0); }
	public NEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NEXT, 0); }
	public NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NO, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NONE, 0); }
	public NORMALIZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NORMALIZE, 0); }
	public NORMALIZED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NORMALIZED, 0); }
	public NOTHING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOTHING, 0); }
	public NOTIFY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOTIFY, 0); }
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NOWAIT, 0); }
	public NULLABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NULLABLE, 0); }
	public NULLIF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NULLIF, 0); }
	public NULLS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NULLS, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NUMBER, 0); }
	public NUMERIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.NUMERIC, 0); }
	public OBJECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OBJECT, 0); }
	public OCTETS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OCTETS, 0); }
	public OCTET_LENGTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OCTET_LENGTH, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OF, 0); }
	public OFF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OFF, 0); }
	public OIDS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OIDS, 0); }
	public OLD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OLD, 0); }
	public OPEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPEN, 0); }
	public OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPERATOR, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPTION, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OPTIONS, 0); }
	public ORDERING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ORDERING, 0); }
	public ORDINALITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ORDINALITY, 0); }
	public OTHERS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OTHERS, 0); }
	public OUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OUT, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OUTPUT, 0); }
	public OVER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OVER, 0); }
	public OVERLAY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OVERLAY, 0); }
	public OVERRIDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OVERRIDING, 0); }
	public OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.OWNER, 0); }
	public PAD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PAD, 0); }
	public PARAMETER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PARAMETER, 0); }
	public PARAMETER_MODE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PARAMETER_MODE, 0); }
	public PARAMETER_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PARAMETER_NAME, 0); }
	public PARAMETER_ORDINAL_POSITION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PARAMETER_ORDINAL_POSITION, 0); }
	public PARAMETER_SPECIFIC_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PARAMETER_SPECIFIC_CATALOG, 0); }
	public PARAMETER_SPECIFIC_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PARAMETER_SPECIFIC_NAME, 0); }
	public PARAMETER_SPECIFIC_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PARAMETER_SPECIFIC_SCHEMA, 0); }
	public PARTIAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PARTIAL, 0); }
	public PARTITION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PARTITION, 0); }
	public PASCAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PASCAL, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PASSWORD, 0); }
	public PATH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PATH, 0); }
	public PERCENTILE_CONT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PERCENTILE_CONT, 0); }
	public PERCENTILE_DISC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PERCENTILE_DISC, 0); }
	public PERCENT_RANK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PERCENT_RANK, 0); }
	public PLAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PLAIN, 0); }
	public PLI(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PLI, 0); }
	public POSITION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.POSITION, 0); }
	public POWER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.POWER, 0); }
	public PRECEDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PRECEDING, 0); }
	public PRECISION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PRECISION, 0); }
	public PREPARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PREPARE, 0); }
	public PRESERVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PRESERVE, 0); }
	public PRIOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PRIOR, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PRIVILEGES, 0); }
	public PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PROCEDURAL, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PROCEDURE, 0); }
	public PUBLIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.PUBLIC, 0); }
	public QUOTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.QUOTE, 0); }
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RANGE, 0); }
	public RANK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RANK, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.READ, 0); }
	public READS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.READS, 0); }
	public REAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REAL, 0); }
	public RECHECK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RECHECK, 0); }
	public RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RECURSIVE, 0); }
	public REF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REF, 0); }
	public REFERENCING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REFERENCING, 0); }
	public REFRESH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REFRESH, 0); }
	public REGR_AVGX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REGR_AVGX, 0); }
	public REGR_AVGY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REGR_AVGY, 0); }
	public REGR_COUNT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REGR_COUNT, 0); }
	public REGR_INTERCEPT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REGR_INTERCEPT, 0); }
	public REGR_SLOPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REGR_SLOPE, 0); }
	public REGR_SXX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REGR_SXX, 0); }
	public REGR_SXY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REGR_SXY, 0); }
	public REGR_SYY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REGR_SYY, 0); }
	public REINDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REINDEX, 0); }
	public RELATIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RELATIVE, 0); }
	public RELEASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RELEASE, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RENAME, 0); }
	public REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REPEATABLE, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REPLACE, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESET, 0); }
	public RESTART(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTART, 0); }
	public RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESTRICT, 0); }
	public RESULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RESULT, 0); }
	public RETURN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RETURN, 0); }
	public RETURNED_CARDINALITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RETURNED_CARDINALITY, 0); }
	public RETURNED_LENGTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RETURNED_LENGTH, 0); }
	public RETURNED_OCTET_LENGTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RETURNED_OCTET_LENGTH, 0); }
	public RETURNED_SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RETURNED_SQLSTATE, 0); }
	public RETURNS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RETURNS, 0); }
	public REVOKE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.REVOKE, 0); }
	public RIGHT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RIGHT, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROLE, 0); }
	public ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROLLBACK, 0); }
	public ROLLUP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROLLUP, 0); }
	public ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROUTINE, 0); }
	public ROUTINE_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROUTINE_CATALOG, 0); }
	public ROUTINE_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROUTINE_NAME, 0); }
	public ROUTINE_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROUTINE_SCHEMA, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROW, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROWS, 0); }
	public ROW_COUNT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROW_COUNT, 0); }
	public ROW_NUMBER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ROW_NUMBER, 0); }
	public RULE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.RULE, 0); }
	public SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SAVEPOINT, 0); }
	public SCALE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCALE, 0); }
	public SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA, 0); }
	public SCHEMA_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCHEMA_NAME, 0); }
	public SCOPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCOPE, 0); }
	public SCOPE_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCOPE_CATALOG, 0); }
	public SCOPE_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCOPE_NAME, 0); }
	public SCOPE_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCOPE_SCHEMA, 0); }
	public SCROLL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SCROLL, 0); }
	public SEARCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SEARCH, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SECOND, 0); }
	public SECTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SECTION, 0); }
	public SECURITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SECURITY, 0); }
	public SELF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SELF, 0); }
	public SENSITIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SENSITIVE, 0); }
	public SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SEQUENCE, 0); }
	public SEQUENCES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SEQUENCES, 0); }
	public SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SERIALIZABLE, 0); }
	public SERVER_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SERVER_NAME, 0); }
	public SESSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SESSION, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SET, 0); }
	public SETOF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SETOF, 0); }
	public SETS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SETS, 0); }
	public SHARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SHARE, 0); }
	public SHOW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SHOW, 0); }
	public SIMPLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SIMPLE, 0); }
	public SIZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SIZE, 0); }
	public SMALLINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SMALLINT, 0); }
	public SOME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SOME, 0); }
	public SOURCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SOURCE, 0); }
	public SPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SPACE, 0); }
	public SPECIFIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SPECIFIC, 0); }
	public SPECIFICTYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SPECIFICTYPE, 0); }
	public SPECIFIC_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SPECIFIC_NAME, 0); }
	public SQL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SQL, 0); }
	public SQLCODE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SQLCODE, 0); }
	public SQLERROR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SQLERROR, 0); }
	public SQLEXCEPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SQLEXCEPTION, 0); }
	public SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SQLSTATE, 0); }
	public SQLWARNING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SQLWARNING, 0); }
	public SQRT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SQRT, 0); }
	public STABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STABLE, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.START, 0); }
	public STATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STATE, 0); }
	public STATEMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STATEMENT, 0); }
	public STATIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STATIC, 0); }
	public STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STATISTICS, 0); }
	public STDDEV_POP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STDDEV_POP, 0); }
	public STDDEV_SAMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STDDEV_SAMP, 0); }
	public STDIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STDIN, 0); }
	public STDOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STDOUT, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STORAGE, 0); }
	public STRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STRICT, 0); }
	public STRUCTURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STRUCTURE, 0); }
	public STYLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.STYLE, 0); }
	public SUBCLASS_ORIGIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SUBCLASS_ORIGIN, 0); }
	public SUBMULTISET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SUBMULTISET, 0); }
	public SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SUBSTRING, 0); }
	public SUM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SUM, 0); }
	public SYSID(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SYSID, 0); }
	public SYSTEM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SYSTEM, 0); }
	public SYSTEM_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.SYSTEM_USER, 0); }
	public TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLESPACE, 0); }
	public TABLE_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TABLE_NAME, 0); }
	public TEMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEMP, 0); }
	public TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEMPLATE, 0); }
	public TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEMPORARY, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TEXT, 0); }
	public TIES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIES, 0); }
	public TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIME, 0); }
	public TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIMESTAMP, 0); }
	public TIMEZONE_HOUR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIMEZONE_HOUR, 0); }
	public TIMEZONE_MINUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TIMEZONE_MINUTE, 0); }
	public TOP_LEVEL_COUNT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TOP_LEVEL_COUNT, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRANSACTION, 0); }
	public TRANSACTIONS_COMMITTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRANSACTIONS_COMMITTED, 0); }
	public TRANSACTIONS_ROLLED_BACK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRANSACTIONS_ROLLED_BACK, 0); }
	public TRANSACTION_ACTIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRANSACTION_ACTIVE, 0); }
	public TRANSFORM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRANSFORM, 0); }
	public TRANSFORMS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRANSFORMS, 0); }
	public TRANSLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRANSLATE, 0); }
	public TRANSLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRANSLATION, 0); }
	public TREAT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TREAT, 0); }
	public TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRIGGER, 0); }
	public TRIGGER_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRIGGER_CATALOG, 0); }
	public TRIGGER_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRIGGER_NAME, 0); }
	public TRIGGER_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRIGGER_SCHEMA, 0); }
	public TRIM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRIM, 0); }
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRUE, 0); }
	public TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRUNCATE, 0); }
	public TRUSTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TRUSTED, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.TYPE, 0); }
	public UESCAPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UESCAPE, 0); }
	public UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNBOUNDED, 0); }
	public UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNCOMMITTED, 0); }
	public UNDER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNDER, 0); }
	public UNENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNENCRYPTED, 0); }
	public UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNKNOWN, 0); }
	public UNLISTEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNLISTEN, 0); }
	public UNNAMED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNNAMED, 0); }
	public UNNEST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNNEST, 0); }
	public UNTIL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UNTIL, 0); }
	public UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UPDATE, 0); }
	public UPPER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.UPPER, 0); }
	public USAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USAGE, 0); }
	public USER_DEFINED_TYPE_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USER_DEFINED_TYPE_CATALOG, 0); }
	public USER_DEFINED_TYPE_CODE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USER_DEFINED_TYPE_CODE, 0); }
	public USER_DEFINED_TYPE_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USER_DEFINED_TYPE_NAME, 0); }
	public USER_DEFINED_TYPE_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.USER_DEFINED_TYPE_SCHEMA, 0); }
	public VACUUM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VACUUM, 0); }
	public VALID(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALID, 0); }
	public VALIDATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALIDATOR, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALUE, 0); }
	public VALUES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VALUES, 0); }
	public VARCHAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VARCHAR, 0); }
	public VARYING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VARYING, 0); }
	public VAR_POP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VAR_POP, 0); }
	public VAR_SAMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VAR_SAMP, 0); }
	public VIEW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VIEW, 0); }
	public VOLATILE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.VOLATILE, 0); }
	public WHENEVER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WHENEVER, 0); }
	public WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WHITESPACE, 0); }
	public WIDTH_BUCKET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WIDTH_BUCKET, 0); }
	public WITHIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITHIN, 0); }
	public WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WITHOUT, 0); }
	public WORK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WORK, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.WRITE, 0); }
	public YEAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.YEAR, 0); }
	public ZONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.ZONE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_non_reserved_keyword; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterNon_reserved_keyword) {
			listener.enterNon_reserved_keyword(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitNon_reserved_keyword) {
			listener.exitNon_reserved_keyword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitNon_reserved_keyword) {
			return visitor.visitNon_reserved_keyword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	public non_reserved_keyword(): Non_reserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Non_reserved_keywordContext);
	}
	public DOUBLEQ_STRING_LITERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOUBLEQ_STRING_LITERAL, 0); }
	public IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IDENTIFIER, 0); }
	public identifier(): IdentifierContext[];
	public identifier(i: number): IdentifierContext;
	public identifier(i?: number): IdentifierContext | IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IdentifierContext);
		} else {
			return this.getRuleContext(i, IdentifierContext);
		}
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.DOT, 0); }
	public type_name(): Type_nameContext | undefined {
		return this.tryGetRuleContext(0, Type_nameContext);
	}
	public IDENTIFIER_UNICODE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParserParser.IDENTIFIER_UNICODE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_identifier; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIdentifier) {
			listener.enterIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIdentifier) {
			listener.exitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIdentifier) {
			return visitor.visitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Todo_fill_inContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_todo_fill_in; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTodo_fill_in) {
			listener.enterTodo_fill_in(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTodo_fill_in) {
			listener.exitTodo_fill_in(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTodo_fill_in) {
			return visitor.visitTodo_fill_in(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Todo_implementContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_todo_implement; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTodo_implement) {
			listener.enterTodo_implement(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTodo_implement) {
			listener.exitTodo_implement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTodo_implement) {
			return visitor.visitTodo_implement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Correlation_nameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_correlation_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCorrelation_name) {
			listener.enterCorrelation_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCorrelation_name) {
			listener.exitCorrelation_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCorrelation_name) {
			return visitor.visitCorrelation_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_nameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_column_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColumn_name) {
			listener.enterColumn_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColumn_name) {
			listener.exitColumn_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColumn_name) {
			return visitor.visitColumn_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AliasContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_alias; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlias) {
			listener.enterAlias(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlias) {
			listener.exitAlias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlias) {
			return visitor.visitAlias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_aliasContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_column_alias; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColumn_alias) {
			listener.enterColumn_alias(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColumn_alias) {
			listener.exitColumn_alias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColumn_alias) {
			return visitor.visitColumn_alias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Column_definitionContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_column_definition; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColumn_definition) {
			listener.enterColumn_definition(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColumn_definition) {
			listener.exitColumn_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColumn_definition) {
			return visitor.visitColumn_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_nameContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParserParser.RULE_window_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWindow_name) {
			listener.enterWindow_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWindow_name) {
			listener.exitWindow_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWindow_name) {
			return visitor.visitWindow_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


